/* VEVO Iframe Player API */
var vevoVideoManager = function(a, b) {
    "use strict";
    function c() {
        "function" != typeof CustomEvent ? (w = b.createEvent("Event"), x = b.createEvent("Event"), y = b.createEvent("Event"), z = b.createEvent("Event"), A = b.createEvent("Event"), B = b.createEvent("Event"), w.initEvent("onAdStart", !0, !1), x.initEvent("onAdFinish", !0, !1), y.initEvent("onVideoStart", !0, !1), z.initEvent("onTimeChange", !0, !1), A.initEvent("onDurationChange", !0, !1), B.initEvent("onStateChange", !0, !1)) : (w = new CustomEvent("onAdStart"), x = new CustomEvent("onAdFinish"), y = new CustomEvent("onVideoStart"), z = new CustomEvent("onTimeChange"), A = new CustomEvent("onDurationChange"), B = new CustomEvent("onStateChange"))
    }
    function d() {
        a.addEventListener("message", function(a) {
            if (a.origin === r) {
                var b = a.data.split(","), c = b[0], d = b[1], e = b[2] ? b[2]: null;
                switch (d) {
                case"playerType":
                    break;
                case"playerIsReady":
                    p(c);
                    break;
                case"playerStateChange":
                    B.videoId = c.toString(), B.stateName = e.toString(), D[c].playerState = e.toString(), D[c].videoElement.dispatchEvent(B);
                    break;
                case"onAdStart":
                    w.videoId = c.toString(), D[c].videoElement.dispatchEvent(w);
                    break;
                case"onAdFinish":
                    x.videoId = c.toString(), D[c].videoElement.dispatchEvent(x);
                    break;
                case"onVideoStart":
                    y.videoId = c.toString(), D[c].videoElement.dispatchEvent(y);
                    break;
                case"latestVideoTime":
                    z.videoId = c.toString(), D[c].playback.currentVideoTime = Number(e), D[c].videoElement.dispatchEvent(z);
                    break;
                case"latestVideoDuration":
                    A.videoId = c.toString(), D[c].playback.currentVideoLength = Number(e), D[c].videoElement.dispatchEvent(A)
                }
            }
        }, !1)
    }
    function e(a, b) {
        a && (t = a), b && (u = b)
    }
    function f() {
        "local" === h("branch") ? (C.type = "local", C.secure=!1) : "staging" === h("branch") && "http:" === a.location.protocol ? (C.type = "staging", C.secure=!1) : "staging" === h("branch") && "https:" === a.location.protocol ? (C.type = "staging", C.secure=!0) : "http:" === a.location.protocol ? (C.type = "production", C.secure=!1) : "https:" === a.location.protocol && (C.type = "production", C.secure=!0)
    }
    function g() {
        "local" === C.type ? (r = "http://localhost:4000", s = "http://localhost:4000/index.html") : "staging" === C.type && C.secure===!1 ? (r = "http://stg-cache.vevo.com", s = "http://stg-cache.vevo.com/assets/html/embed.html") : "staging" === C.type && C.secure===!0 ? (r = "https://stg-scache.vevo.com", s = "https://stg-scache.vevo.com/assets/html/embed.html") : "production" === C.type && C.secure===!1 ? (r = "http://cache.vevo.com", s = "http://cache.vevo.com/assets/html/embed.html") : "production" === C.type && C.secure===!0 && (r = "https://scache.vevo.com", s = "https://scache.vevo.com/assets/html/embed.html")
    }
    function h(b) {
        var c = new RegExp("[?&]" + b + "=([^&]*)"), d = c.exec(a.location.search);
        return d && decodeURIComponent(d[1].replace(/\+/g, " "))
    }
    function i(a, b, c, d, e) {
        return this.id = a, this.selector = b, this.videoElement = c, this.videoWindow = d, this.playerState = "unstarted", this.playback = {}, this.playback.currentVideoLength = null, this.playback.currentVideoTime = null, this.playback.isPlaying = null, this.callbacksQueue = e, this
    }
    function j(a, b) {
        if ("[object Array]" !== Object.prototype.toString.call(a))
            throw new Error("Expecting an array of video objects");
        Array.prototype.forEach.call(a, function(a) {
            k(a, b)
        })
    }
    function k(a, c) {
        if (o() >= E)
            throw new Error("Maximum number of allowed videos exceeded");
        if (D[a.id])
            throw new Error("video with that 'id' already exists");
        if (!a.id)
            throw new Error("video object doesn't contain an 'id' property");
        if (!a.selector)
            throw new Error("video object doesn't contain a 'selector' property");
        if (!a.isrc)
            throw new Error("video object doesn't contain an 'isrc' property");
        var d = b.querySelectorAll(a.selector)[0];
        if (!d)
            throw new ReferenceError("No element that matches the following selector was found: " + a.selector);
        var e = b.createElement("iframe"), f = function() {
            var b = "?video=" + a.isrc;
            return a.options && a.options.desktopControls===!1 && (b += "&flash_controls=0"), t && (b += "&partnerId=" + t), u && (b += "&siteSection=" + u), "local" === C.type ? b += "&branch=local" : "staging" === C.type && (b += "&branch=staging"), b += "#" + a.id
        }();
        e.setAttribute("src", s + f), e.setAttribute("height", F), e.setAttribute("width", G), e.setAttribute("frameborder", "0"), e.style.overflow = "hidden", d.appendChild(e);
        var g = e.contentWindow;
        if ("function" == typeof c) {
            c[a.id] = a;
            var h = [c];
            D[a.id] = new i(a.id, a.selector, d, g, h)
        } else 
            D[a.id] = new i(a.id, a.selector, d, g, [])
    }
    function l(a) {
        if (!D[a])
            throw new Error("A video with an id of '" + a + "' doesn't exist");
        return D[a]
    }
    function m(a) {
        try {
            var b = D[a].videoElement.querySelectorAll("iframe")[0];
            return b.parentNode.removeChild(b), delete D[a], !0
        } catch (c) {
            return !1
        }
    }
    function n() {
        if (Object.keys)
            return Object.keys(D);
        var a = [];
        for (var b in D)
            a.push(b);
        return a
    }
    function o() {
        return n().length
    }
    function p(a) {
        Array.prototype.forEach.call(D[a].callbacksQueue, function(b) {
            "function" == typeof b && (b[a] ? b(b[a].id, b[a].selector, b[a].isrc) : b())
        }), D[a].callbacksQueue = []
    }
    function q(a) {
        a = parseInt(a, 10);
        var b = Math.floor(a / 60), c = a - 60 * b;
        return 10 > b && (b = "0" + b), 10 > c && (c = "0" + c), b + ":" + c
    }
    var r, s, t, u, v, w, x, y, z, A, B, C = {}, D = {}, E = 6, F = "100%", G = "100%";
    return function() {
        f(), g(), c(), d()
    }(), i.prototype.play = function(a) {
        return this.videoWindow.postMessage("play", r), this.playback.isPlaying=!0, "function" == typeof a && this.callbacksQueue.push(a), this
    }, i.prototype.pause = function(a) {
        return this.videoWindow.postMessage("pause", r), this.playback.isPlaying=!1, "function" == typeof a && this.callbacksQueue.push(a), this
    }, i.prototype.setVolume = function(a) {
        return this.videoWindow.postMessage("volume," + a, r), a
    }, i.prototype.seekTo = function(a) {
        return this.videoWindow.postMessage("seek," + a, r), a
    }, i.prototype.getCurrentTime = function() {
        return this.playback.currentVideoTime
    }, i.prototype.getDuration = function() {
        return this.playback.currentVideoLength
    }, i.prototype.isPlaying = function() {
        return this.playback.isPlaying
    }, i.prototype.getPlayerState = function() {
        return this.playerState
    }, v || (v = {
        initialize: e,
        loadVideo: k,
        loadVideos: j,
        getVideoById: l,
        removeVideoById: m,
        getAllVideoNames: n,
        formatTime: q
    }), v
}(window, document);
