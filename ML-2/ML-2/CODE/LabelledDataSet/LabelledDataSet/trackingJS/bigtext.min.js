(function(e, t) {
    "use strict";
    function u(e, t, n, r, i, s, o) {
        var u;
        o = typeof o === "number" ? o : 0;
        e.css(n, r + s);
        u = e.width();
        if (u >= t) {
            e.css(n, "");
            if (u === t) {
                return {
                    match: "exact",
                    size: parseFloat((parseFloat(r) - .1).toFixed(3))
                }
            }
            var a = t - o, f = u - t;
            return {
                match: "estimate",
                size: parseFloat((parseFloat(r) - (n === "word-spacing" && o && f < a ? 0 : i)).toFixed(3))
            }
        }
        return u
    }
    function a(e, n, r, i, s) {
        var a = e.clone(true).addClass("bigtext-cloned").css({
            fontFamily: e.css("font-family"),
            textTransform: e.css("text-transform"),
            wordSpacing: e.css("word-spacing"),
            letterSpacing: e.css("letter-spacing"),
            position: "absolute",
            left: o.DEBUG_MODE ? 0: - 9999,
            top: o.DEBUG_MODE ? 0: - 9999
        }).appendTo(document.body);
        var f = [], l = [], c = [], h = [];
        n.css("float", "left").each(function() {
            var e = t(this), n = o.supports.wholeNumberFontSizeOnly ? [8, 4, 1]: [8, 4, 1, .1], a, l;
            if (e.hasClass(o.EXEMPT_CLASS)) {
                f.push(null);
                h.push(null);
                c.push(false);
                return 
            }
            var p = 32, d = parseFloat(e.css("font-size")), v = (e.width() / d).toFixed(6);
            l = parseInt(r / v, 10) - p;
            e: for (var m = 0, g = n.length; m < g; m++) {
                t:
                for (var y = 1, b = 10; y <= b; y++) {
                    if (l + y * n[m] > i) {
                        l = i;
                        break e
                    }
                    a = u(e, r, "font-size", l + y * n[m], n[m], "px", a);
                    if (typeof a !== "number") {
                        l = a.size;
                        if (a.match === "exact") {
                            break e
                        }
                        break t
                    }
                }
            }
            h.push(r / l);
            if (l > i) {
                f.push(i);
                c.push(false)
            } else if (!!s && l < s) {
                f.push(s);
                c.push(true)
            } else {
                f.push(l);
                c.push(false)
            }
        }).each(function(e) {
            var n = t(this), i = 0, s = 1, a;
            if (n.hasClass(o.EXEMPT_CLASS)) {
                l.push(null);
                return 
            }
            n.css("font-size", f[e] + "px");
            for (var c = 1, h = 3; c < h; c += s) {
                a = u(n, r, "word-spacing", c, s, "px", a);
                if (typeof a !== "number") {
                    i = a.size;
                    break
                }
            }
            n.css("font-size", "");
            l.push(i)
        }).removeAttr("style");
        if (!o.DEBUG_MODE) {
            a.remove()
        } else {
            a.css({
                "background-color": "rgba(255,255,255,.4)"
            })
        }
        return {
            fontSizes: f,
            wordSpacings: l,
            ratios: h,
            minFontSizes: c
        }
    }
    var n = 0, r = t("head"), i = e.BigText, s = t.fn.bigtext, o = {
        DEBUG_MODE: false,
        DEFAULT_MIN_FONT_SIZE_PX: null,
        DEFAULT_MAX_FONT_SIZE_PX: 528,
        GLOBAL_STYLE_ID: "bigtext-style",
        STYLE_ID: "bigtext-id",
        LINE_CLASS_PREFIX: "bigtext-line",
        EXEMPT_CLASS: "bigtext-exempt",
        noConflict: function(n) {
            if (n) {
                t.fn.bigtext = s;
                e.BigText = i
            }
            return o
        },
        test: {
            wholeNumberFontSizeOnly: function() {
                if (!("getComputedStyle"in e) || document.body == null) {
                    return true
                }
                var n = t("<div/>").css({
                    position: "absolute",
                    "font-size": "14.1px"
                }).appendTo(document.body).get(0), r = e.getComputedStyle(n, null);
                if (r) {
                    return r.getPropertyValue("font-size") === "14px"
                }
                return true
            }
        },
        supports: {
            wholeNumberFontSizeOnly: undefined
        },
        init: function() {
            if (o.supports.wholeNumberFontSizeOnly === undefined) {
                o.supports.wholeNumberFontSizeOnly = o.test.wholeNumberFontSizeOnly()
            }
            if (!t("#" + o.GLOBAL_STYLE_ID).length) {
                r.append(o.generateStyleTag(o.GLOBAL_STYLE_ID, [".bigtext * { white-space: nowrap; } .bigtext > * { display: block; }", ".bigtext ." + o.EXEMPT_CLASS + ", .bigtext ." + o.EXEMPT_CLASS + " * { white-space: normal; }"]))
            }
        },
        bindResize: function(n, r) {
            if (t.throttle) {
                t(e).unbind(n).bind(n, t.throttle(100, r))
            } else {
                if (t.fn.smartresize) {
                    n = "smartresize." + n
                }
                t(e).unbind(n).bind(n, r)
            }
        },
        getStyleId: function(e) {
            return o.STYLE_ID + "-" + e
        },
        generateStyleTag: function(e, n) {
            return t("<style>" + n.join("\n") + "</style>").attr("id", e)
        },
        clearCss: function(e) {
            var n = o.getStyleId(e);
            t("#" + n).remove()
        },
        generateCss: function(e, t, n, r) {
            var i = [];
            o.clearCss(e);
            for (var s = 0, u = t.length; s < u; s++) {
                i.push("#" + e + " ." + o.LINE_CLASS_PREFIX + s + " {" + (r[s] ? " white-space: normal;" : "") + (t[s] ? " font-size: " + t[s] + "px;" : "") + (n[s] ? " word-spacing: " + n[s] + "px;" : "") + "}")
            }
            return o.generateStyleTag(o.getStyleId(e), i)
        },
        jQueryMethod: function(e) {
            o.init();
            e = t.extend({
                minfontsize: o.DEFAULT_MIN_FONT_SIZE_PX,
                maxfontsize: o.DEFAULT_MAX_FONT_SIZE_PX,
                childSelector: "",
                resize: true
            }, e || {});
            this.each(function() {
                var i = t(this).addClass("bigtext"), s = i.width(), u = i.attr("id"), f = e.childSelector ? i.find(e.childSelector): i.children();
                if (!u) {
                    u = "bigtext-id" + n++;
                    i.attr("id", u)
                }
                if (e.resize) {
                    o.bindResize("resize.bigtext-event-" + u, function() {
                        o.jQueryMethod.call(t("#" + u), e)
                    })
                }
                o.clearCss(u);
                f.addClass(function(e, t) {
                    return [t.replace(new RegExp("\\b" + o.LINE_CLASS_PREFIX + "\\d+\\b"), ""), o.LINE_CLASS_PREFIX + e].join(" ")
                });
                var l = a(i, f, s, e.maxfontsize, e.minfontsize);
                r.append(o.generateCss(u, l.fontSizes, l.wordSpacings, l.minFontSizes))
            });
            return this.trigger("bigtext:complete")
        }
    };
    t.fn.bigtext = o.jQueryMethod;
    e.BigText = o
})(this, jQuery)
