!function(a, b) {
    "function" == typeof define && define.amd ? define("swfobject/vhs", b) : a.swfobject = b()
}(this, function() {
    var a = function() {
        function b() {
            if (!S) {
                try {
                    var a = L.getElementsByTagName("body")[0].appendChild(r("span"));
                    a.parentNode.removeChild(a)
                } catch (b) {
                    return 
                }
                S=!0;
                for (var c = O.length, d = 0; c > d; d++)
                    O[d]()
            }
        }
        function c(a) {
            S ? a() : O[O.length] = a
        }
        function d(a) {
            if (typeof K.addEventListener != D)
                K.addEventListener("load", a, !1);
            else if (typeof L.addEventListener != D)
                L.addEventListener("load", a, !1);
            else if (typeof K.attachEvent != D)
                s(K, "onload", a);
            else if ("function" == typeof K.onload) {
                var b = K.onload;
                K.onload = function() {
                    b(), a()
                }
            } else 
                K.onload = a
        }
        function e() {
            N ? f() : g()
        }
        function f() {
            var a = L.getElementsByTagName("body")[0], b = r(E);
            b.setAttribute("type", H);
            var c = a.appendChild(b);
            if (c) {
                var d = 0;
                !function() {
                    if (typeof c.GetVariable != D) {
                        var e = c.GetVariable("$version");
                        e && (e = e.split(" ")[1].split(","), V.pv = [parseInt(e[0], 10), parseInt(e[1], 10), parseInt(e[2], 10)])
                    } else if (10 > d)
                        return d++, void setTimeout(arguments.callee, 10);
                    a.removeChild(b), c = null, g()
                }()
            } else 
                g()
        }
        function g() {
            var a = P.length;
            if (a > 0)
                for (var b = 0; a > b; b++) {
                    var c = P[b].id, d = P[b].callbackFn, e = {
                        success: !1,
                        id: c
                    };
                    if (V.pv[0] > 0) {
                        var f = q(c);
                        if (f)
                            if (!t(P[b].swfVersion) || V.wk && V.wk < 312)
                                if (P[b].expressInstall && i()) {
                                    var g = {};
                                    g.data = P[b].expressInstall, g.width = f.getAttribute("width") || "0", g.height = f.getAttribute("height") || "0", f.getAttribute("class") && (g.styleclass = f.getAttribute("class")), f.getAttribute("align") && (g.align = f.getAttribute("align"));
                                    for (var l = {}, m = f.getElementsByTagName("param"), n = m.length, o = 0; n > o; o++)
                                        "movie" != m[o].getAttribute("name").toLowerCase() && (l[m[o].getAttribute("name")] = m[o].getAttribute("value"));
                                        j(g, l, c, d)
                                } else 
                                    k(f), d && d(e);
                            else 
                                v(c, !0), d && (e.success=!0, e.ref = h(c), d(e))
                            } else if (v(c, !0), d) {
                                var p = h(c);
                                p && typeof p.SetVariable != D && (e.success=!0, e.ref = p), d(e)
                            }
                        }
            }
        function h(a) {
            var b = null, c = q(a);
            if (c && "OBJECT" == c.nodeName)
                if (typeof c.SetVariable != D)
                    b = c;
                else {
                    var d = c.getElementsByTagName(E)[0];
                    d && (b = d)
                }
            return b
        }
        function i() {
            return !T && t("6.0.65") && (V.win || V.mac)&&!(V.wk && V.wk < 312)
        }
        function j(a, b, c, d) {
            T=!0, z = d || null, A = {
                success: !1,
                id: c
            };
            var e = q(c);
            if (e) {
                "OBJECT" == e.nodeName ? (x = l(e), y = null) : (x = e, y = c), a.id = I, (typeof a.width == D ||!/%$/.test(a.width) && parseInt(a.width, 10) < 310) && (a.width = "310"), (typeof a.height == D ||!/%$/.test(a.height) && parseInt(a.height, 10) < 137) && (a.height = "137"), L.title = L.title.slice(0, 47) + " - Flash Player Installation";
                var f = V.ie && V.win ? "ActiveX": "PlugIn", g = "MMredirectURL=" + K.location.toString().replace(/&/g, "%26") + "&MMplayerType=" + f + "&MMdoctitle=" + L.title;
                if (typeof b.flashvars != D ? b.flashvars += "&" + g : b.flashvars = g, V.ie && V.win && 4 != e.readyState) {
                    var h = r("div");
                    c += "SWFObjectNew", h.setAttribute("id", c), e.parentNode.insertBefore(h, e), e.style.display = "none", function() {
                        4 == e.readyState ? e.parentNode.removeChild(e) : setTimeout(arguments.callee, 10)
                    }()
                }
                m(a, b, c)
            }
        }
        function k(a) {
            if (V.ie && V.win && 4 != a.readyState) {
                var b = r("div");
                a.parentNode.insertBefore(b, a), b.parentNode.replaceChild(l(a), b), a.style.display = "none", function() {
                    4 == a.readyState ? a.parentNode.removeChild(a) : setTimeout(arguments.callee, 10)
                }()
            } else 
                a.parentNode.replaceChild(l(a), a)
        }
        function l(a) {
            var b = r("div");
            if (V.win && V.ie)
                b.innerHTML = a.innerHTML;
            else {
                var c = a.getElementsByTagName(E)[0];
                if (c) {
                    var d = c.childNodes;
                    if (d)
                        for (var e = d.length, f = 0; e > f; f++)
                            1 == d[f].nodeType && "PARAM" == d[f].nodeName || 8 == d[f].nodeType || b.appendChild(d[f].cloneNode(!0))
                        }
            }
            return b
        }
        function m(a, b, c) {
            var d, e = q(c);
            if (V.wk && V.wk < 312)
                return d;
            if (e)
                if (typeof a.id == D && (a.id = c), V.ie && V.win) {
                    var f = "";
                    for (var g in a)
                        a[g] != Object.prototype[g] && ("data" == g.toLowerCase() ? b.movie = a[g] : "styleclass" == g.toLowerCase() ? f += ' class="' + a[g] + '"' : "classid" != g.toLowerCase() && (f += " " + g + '="' + a[g] + '"'));
                        var h = "";
                        for (var i in b)
                            b[i] != Object.prototype[i] && (h += '<param name="' + i + '" value="' + b[i] + '" />');
                            e.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + f + ">" + h + "</object>", Q[Q.length] = a.id, d = q(a.id)
                } else {
                    var j = r(E);
                    j.setAttribute("type", H);
                    for (var k in a)
                        a[k] != Object.prototype[k] && ("styleclass" == k.toLowerCase() ? j.setAttribute("class", a[k]) : "classid" != k.toLowerCase() && j.setAttribute(k, a[k]));
                        for (var l in b)
                            b[l] != Object.prototype[l] && "movie" != l.toLowerCase() && n(j, l, b[l]);
                            e.parentNode.replaceChild(j, e), d = j
                }
            return d
        }
        function n(a, b, c) {
            var d = r("param");
            d.setAttribute("name", b), d.setAttribute("value", c), a.appendChild(d)
        }
        function o(a) {
            var b = q(a);
            b && "OBJECT" == b.nodeName && (V.ie && V.win ? (b.style.display = "none", function() {
                4 == b.readyState ? p(a) : setTimeout(arguments.callee, 10)
            }()) : b.parentNode.removeChild(b))
        }
        function p(a) {
            var b = q(a);
            if (b) {
                for (var c in b)
                    "function" == typeof b[c] && (b[c] = null);
                b.parentNode.removeChild(b)
            }
        }
        function q(a) {
            var b = null;
            try {
                b = L.getElementById(a)
            } catch (c) {}
            return b
        }
        function r(a) {
            return L.createElement(a)
        }
        function s(a, b, c) {
            a.attachEvent(b, c), R[R.length] = [a, b, c]
        }
        function t(a) {
            var b = V.pv, c = a.split(".");
            return c[0] = parseInt(c[0], 10), c[1] = parseInt(c[1], 10) || 0, c[2] = parseInt(c[2], 10) || 0, b[0] > c[0] || b[0] == c[0] && b[1] > c[1] || b[0] == c[0] && b[1] == c[1] && b[2] >= c[2]?!0 : !1
        }
        function u(a, b, c, d) {
            if (!V.ie ||!V.mac) {
                var e = L.getElementsByTagName("head")[0];
                if (e) {
                    var f = c && "string" == typeof c ? c: "screen";
                    if (d && (B = null, C = null), !B || C != f) {
                        var g = r("style");
                        g.setAttribute("type", "text/css"), g.setAttribute("media", f), B = e.appendChild(g), V.ie && V.win && typeof L.styleSheets != D && L.styleSheets.length > 0 && (B = L.styleSheets[L.styleSheets.length - 1]), C = f
                    }
                    V.ie && V.win ? B && typeof B.addRule == E && B.addRule(a, b) : B && typeof L.createTextNode != D && B.appendChild(L.createTextNode(a + " {" + b + "}"))
                }
            }
        }
        function v(a, b) {
            if (U) {
                var c = b ? "visible": "hidden";
                S && q(a) ? q(a).style.visibility = c : u("#" + a, "visibility:" + c)
            }
        }
        function w(a) {
            var b = /[\\\"<>\.;]/, c = null != b.exec(a);
            return c && typeof encodeURIComponent != D ? encodeURIComponent(a) : a
        }
        {
            var x, y, z, A, B, C, D = "undefined", E = "object", F = "Shockwave Flash", G = "ShockwaveFlash.ShockwaveFlash", H = "application/x-shockwave-flash", I = "SWFObjectExprInst", J = "onreadystatechange", K = window, L = document, M = navigator, N=!1, O = [e], P = [], Q = [], R = [], S=!1, T=!1, U=!0, V = function() {
                var a = typeof L.getElementById != D && typeof L.getElementsByTagName != D && typeof L.createElement != D, b = M.userAgent.toLowerCase(), c = M.platform.toLowerCase(), d = /win/.test(c ? c : b), e = /mac/.test(c ? c : b), f = /webkit/.test(b) ? parseFloat(b.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")): !1, g=!1, h = [0, 0, 0], i = null;
                if (typeof M.plugins != D && typeof M.plugins[F] == E)
                    i = M.plugins[F].description, !i || typeof M.mimeTypes != D && M.mimeTypes[H]&&!M.mimeTypes[H].enabledPlugin || (N=!0, g=!1, i = i.replace(/^.*\s+(\S+\s+\S+$)/, "$1"), h[0] = parseInt(i.replace(/^(.*)\..*$/, "$1"), 10), h[1] = parseInt(i.replace(/^.*\.(.*)\s.*$/, "$1"), 10), h[2] = /[a-zA-Z]/.test(i) ? parseInt(i.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0);
                else if (typeof K.ActiveXObject != D)
                    try {
                        var j = new ActiveXObject(G);
                        j && (i = j.GetVariable("$version"), i && (g=!0, i = i.split(" ")[1].split(","), h = [parseInt(i[0], 10), parseInt(i[1], 10), parseInt(i[2], 10)]))
                } catch (k) {}
                return {
                    w3: a,
                    pv: h,
                    wk: f,
                    ie: g,
                    win: d,
                    mac: e
                }
            }();
            !function() {
                V.w3 && ((typeof L.readyState != D && "complete" == L.readyState || typeof L.readyState == D && (L.getElementsByTagName("body")[0] || L.body)) && b(), S || (typeof L.addEventListener != D && L.addEventListener("DOMContentLoaded", b, !1), V.ie && V.win && (L.attachEvent(J, function() {
                    "complete" == L.readyState && (L.detachEvent(J, arguments.callee), b())
                }), K == top&&!function() {
                    if (!S) {
                        try {
                            L.documentElement.doScroll("left")
                        } catch (a) {
                            return void setTimeout(arguments.callee, 0)
                        }
                        b()
                    }
                }()), V.wk&&!function() {
                    return S ? void 0 : /loaded|complete/.test(L.readyState) ? void b() : void setTimeout(arguments.callee, 0)
                }(), d(b)))
            }(), function() {
                V.ie && V.win && window.attachEvent("onunload", function() {
                    for (var b = R.length, c = 0; b > c; c++)
                        R[c][0].detachEvent(R[c][1], R[c][2]);
                    for (var d = Q.length, e = 0; d > e; e++)
                        o(Q[e]);
                    for (var f in V)
                        V[f] = null;
                    V = null;
                    for (var g in a)
                        a[g] = null;
                    a = null
                })
            }()
        }
        return {
            registerObject: function(a, b, c, d) {
                if (V.w3 && a && b) {
                    var e = {};
                    e.id = a, e.swfVersion = b, e.expressInstall = c, e.callbackFn = d, P[P.length] = e, v(a, !1)
                } else 
                    d && d({
                        success: !1,
                        id: a
                    })
            },
            getObjectById: function(a) {
                return V.w3 ? h(a) : void 0
            },
            embedSWF: function(a, b, d, e, f, g, h, k, l, n) {
                var o = {
                    success: !1,
                    id: b
                };
                V.w3&&!(V.wk && V.wk < 312) && a && b && d && e && f ? (v(b, !1), c(function() {
                    d += "", e += "";
                    var c = {};
                    if (l && typeof l === E)
                        for (var p in l)
                            c[p] = l[p];
                    c.data = a, c.width = d, c.height = e;
                    var q = {};
                    if (k && typeof k === E)
                        for (var r in k)
                            q[r] = k[r];
                    if (h && typeof h === E)
                        for (var s in h)
                            typeof q.flashvars != D ? q.flashvars += "&" + s + "=" + h[s] : q.flashvars = s + "=" + h[s];
                    if (t(f)) {
                        var u = m(c, q, b);
                        c.id == b && v(b, !0), o.success=!0, o.ref = u
                    } else {
                        if (g && i())
                            return c.data = g, void j(c, q, b, n);
                        v(b, !0)
                    }
                    n && n(o)
                })) : n && n(o)
            },
            switchOffAutoHideShow: function() {
                U=!1
            },
            ua: V,
            getFlashPlayerVersion: function() {
                return {
                    major: V.pv[0],
                    minor: V.pv[1],
                    release: V.pv[2]
                }
            },
            hasFlashPlayerVersion: t,
            createSWF: function(a, b, c) {
                return V.w3 ? m(a, b, c) : void 0
            },
            showExpressInstall: function(a, b, c, d) {
                V.w3 && i() && j(a, b, c, d)
            },
            removeSWF: function(a) {
                V.w3 && o(a)
            },
            createCSS: function(a, b, c, d) {
                V.w3 && u(a, b, c, d)
            },
            addDomLoadEvent: c,
            addLoadEvent: d,
            getQueryParamValue: function(a) {
                var b = L.location.search || L.location.hash;
                if (b) {
                    if (/\?/.test(b) && (b = b.split("?")[1]), null == a)
                        return w(b);
                    for (var c = b.split("&"), d = 0; d < c.length; d++)
                        if (c[d].substring(0, c[d].indexOf("=")) == a)
                            return w(c[d].substring(c[d].indexOf("=") + 1))
                }
                return ""
            },
            expressInstallCallback: function() {
                if (T) {
                    var a = q(I);
                    a && x && (a.parentNode.replaceChild(x, a), y && (v(y, !0), V.ie && V.win && (x.style.display = "block")), z && z(A)), T=!1
                }
            }
        }
    }();
    return a
}), function(a) {
    "use strict";
    var b = function(a, c, d) {
        return 1 === arguments.length ? b.get(a) : b.set(a, c, d)
    };
    b._document = document, b._navigator = navigator, b.defaults = {
        path: "/"
    }, b.get = function(a) {
        return b._cachedDocumentCookie !== b._document.cookie && b._renewCache(), b._cache[a]
    }, b.set = function(c, d, e) {
        return e = b._getExtendedOptions(e), e.expires = b._getExpiresDate(d === a?-1 : e.expires), b._document.cookie = b._generateCookieString(c, d, e), b
    }, b.expire = function(c, d) {
        return b.set(c, a, d)
    }, b._getExtendedOptions = function(c) {
        return {
            path: c && c.path || b.defaults.path,
            domain: c && c.domain || b.defaults.domain,
            expires: c && c.expires || b.defaults.expires,
            secure: c && c.secure !== a ? c.secure: b.defaults.secure
        }
    }, b._isValidDate = function(a) {
        return "[object Date]" === Object.prototype.toString.call(a)&&!isNaN(a.getTime())
    }, b._getExpiresDate = function(a, c) {
        switch (c = c || new Date, typeof a) {
        case"number":
            a = new Date(c.getTime() + 1e3 * a);
            break;
        case"string":
            a = new Date(a)
        }
        if (a&&!b._isValidDate(a))
            throw new Error("`expires` parameter cannot be converted to a valid Date instance");
        return a
    }, b._generateCookieString = function(a, b, c) {
        a = a.replace(/[^#$&+\^`|]/g, encodeURIComponent), a = a.replace(/\(/g, "%28").replace(/\)/g, "%29"), b = (b + "").replace(/[^!#$&-+\--:<-\[\]-~]/g, encodeURIComponent), c = c || {};
        var d = a + "=" + b;
        return d += c.path ? ";path=" + c.path : "", d += c.domain ? ";domain=" + c.domain : "", d += c.expires ? ";expires=" + c.expires.toUTCString() : "", d += c.secure ? ";secure" : ""
    }, b._getCookieObjectFromString = function(c) {
        for (var d = {}, e = c ? c.split("; ") : [], f = 0; f < e.length; f++) {
            var g = b._getKeyValuePairFromCookieString(e[f]);
            d[g.key] === a && (d[g.key] = g.value)
        }
        return d
    }, b._getKeyValuePairFromCookieString = function(a) {
        var b = a.indexOf("=");
        return b = 0 > b ? a.length : b, {
            key: decodeURIComponent(a.substr(0, b)),
            value: decodeURIComponent(a.substr(b + 1))
        }
    }, b._renewCache = function() {
        b._cache = b._getCookieObjectFromString(b._document.cookie), b._cachedDocumentCookie = b._document.cookie
    }, b._areEnabled = function() {
        var a = "cookies.js", c = "1" === b.set(a, 1).get(a);
        return b.expire(a), c
    }, b.enabled = b._areEnabled(), "function" == typeof define && define.amd ? define("cookies/vhs", function() {
        return b
    }) : "undefined" != typeof exports ? ("undefined" != typeof module && module.exports && (exports = module.exports = b), exports.Cookies = b) : window.Cookies = b
}(), function(a, b) {
    "object" == typeof exports ? module.exports = b(require("$"), require("swfobject"), require("Cookies")) : "function" == typeof define && define.amd ? define("vhs", ["jquery/nyt", "swfobject/vhs", "cookies/vhs"], b) : a.VHS = b(a.$, a.swfobject, a.Cookies)
}(this, function(a, b, c) {
    "use strict";
    var d = a, e = function(b) {
        return {
            ready: function(c) {
                var d, e, f = a(b);
                f.bind("ready", function(a, b) {
                    c(b)
                }), f.each(function(b, c) {
                    e = a(c).data("ready"), e && (d = a(c).data("instance"), a(c).trigger("ready", d))
                })
            },
            loaded: function(c) {
                var d, e, f = a(b);
                f.bind("loaded", function(a, b) {
                    c(b)
                }), f.each(function(b, c) {
                    e = a(c).data("loaded"), e && (d = a(c).data("instance"), a(c).trigger("loaded", d))
                })
            }
        }
    };
    return e.config = {
        allowMultiplePlayers: !1
    }, e.api = e.api || {}, e.html = e.html || {}, e.util = {
        extend: function(a) {
            function b() {}
            return Object.create ? Object.create(a) : (b.prototype = a, new b)
        },
        checkFlashSupport: function() {
            var a = b.getFlashPlayerVersion();
            return a && a.major >= 10
        },
        checkHtmlSupport: function() {
            var a = document.createElement("video"), b = document.createElement("canvas").getContext, c=!1;
            return a && b && (c=!0), c
        },
        supportWebM: function() {
            var a = 'video/webm; codecs="vp8, vorbis"';
            return this.canPlayType(a)
        },
        supportH264: function() {
            var a = 'video/mp4; codecs="avc1.42E01E"', b = 'video/mp4; codecs="avc1.42E01E, mp4a.40.2"';
            return this.canPlayType(a) || this.canPlayType(b)
        },
        canPlayType: function(a) {
            var b = document.createElement("video");
            return "function" == typeof b.canPlayType && "" !== b.canPlayType(a)
        },
        getDeviceType: function() {
            for (var a = null, b = navigator.userAgent.toLowerCase(), c = [["android_chrome", "(android.*chrome)"], ["android_firefox", "(android.*firefox)"], ["android_legacy", "(android )(2|3)"], ["android_ics", "(android 4.0)"], ["android_jellybean", "(android 4.)(1|2|3)"], ["android_kitkat", "(android 4.4)"], ["ie_mobile", "(windows phone os).*(iemobile)"], ["ipad", "ipad"], ["kindle", "kindle"], ["iphone", "iphone"], ["other mobile", "(touchpad|blackberry|opera mobi)"]], d = 0; d < c.length; d++) {
                var e = new RegExp(c[d][1]), f = b.match(e);
                null !== f && (a = c[d][0])
            }
            return a || "desktop"
        },
        isIphone: function() {
            var a = e.util.getNavigator(), b = a.userAgent.toLowerCase(), c = b.match("iphone"), d = null !== c?!0 : !1;
            return d
        },
        isIpad: function() {
            var a = e.util.getNavigator(), b = a.userAgent.toLowerCase();
            return - 1 !== b.indexOf("ipad")?!0 : !1
        },
        isIE9: function() {
            var a = e.util.getNavigator(), b = a.userAgent.toLowerCase();
            return - 1 !== b.indexOf("msie 9")?!0 : !1
        },
        isAndroid: function() {
            var a = e.util.getNavigator(), b = a.userAgent.toLowerCase();
            return - 1 !== b.indexOf("android")?!0 : !1
        },
        supportsAutoplay: function() {
            return !(e.util.isAndroid() || e.util.isIpad() || e.util.isIphone())
        },
        getErrorMessage: function(a, b, c) {
            var d, e = a;
            if (d = b && "vod" === b ? "This video is currently unavailable." : "This stream is not currently available.", e && e.code)
                switch (e.code) {
                case e.MEDIA_ERR_ABORTED:
                    d = "The video playback was aborted. Please refresh to resume playback.";
                    break;
                case e.MEDIA_ERR_NETWORK:
                    d = "The video connection was lost. Please refresh to resume playback.";
                    break;
                case e.MEDIA_ERR_DECODE:
                    d = "There was a video playback error. Please refresh to resume playback.";
                    break;
                case e.MEDIA_ERR_SRC_NOT_SUPPORTED:
                    d = c ? "This video is currently unavailable. Please refresh to try again." : "The video format is currently not supported in this browser."
                }
            return d
        },
        getNavigator: function() {
            return navigator
        },
        getSupportedType: function(a) {
            return "flash" === a || this.supportH264() ? "mp4" : this.supportWebM() ? "webm" : void 0
        },
        supportsFullscreen: function() {
            return e.api.Fullscreen.prototype._canRequestFullScreen()
        }
    }, e.api.Logger = function(a) {
        this.debug = a.options.debug, this.canConsole = a.options.debug && window.console
    }, e.api.Logger.prototype = {
        log: function() {
            this.canConsole && window.console.log(arguments)
        },
        info: function() {
            this.canConsole && window.console.info(arguments)
        },
        warn: function() {
            this.canConsole && window.console.warn(arguments)
        },
        error: function() {
            this.canConsole && window.console.error(arguments)
        }
    }, e.plugin = function(a, b, c) {
        var d = c ||!1, f = e.api._plugins || {};
        return f[a] = {
            enable: d,
            proto: b
        }, e.api._plugins = f, f
    }, e.api.Plugins = function(a) {
        this.player = a, this._plugins = e.api._plugins, this._pluginInstances = [], this.register()
    }, e.api.Plugins.prototype.register = function() {
        var a, b, c = this, d = this.player.options, e = function() {
            this._player = c.player, this._container = c.player.container, this._data = c.player._data, this._options = c.player.options, this._logger = c.player.logger
        };
        for (a in this._plugins)(d[a]===!0 || this._plugins[a].enable===!0 && d[a]!==!1) 
            && (e.prototype = this._plugins[a].proto, b = new e, b._name = a, this._pluginInstances.push(b), "function" == typeof b._initialize && b._initialize(), this.listeners(b))
    }, e.api.Plugins.prototype.reload = function() {
        var a, b;
        for (a in this._pluginInstances)
            b = this._pluginInstances[a], b._data = this.player._data
    }, e.api.Plugins.prototype.listeners = function(a) {
        var b = function(b, c) {
            "function" == typeof a[c] && this.player.on(e.api.events[b], function(b) {
                a[c](b)
            })
        }, c = {
            READY: "_ready",
            LOADED: "_loaded",
            PLAY: "_play",
            PAUSE: "_pause",
            MUTE: "_mute",
            SEEKED: "_seeked",
            ENDED: "_ended",
            PLAYING: "_playing",
            AD_STARTED: "_ad_started",
            AD_COMPLETED: "_ad_completed",
            AD_PAUSED: "_ad_paused",
            AD_RESUMED: "_ad_resumed",
            AD_SKIPPED: "_ad_skipped",
            GO_FULLSCREEN: "_go_fullscreen",
            EXIT_FULLSCREEN: "_exit_fullscreen",
            PROGRESS: "_progress",
            TIME_UPDATE: "_time_update",
            LOAD_START: "_loadstart",
            ERROR: "_error",
            HD_ON: "_hd_on",
            HD_OFF: "_hd_off",
            SHOW_CONTROLS: "_show_controls",
            HIDE_CONTROLS: "_hide_controls",
            RENDERED: "_rendered",
            TRACKING_EVENT: "_tracking_event"
        };
        for (var d in c)
            c.hasOwnProperty(d) && b.call(this, d, c[d])
    }, e.plugin("webtrends", {
        _initialize: function() {
            this.utils = e.util, this.tracked=!1, this.firstPlay=!0, this.trackingHistory = [], this.mediaChanged=!1, this.videoCompleted=!1, this.adStarted=!1, this.adCompleted=!1
        },
        getId: function() {
            if (this._data || this._options.id) {
                var a = this._data ? this._data.id: this._options.id;
                return a
            }
            return this._logger.warn("VHS::PLUGIN::WEBTRENDS:: ID is not defined"), !1
        },
        getName: function() {
            if (this._data || this._options.name) {
                var a = this._data ? this._data.headline: this._options.name;
                return a
            }
            return this._logger.warn('VHS::PLUGIN::WEBTRENDS:: NAME is optional <video data-setup=\'{"name: "name_video"}\'></video>'), !1
        },
        getCategory: function() {
            var a;
            if (this._data)
                this._data.section && (a = this._data.section.content);
            else {
                if (!this._options.category)
                    return this._logger.warn('VHS::PLUGIN::WEBTRENDS:: CATEGORY is optional <video data-setup=\'{"category: "category_video"}\'></video>'), !1;
                a = this._options.category
            }
            return a
        },
        getSeries: function() {
            var a = "";
            if (this._data)
                this._data.contentSeries && (a = this._data.contentSeries.name);
            else {
                if (!this._options.series)
                    return this._logger.warn('VHS::PLUGIN::WEBTRENDS:: SERIES is optional <video data-setup=\'{"series: "series_video"}\'></video>'), !1;
                a = this._options.series
            }
            return a
        },
        getParams: function(a) {
            var b = ["DCS.dcssip", "www.nytimes.com", "DCS.dcsuri", "/video/" + this.getName() + "/" + a.action + ".html", "WT.ti", "Video " + this.getName() + " " + a.ti, "WT.cg_n", "Video", "WT.videoCategory", this.getCategory(), "WT.videoEvent", a.event, "WT.videoLoad", a.load, "WT.videoName", this.getName(), "WT.z_gpt", "Multimedia", "WT.z_gpst", "Video", "WT.z_gpsst", "Video-" + a.gpsst, "WT.z_vid", this.getId(), "WT.z_vpt", this._player.getPlayerType() + "|" + this.utils.getDeviceType(), "WT.z_vft", this.getSeries(), "WT.z_dcsm", 1];
            return a.z_vaud && "Audio" === a.action && b.push("WT.z_vaud", a.z_vaud), b
        },
        track: function(a) {
            if ("undefined" != typeof window.dcsMultiTrack) {
                if (this._logger.info("VHS::PLUGIN::WEBTRENDS::", a), window.dcsMultiTrack.apply(this, a), this.trackingHistory.length > 0) {
                    for (var b = 0, c = this.trackingHistory.length; c > b; b++)
                        window.dcsMultiTrack.apply(this, this.trackingHistory[b]);
                    this.trackingHistory = []
                }
            } else 
                this.trackingHistory.push(a)
        },
        _play: function() {
            if (!this.tracked) {
                var a, b = {
                    action: "Play",
                    event: "play",
                    gpsst: "Play"
                };
                this._options.autoplay && this.firstPlay&&!this._options.userInitiatedPlay ? (b.ti = this._options.autoPlayNext ? "Play" : "PlayStart", b.load = "auto", this.firstPlay=!1) : this.firstPlay ? (b.ti = "PlayStart", b.load = "user", this.firstPlay=!1) : this._options.userInitiatedNext ? (b.ti = "Play", b.load = "user") : this.videoCompleted&&!this.adStarted && this.mediaChanged ? (b.ti = "Play", b.load = "auto") : this.videoCompleted && this.adStarted && this.adCompleted && this.mediaChanged ? (b.ti = "Play", b.load = "auto") : (b.ti = "Play", b.load = "user"), a = this.getParams(b), this.track(a), this.tracked=!0, this.mediaChanged=!1, this.videoCompleted=!1, this.adStarted=!1, this.adCompleted=!1
            }
        },
        _mute: function(a) {
            var b;
            b = this.getParams(a ? {
                action: "Audio",
                event: "AudioOff",
                load: "null",
                gpsst: "Audio",
                ti: "Audio",
                z_vaud: "Off"
            } : {
                action: "Audio",
                event: "AudioOn",
                load: "null",
                gpsst: "Audio",
                ti: "Audio",
                z_vaud: "On"
            }), this.track(b)
        },
        _ended: function() {
            var a = this.getParams({
                action: "Finish",
                event: "finish",
                load: "null",
                gpsst: "Play",
                ti: "FinishStop"
            });
            this.track(a), this.tracked=!1, this.videoCompleted=!0
        },
        _go_fullscreen: function() {
            var a = this.getParams({
                action: "GoBig",
                event: "Go Big",
                load: "null",
                gpsst: "Play",
                ti: "GoBig"
            });
            this.track(a)
        },
        _exit_fullscreen: function() {
            var a = this.getParams({
                action: "GoSmall",
                event: "Go Small",
                load: "null",
                gpsst: "Play",
                ti: "GoSmall"
            });
            this.track(a)
        },
        _ad_started: function() {
            this.adStarted=!0
        },
        _ad_completed: function() {
            this.adCompleted=!0
        },
        _ad_skipped: function() {
            this.adCompleted=!0
        },
        _loadstart: function() {
            this.tracked=!1, this.mediaChanged=!0
        }
    }, !0), e.plugin("comscore", {
        _initialize: function() {
            this.tracked=!1
        },
        loadLibrary: function(b) {
            var c = ("https:" === document.location.protocol ? "https://sb" : "http://b") + ".scorecardresearch.com/beacon.js";
            a.getScript(c, b)
        },
        getParams: function() {
            var a = this._player.adPlaying() ? "09": "02", b = {
                c1: 1,
                c2: "3005403",
                c3: "",
                c4: "",
                c5: a
            };
            return this._logger.log("VHS::PLUGIN::COMSCORE::", b), b
        },
        track: function() {
            var a = this.getParams();
            "undefined" != typeof COMSCORE ? COMSCORE.beacon(a) : this.loadLibrary(function() {
                "undefined" != typeof COMSCORE && COMSCORE.beacon(a)
            })
        },
        _playing: function() {
            this.tracked || (this.track(), this.tracked=!0)
        },
        _ended: function() {
            this.tracked=!1
        },
        _ad_started: function() {
            this.track()
        },
        _loadstart: function() {
            this.tracked=!1
        }
    }, !0), e.plugin("eventTracker", {
        _initialize: function() {
            this.util = e.util, this.ETEvents = {
                USER_PLAY: "user-play",
                AUTO_PLAY_NEXT: "auto-play-next",
                AUTO_PLAY_START: "auto-play-start",
                VIDEO_COMPLETE: "video-complete",
                PAUSE: "pause",
                UNPAUSE: "unpause",
                GO_FULLSCREEN: "go-fullscreen",
                EXIT_FULLSCREEN: "exit-fullscreen",
                MUTED: "muted",
                UNMUTED: "unmuted",
                SKIP_AD: "skip-ad",
                AD_START: "ad-start",
                AD_COMPLETE: "ad-complete",
                PLAYER_LOAD: "player-load",
                PERCENT_25_VIEWED: "percent-25-viewed",
                PERCENT_50_VIEWED: "percent-50-viewed",
                PERCENT_75_VIEWED: "percent-75-viewed",
                SEEK: "seek",
                AD_PAUSE: "ad-pause",
                AD_RESUME: "ad-resume",
                MEDIA_ERROR: "media-error",
                HD_ON: "hd-on",
                HD_OFF: "hd-off",
                VIDEO_TIME_TO_START: "video-time-to-start",
                CONVIVA_NOT_INITIALIZED: "conviva-not-initialized",
                FW_ADMANAGER_LOAD_ERROR: "fw-admanager-load-error"
            }, this.tracker = null, this.tracked=!1, this.tracked25Percent=!1, this.tracked50Percent=!1, this.tracked75Percent=!1, this.paused=!1, this.firstPlay=!0, this.trackingHistory = [], this.mediaChanged=!1, this.videoCompleted=!1, this.adStarted=!1, this.adCompleted=!1, this.loadedTimestamp = null, this.endTimestamp = null, this.startUpTimeSent=!1, this.percentages = {
                duration: 0,
                calculate: function(a, b) {
                    if (!(1 > a || b.length < 1)) {
                        this.duration = a;
                        for (var c = b.length - 1; c >= 0; c--)
                            this[b[c]] = .01 * a * b[c];
                        this.ready=!0
                    }
                }
            }
        },
        isAdPlaying: function() {
            return this._player && this._player.adsController && (this._player.adsController.isContentPlaying || this._player.adsController.isInitializing)
        },
        getId: function() {
            if (this._data || this._options.id) {
                var a = this._data ? this._data.id: this._options.id;
                return a
            }
            return this._logger.warn("VHS::PLUGIN::EVENTTRACKER:: ID is not defined"), !1
        },
        getName: function() {
            if (this._data || this._options.name) {
                var a = this._data ? this._data.headline: this._options.name;
                return a
            }
            return this._logger.warn('VHS::PLUGIN::EVENTTRACKER:: NAME is optional <video data-setup=\'{"name: "name_video"}\'></video>'), !1
        },
        getCategory: function() {
            var a;
            if (this._data)
                this._data.section && (a = this._data.section.content);
            else {
                if (!this._options.category)
                    return this._logger.warn('VHS::PLUGIN::EVENTTRACKER:: CATEGORY is optional <video data-setup=\'{"category: "category_video"}\'></video>'), !1;
                a = this._options.category
            }
            return a
        },
        getSeries: function() {
            var a = "";
            if (this._data)
                this._data.contentSeries && (a = this._data.contentSeries.name);
            else {
                if (!this._options.series)
                    return this._logger.warn('VHS::PLUGIN::EVENTTRACKER:: SERIES is optional <video data-setup=\'{"series: "series_video"}\'></video>'), !1;
                a = this._options.series
            }
            return a
        },
        getPrimaryPlaylistId: function() {
            var a;
            return this._data ? (this._data.playlist && (a = this._data.playlist.id), a) : (this._logger.warn("VHS::PLUGIN::EVENTTRACKER:: playlistId missing _data"), !1)
        },
        getCurrentVideoPosition: function() {
            var a, b = 0;
            return this._element && this._element.length > 0 && this._element[0].currentTime && (a = "function" == typeof this._element[0].currentTime ? this._element[0].currentTime() : this._element[0].currentTime, b = Math.round(a)), b
        },
        getErrorCode: function(a) {
            var b = "";
            return this._element && this._element.length > 0 && this._element[0].error ? b = this._element[0].error.code : a && a.error && a.error.code && (b = a.error.code), b
        },
        getTrackingObject: function(a) {
            var b = this, c = {
                subject: "video-nytv",
                url: window.location.href || "",
                referrer: document.referrer || "",
                playerType: b._player.getPlayerType() || "",
                device: b.util.getDeviceType(),
                tech: b._player.getType(),
                event: a || "",
                playerVersion: e._version,
                playerUsage: b._options.usage || "",
                playerMode: b._options.mode,
                videoDeliveryMethod: b._options.live ? "live": "vod"
            };
            switch (a) {
            case this.ETEvents.USER_PLAY:
            case this.ETEvents.AUTO_PLAY_NEXT:
            case this.ETEvents.AUTO_PLAY_START:
            case this.ETEvents.VIDEO_COMPLETE:
            case this.ETEvents.PAUSE:
            case this.ETEvents.UNPAUSE:
            case this.ETEvents.PERCENT_25_VIEWED:
            case this.ETEvents.PERCENT_50_VIEWED:
            case this.ETEvents.PERCENT_75_VIEWED:
            case this.ETEvents.PLAYER_LOAD:
            case this.ETEvents.SEEK:
            case this.ETEvents.MEDIA_ERROR:
            case this.ETEvents.HD_ON:
            case this.ETEvents.HD_OFF:
            case this.ETEvents.CONVIVA_NOT_INITIALIZED:
            case this.ETEvents.FW_ADMANAGER_LOAD_ERROR:
                c = this.addBaseVideoProps(c), c = this.addVideoProps(c);
                break;
            case this.ETEvents.GO_FULLSCREEN:
            case this.ETEvents.EXIT_FULLSCREEN:
            case this.ETEvents.MUTED:
            case this.ETEvents.UNMUTED:
            case this.ETEvents.VIDEO_TIME_TO_START:
                c = this.addBaseVideoProps(c), c = this.addVideoProps(c), this.isAdPlaying() && (c = this.addAdProps(c));
                break;
            case this.ETEvents.SKIP_AD:
            case this.ETEvents.AD_START:
            case this.ETEvents.AD_COMPLETE:
            case this.ETEvents.AD_PAUSE:
            case this.ETEvents.AD_RESUME:
                c = this.addBaseVideoProps(c), c = this.addAdProps(c)
            }
            return c
        },
        addVideoProps: function(a) {
            var b = a;
            return b.videoFranchise = this.getSeries(), b.videoDuration = this._player.getDuration(), b.videoSection = this.getCategory(), b.videoSubSection = "", b.videoPrimaryPlaylistId = this.getPrimaryPlaylistId(), b.videoTimeOfEvent = this.getCurrentVideoPosition(), b
        },
        addBaseVideoProps: function(a) {
            var b = a;
            return b.videoId = this.getId(), b.videoName = this.getName(), b.videoType = this.isAdPlaying() ? "ad" : "video", b
        },
        addAdProps: function(a) {
            var b = a, c = 0;
            return this._player && this._player.adsController && this._player.adsController.currentSlot ? c = this._player.adsController.currentSlot.getTotalDuration(!0) || 0 : this._player && this._player.adDuration && (c = this._player.adDuration()), b.adPosition = "preroll", b.adDuration = Math.round(c), b
        },
        track: function(a) {
            if (this._logger.info("VHS::PLUGIN::EVENTTRACKER::", a), this.tracker)
                this.tracker.track(a);
            else if ("undefined" != typeof window.NYTD && window.NYTD.EventTracker) {
                if (this.tracker = new window.NYTD.EventTracker, this.trackingHistory.length > 0) {
                    for (var b = this.trackingHistory.length, c = b - 1; c >= 0; c--)
                        this.tracker.track(this.trackingHistory[c]);
                    this.trackingHistory = []
                }
                this.tracker.track(a)
            } else 
                this.trackingHistory.push(a)
        },
        videoStartUpTime: function() {
            this.startUpTimeSent=!0;
            var a = this.getTrackingObject(this.ETEvents.VIDEO_TIME_TO_START), b = this.endTimestamp, c = this.loadedTimestamp, d = this._player ? this._player.playerStartTimestamp: null;
            b && c && d && (a.videoTimeToStartFromLoaded = b.getTime() - c.getTime(), a.videoTimeToStartFromInit = b.getTime() - d.getTime(), this.track(a))
        },
        _loadstart: function() {
            this._logger.info("VHS::PLUGIN::EVENTTRACKER::LOADSTART"), this.tracked=!1, this.tracked25Percent=!1, this.tracked50Percent=!1, this.tracked75Percent=!1, this.paused=!1, this.mediaChanged=!0
        },
        _play: function() {
            var a = {};
            this.tracked ? this.paused&&!this._player.hdRenditionChanging && (a = this.getTrackingObject(this.ETEvents.UNPAUSE), this.track(a), this.paused=!1) : (this._options.autoplay && this.firstPlay&&!this._options.userInitiatedPlay ? (a = this.getTrackingObject(this._options.autoPlayNext ? this.ETEvents.AUTO_PLAY_NEXT : this.ETEvents.AUTO_PLAY_START), this.firstPlay=!1, this.startUpTimeSent || (this.endTimestamp = new Date, this.videoStartUpTime())) : a = this.getTrackingObject(this._options.userInitiatedNext ? this.ETEvents.USER_PLAY : this.videoCompleted&&!this.adStarted && this.mediaChanged ? this.ETEvents.AUTO_PLAY_NEXT : this.videoCompleted && this.adStarted && this.adCompleted && this.mediaChanged ? this.ETEvents.AUTO_PLAY_NEXT : this.ETEvents.USER_PLAY), this.track(a), this.tracked=!0, this.mediaChanged=!1, this.videoCompleted=!1, this.adStarted=!1, this.adCompleted=!1, this.startUpTimeSent=!0)
        },
        _pause: function() {
            if (this._player && (this._options.live || this._player.getDuration() > 0)&&!this._player.hdRenditionChanging) {
                var a = this.getTrackingObject(this.ETEvents.PAUSE);
                this.track(a), this.paused=!0
            }
        },
        _seeked: function() {
            if (!this._player.hdRenditionChanging) {
                var a = this.getTrackingObject(this.ETEvents.SEEK);
                this.track(a)
            }
        },
        _mute: function(a) {
            var b;
            b = this.getTrackingObject(a ? this.ETEvents.MUTED : this.ETEvents.UNMUTED), this.track(b)
        },
        _go_fullscreen: function() {
            var a = this.getTrackingObject(this.ETEvents.GO_FULLSCREEN);
            this.track(a)
        },
        _exit_fullscreen: function() {
            var a = this.getTrackingObject(this.ETEvents.EXIT_FULLSCREEN);
            this.track(a)
        },
        _ended: function() {
            var a = this.getTrackingObject(this.ETEvents.VIDEO_COMPLETE);
            this.track(a), this.tracked=!1, this.tracked25Percent=!1, this.tracked50Percent=!1, this.tracked75Percent=!1, this.videoCompleted=!0
        },
        _ad_started: function() {
            var a = this.getTrackingObject(this.ETEvents.AD_START);
            this.track(a), this.adStarted=!0, this.startUpTimeSent ||!this._options.autoplay || this._options.userInitiatedPlay || (this.endTimestamp = new Date, this.videoStartUpTime())
        },
        _ad_completed: function() {
            var a = this.getTrackingObject(this.ETEvents.AD_COMPLETE);
            this.track(a), this.tracked=!1, this.tracked25Percent=!1, this.tracked50Percent=!1, this.tracked75Percent=!1, this.adCompleted=!0
        },
        _ad_skipped: function() {
            var a = this.getTrackingObject(this.ETEvents.SKIP_AD);
            this.track(a), this.tracked=!1, this.tracked25Percent=!1, this.tracked50Percent=!1, this.tracked75Percent=!1, this.adCompleted=!0
        },
        _ad_paused: function() {
            var a = this.getTrackingObject(this.ETEvents.AD_PAUSE);
            this.track(a)
        },
        _ad_resumed: function() {
            var a = this.getTrackingObject(this.ETEvents.AD_RESUME);
            this.track(a)
        },
        _hd_on: function() {
            var a = this.getTrackingObject(this.ETEvents.HD_ON);
            this.track(a)
        },
        _hd_off: function() {
            var a = this.getTrackingObject(this.ETEvents.HD_OFF);
            this.track(a)
        },
        _loaded: function() {
            this._logger.info("VHS::PLUGIN::EVENTTRACKER::LOADED");
            var a = this.getTrackingObject(this.ETEvents.PLAYER_LOAD);
            this.track(a), this.loadedTimestamp = new Date
        },
        _error: function(a) {
            var b = this.getTrackingObject(this.ETEvents.MEDIA_ERROR);
            b.errorCode = this.getErrorCode(a), this.track(b)
        },
        _time_update: function(a) {
            var b = this._player.getDuration(), c = Math.round(parseInt(a, 10)), d = Math.round(parseInt(b, 10));
            this.percentages.ready && this.percentages.duration == d || this.percentages.calculate(d, [25, 50, 75]);
            var e = {};
            c > 0 && (c >= this.percentages[25]&&!this.tracked25Percent ? (e = this.getTrackingObject(this.ETEvents.PERCENT_25_VIEWED), this.track(e), this.tracked25Percent=!0) : c >= this.percentages[50]&&!this.tracked50Percent ? (e = this.getTrackingObject(this.ETEvents.PERCENT_50_VIEWED), this.track(e), this.tracked50Percent=!0) : c >= this.percentages[75]&&!this.tracked75Percent && (e = this.getTrackingObject(this.ETEvents.PERCENT_75_VIEWED), this.track(e), this.tracked75Percent=!0))
        },
        _tracking_event: function(a) {
            if (a && a.data && a.data.name)
                switch (a.data.name) {
                case this.ETEvents.CONVIVA_NOT_INITIALIZED:
                    this.track(this.getTrackingObject(this.ETEvents.CONVIVA_NOT_INITIALIZED));
                    break;
                case this.ETEvents.FW_ADMANAGER_LOAD_ERROR:
                    this.track(this.getTrackingObject(this.ETEvents.FW_ADMANAGER_LOAD_ERROR))
                }
        },
        _rendered: function() {
            this._element = this._player.element
        }
    }, !0), e.plugin("upt", {
        _initialize: function() {
            this.utils = e.util, this.body = a("body").first(), this.uptContainer = a(document.createElement("div")), this.hideElement(this.uptContainer), this.body.append(this.uptContainer), this.uptURL = [document.location.protocol, "//up.nytimes.com/"].join("");
            var b = window.dcsvid || a("meta[name='WT.dcsvid']").attr("content") || "";
            this.uid = encodeURIComponent(b), this.tracked=!1, this.trackedUptProgress=!1
        },
        getParams: function(a) {
            var b = this._data && this._data.publish_url ? "http://www.nytimes.com" + encodeURIComponent(this._data.publish_url): "", c = encodeURIComponent(window.location.href), d = encodeURIComponent(a.event), e = encodeURIComponent(null !== a.value || "undefined" !== a.value && "" !== a.value ? ['{"', a.event, '":"', a.value, '"}'].join("") : ""), f = ["d=", 0, "&m=", "", "&ui=", this.uid, "&u=", b, "&r=", c, "&e=", d, "&p=", e].join("");
            return f
        },
        track: function(b) {
            if (!this._player.hasOwnProperty("adsController") ||!this._player.adsController.isContentPlaying) {
                this._logger.info("VHS::PLUGIN::UPT::", b);
                var c = a(document.createElement("img"));
                c.attr("src", this.uptURL + "?" + b), this.hideElement(c), this.uptContainer && (this.uptContainer.empty(), this.uptContainer.append(c))
            }
        },
        hideElement: function(a) {
            return a.css({
                width: "0px",
                height: "0px",
                border: "0px"
            }), a.hide(), a
        },
        _play: function() {
            if (!this.tracked) {
                var a = this.getParams({
                    event: "videoStart",
                    value: ""
                });
                this.track(a), this.tracked=!0
            }
        },
        _ended: function() {
            var a = this.getParams({
                event: "videoComplete",
                value: ""
            });
            this.track(a), this.tracked=!1, this.trackedUptProgress=!1
        },
        _time_update: function(a) {
            var b = this._player.getDuration(), c = Math.round(parseInt(a, 10)), d = Math.round(parseInt(b, 10)), e = Math.round(.75 * d);
            if (c > 0 && c === e&&!this.trackedUptProgress) {
                var f = this.getParams({
                    event: "videoWatched",
                    value: "75%"
                });
                this.track(f), this.trackedUptProgress=!0
            }
        },
        _loadstart: function() {
            this.tracked=!1, this.trackedUptProgress=!1
        }
    }, !0), e.plugin("playNext", {
        _initialize: function() {
            this.playlist = null, this.currentVideo = 0
        },
        _ended: function() {
            var a = this;
            this.getPlaylistData(function() {
                var b = a.playlist.videos[a.currentVideo];
                a._data.id === b.id && (a.currentVideo = a.currentVideo + 1), a._options.poster = "", a._player.load(b.id, !0), a.currentVideo = a.currentVideo + 1
            })
        },
        getPlaylistData: function(a) {
            var b = this;
            b.playlist ? a() : this._player.getData(this._data.playlist.id, "playlist", function(c) {
                b.playlist = c, a()
            })
        }
    }, !1), e.plugin("sharetools", {
        _initialize: function() {
            this.config = {
                facebook: {
                    name: "facebook",
                    active: !0,
                    postUrl: "http://www.facebook.com/sharer.php",
                    shareParameters: {
                        url: "u"
                    },
                    smid: "fb-share",
                    width: 655,
                    height: 430
                },
                twitter: {
                    name: "twitter",
                    active: !0,
                    postUrl: "https://twitter.com/share",
                    shareParameters: {
                        url: "url",
                        title: "text",
                        related: "nytimes",
                        via: "nytvideo"
                    },
                    smid: "tw-share",
                    width: 600,
                    height: 450
                }
            }, this.bind(this._container), this._container.addClass("vhs-plugin-" + this._name)
        },
        openShareHandler: function(b, c) {
            var d, e = a(b.target), f = e.data("shareName"), g = e.data("shareHandler"), h = e.data("shareUrl"), i = this[g], j = this.config[f], k = h ? h: c.tiny_url || c.url;
            j && (d = a.extend({}, j, {
                shareUrl: k
            })), "function" == typeof i && i.call(this, d, c)
        },
        popup: function(a) {
            var b = a.encoded ? a.postUrl: a.postUrl + "?" + a.shareParameters.url + "=" + encodeURIComponent(a.shareUrl);
            window.open(b, a.name + "Share", "toolbar=0,status=0,height=" + a.height + ",width=" + a.width + ",scrollbars=yes,resizable=yes")
        },
        urlshortener: function(b, c) {
            var d = "", e = /[\?&]share_url=([^&#]*)/, f = e.exec(window.location.search), g = b.name, h = "", i = "http://www.nytimes.com/svc/bitly/shorten.jsonp", j = b.shareUrl;
            if (c.headline && (h += "&text=" + encodeURIComponent(c.headline)), b.shareParameters && (b.shareParameters.related && (h += "&related=" + encodeURIComponent(b.shareParameters.related)), b.shareParameters.via && (h += "&via=" + encodeURIComponent(b.shareParameters.via))), j === c.tiny_url)
                return void this.popup(a.extend({}, b, {
                postUrl: b.postUrl + "?url=" + encodeURIComponent(c.tiny_url) + h,
                encoded: !0
            }));
            null !== f && (d = decodeURIComponent(f[1].replace(/\+/g, " ")));
            var k = ['<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">', "<html><head>", '<script type="text/javascript" src="http://graphics8.nytimes.com/js/common.js"></script>', '<script type="text/javascript">', "function loadShortUrl() {", "var url;", 'var ricoUrl = "', d, '".replace(/\\s/g, "");', "if (ricoUrl.length > 0) {", "shortUrlRedirect(ricoUrl);", "} else {", "NYTD.jQuery.ajax({", 'url: "', i, '",', 'dataType: "jsonp",', 'data: { "url" : "', j, '" },', 'jsonpCallback: "callback",', "cache: true", "}).success(function(data, textStatus, jqXHR){", "if (data && data.payload && data.payload.short_url) {", "short_url = data.payload.short_url;", "url = short_url;", "}", "shortUrlRedirect(url);", "}).error(function(jqXHR, textStatus, errorThrown){", "shortUrlRedirect(url);", "});", "}", "};", "function shortUrlRedirect(url) {", 'window.location.href = "', b.postUrl, '?url=" + encodeURIComponent(url) + "', h, '";', "};", "</script>", "</head>", '<body onload="loadShortUrl();"></body></html>'].join(""), l = window.open("", g + "Share", "toolbar=0,status=0,height=" + b.height + ",width=" + b.width + ",scrollbars=yes,resizable=yes");
            l.document.write(k), l.document.close()
        },
        bind: function(a) {
            var b = this;
            a.on("click", ".vhs-share-item[data-share-handler]", function(a) {
                b.openShareHandler.call(b, a, b._data)
            })
        }
    }, !0), e.plugin("controlsOverlay", {
        shareToolsClass: "vhs-plugin-sharetools",
        defaults: {
            mode: "clean",
            allowedStates: ["playing", "paused"]
        },
        template: function(a, b) {
            return ['<div data-id="', b.id, '" class="vhs-player-header vhs-pause-slate vhs-top-banner">', '<div class="vhs-video-title">', '<a href="http://www.nytimes.com/video" target="_blank" class="vhs-times-logo vhs-icon-times-video-logo vhs-anchor-button ', a.view.logoClasses || "", '"></a>', '<div class="vhs-video-title-wrapper ', a.view.titleClasses, '">', '<h1 class="vhs-data">', b.headline, "</h1>", '<span class="vhs-byline"><span class="vhs-by">By&nbsp;</span><span>', b.byline, "</span></span>", "</div>", "</div>", '<div class="vhs-tools ', a.view.shareClasses || "", '">', '<div class="vhs-social">', '<button class="vhs-share-item vhs-icon-facebook" alt="facebook" data-share-handler="popup" data-share-name="facebook" data-share-url="', a.url, '"></button>', '<button class="vhs-share-item vhs-icon-twitter" alt="twitter" data-share-handler="urlshortener" data-share-name="twitter" data-share-url="', a.url, '"></button>', "</div>", "</div>", "</div>"].join("")
        },
        renderContainer: function() {
            this.el = a('<div class="vhs-plugin-container-' + this._name + '" style="display: none;" />').prependTo(this._container), this.templateFn = this.options.template || this.template, this._container.addClass("vhs-plugin-" + this._name)
        },
        renderSlate: function(a) {
            var b, c, d;
            this._initialize(), this.isEnabled && "function" == typeof this.templateFn && (b = this.options.mode, c = this.viewSettings, d = this._data, this.el.find(".vhs-pause-slate[data-id]").length || this.el.append(this.templateFn({
                view: c[b],
                url: this.options.url || ""
            }, d)), this.el.show().find(".vhs-pause-slate").stop(!0, !1).fadeTo(a.fadeArgs[0], a.fadeArgs[1]))
        },
        removeSlate: function(a) {
            var b = this;
            this._initialize(), this.isEnabled && this.el.find(".vhs-pause-slate").fadeTo(a.fadeArgs[0], a.fadeArgs[1], function() {
                b.el.empty()
            })
        },
        createOptions: function() {
            var b = a.extend({}, this.defaults, this._player.options[this._name] || {});
            return b.mode = e.util.isAndroid() || e.util.isIphone() ? "clean" : b.mode, b
        },
        _initialize: function() {
            this.isReady!==!0 && (this.options = this.createOptions(), this.isEnabled = this._data && "clean" !== this.options.mode && "object" == typeof this.viewSettings[this.options.mode], this.isEnabled && this._container.hasClass(this.shareToolsClass) && this.renderContainer(), "clean" == this.options.mode && this.destroy())
        },
        _show_controls: function(b) {
            - 1 != a.inArray(this._player.status, this.options.allowedStates) && (this.renderSlate(b), this.isReady=!0)
        },
        _hide_controls: function(b) {
            - 1 != a.inArray(this._player.status, this.options.allowedStates) && (this.removeSlate(b), this.isReady=!0)
        },
        _ad_started: function() {
            this.removeSlate({
                fadeArgs: [0, 1]
            })
        },
        _ended: function() {
            this.removeSlate({
                fadeArgs: [0, 1]
            })
        },
        destroy: function() {
            var a = function() {};
            this._show_controls = a, this._hide_controls = a, this._ad_started = a
        },
        viewSettings: {
            share: {
                logoClasses: "vhs-no-pipe",
                titleClasses: "vhs-invisible"
            },
            article: {},
            offsite: {}
        }
    }, !0), e.plugin("stats", {
        _initialize: function() {
            this.stats=!1, this.videoStats = {
                droppedFrames: 0,
                decodedFrames: 0,
                videoDecodedBytes: 0,
                audioDecodedBytes: 0,
                bitrate: 0,
                mimetype: "",
                volume: 100,
                videoId: 0,
                dimensions: {
                    width: 0,
                    height: 0
                },
                videoResolution: {
                    width: 0,
                    height: 0
                },
                streamType: "http",
                bandwidth: 0,
                buffered: 0,
                currentTime: 0
            }
        },
        _loaded: function() {
            this._player.element[0];
            this.videoStats.videoId = this._data ? this._data.id : this._options.id||-1
        },
        _time_update: function(a) {
            var b = this._player.element[0];
            this.videoStats.decodedFrames = b.webkitDecodedFrameCount, this.videoStats.droppedFrames = b.webkitDroppedFrameCount, this.videoStats.videoDecodedBytes = b.webkitVideoDecodedByteCount, this.videoStats.audioDecodedBytes = b.webkitAudioDecodedByteCount, this.videoStats.currentTime = a, this.videoStats.volume = b.volume, this.videoStats.buffered = b.buffered, this.videoStats.videoResolution = {
                width: b.videoWidth,
                height: b.videoHeight
            }, this.videoStats.dimensions = {
                width: this._container.width(),
                height: this._container.width()
            }
        }
    }, !1), e.plugin("vpaidUpdateAd", {
        _time_update: function(a) {
            this._player.element.get(0) && "function" == typeof this._player.element.get(0).updateAd && this._player.element.get(0).updateAd({
                videoTime: a
            })
        }
    }, !0), e.api.Controls = function(b) {
        var c = ['<div class="nytd-player-controls">', '<span class="nytd-player-controls-play vhs-icon-play"></span>', '<span class="nytd-player-controls-reload vhs-icon-reload"></span>', '<span class="nytd-player-controls-exclamation vhs-icon-exclamation"></span>', '<div class="nytd-player-controls-ad-label">Advertisement</div>', '<div class="nytd-player-controls-live-label">LIVE</div>', '<div class="nytd-player-controls-error-msg">Error</div>', '<div class="nytd-player-controls-current-time">00:00</div>', '<div class="nytd-player-controls-progress">', '<span class="nytd-player-controls-progress-marker vhs-icon-circle"></span>', '<span class="nytd-player-controls-progress-time"></span>', '<span class="nytd-player-controls-progress-buffer"></span>', '<span class="nytd-player-controls-progress-scrubber"></span>', "</div>", '<span class="nytd-player-controls-fullscreen vhs-icon-resize-full"></span>', '<span class="nytd-player-controls-volume vhs-icon-volume-up"></span>', '<span class="nytd-player-controls-hd vhs-icon-hd-off"></span>', '<div class="nytd-player-controls-duration">00:00</div>', "</div>"].join("");
        this.player = b, this.rendered=!1, this.seeking=!1, this.draggingMarker=!1, this.mouseoverContainer=!0, this.controlsVisible=!1, this.element = a(c), this.device = e.util.getDeviceType(), this.live = this.player && this.player.options && this.player.options.live?!0 : !1, this.touchedControls=!1
    }, e.api.Controls.prototype = {
        initialize: function() {
            this.render(), this.registerUI(), this.actions(), this.listeners(), this.live && this.configureLive()
        },
        render: function() {
            return this.rendered || "android_legacy" === this.device || "ie_mobile" === this.device?!1 : (this.player.container.append(this.element), this.rendered=!0, void(this.controlsVisible=!0))
        },
        registerUI: function() {
            this.ui = {
                play: this.element.find(".nytd-player-controls-play"),
                reload: this.element.find(".nytd-player-controls-reload"),
                fullscreen: this.element.find(".nytd-player-controls-fullscreen"),
                volume: this.element.find(".nytd-player-controls-volume"),
                progress: this.element.find(".nytd-player-controls-progress"),
                marker: this.element.find(".nytd-player-controls-progress-marker"),
                progressBuffer: this.element.find(".nytd-player-controls-progress-buffer"),
                progressTime: this.element.find(".nytd-player-controls-progress-time"),
                duration: this.element.find(".nytd-player-controls-duration"),
                current: this.element.find(".nytd-player-controls-current-time"),
                errormsg: this.element.find(".nytd-player-controls-error-msg"),
                hd: this.element.find(".nytd-player-controls-hd")
            }
        },
        actions: function() {
            var b = this;
            this.ui.play.on("click", function(a) {
                b.player.togglePlay(), b.player.isTouch && (a.preventDefault(), a.stopPropagation())
            }), this.ui.reload.on("click", function(a) {
                b.player.reloadVideo(), b.live || b.player.play(), b.player.isTouch && (a.preventDefault(), a.stopPropagation())
            }), this.ui.fullscreen.on("click", function(a) {
                b.player.toggleFullscreen(), b.player.isTouch && (a.preventDefault(), a.stopPropagation())
            }), e.util.supportsFullscreen() || (this.ui.fullscreen.addClass("vhs-icon-disabled"), this.ui.fullscreen.off()), this.ui.volume.on("click", function(a) {
                b.player.toggleVolume(), b.player.isTouch && (a.preventDefault(), a.stopPropagation())
            }), this.ui.marker.on("click", function(a) {
                a.preventDefault(), a.stopPropagation()
            }), this.ui.progress.on("mousedown touchstart", function(a) {
                a.stopPropagation(), b.draggingMarker=!0
            }), this.ui.progress.on("touchstart click", function(a) {
                a.preventDefault(), a.stopPropagation(), b.seek(a)
            }), this.ui.hd.on("click touchstart", function(a) {
                a.preventDefault(), a.stopPropagation(), (b.player.status === e.api.status.VIDEO_PLAYING || b.player.status === e.api.status.VIDEO_PAUSED) && (b.player.toggleHD(a), b.setHDIconState())
            }), a(document).on("mouseup touchend", a.proxy(this.onDocumentMouseup, this)), a(document).on("mousemove touchmove", a.proxy(this.onDocumentMousemove, this)), this.element.hover(function() {
                b.element.addClass("nytd-player-controls-hover")
            }, function() {
                b.element.removeClass("nytd-player-controls-hover")
            })
        },
        listeners: function() {
            this.player.on(e.api.events.PLAY, a.proxy(this.onPlay, this)), this.player.on(e.api.events.PLAYING, a.proxy(this.onPlay, this)), this.player.on(e.api.events.ENDED, a.proxy(this.onEnded, this)), this.player.on(e.api.events.HLS_END_LIST, a.proxy(this.configureVOD, this)), this.player.on(e.api.events.AD_COMPLETED, a.proxy(this.onAdCompleted, this)), this.player.on(e.api.events.AD_PAUSED, a.proxy(this.onAdPaused, this)), this.player.on(e.api.events.AD_RESUMED, a.proxy(this.onAdResumed, this)), this.player.on(e.api.events.AD_STARTED, a.proxy(this.onAdStarted, this)), this.player.on(e.api.events.AD_TIME_UPDATE, a.proxy(this.onAdTimeUpdate, this)), this.player.on(e.api.events.AD_SKIPPED, a.proxy(this.onAdSkipped, this)), this.player.on(e.api.events.AD_STOPPED, a.proxy(this.onAdStopped, this)), this.player.on(e.api.events.PAUSE, a.proxy(this.onPause, this)), this.player.on(e.api.events.MUTE, a.proxy(this.onMute, this)), this.player.on(e.api.events.DURATION_CHANGE, a.proxy(this.onDurationChange, this)), this.player.on(e.api.events.TIME_UPDATE, a.proxy(this.onTimeupdate, this)), this.player.on(e.api.events.GO_FULLSCREEN, a.proxy(this.onEnterFullscreen, this)), this.player.on(e.api.events.EXIT_FULLSCREEN, a.proxy(this.onExitFullscreen, this)), this.player.on(e.api.events.ERROR, a.proxy(this.onError, this)), this.player.on(e.api.events.LOAD_START, a.proxy(this.onLoadStart, this)), this.player.on(e.api.events.PROGRESS, a.proxy(this.onProgress, this)), this.player.on(e.api.events.VIDEO_FLASH_BYTES_LOADED_CHANGE, a.proxy(this.onVideoFlashBytesLoadedChange, this)), this.player.container.on("touchend", a.proxy(this.onTouchEndVideo, this)), this.element.on("touchend", a.proxy(this.onTouchEndControls, this)), this.player.container.on("mouseenter", a.proxy(this.onMouseEnterVideo, this)), this.player.container.on("mouseleave", a.proxy(this.onMouseLeaveVideo, this)), this.player.container.on("mousemove", a.proxy(this.onMouseMoveVideo, this)), this.element.on("mouseenter", a.proxy(this.onMouseEnterControls, this)), this.element.on("mouseleave", a.proxy(this.onMouseLeaveControls, this))
        },
        configureLive: function() {
            this.element.addClass("nytd-player-live-controls"), this.element.addClass("withouthd")
        },
        configureVOD: function() {
            this.element.removeClass("nytd-player-live-controls"), this.renderHdButton(this.player._data && this.player._data.renditions&&!this.player.options.live)
        },
        onMouseEnterVideo: function() {
            this.mouseoverContainer=!0, this.show(), this.element.hasClass("nytd-player-controls-hover") || this.startFadeOutTimer()
        },
        onMouseLeaveVideo: function() {
            this.mouseoverContainer=!1, this.player.status !== e.api.status.VIDEO_PAUSED && this.player.status !== e.api.status.AD_PAUSED && this.hide()
        },
        onMouseMoveVideo: function() {
            this.mouseoverContainer&&!this.controlsVisible && (this.show(), this.element.hasClass("nytd-player-controls-hover") || this.startFadeOutTimer())
        },
        onMouseEnterControls: function() {
            clearInterval(this.controlsHideTimeout)
        },
        onMouseLeaveControls: function() {
            this.mouseoverContainer && this.controlsVisible && this.startFadeOutTimer()
        },
        onTouchEndVideo: function(b) {
            this.touchedControls || (b.preventDefault(), this.player.adPlaying() ? this.show() : this.controlsVisible ? this.startFadeOutTimer(100) : (this.show(), this.startFadeOutTimer()), a(b.target).click()), this.touchedControls=!1
        },
        onTouchEndControls: function(b) {
            b.preventDefault(), this.touchedControls=!0, this.show(), this.player.adPlaying() || this.startFadeOutTimer(), a(b.target).click()
        },
        onPlay: function() {
            this.player.status = e.api.status.VIDEO_PLAYING, this.ui.play.addClass("vhs-icon-pause").removeClass("vhs-icon-play"), this.hideErrorSlate(), this.setHDIconState(), this.startFadeOutTimer(300)
        },
        onEnded: function() {
            this.player.status = e.api.status.VIDEO_ENDED, this.ui.play.addClass("vhs-icon-play").removeClass("vhs-icon-pause"), this.live && this.configureVOD(), this.show()
        },
        onAdCompleted: function() {
            this.element.removeClass("nytd-player-ad-controls"), this.ui.hd.removeClass("vhs-icon-hd-disabled"), this.ui.play.removeClass("vhs-icon-pause").addClass("vhs-icon-play"), this.player.isTouch && this.hide()
        },
        onAdPaused: function() {
            this.player.status = e.api.status.AD_PAUSED, this.ui.play.removeClass("vhs-icon-pause").addClass("vhs-icon-play"), this.show()
        },
        onAdResumed: function() {
            this.player.status = e.api.status.AD_PLAYING, this.ui.play.addClass("vhs-icon-pause").removeClass("vhs-icon-play"), this.startFadeOutTimer(300)
        },
        onAdStarted: function() {
            this.player.status = e.api.status.AD_PLAYING, this.element.addClass("nytd-player-ad-controls"), this.ui.hd.addClass("vhs-icon-hd-disabled"), this.ui.play.addClass("vhs-icon-pause").removeClass("vhs-icon-play"), this.player.poster && this.player.poster.hide(), this.player.isTouch && this.show()
        },
        onAdSkipped: function() {
            this.element.removeClass("nytd-player-ad-controls"), this.ui.hd.removeClass("vhs-icon-hd-disabled"), this.player.isTouch && this.hide()
        },
        onAdStopped: function() {
            this.element.removeClass("nytd-player-ad-controls"), this.ui.hd.removeClass("vhs-icon-hd-disabled"), this.player.isTouch && this.hide()
        },
        onPause: function() {
            this.ui.play.addClass("vhs-icon-play").removeClass("vhs-icon-pause"), this.show()
        },
        onMute: function(a) {
            a ? this.ui.volume.addClass("vhs-icon-volume-off").removeClass("vhs-icon-volume-up") : this.ui.volume.addClass("vhs-icon-volume-up").removeClass("vhs-icon-volume-off")
        },
        onEnterFullscreen: function() {
            e.util.isIpad() && (this.hide(!0), this.player.element.attr("controls", "controls")), this.ui.fullscreen.addClass("vhs-icon-resize-default").removeClass("vhs-icon-resize-full")
        },
        onExitFullscreen: function() {
            e.util.isIpad() && (this.show(), this.player.element.removeAttr("controls")), this.ui.fullscreen.addClass("vhs-icon-resize-full").removeClass("vhs-icon-resize-default")
        },
        onError: function(a) {
            this.player.logger.error("!!! Error Event", a), this.live ? this.showLiveStreamDownMsg(a) : this.showVodErrorMsg(a)
        },
        onLoadStart: function() {
            this.hideErrorSlate()
        },
        onDurationChange: function(a) {
            var b = parseInt(a, 10);
            this.ui.duration.html(this.formatTime(b))
        },
        onTimeupdate: function(a) {
            this.seeking || this.updateProgressUI(a)
        },
        onAdTimeUpdate: function(a) {
            var b = this.player.adDuration() - a, c = this.formatTime(b);
            this.ui.duration.html(c), this.player.options.skipAd && this.player.skipAdUpdate(b)
        },
        onDocumentMousemove: function(a) {
            var b, c, d, e;
            this.draggingMarker && (c = 0, d = 0, e = 0, b = this.player.isTouch ? a.originalEvent.touches[0].pageX || a.originalEvent.changedTouches[0].pageX : a.pageX, d =- 1 * (this.ui.progress.offset().left - b), d > c && d < this.ui.progress.width() ? e = this.player.duration() * d / this.ui.progress.width() : d >= this.ui.progress.width() && (e = this.player.duration()), this.player.seek(e), this.updateProgressUI(e), this.seeking=!0)
        },
        onDocumentMouseup: function() {
            var a = this;
            this.draggingMarker=!1, setTimeout(function() {
                a.seeking=!1
            }, 500)
        },
        onProgress: function() {
            var a = 0, b = 0;
            if (this.player && this.player.element && this.player.element[0] && this.player.element[0].buffered && this.player.element[0].buffered.end)
                try {
                    var c = this.player.element[0].buffered.length - 1;
                    c >= 0 && (b = this.player.element[0].buffered.end(c))
            } catch (d) {
                this.player.logger.error("error getting the buffer from the video element", d)
            }
            a = this.getTimePosition(b), this.ui.progressBuffer.css({
                width: a + "%"
            })
        },
        onVideoFlashBytesLoadedChange: function(a) {
            var b = a && a.data && a.data.bytesloaded ? a.data.bytesloaded: 0, c = a && a.data && a.data.bytestotal ? a.data.bytestotal: 0, d = c > 0 ? Math.round(b / c * 100): 0;
            this.ui.progressBuffer.css({
                width: d + "%"
            })
        },
        show: function() {
            var a = [400, 1];
            this.player.logger.log("controls show"), clearInterval(this.controlsHideTimeout), this.controlsVisible=!0, this.element.stop(!0, !1).fadeTo(a[0], a[1]), this.player.trigger(e.api.events.SHOW_CONTROLS, {
                fadeArgs: a
            })
        },
        hide: function(a) {
            var b = [400, 0];
            if (this.player.logger.log("controls hide"), !this.player.firstPlay || a) {
                var c = this;
                this.element.stop(!0, !1).fadeTo(b[0], b[1], function() {
                    c.controlsVisible=!1
                }), this.player.trigger(e.api.events.HIDE_CONTROLS, {
                    fadeArgs: b
                })
            }
        },
        startFadeOutTimer: function(a) {
            if (this.player.status === e.api.status.VIDEO_PAUSED || this.player.status === e.api.status.AD_PAUSED)
                return !1;
            this.player.logger.log("controls startFadeOutTimer");
            var b = a || 6e3, c = this;
            clearInterval(this.controlsHideTimeout), this.controlsHideTimeout = setTimeout(function() {
                c.hide()
            }, b)
        },
        seek: function(a) {
            var b = 0;
            b = this.player.isTouch ? a.originalEvent.touches[0].pageX || a.originalEvent.changedTouches[0].pageX : a.pageX;
            var c =- 1 * (this.ui.progress.offset().left - b), d = Math.round(this.player.duration() * c / this.ui.progress.width());
            this.player.seek(d), this.updateProgressUI(d)
        },
        formatTime: function(a) {
            var b = parseInt(a, 10), c = Math.floor(b / 60), d = b - 60 * c;
            return 10 > c && (c = "0" + c), 10 > d && (d = "0" + d), c + ":" + d
        },
        getTimePosition: function(a) {
            var b = a / this.player.duration() * 100;
            return parseFloat(b.toFixed(2))
        },
        updateProgressUI: function(a) {
            var b, c = this.getTimePosition(a);
            this.ui.progressTime.css({
                width: c + "%"
            }), b = (this.ui.progressTime.width() - 9) / this.ui.progress.width() * 100, this.ui.marker.css({
                left: b.toFixed(2) + "%"
            }), this.ui.current.html(this.formatTime(a))
        },
        onSourceError: function() {
            this.live || 3 !== this.player.element[0].networkState || this.player.trigger(e.api.events.ERROR, {
                error: {
                    code: 203,
                    msg: "NETWORK_NO_SOURCE: All video sources unavailable."
                }
            })
        },
        showLiveStreamDownMsg: function() {
            var a = this.player.element && this.player.element[0] ? this.player.element[0].error: null, b = e.util.getErrorMessage(a);
            this.element.addClass("nytd-player-error-controls"), this.ui.errormsg.html(b), a && a.code && a.code === a.MEDIA_ERR_SRC_NOT_SUPPORTED && this.player && this.player.element[0] && "" === this.player.element[0].canPlayType("application/x-mpegURL") && this.element.addClass("nytd-player-error-not-supported")
        },
        showVodErrorMsg: function(a) {
            if (a) {
                var b, c = a.currentTarget ? a.currentTarget.error: a.error, d=!0;
                this.element.addClass("nytd-player-error-controls"), "html5" === this.player.options.mode && c && c.code && c.code === c.MEDIA_ERR_SRC_NOT_SUPPORTED && this.player && this.player.element[0] && "" === this.player.element[0].canPlayType("video/mp4") && (this.element.addClass("nytd-player-error-not-supported"), d=!1), b = e.util.getErrorMessage(c, "vod", d), this.ui.errormsg.html(b), this.show()
            }
        },
        hideErrorSlate: function() {
            this.element.removeClass("nytd-player-error-controls"), this.element.removeClass("nytd-player-error-not-supported"), this.ui.errormsg.html("")
        },
        renderHdButton: function(a) {
            a ? this.element.removeClass("withouthd") : this.element.addClass("withouthd")
        },
        setHDIconState: function() {
            this.player.enableHD ? this.ui.hd.addClass("vhs-icon-hd-on") : this.ui.hd.removeClass("vhs-icon-hd-on")
        }
    }, e.api.Fullscreen = function(a) {
        this.player = a, this.listeners()
    }, e.api.Fullscreen.prototype = {
        _permissionGranted: !1,
        _isFullscreen: !1,
        _resizeProxy: null,
        listeners: function() {
            this._resizeProxy = a.proxy(this.onVHSFullscreenResize, this), a(document).on("webkitfullscreenchange mozfullscreenchange fullscreenchange MSFullscreenChange vhsfullscreenchange", a.proxy(this.onFullscreenChange, this)), a(window).on("keydown", a.proxy(this.onEscKey, this))
        },
        _canRequestFullScreen: function(a) {
            var b = a || document.createElement("video"), c = function(a, b) {
                return "function" == typeof a[b]
            };
            return c(b, "requestFullscreen") || c(b, "webkitRequestFullscreen") || c(b, "webkitEnterFullScreen") || c(b, "mozRequestFullScreen") || c(b, "msRequestFullscreen")
        },
        onFullscreenChange: function() {
            if (this.getPermission()) {
                var b = this.player.container, c = b.data("ratioFix");
                return e.util.isIpad() ? (this.isEnabled() ? this.player.trigger(e.api.events.GO_FULLSCREEN) : (this.player.trigger(e.api.events.EXIT_FULLSCREEN), this.setPermission(!1)), !1) : void(this.isEnabled() ? (this.player.trigger(e.api.events.GO_FULLSCREEN), b.width(a(document).width())) : (this.player.trigger(e.api.events.EXIT_FULLSCREEN), b.css({
                    height: c ? 0: this.player.options.height,
                    width: this.player.options.width
                }), this.setPermission(!1)))
            }
        },
        onVHSFullscreenResize: function() {
            if (this.getPermission()) {
                var a = this.computePlayerRect(), b = {
                    width: a.width,
                    height: a.height,
                    left: a.left,
                    top: a.top,
                    "padding-bottom": 0
                };
                this.player.container.css(b)
            }
        },
        computePlayerRect: function() {
            {
                var b, c, d, e = a(window).height(), f = a(window).width(), g = e * (16 / 9), h = f * (9 / 16);
                this.player.container
            }
            return f > e && (h = e), g > f && (g = f, h = 9 * g / 16), b = .5 * (f - g), c = 0 >= b ? .5 * (e - h) : 0, d = {
                width: g,
                height: h,
                left: b,
                top: c
            }
        },
        onEscKey: function(a) {
            var b = a.keyCode || a.which;
            27 === b && this.exit()
        },
        vhsEnterFullscreen: function() {
            this.renderVHSFullscreenElement(), this._isFullscreen=!0, this.onFullscreenChange(), this.onVHSFullscreenResize(), a(window).resize(this._resizeProxy)
        },
        vhsExitFullscreen: function() {
            this.removeVHSFullscreenElement(), this._isFullscreen=!1, this.onFullscreenChange(), a(window).off("resize", this._resizeProxy)
        },
        enter: function() {
            var a = this.player.container[0], b = function(a, b) {
                return "function" == typeof a[b]
            };
            this.setPermission(!0), (e.util.isIpad() || e.util.isAndroid()) && (a = this.player.element.get(0)), b(a, "requestFullscreen") ? a.requestFullscreen() : b(a, "webkitRequestFullscreen") ? a.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT) : b(a, "webkitEnterFullScreen") ? a.webkitEnterFullScreen() : b(a, "mozRequestFullScreen") ? a.mozRequestFullScreen() : b(a, "msRequestFullscreen") ? (a.msRequestFullscreen(), this.player.container.addClass("ms-fullscreen")) : this.vhsEnterFullscreen()
        },
        exit: function() {
            if (this.getPermission()) {
                var a = this.player.container[0];
                e.util.isIpad() && (a = this.player.element.get(0)), "function" == typeof a.webkitCancelFullScreen ? a.webkitCancelFullScreen() : "function" == typeof document.exitFullscreen ? document.exitFullscreen() : "function" == typeof document.webkitExitFullscreen ? document.webkitExitFullscreen() : "function" == typeof document.mozCancelFullScreen ? document.mozCancelFullScreen() : "function" == typeof document.msExitFullscreen ? (document.msExitFullscreen(), this.player.container.removeClass("ms-fullscreen")) : this.vhsExitFullscreen()
            }
        },
        getPermission: function() {
            return this._permissionGranted
        },
        setPermission: function(a) {
            this._permissionGranted = a
        },
        isEnabled: function() {
            return document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen || this.player.container.get(0).webkitIsFullScreen || this._isFullscreen || document.msIsFullScreen
        },
        renderVHSFullscreenElement: function() {
            var b = this.player.container, c = this.player.controls, d = 1e5;
            b.data("style", b.attr("style")), b.css({
                position: "fixed",
                top: 0,
                left: 0,
                "z-index": d
            }), a('<div class="nytd-player-fullscreen"></div>').appendTo("body").css({
                width: "100%",
                height: "100%",
                background: "#000",
                position: "fixed",
                top: "0",
                left: "0",
                zIndex: d - 1
            }), a("body").data("overflow", a("body").css("overflow")), a("body").css("overflow", "hidden"), c.data("style", c.attr("style")), c.css("z-index", d + 1)
        },
        removeVHSFullscreenElement: function() {
            var b = this.player.container, c = this.player.controls;
            a("body").css("overflow", a("body").data("overflow")), b.attr("style", b.data("style")), c.attr("style", c.data("style")), a(".nytd-player-fullscreen").remove()
        }
    }, e.api.RenditionSelector = function(b) {
        this.renditionsData = null, this.activeRendition = null, this.LIMITS = a.extend({
            SD: {
                min: 360,
                max: 480
            },
            HD: {
                min: 480,
                max: 720
            }
        }, b && b.renditions ? b.renditions : {})
    }, e.api.RenditionSelector.prototype = {
        findNearest: function(a, b, c, d, e) {
            for (var f =- 1, g = a.length, h = 1080 + e, i = 0; g > i; i++) {
                var j = Math.abs(e - a[i][b]);
                h >= j && a[i][b] >= d && a[i][b] <= c && (f = i, h = j)
            }
            return f
        },
        filterByFileType: function(a, b) {
            for (var c = {}, d = [], e = b.length, f = 0; e > f; f++)
                !c.hasOwnProperty(b[f].height) && b[f] && b[f].url && b[f].url.indexOf(a)>-1 && (d.push(b[f]), c[b[f].height]=!0);
            return d
        },
        getCompatibleRenditions: function(a, b) {
            var c = this.filterByFileType("." + e.util.getSupportedType(b), a);
            if (!c.length && "flash" === b) {
                c = this.filterByFileType(".flv", a);
                for (var d = 0; d < c.length; d++)
                    c[d].url = c[d].url.replace(".flv", "")
            }
            return c.sort(function(a, b) {
                var c = a.height, d = b.height;
                return c > d ? 1 : d > c?-1 : c === d?-1 : 1
            }), c
        },
        getClosestRenditionUrl: function(a, b, c, d) {
            var e, f = c ? "HD": "SD", g = this.LIMITS[f].max, h = this.LIMITS[f].min;
            return b = c ? this.LIMITS[f].max : b, this.renditionsData = this.getCompatibleRenditions(a, d), e = this.findNearest(this.renditionsData, "height", g, h, b), - 1 === e && (e = this.renditionsData.length>>1), this.renditionsData[e].url
        },
        setActive: function(a) {
            this.activeRendition = a
        },
        getActive: function() {
            return this.activeRendition
        },
        findRenditionByUrl: function(a) {
            for (var b = 0, c = this.renditionsData.length; c > b; b++)
                if (this.renditionsData[b].url === a)
                    return this.renditionsData[b]
        }
    }, e.api.Responsive = function(b) {
        this.player = b, this.setResponsiveClass = a.proxy(this.setResponsiveClass, this), this.setResponsiveClass(), this.bindWindow()
    }, e.api.Responsive.prototype.bindWindow = function() {
        a(window).off("resize", this.setResponsiveClass), a(window).on("resize", this.setResponsiveClass)
    }, e.api.Responsive.prototype.destroy = function() {
        a(window).off("resize", this.setResponsiveClass)
    }, e.api.Responsive.classSizes = {
        XXSMALL: {
            className: "vhs-xxs",
            rule: "lte",
            size: 335
        },
        XSMALL: {
            className: "vhs-xs",
            rule: "lt",
            size: 390
        },
        SMALL: {
            className: "vhs-s",
            rule: "lt",
            size: 540
        },
        MEDIUM: {
            className: "vhs-m",
            rule: "lt",
            size: 720
        },
        LARGE: {
            className: "vhs-l",
            rule: "lt",
            size: 945
        },
        XLARGE: {
            className: "vhs-xl",
            rule: "lt",
            size: 1050
        },
        XXLARGE: {
            className: "vhs-xxl",
            rule: "gte",
            size: 1050
        }
    }, e.api.Responsive.orderedClassSizes = [e.api.Responsive.classSizes.XXSMALL, e.api.Responsive.classSizes.XSMALL, e.api.Responsive.classSizes.SMALL, e.api.Responsive.classSizes.MEDIUM, e.api.Responsive.classSizes.LARGE, e.api.Responsive.classSizes.XLARGE, e.api.Responsive.classSizes.XXLARGE], e.api.Responsive.prototype.setResponsiveClass = function() {
        var a, b, c = this.player.container, d = c.get(0).offsetWidth, f = e.api.Responsive.orderedClassSizes.length, g = e.api.Responsive.orderedClassSizes, h=!1, i = "", j = {
            lt: function(a, b) {
                return b > a
            },
            lte: function(a, b) {
                return b >= a
            },
            gte: function(a, b) {
                return a >= b
            }
        };
        for (b = 0; f > b; b++)
            a = g[b], !h && j[a.rule](d, a.size) ? (h=!0, c.addClass(a.className)) : i += a.className + " ";
        c.removeClass(i)
    }, e.api.Conviva = function(a) {
        this._player = a, this._options = a.options, this._logger = a.logger, this.LIBRARY_URL = "http://livepassdl.conviva.com/ver/2.82.0.19066/LivePass.js", this.FLASH_PLUGIN_URL = "https://livepassdl.conviva.com/OSMF/ConvivaOSMFPlugin_OSMF2_0_FP10_0.swf", this.CUSTOMER_ID = "production" === this._options.env ? "c3.NYTimes" : "c3.NYTimes-Test", this.SERVICE_URL = "production" === this._options.env ? "http://livepass.conviva.com" : "https://testonly.conviva.com", this._options.conviva && "function" == typeof this._player.getType && "html5" === this._player.getType() && this.initialize()
    }, e.api.Conviva.prototype = {
        initialize: function() {
            var a = this;
            this.utils = e.util, this.session = null, this.sessionInitialized=!1, this._isLivePassInitialized=!1, "function" == typeof Conviva && Conviva.hasOwnProperty("LivePass") ? (Conviva.LivePass.toggleTraces(this._options.debug), Conviva.LivePass.init(this.SERVICE_URL, this.CUSTOMER_ID, function(b) {
                a.livePassNotifier(b)
            })) : this.loadConvivaLibrary(function() {
                a.convivaLoaded()
            })
        },
        loadConvivaLibrary: function(b) {
            a.getScript(this.LIBRARY_URL, b)
        },
        convivaLoaded: function() {
            var a = this;
            "function" == typeof Conviva && Conviva.hasOwnProperty("LivePass") && (Conviva.LivePass.toggleTraces(this._options.debug), Conviva.LivePass.init(this.SERVICE_URL, this.CUSTOMER_ID, function(b) {
                a.livePassNotifier(b)
            }))
        },
        livePassNotifier: function(a) {
            a && 0 === a.code ? (this._logger.info("Conviva LivePass initialized successfully."), this._isLivePassInitialized=!0, this.setupListeners(), this.checkAutoplaySession()) : a && Conviva.LivePass.ready ? this._logger.info("Conviva LivePass post-initialization feedback.\n 	Code: " + a.code + ";\n 	Message: " + a.message) : a && this._logger.info("Conviva LivePass failed to initialize!\n 	Conviva metrics will not be captured! 	Code: " + a.code + "; 	Message: " + a.message)
        },
        checkAutoplaySession: function() {
            !this.sessionInitialized && this._options.autoplay && this.trackVideo()
        },
        getSource: function() {
            var a = "";
            return this._player && this._player.modules && this._player.modules.renditions && (a = this._player.modules.renditions.getActive()), a
        },
        getParams: function() {
            var a = {}, b = this._player._data ? this._player._data.headline: this._options.name, c = this._options.id ? "[" + this._options.id + "]" + b: b;
            return "function" == typeof Conviva && Conviva.hasOwnProperty("ConvivaContentInfo") && Conviva.ConvivaContentInfo && (a = Conviva.ConvivaContentInfo.createInfoForLightSession(c), a.cdnName = Conviva.ConvivaContentInfo.CDN_NAME_AKAMAI, a.streamUrl = this.getSource(), a.isLive = this._options.live, a.playerName = this._player.getPlayerType(), a.tags = {
                autoplay: this._options.autoplay,
                mode: "html5"
            }, this._logger.info("VHS::MODULE::CONVIVA:: cdnName", a.cdnName), this._logger.info("VHS::MODULE::CONVIVA:: playerName", a.playerName), this._logger.info("VHS::MODULE::CONVIVA:: streamUrl", a.streamUrl), this._logger.info("VHS::MODULE::CONVIVA:: isLive", a.isLive)), a
        },
        startConvivaSession: function() {
            if (!this.sessionInitialized && this._player && this._player.element && "function" == typeof this._player.getType && "html5" === this._player.getType()) {
                var a = this._player.element[0], b = {}, c = this._player.getDuration();
                "function" == typeof Conviva && Conviva.hasOwnProperty("LivePass") && (this.session && (Conviva.LivePass.cleanupMonitoringSession(a), this._logger.info("VHS::MODULE::CONVIVA:: cleanup session")), b = this.getParams(), this.session = Conviva.LivePass.createSession(a, b), this.session.setContentLength(c), this._logger.info("VHS::MODULE::CONVIVA:: creating session"), this.sessionInitialized=!0)
            }
        },
        endConvivaSession: function() {
            var a;
            this.session && this._player && this._player.element && "function" == typeof Conviva && Conviva.hasOwnProperty("LivePass") && (a = this._player.element[0], Conviva.LivePass.cleanupMonitoringSession(a), this._logger.info("VHS::MODULE::CONVIVA:: end session"), this.session = null, this.sessionInitialized=!1)
        },
        setupListeners: function() {
            var a = this;
            this._player.on(e.api.events.ENDED, function() {
                a._ended()
            }), this._player.on(e.api.events.AD_SKIPPED, function() {
                a._ad_skipped()
            }), this._player.on(e.api.events.AD_COMPLETED, function() {
                a._ad_completed()
            }), this._player.on(e.api.events.AD_STARTED, function() {
                a._ad_started()
            })
        },
        trackVideo: function() {
            this._logger.info("VHS::MODULE::CONVIVA:: track video"), this._isLivePassInitialized ? this.startConvivaSession() : (this._logger.info("VHS::MODULE::CONVIVA:: not initialized in time"), this._player.trigger(e.api.events.TRACKING_EVENT, {
                data: {
                    name: "conviva-not-initialized"
                }
            }))
        },
        _ad_started: function() {
            this.session && this.session.adStart()
        },
        _ad_completed: function() {
            this.session && this.session.adEnd()
        },
        _ad_skipped: function() {
            this.session && this.session.adEnd()
        },
        _ended: function() {
            this.endConvivaSession()
        }
    }, e.api.Poster = function(a) {
        this.player = a, this.ui = {
            play: ""
        }
    }, e.api.Poster.prototype = {
        getUrl: function() {
            var a, b = [];
            if ("undefined" != typeof this.player.options.poster)
                a = this.player.options.poster;
            else if (this.player._data) {
                b = this.player._data.images;
                for (var c in b)
                    "videoSmall" === b[c].type && (a = this.player.staticBaseUrl + b[c].url)
            }
            return a
        },
        render: function() {
            var b = this, c = this.getUrl(), d = ['<div class="nytd-player-poster">', "</div>"].join("");
            return c ? (this.element && this.element.remove(), this.element = a(d).css({
                width: this.player.options.width,
                height: this.player.options.height,
                background: "url(" + c + ") center center no-repeat",
                "background-size": "cover"
            }), this.player.poster = this.element, this.processCover(), this.player.container.prepend(this.element), !this.player.options.nativeControls || this.player.options.controls || this.player.options.cover || this.element.hide(), this.player.on(e.api.events.PLAYING, function() {
                b.hide()
            }), void this.player.on(e.api.events.AD_STARTED, function() {
                b.hide()
            })) : !1
        },
        renderNativePoster: function() {
            var a = this.getUrl();
            a && this.player && this.player.element && "html5" === this.player.getType() && this.player.element.attr("poster", a)
        },
        removeNativePoster: function() {
            this.player && this.player.element && "html5" === this.player.getType() && this.player.element.removeAttr("poster")
        },
        update: function() {
            var a = this.getUrl();
            this.element && a && this.element.css({
                background: "url(" + a + ") center center no-repeat",
                "background-size": "cover"
            })
        },
        handleOnClick: function() {
            var a = this;
            this.element && this.element.on("click", function() {
                a.player.rendered===!1 ? "flash" === a.player.getType() ? (a.player.on(e.api.events.VIDEO_READY, function b() {
                    a.player.play(), a.player.off(e.api.events.VIDEO_READY, b)
                }), a.player.render()) : (a.player.render(), a.player.play()) : a.player.play(), a.hide()
            })
        },
        hide: function() {
            var a = this;
            this.element&&!this.player.isIphone ? this.element.hide() : this.player.isIphone && this.player.element && this.player.element.on("webkitendfullscreen", function() {
                a.player.element.remove(), a.player.rendered=!1
            })
        },
        processCover: function() {
            this.player.options.cover&&!this.player.options.autoplay && this.renderCover()
        },
        renderCover: function() {
            var b = ['<div class="vhs-media-action-overlay">', '<i class="vhs-icon"></i>', "</div>"].join("");
            this.element && (this.ui.play = a(b), this.element.append(this.ui.play))
        }
    }, e.api.events = {
        READY: "ready",
        LOADED: "loaded",
        PLAY: "play",
        PAUSE: "pause",
        MUTE: "mute",
        PLAYING: "playing",
        PROGRESS: "progress",
        SEEKED: "seeked",
        ENDED: "ended",
        DURATION_CHANGE: "durationchange",
        TIME_UPDATE: "timeupdate",
        GO_FULLSCREEN: "gofullscreen",
        EXIT_FULLSCREEN: "exitfullscreen",
        AD_STARTED: "adstarted",
        AD_PAUSED: "adpaused",
        AD_RESUMED: "adresumed",
        AD_COMPLETED: "adcompleted",
        AD_TIME_UPDATE: "adtimeupdate",
        AD_PROGRESS: "adprogress",
        AD_SKIPPED: "adskipped",
        AD_STOPPED: "adstopped",
        RENDITION_CHANGED: "renditionchanged",
        LOADED_DATA: "loadeddata",
        RENDERED: "rendered",
        LOAD_START: "loadstart",
        ERROR: "error",
        STALLED: "stalled",
        WAITING: "waiting",
        VIDEO_READY: "video:ready",
        VIDEO_LOADING: "video:loading",
        VIDEO_FLASH_BYTES_LOADED_CHANGE: "video:flash:bytesloadedchange",
        VIDEO_FLASH_BUFFER_TIME_CHANGE: "video:flash:buffertimechange",
        HLS_END_LIST: "hlsendlist",
        HD_ON: "hdon",
        HD_OFF: "hdoff",
        SHOW_CONTROLS: "showcontrols",
        HIDE_CONTROLS: "hidecontrols",
        TRACKING_EVENT: "trackingevent"
    }, e.api.status = {
        VIDEO_PAUSED: "paused",
        AD_PAUSED: "adpaused",
        VIDEO_PLAYING: "playing",
        AD_PLAYING: "adplaying",
        VIDEO_ENDED: "ended"
    }, e.api.Player = function(b, c) {
        this.MAX_SD_RENDITION = 480, this.enableHD=!1, this.isIphone = e.util.isIphone(), this._data = null, this._evts = {}, this.poster = null, this.totalTimeToSkipAd = 15, this.skipAdThreshold = 20, this.isReady=!1, this.isLoaded=!1, this.seeking=!1, this.readyCallbacks = [], this.loadedCallbacks = [], this.instance = c, this.isTouch = "ontouchstart"in document.documentElement, this.status = e.api.status.VIDEO_PAUSED, this.videoFullscreen=!1, this.listenersInitialized=!1, this.rendered=!1, this.adPaused=!1, this.adSkipped=!1, this.hdRenditionChanging=!1, this.videoChanged=!1, this.modules = {
            fullscreen: null,
            renditions: null,
            responsive: null,
            conviva: null
        }, this.playerStartTimestamp = new Date;
        var d = this.isIphone?!1 : !0;
        this.options = a.extend({
            id: "",
            name: null,
            category: null,
            element: null,
            container: null,
            type: null,
            src: null,
            source: null,
            render: !0,
            width: 600,
            height: 338,
            muted: !1,
            loop: !1,
            preload: "none",
            autoplay: !1,
            duration: null,
            controls: d,
            nativeControls: !1,
            nativePoster: !1,
            ads: !0,
            skipAd: !0,
            cover: !0,
            freewheel: null,
            siteSection: null,
            playlist: !1,
            ratio: "16:9",
            debug: !1,
            env: "production",
            api: !0,
            usage: "vanilla_js",
            mode: null,
            live: !1,
            userInitiatedPlay: !1,
            userInitiatedNext: !1,
            autoPlayNext: !1,
            onReady: null,
            onLoaded: null,
            renditions: {},
            conviva: !0,
            enableVHSFullscreen: !1
        }, b), this.controlsIsVisible=!0, this.controlsRendered=!1, this.initialize()
    }, e.api.Player.prototype = {
        initialize: function() {
            this.logger = new e.api.Logger(this), this.setupEnvPaths(), this.options.debugSwf = this.options.debugSwf || "../../flash/vhs-debug-" + e._version + ".swf", this.swf = this.options.debug && this.options.debugSwf ? this.options.debugSwf : this.staticBaseUrl + "video/vhs/build/flash/vhs-" + e._version + ".swf", this.device = e.util.getDeviceType(), this.firstPlay=!0, this.firstEnded=!0, this.ended=!1, this.loadingVideo=!1, this.restoreHDState(), e.util.supportsAutoplay() || (this.options.autoplay=!1), !this.options.cover || this.options.poster || this.options.id && this.options.api || (this.options.cover=!1), this.validate() && this.create()
        },
        setupEnvPaths: function() {
            switch (this.options.env) {
            case"localhost":
            case"development":
                this.apiBaseUrl = "http://www.stg.nytimes.com/svc/video/api/v2/", this.staticBaseUrl = "http://static.dev.nytimes.com/", this.fwAdManager = "http://adm.fwmrm.net/p/nytimes_test/AdManager.swf", this.fwServer = "http://fw.stg.nytimes.com/ad/g/1", this.fwNetworkId = 379535, this.fwProfile = "ny_times_prop_as3_test";
                break;
            case"staging":
                this.apiBaseUrl = "http://www.stg.nytimes.com/svc/video/api/v2/", this.staticBaseUrl = "http://static.stg.nytimes.com/", this.fwAdManager = "http://adm.fwmrm.net/p/nytimes_test/AdManager.swf", this.fwServer = "http://fw.stg.nytimes.com/ad/g/1", this.fwNetworkId = 379535, this.fwProfile = "ny_times_prop_as3_test";
                break;
            default:
                this.apiBaseUrl = "http://www.nytimes.com/svc/video/api/v2/", this.staticBaseUrl = "http://graphics8.nytimes.com/", this.fwAdManager = "http://adm.fwmrm.net/p/nytimes_live/AdManager.swf", this.fwServer = "http://fw.nytimes.com/ad/g/1", this.fwNetworkId = 379536, this.fwProfile = "ny_times_prop_as3"
            }
        },
        create: function() {
            var a = this, b = this.options.id;
            this.element = this.options.element || null, this.modules.renditions = new e.api.RenditionSelector(this.options), this.detectTearsheeting(), "" !== this.options.id && this.options.api ? this.getData(b, "video", function(b) {
                a._data = b, a.renderPlayer()
            }) : this.renderPlayer(), e.styleLoaded || this.loadControlsStyle(), this.modules.fullscreen = e.util.supportsFullscreen() || this.options.enableVHSFullscreen ? new e.api.Fullscreen(this) : null
        },
        destroy: function(a) {
            this.element && (!this.element[0] || this.status !== e.api.status.VIDEO_PLAYING && this.status !== e.api.status.AD_PLAYING || "function" != typeof this.element[0].pause || this.element[0].pause(), this.adsController && ("function" == typeof this.adsController.unregisterContextListeners && this.adsController.unregisterContextListeners(), this.adsController.isContentPlaying && this.adsController.stop()), this.element.attr("src", ""), this.element.off(), this.element.unbind(), this.element.remove()), this.container && this.container.remove(), delete window.vhs_instances[this.instance], "function" == typeof a && a()
        },
        validate: function() {
            var a=!0;
            if ("" === this.options.id && null === this.options.src && null === this.options.source)
                throw a=!1, new Error("ID, SRC or SOURCE should be provided");
            if ("" === this.options.id && null === this.options.name)
                throw a=!1, new Error("NAME should be provided");
            if (null === this.options.element && null === this.options.container)
                throw a=!1, new Error("CONTAINER should be provided");
            return a
        },
        getData: function(b, c, d) {
            var e = this.apiBaseUrl + c + "/" + b, f = b;
            for (var g in window.vhs_instances)
                b === window.vhs_instances[g].options.id && (f = this.instance);
            a.ajax({
                url: e,
                cache: !0,
                dataType: "jsonp",
                context: this,
                jsonpCallback: "vhs_callback_" + f,
                success: d,
                error: function(a) {
                    this.logger.error("error", a)
                }
            })
        },
        getDuration: function() {
            var a = 0;
            return this.options.duration ? a = this.options.duration : this._data && this._data.duration ? a = this._data.duration : this.video && (a = "function" == typeof this.video.duration ? this.video.duration() : this.video.duration), a / 1e3 || 0
        },
        renderPlayer: function() {
            var b = this.options.render && this.options.cover===!1 || this.options.autoplay===!0;
            this.on(e.api.events.RENDERED, function() {
                b && this.modules.poster && this.modules.poster.handleOnClick(), this._loaded()
            }), this.modules.conviva || (this.modules.conviva = new e.api.Conviva(this)), this.registerSharedListeners(), this.renderContainer(), this.options.autoplay ? this.poster = a("<div></div>") : this.renderPoster(), this.modules.responsive || (this.modules.responsive = new e.api.Responsive(this)), this.options.ads && this.options.skipAd && this.options.controls && this.renderSkipAd(), this.plugins = new e.api.Plugins(this), b ? this.render() : this.modules.poster && this.modules.poster.handleOnClick()
        },
        renderPoster: function() {
            this.modules.poster && this.modules.poster.element ? this.modules.poster.update() : (this.modules.poster = new e.api.Poster(this), this.modules.poster.render())
        },
        render: function() {},
        renderContainer: function() {
            var b = this, c = this.options.container;
            return this.element ? (this.container = a("<div></div>"), this.container.insertAfter(this.element)) : this.container = c instanceof d ? c : a("#" + c), this.container.addClass("nytd-player-container"), "16:9" === this.options.ratio && "100%" === this.options.height && "100%" === this.options.width ? this.container.css({
                background: "#000",
                "padding-bottom": "56.25%",
                height: 0,
                position: "relative",
                overflow: "hidden",
                width: this.options.width
            }).data("ratioFix", !0) : this.container.css({
                width: this.options.width,
                height: this.options.height
            }), this.on("playing", function() {
                b.options.controls && b.isTouch && b.modules.controls.hide()
            }), this.container
        },
        loadControlsStyle: function() {
            var b = a("head"), c = this.staticBaseUrl + "video/vhs/build/vhs-" + e._version + ".css";
            this.options.debug && (c = "../../vhs-" + e._version + ".css"), e.styleLoaded || (b.append('<style type="text/css">.nytd-player-controls{ display: none; }</style>'), b.append('<link href="' + c + '" rel="stylesheet">'), e.styleLoaded=!0)
        },
        _skipAd: function() {
            this.trigger(e.api.events.AD_SKIPPED), this.skipAd()
        },
        renderSkipAd: function() {
            var b = this;
            this.skipAdElement = a('<div class="nytd-player-ad-skip-ad"><span></span><a href="#">skip ad</a></div>'), this.container.append(this.skipAdElement), this.skipAdElement.find("a").bind("click", function(a) {
                a.preventDefault(), b._skipAd()
            }), this.on(e.api.events.AD_STARTED, function() {
                b.skipAdElement && (b.skipAdElement.find("span").show(), b.skipAdElement.find("a").hide(), b.skipAdElement.show(), b.skipAdButtonVisible=!1)
            }), this.on(e.api.events.AD_COMPLETED, function() {
                b.hideSkipAd()
            }), this.on(e.api.events.AD_SKIPPED, function() {
                b.hideSkipAd()
            }), this.on(e.api.events.AD_STOPPED, function() {
                b.hideSkipAd()
            })
        },
        hideSkipAd: function() {
            this.skipAdElement && this.skipAdElement.hide()
        },
        skipAdUpdate: function(a) {
            var b, c, d = Math.round(a), e = ("0" + d).slice( - 2), f = this.skipAdElement.find("span"), g = this.skipAdElement.find("a"), h = Math.round(this.adDuration());
            h >= this.skipAdThreshold ? d > this.totalTimeToSkipAd ? (b = d - this.totalTimeToSkipAd, c = ("0" + b).slice( - 2), f.html("YOU CAN SKIP THIS AD IN " + c + " SECONDS")) : this.skipAdButtonVisible || (f.hide(), g.show(), this.skipAdButtonVisible=!0) : f.html("YOUR VIDEO WILL START IN " + e + " SECONDS")
        },
        renderControls: function() {
            this.modules.controls || (this.modules.controls = new e.api.Controls(this), this.modules.controls.initialize(), this.controls = this.modules.controls.element, this.modules.controls.renderHdButton(this._data && this._data.renditions&&!this.options.live))
        },
        _loaded: function() {
            "function" == typeof this.options.onLoaded && this.options.onLoaded.apply(this);
            for (var a = this.loadedCallbacks.length, b = 0; a > b; b++)
                "function" == typeof this.loadedCallbacks[b] && this.loadedCallbacks[b].apply(this);
            this.isLoaded=!0, this.container.data("loaded", !0), this.container.trigger(e.api.events.LOADED, this), this.trigger(e.api.events.LOADED)
        },
        loaded: function(a) {
            this.isLoaded ? a.apply(this) : this.loadedCallbacks.push(a)
        },
        _ready: function() {
            "function" == typeof this.options.onReady && this.options.onReady.apply(this);
            for (var a = this.readyCallbacks.length, b = 0; a > b; b++)
                "function" == typeof this.readyCallbacks[b] && this.readyCallbacks[b].apply(this);
            this.isReady=!0, this.container.data("ready", !0), this.container.trigger(e.api.events.READY, this), this.trigger(e.api.events.READY), this.readyCallbacks = []
        },
        ready: function(a) {
            this.isReady ? a.apply(this) : this.readyCallbacks.push(a)
        },
        on: function(a, b) {
            if ("function" != typeof b)
                throw new Error("The callback argument should be a function");
            this._evts[a] = this._evts[a] || [], this._evts[a].push(b)
        },
        off: function(a, b) {
            var c;
            if (this._evts.hasOwnProperty(a)) {
                if (!b)
                    return void delete this._evts[a];
                c = this._evts[a] || [];
                for (var d = 0, e = c.length; e > d; d++)
                    if (c[d] === b) {
                        c.splice(d, 1);
                        break
                    }
            }
        },
        trigger: function(a, b) {
            if (this._evts && "object" == typeof this._evts)
                for (var c in this._evts)
                    if (c === a)
                        for (var d = 0; d < this._evts[c].length; d++)
                            "function" == typeof this._evts[c][d] && this._evts[c][d].call(this, b)
        },
        toggleFullscreen: function() {
            this.fullscreen(!this.isFullscreen())
        },
        isFullscreen: function() {
            return this.modules.fullscreen.isEnabled()
        },
        fullscreen: function(a) {
            if (!this.modules.fullscreen)
                return !1;
            var b = this.modules.fullscreen, c = a===!1?!1 : !0;
            c && this.poster && this.poster.hide(), c ? b.enter() : b.exit()
        },
        getSiteSection: function() {
            function b(a) {
                var b = "" === a ? "none": a;
                return b.replace(/[^a-zA-Z]/g, "").toLowerCase()
            }
            var c = a('meta[name="CG"]').attr("content") || "", d = a('meta[name="SCG"]').attr("content") || "", e = a('meta[name="PT"]').attr("content") || "", f = b(c) + "_" + b(d) + "_" + b(e);
            return f
        },
        getPlayerType: function() {
            var b = a('meta[name="PT"]').attr("content"), c = a('meta[name="PST"]').attr("content"), d = a('meta[name="slug"]').attr("content"), e = b && c ? b.toLowerCase() + "-" + c.toLowerCase(): null, f = null;
            return this.options.type ? f = this.options.type : "multimedia-interactive" === e && d ? f = e + "|" + d : e ? f = e : this.logger.error("Player TYPE should be provided"), f
        },
        togglePlay: function() {
            this.status !== e.api.status.VIDEO_PLAYING && this.status !== e.api.status.AD_PLAYING ? this.play() : this.pause()
        },
        hideControls: function() {
            this.modules && this.modules.controls && this.modules.controls.hide()
        },
        showControls: function() {
            this.modules && this.modules.controls && this.modules.controls.show()
        },
        registerSharedListeners: function() {
            this.on(e.api.events.PLAY, function() {
                this.firstPlay=!1, this.pauseOtherPlayers()
            }), this.on(e.api.events.AD_STARTED, function() {
                this.firstPlay=!1, this.pauseOtherPlayers()
            }), this.on(e.api.events.AD_RESUMED, function() {
                this.pauseOtherPlayers()
            }), this.on(e.api.events.HLS_END_LIST, function() {
                this.options.live=!1
            })
        },
        pauseOtherPlayers: function() {
            if (!e.config.allowMultiplePlayers)
                for (var a in window.vhs_instances)
                    this.instance !== a && window.vhs_instances[a].pause()
        },
        triggerHDEvent: function() {
            this.enableHD ? (c.enabled && c.set("nytvhshd", "1"), this.trigger(e.api.events.HD_ON)) : (c.enabled && c.set("nytvhshd"), this.trigger(e.api.events.HD_OFF))
        },
        restoreHDState: function() {
            this.enableHD = "1" === c.get("nytvhshd")
        },
        detectTearsheeting: function() {
            e.config.ts || (e.config.ts=!0, function(a) {
                var b, c, d, e, f, g = window.location.search, h = "", i = "_ro", j = 1;
                if (g) {
                    if (b = /[&?]tsdel=/.exec(g), !b) {
                        if (c = /[&?]tspid=([^&#]*)/.exec(g), !c)
                            return;
                        f = c[1], d = a ? "tearsheet.fw.nytimes.com" : "tearsheet.fw.stg.nytimes.com", h = encodeURIComponent(["Candidate-Ads=", f, ";", "Internal-Call;", "Opt-Out;", "Testing-Placement=true;", "Commercial-Pattern=14852;;", "Target-Server;", "domain=", d, ";", "Reload-Ads=", f].join(""))
                    }
                    e = new Date, e.setTime(e.getTime() + 24 * j * 60 * 60 * 1e3), document.cookie = i + "=" + h + ";expires=" + e + ";domain=.nytimes.com;path=/"
                }
            }("production" === this.options.env))
        }
    }, e.api.HtmlFive = function(a, b) {
        e.api.Player.call(this, a, b)
    }, e.api.HtmlFive.prototype = e.util.extend(e.api.Player.prototype), e.api.HtmlFive.prototype.getType = function() {
        return "html5"
    }, e.api.HtmlFive.prototype.load = function(a, b) {
        var c = this, d = b ||!1;
        this.loadingVideo=!0, this.hdRenditionChanging=!1, this.getData(a, "video", function(a) {
            c._data = a, c.plugins.reload(), c.renderSource(), c.trigger(e.api.events.LOAD_START), c.modules.poster && (c.modules.poster.update(), c.options.nativePoster && c.modules.poster.removeNativePoster()), c.element[0].load(), c.adPlaying() && c.trigger(e.api.events.AD_STOPPED), c.adsController && (c.adsController.isCompleted=!1, c.adsController.isContentPlaying=!1), d && c.play()
        })
    }, e.api.HtmlFive.prototype.render = function() {
        this.on(e.api.events.LOADED, function() {
            this.options.muted && this.mute(!0), this.trigger(e.api.events.LOAD_START)
        }), this.renderElement(), this.container.append(this.element), this.renderElementAttr(), this.renderSource(), this.options.controls&&!this.options.nativeControls && (this.renderControls(), this.element.find("source").on("error", a.proxy(this.modules.controls.onSourceError, this.modules.controls))), this.element.data("instance", this), this.registerListeners(), this.rendered=!0, this.trigger(e.api.events.RENDERED)
    }, e.api.HtmlFive.prototype.renderElement = function() {
        if (this.options.element) {
            var b = this.options.element;
            this.element = b.clone(!0), b.remove()
        } else 
            this.element = a("<video />")
    }, e.api.HtmlFive.prototype.renderElementAttr = function() {
        var a = this.element.attr("id"), b = this.options.cover || this.options.autoplay ? "auto": this.options.preload;
        this.element.attr({
            preload: b,
            "x-webkit-airplay": "allow"
        }), this.element.css({
            height: "100%",
            width: "100%"
        }), "16:9" === this.options.ratio && "100%" === this.options.height && "100%" === this.options.width && this.element.css({
            position: "absolute",
            top: 0,
            left: 0
        }), this.options.autoplay && this.element.attr("autoplay", "autoplay"), this.options.loop && this.element.attr("loop", "loop"), this.options.src && this.element.attr("src", this.options.src), a && "" !== a || this.element.attr("id", "video_" + (new Date).getTime()), (this.options.nativeControls || "android_legacy" === this.device || "ie_mobile" === this.device) && (this.options.nativeControls=!0, this.element.attr("controls", "controls")), this.modules.poster && this.options.nativePoster && this.modules.poster.renderNativePoster()
    }, e.api.HtmlFive.prototype.renderSource = function() {
        var b, c;
        if (this.options.src)
            c = this.options.src;
        else if (this.options.source) {
            this.element.empty();
            for (var d in this.options.source)
                b = a("<source />"), b.attr({
                    src: this.options.source[d],
                    type: d
                }), this.element.append(b)
        } else 
            this._data && this._data.renditions && (c = this.modules.renditions.getClosestRenditionUrl(this._data.renditions, this.element.height(), this.enableHD));
        this.element.attr("src", c), this.modules.renditions.setActive(c), this.videoChanged=!0
    }, e.api.HtmlFive.prototype.adPlaying = function() {
        return this.adsController && this.adsController.isContentPlaying?!0 : !1
    }, e.api.HtmlFive.prototype.adInitializing = function() {
        return this.adsController && this.adsController.isInitializing?!0 : !1
    }, e.api.HtmlFive.prototype.adCompleted = function() {
        return this.adsController && this.adsController.isCompleted?!0 : !1
    }, e.api.HtmlFive.prototype.fixForAndroidHLSBug = function() {
        "android_jellybean" === this.device && this.firstEnded && (this.pause(), this.play(), this.firstEnded=!1)
    }, e.api.HtmlFive.prototype.registerListeners = function() {
        var a = this, b = this.element.attr("controls");
        this.video = this.element[0], this.listenersInitialized===!1 && (this.element.bind(e.api.events.LOADED_DATA, function() {
            a._ready()
        }), this.element.bind("play", function() {
            a.logger.log("html5 play event");
            var b = "android_legacy" === this.device || "android_ics" === this.device?!1 : !0;
            a.options.ads&&!a.adPlaying()&&!a.adCompleted() && b ? a.adsController ? a.adsController.nextAd(function() {
                this.start()
            }) : a.adsController = new e.html.Ads(a, function() {
                this.start()
            }) : a.adPaused&&!a.adCompleted() ? (a.adPaused=!1, a.status = e.api.status.AD_PLAYING, a.trigger(e.api.events.AD_RESUMED), a.loadingVideo=!1) : a.adPlaying() ? a.loadingVideo=!1 : (a.status = e.api.status.VIDEO_PLAYING, a.trigger(e.api.events.PLAY), a.loadingVideo=!1), e.focused = a, a.ended=!1
        }), b || this.isTouch || this.element.bind("click", function(b) {
            b.stopPropagation(), a.togglePlay()
        }), this.element.bind("playing", function() {
            a.logger.log("html5 playing event"), a.modules.poster && a.modules.poster.hide(), a.adPlaying() || a.adInitializing() || (a.status = e.api.status.VIDEO_PLAYING, a.trigger(e.api.events.PLAYING)), a.ended=!1
        }), this.element.bind("progress", function(b) {
            a.adPlaying() ? a.trigger(e.api.events.AD_PROGRESS, b) : a.trigger(e.api.events.PROGRESS, b)
        }), this.element.bind("timeupdate", function() {
            a.adPlaying() ? a.trigger(e.api.events.AD_TIME_UPDATE, a.video.currentTime) : a.trigger(e.api.events.TIME_UPDATE, a.video.currentTime)
        }), this.element.bind("seeked", function() {
            a.logger.log("html5 seeked event"), a.adPlaying() || a.trigger(e.api.events.SEEKED)
        }), this.element.bind("pause", function() {
            a.logger.log("html5 pause event"), a.adPlaying() || a.adInitializing()?!a.element ||!a.element[0] || a.element[0].ended || a.ended ||!a.adPlaying() || a.adSkipped || a.loadingVideo || (a.adPaused=!0, a.trigger(e.api.events.AD_PAUSED), a.status = e.api.status.AD_PAUSED) : !a.element ||!a.element[0] || a.element[0].ended || a.ended || a.loadingVideo || (a.trigger(e.api.events.PAUSE), a.status = e.api.status.VIDEO_PAUSED)
        }), this.element.bind("durationchange", function() {
            a.trigger(e.api.events.DURATION_CHANGE, a.element[0].duration || 0)
        }), this.element.bind("ended", function() {
            a.logger.log("html5 ended event"), a.adPlaying() || (a.status = e.api.status.VIDEO_ENDED, a.trigger(e.api.events.ENDED)), a.options.live && a.fixForAndroidHLSBug(), a.ended=!0
        }), this.element.bind(e.api.events.ERROR, function(b) {
            a.logger.log("html5 error event", b), a.trigger(e.api.events.ERROR, b)
        }), this.element.bind(e.api.events.STALLED, function(b) {
            a.logger.log("html5 stalled event", b), a.trigger(e.api.events.STALLED, b)
        }), this.element.bind(e.api.events.WAITING, function() {
            a.logger.log("html5 waiting event"), a.trigger(e.api.events.WAITING)
        }), this.listenersInitialized=!0)
    }, e.api.HtmlFive.prototype.reloadVideo = function() {
        this.element && this.element.length > 0 && (this.element[0].load(), this.element[0].play(), this.trigger(e.api.events.LOAD_START))
    }, e.api.HtmlFive.prototype.toggleVolume = function() {
        this.mute(!this.isMuted())
    }, e.api.HtmlFive.prototype.duration = function() {
        return this.element[0].duration || 0
    }, e.api.HtmlFive.prototype.play = function() {
        var a = this, b = function() {
            a.videoChanged && (a.options.conviva && a.modules && a.modules.conviva && a.modules.conviva.trackVideo(), a.videoChanged=!1)
        };
        this.options.render || this.rendered ? (b(), this.element[0].play()) : "desktop" === e.util.getDeviceType() ? (this.element.bind("loadstart", function() {
            a.element[0].play()
        }), this.render(), b()) : (this.render(), b(), this.element[0].play())
    }, e.api.HtmlFive.prototype.pause = function() {
        this.status !== e.api.status.VIDEO_PAUSED && (this.element[0].pause(), this.status = e.api.status.VIDEO_PAUSED)
    }, e.api.HtmlFive.prototype.mute = function(a) {
        var b;
        b = a===!1?!1 : !0, this.element[0].muted = b, this.trigger(e.api.events.MUTE, b)
    }, e.api.HtmlFive.prototype.isMuted = function() {
        var a = this.element[0].muted;
        return a
    }, e.api.HtmlFive.prototype.seek = function(a) {
        var b = this.element[0];
        if ("number" != typeof a)
            throw new Error("time argument should be a Number");
        if (0 > a || a > b.duration)
            throw new Error("time should be greater than 0 and lower than the duration of the video");
        b.currentTime = a
    }, e.api.HtmlFive.prototype.skipAd = function() {
        this.adSkipped=!0, this.adsController.stop()
    }, e.api.HtmlFive.prototype.adDuration = function() {
        return this.element[0].duration
    }, e.api.HtmlFive.prototype.toggleHD = function() {
        var a = this, b = this.element.get(0), c = b.currentTime;
        this.hdRenditionChanging=!0, this.enableHD=!this.enableHD, b.pause(), this.renderSource(), this.triggerHDEvent(), this.element.one("canplaythrough", function() {
            b.currentTime = c, b.play()
        }), this.element.one("seeked", function() {
            a.hdRenditionChanging=!1
        }), b.load()
    }, e.html.Ads = function(a, b) {
        var c = this, d=!0;
        switch (this.player = a, this.callback = b, this.adsLoaded=!1, this.serverURL = "http://fw.nytimes.com/ad/g/1", this.siteSectionId = this.player.options.siteSection || this.player.options.freewheel || this.player.getSiteSection(), this.isCompleted=!1, this.isContentPlaying=!1, this.currentSlot = null, this.isInitializing=!0, this.adStarted=!1, this.player.options.env) {
        case"development":
        case"staging":
            this.networkId = 379535, this.profileId = "379535:ny_times_js_test", this.adManagerUrl = "http://adm.fwmrm.net/p/nytimes_test/AdManager.js", this.serverURL = "http://fw.stg.nytimes.com/ad/g/1", d=!1;
            break;
        default:
            this.networkId = 379536, this.profileId = "379536:ny_times_js_live", this.adManagerUrl = "http://adm.fwmrm.net/p/nytimes_live/AdManager.js"
        }
        this.player.element[0].pause(), this.loadAdManager(function() {
            c.adManager = new tv.freewheel.SDK.AdManager, c.adManager.setNetwork(c.networkId), c.adManager.setServer(c.serverURL), c.setupAdContext()
        })
    }, e.html.Ads.prototype.nextAd = function(a) {
        this.callback = a, this.isCompleted=!1, this.setupAdContext()
    }, e.html.Ads.prototype.loadAdManager = function(b) {
        var c = this;
        a.ajax({
            url: c.adManagerUrl,
            cache: !0,
            dataType: "script",
            success: function() {
                b.call(c)
            }
        })
    }, e.html.Ads.prototype.setupAdContext = function() {
        var a = (this.player.element, this.player.element.attr("id"), this.player.container.attr("id")), b = this.player.getDuration(), c = this.player.instance;
        this.player._data && this.player._data.id ? c = this.player._data.id : this.player.options && this.player.options.id && (c = this.player.options.id), this.theContext && (this.unregisterContextListeners(), this.theContext.dispose()), this.theContext = this.adManager.newContext(), this.theContext.registerVideoDisplayBase(a), this.theContext.setProfile(this.profileId), this.theContext.setVideoAsset(c, b, this.networkId), this.theContext.setSiteSection(this.siteSectionId, this.networkId), this.registerContextListeners(), this.theContext.setParameter(tv.freewheel.SDK.PARAMETER_RENDERER_VIDEO_START_DETECT_TIMEOUT, 1e4, tv.freewheel.SDK.PARAMETER_LEVEL_GLOBAL), this.theContext.setParameter(tv.freewheel.SDK.PARAMETER_RENDERER_VIDEO_PROGRESS_DETECT_TIMEOUT, 1e4, tv.freewheel.SDK.PARAMETER_LEVEL_GLOBAL), this.theContext.setParameter(tv.freewheel.SDK.PARAMETER_RENDERER_VIDEO_DISPLAY_CONTROLS_WHEN_PAUSE, !1, tv.freewheel.SDK.PARAMETER_LEVEL_GLOBAL), this.theContext.addTemporalSlot("Preroll_1", tv.freewheel.SDK.ADUNIT_PREROLL, 0), this.theContext.submitRequest(2)
    }, e.html.Ads.prototype.registerContextListeners = function() {
        this.theContext.addEventListener(tv.freewheel.SDK.EVENT_REQUEST_COMPLETE, a.proxy(this.onRequestComplete, this)), this.theContext.addEventListener(tv.freewheel.SDK.EVENT_SLOT_ENDED, a.proxy(this.onSlotEnded, this)), this.theContext.addEventListener(tv.freewheel.SDK.EVENT_SLOT_STARTED, a.proxy(this.onSlotStarted, this))
    }, e.html.Ads.prototype.unregisterContextListeners = function() {
        this.theContext.removeEventListener(tv.freewheel.SDK.EVENT_REQUEST_COMPLETE), this.theContext.removeEventListener(tv.freewheel.SDK.EVENT_SLOT_ENDED), this.theContext.removeEventListener(tv.freewheel.SDK.EVENT_SLOT_STARTED)
    }, e.html.Ads.prototype.onRequestComplete = function(a) {
        if (this.adsLoaded=!0, this.prerollSlots = [], this.midrollSlots = [], this.overlaySlots = [], this.postrollSlots = [], a.success)
            for (var b = this.theContext.getTemporalSlots(), c = 0, d = b.length; d > c; c++) {
                var e = b[c];
                switch (e.getTimePositionClass()) {
                case tv.freewheel.SDK.TIME_POSITION_CLASS_PREROLL:
                    this.prerollSlots.push(e);
                    break;
                case tv.freewheel.SDK.TIME_POSITION_CLASS_MIDROLL:
                    this.midrollSlots.push(e);
                    break;
                case tv.freewheel.SDK.TIME_POSITION_CLASS_OVERLAY:
                    this.overlaySlots.push(e);
                    break;
                case tv.freewheel.SDK.TIME_POSITION_CLASS_POSTROLL:
                    this.postrollSlots.push(e)
                }
            }
        this.prerollSlots && this.prerollSlots.length ? this.callback(null, this.prerollSlots) : this.callback(new Error("No prerolls available"))
    }, e.html.Ads.prototype.getState = function() {
        return this.isCompleted
    }, e.html.Ads.prototype.onSlotStarted = function(a) {
        var b = a.slot.getTimePositionClass(), c = a.slot.getTotalDuration();
        if (c > 0)
            switch (b) {
            case tv.freewheel.SDK.TIME_POSITION_CLASS_PREROLL:
                this.isCompleted=!1, this.isContentPlaying=!0, this.adStarted=!0, this.setCurrentlyPlayingSlot(this.prerollSlots[0]), this.player.trigger(e.api.events.AD_STARTED)
            }
        }, e.html.Ads.prototype.onSlotEnded = function(a) {
        var b = a.slot.getTimePositionClass(), c = a.slot.getTotalDuration();
        switch (b) {
        case tv.freewheel.SDK.TIME_POSITION_CLASS_PREROLL:
            this.prerollSlots.length && (this.prerollSlots.shift(), this.prerollSlots.length ? (this.prerollSlots[0].play(), this.setCurrentlyPlayingSlot(this.prerollSlots[0])) : this.resumeContent(c));
            break;
        case tv.freewheel.SDK.TIME_POSITION_CLASS_POSTROLL:
        case tv.freewheel.SDK.TIME_POSITION_CLASS_MIDROLL:
        case tv.freewheel.SDK.TIME_POSITION_CLASS_OVERLAY:
        case tv.freewheel.SDK.TIME_POSITION_CLASS_DISPLAY:
        }
    }, e.html.Ads.prototype.setPlayerSource = function() {
        var a = this.player.modules.renditions.getActive(), b = this.player.element.find("source").length > 0;
        b ? this.player.element.removeAttr("src") : this.player.element.attr("src", a)
    }, e.html.Ads.prototype.resumeContent = function(a) {
        var b = this;
        !this.player.adSkipped && (a && a > 0 || this.adStarted) && this.player.trigger(e.api.events.AD_COMPLETED), this.adStarted=!1, this.isCompleted=!0, this.isContentPlaying=!1, this.setPlayerSource(), this.player.element[0].load(), this.player.element[0].play(), this.setCurrentlyPlayingSlot(null), this.theContext.setVideoState(tv.freewheel.SDK.VIDEO_STATE_PLAYING), this.player.on(e.api.events.ENDED, function() {
            b.theContext.setVideoState(tv.freewheel.SDK.VIDEO_STATE_COMPLETED)
        }), this.player.adSkipped=!1
    }, e.html.Ads.prototype.setCurrentlyPlayingSlot = function(a) {
        this.currentSlot = a
    }, e.html.Ads.prototype.start = function() {
        this.isInitializing=!1, this.prerollSlots && this.prerollSlots.length ? (this.isCompleted=!1, this.isContentPlaying=!0, this.setCurrentlyPlayingSlot(this.prerollSlots[0]), this.prerollSlots[0].play()) : this.resumeContent()
    }, e.html.Ads.prototype.stop = function() {
        this.currentSlot && this.currentSlot.stop()
    }, e.html.Ads.prototype.pause = function() {
        this.player.element[0].pause()
    }, e.html.Ads.prototype.resume = function() {
        this.player.element[0].play()
    }, e.api.Flash = function(a, b) {
        e.api.Player.call(this, a, b)
    }, e.api.Flash.prototype = e.util.extend(e.api.Player.prototype), e.api.Flash.prototype.getType = function() {
        return "flash"
    }, e.api.Flash.prototype.load = function(a, b) {
        var c = this, d = b ||!1;
        this.hdRenditionChanging=!1, this.adPlaying() && this.stopAd(), this.getData(a, "video", function(a) {
            c._data = a, c.plugins.reload(), c.renderSource(), this.trigger(e.api.events.LOAD_START), c.modules.poster && c.modules.poster.update(), d && c.play()
        })
    }, e.api.Flash.prototype.render = function() {
        this.element && this.element.remove(), this.renderElement(), this.options.controls&&!this.options.nativeControls && this.renderControls()
    }, e.api.Flash.prototype.renderElement = function() {
        var c = "video_" + (new Date).getTime(), d = {
            instance: this.instance
        }, f = this, g = a("<div></div>");
        g.attr("id", c), this.container.append(g), this.options.muted && (d.muted=!0), d.live = this.options.live, d.ads = this.options.ads, d.id = this.options.id || "", d.autoplay = this.options.autoplay, d.env = this.options.env, d.type = this.getPlayerType(), d.ads && (d.mediaLocation = this.options.live ? this.options.src : null, d.fwAdManager = this.fwAdManager, d.fwServer = this.fwServer, d.fwNetworkId = this.fwNetworkId, d.fwProfile = this.fwProfile, d.fwSiteSection = this.options.siteSection || this.options.freewheel || this.getSiteSection()), d.conviva = this.options.conviva, this.modules.conviva && (d.CONVIVA_PLUGIN_URL = this.modules.conviva.FLASH_PLUGIN_URL, d.CONVIVA_CUSTOMER_ID = this.modules.conviva.CUSTOMER_ID, d.CONVIVA_SERVICE_URL = this.modules.conviva.SERVICE_URL);
        var h = {
            allowFullScreen: !0,
            allowScriptAccess: "always",
            wmode: "opaque",
            seamlessTabbing: !1,
            swliveconnect: !0,
            quality: "high",
            bgcolor: "#000000"
        }, i = {
            id: c
        }, j = function(a) {
            f.logger.log("Flash Render Callback", a)
        };
        this.options.autoplay && this.on(e.api.events.VIDEO_READY, function() {
            f.logger.log("VIDEO_READY RECEIVED FROM FLASH FOR AUTOPLAY"), f.play(), f.off(e.api.events.VIDEO_READY)
        }), b.embedSWF(this.swf, c, "100%", "100%", "10.1", null, d, h, i, j)
    }, e.api.Flash.prototype.externalInterface = function() {
        this.logger.log("ExternalInterface initialized"), this.element = this.container.find("object"), this.element.data("instance", this), this.video = this.element[0], this.trigger(e.api.events.RENDERED), this.renderSource(), this.trigger(e.api.events.LOAD_START), this.registerListeners(), this.rendered=!0, this._ready()
    }, e.api.Flash.prototype.renderSource = function() {
        var a, b = this.options, c = b.id, d = b.name, e = this.hdUserInteraction ? "true": "false";
        if (b.src)
            a = this.options.src;
        else if (b.source)
            for (var f in b.source)
                "video/mp4" === f && (a = b.source[f]);
        else {
            if (!this._data ||!this._data.renditions)
                throw new Error("at least one rendition should be provided.");
            c = this._data.id, d = this._data.headline, a = this.modules.renditions.getClosestRenditionUrl(this._data.renditions, this.element.height(), this.enableHD, this.getType())
        }
        this.modules.renditions.setActive(a), this.video.loadPlayerData({
            id: c,
            name: d,
            url: a,
            type: "video/mp4",
            duration: this.getDuration(),
            hdInteraction: e
        })
    }, e.api.Flash.prototype.registerListeners = function() {}, e.api.Flash.prototype.duration = function() {
        var a = this.element[0];
        return a.duration() || 0
    }, e.api.Flash.prototype.skipAd = function() {
        this.video && this.video.skipAd()
    }, e.api.Flash.prototype.stopAd = function() {
        this.video && (this.video.stopAd(), this.trigger(e.api.events.AD_STOPPED))
    }, e.api.Flash.prototype.playAd = function() {
        this.video && this.video.playAd()
    }, e.api.Flash.prototype.pauseAd = function() {
        this.video && this.video.pauseAd()
    }, e.api.Flash.prototype.stop = function() {
        this.video && this.video.stopVideo()
    }, e.api.Flash.prototype.play = function() {
        this.adPlaying() ? this.playAd() : this.video && this.video.playVideo && this.video.playVideo()
    }, e.api.Flash.prototype.pause = function() {
        if (this.rendered) {
            if (this.adPlaying())
                this.pauseAd();
            else {
                if (!this.isContentPlaying())
                    return;
                this.video.pauseVideo()
            }
            this.status = e.api.status.VIDEO_PAUSED
        }
    }, e.api.Flash.prototype.isContentPlaying = function() {
        return this.video.isContentPlaying()
    }, e.api.Flash.prototype.adPlaying = function() {
        return this.video.adPlaying()
    }, e.api.Flash.prototype.adCompleted = function() {
        return this.video.adComplete()
    }, e.api.Flash.prototype.adDuration = function() {
        return this.video.adDuration()
    }, e.api.Flash.prototype.adCurrentTime = function() {
        return this.video.adCurrentTime()
    }, e.api.Flash.prototype.seek = function(a) {
        if ("number" != typeof a)
            throw new Error("time argument should be a Number");
        if (0 > a || a > this.video.duration())
            throw new Error("time should be greater than 0 and lower than the duration of the video");
        this.video.seek({
            seconds: a
        })
    }, e.api.Flash.prototype.reloadVideo = function() {
        this.renderSource(), this.trigger(e.api.events.LOAD_START);
        var a = this;
        this.on(e.api.events.VIDEO_READY, function() {
            a.logger.log("Flash VIDEO_READY"), a.play(), a.off(e.api.events.VIDEO_READY)
        })
    }, e.api.Flash.prototype.mute = function(a) {
        this.video && (a ? this.video.mute() : this.video.unmute())
    }, e.api.Flash.prototype.unmute = function() {
        this.video && this.video.unmute()
    }, e.api.Flash.prototype.toggleVolume = function() {
        this.video && this.mute(!this.video.isMuted())
    }, e.api.Flash.prototype.toggleHD = function(a) {
        var b = this.video.currentTime(), c = this;
        this.on(e.api.events.VIDEO_READY, function() {
            c.logger.log("Flash HD Rendition Switch VIDEO_READY"), c.play(), c.seek(b), c.off(e.api.events.VIDEO_READY), c.hdRenditionChanging=!1
        }), this.hdRenditionChanging=!0, this.enableHD=!this.enableHD, this.hdUserInteraction = null !== a.type.match(/(click|touch)/gi), this.pause(), this.renderSource(), this.hdUserInteraction=!1, this.triggerHDEvent()
    }, window.vhs_instances = window.vhs_instances || {}, e.styleLoaded=!1, e.player = function(a) {
        var b, c = (new Date).getTime(), d = "player_" + Math.round(Math.random() * c), f = e.util;
        return a.mode = a.mode || "flash", !f.getSupportedType() || f.checkFlashSupport() && "html5" !== a.mode ? (a.mode = "flash", b = new e.api.Flash(a, d)) : (a.mode = "html5", a.source && e.util.isIE9() && (a.ads=!1), b = new e.api.HtmlFive(a, d)), b && (window.vhs_instances[d] = b), b
    }, e.auto = function() {
        var b, c, d, f, g = a("figure[data-nytd]");
        if (g.length > 0)
            for (b = 0, c = g.length; c > b; b++)
                f = g.eq(b), d = f.data("setup") || {}, d.id = d.nytd || f.data("nytd"), d.container = f, d.usage = "figure_tag", e.player(d)
    }, e.shortcuts = function() {
        var b = function(a) {
            var b = e.focused;
            if (b)
                switch (32 === a.keyCode && a.preventDefault(), a.keyCode) {
                case 32:
                    b.togglePlay();
                    break;
                case 102:
                case 70:
                    b.fullscreen();
                    break;
                case 38:
                    break;
                case 40:
                    break;
                case 37:
                    b.seek(b.element[0].currentTime - 10);
                    break;
                case 39:
                    b.seek(b.element[0].currentTime + 10)
                }
        };
        a(document).unbind("keydown.vhs").bind("keydown.vhs", b), a(document).bind("click.vhs", function() {
            e.focused = null
        }), a(function() {
            e.auto()
        })
    }, e._version = "2.1.1", e.shortcuts(), e
});
