/*! jQuery v1.7.2 jquery.com | jquery.org/license */
(function(a, b) {
    function cy(a) {
        return f.isWindow(a) ? a : a.nodeType === 9 ? a.defaultView || a.parentWindow : !1;
    }
    function cu(a) {
        if (!cj[a]) {
            var b = c.body, d = f("<" + a + ">").appendTo(b), e = d.css("display");
            d.remove();
            if (e === "none" || e === "") {
                ck || (ck = c.createElement("iframe"), ck.frameBorder = ck.width = ck.height = 0), b.appendChild(ck);
                if (!cl ||!ck.createElement) {
                    cl = (ck.contentWindow || ck.contentDocument).document, cl.write((f.support.boxModel ? "<!doctype html>" : "") + "<html><body>"), cl.close();
                }
                d = cl.createElement(a), cl.body.appendChild(d), e = f.css(d, "display"), b.removeChild(ck);
            }
            cj[a] = e;
        }
        return cj[a];
    }
    function ct(a, b) {
        var c = {};
        f.each(cp.concat.apply([], cp.slice(0, b)), function() {
            c[this] = a;
        });
        return c;
    }
    function cs() {
        cq = b;
    }
    function cr() {
        setTimeout(cs, 0);
        return cq = f.now();
    }
    function ci() {
        try {
            return new a.ActiveXObject("Microsoft.XMLHTTP");
        } catch (b) {}
    }
    function ch() {
        try {
            return new a.XMLHttpRequest;
        } catch (b) {}
    }
    function cb(a, c) {
        a.dataFilter && (c = a.dataFilter(c, a.dataType));
        var d = a.dataTypes, e = {}, g, h, i = d.length, j, k = d[0], l, m, n, o, p;
        for (g = 1; g < i; g++) {
            if (g === 1) {
                for (h in a.converters) {
                    typeof h == "string" && (e[h.toLowerCase()] = a.converters[h]);
                }
            }
            l = k, k = d[g];
            if (k === "*") {
                k = l;
            } else {
                if (l !== "*" && l !== k) {
                    m = l + " " + k, n = e[m] || e["* " + k];
                    if (!n) {
                        p = b;
                        for (o in e) {
                            j = o.split(" ");
                            if (j[0] === l || j[0] === "*") {
                                p = e[j[1] + " " + k];
                                if (p) {
                                    o = e[o], o===!0 ? n = p : p===!0 && (n = o);
                                    break;
                                }
                            }
                        }
                    }
                    !n&&!p && f.error("No conversion from " + m.replace(" ", " to ")), n!==!0 && (c = n ? n(c) : p(o(c)));
                }
            }
        }
        return c;
    }
    function ca(a, c, d) {
        var e = a.contents, f = a.dataTypes, g = a.responseFields, h, i, j, k;
        for (i in g) {
            i in d && (c[g[i]] = d[i]);
        }
        while (f[0] === "*") {
            f.shift(), h === b && (h = a.mimeType || c.getResponseHeader("content-type"));
        }
        if (h) {
            for (i in e) {
                if (e[i] && e[i].test(h)) {
                    f.unshift(i);
                    break;
                }
            }
        }
        if (f[0] in d) {
            j = f[0];
        } else {
            for (i in d) {
                if (!f[0] || a.converters[i + " " + f[0]]) {
                    j = i;
                    break;
                }
                k || (k = i);
            }
            j = j || k;
        }
        if (j) {
            j !== f[0] && f.unshift(j);
            return d[j];
        }
    }
    function b_(a, b, c, d) {
        if (f.isArray(b)) {
            f.each(b, function(b, e) {
                c || bD.test(a) ? d(a, e) : b_(a + "[" + (typeof e == "object" ? b : "") + "]", e, c, d);
            });
        } else {
            if (!c && f.type(b) === "object") {
                for (var e in b) {
                    b_(a + "[" + e + "]", b[e], c, d);
                }
            } else {
                d(a, b);
            }
        }
    }
    function b$(a, c) {
        var d, e, g = f.ajaxSettings.flatOptions || {};
        for (d in c) {
            c[d] !== b && ((g[d] ? a : e || (e = {}))[d] = c[d]);
        }
        e && f.extend(!0, a, e);
    }
    function bZ(a, c, d, e, f, g) {
        f = f || c.dataTypes[0], g = g || {}, g[f]=!0;
        var h = a[f], i = 0, j = h ? h.length: 0, k = a === bS, l;
        for (; i < j && (k ||!l); i++) {
            l = h[i](c, d, e), typeof l == "string" && (!k || g[l] ? l = b : (c.dataTypes.unshift(l), l = bZ(a, c, d, e, l, g)));
        }(k ||!l)&&!g["*"] && (l = bZ(a, c, d, e, "*", g));
        return l;
    }
    function bY(a) {
        return function(b, c) {
            typeof b != "string" && (c = b, b = "*");
            if (f.isFunction(c)) {
                var d = b.toLowerCase().split(bO), e = 0, g = d.length, h, i, j;
                for (; e < g; e++) {
                    h = d[e], j = /^\+/.test(h), j && (h = h.substr(1) || "*"), i = a[h] = a[h] || [], i[j ? "unshift": "push"](c);
                }
            }
        };
    }
    function bB(a, b, c) {
        var d = b === "width" ? a.offsetWidth: a.offsetHeight, e = b === "width" ? 1: 0, g = 4;
        if (d > 0) {
            if (c !== "border") {
                for (; e < g; e += 2) {
                    c || (d -= parseFloat(f.css(a, "padding" + bx[e])) || 0), c === "margin" ? d += parseFloat(f.css(a, c + bx[e])) || 0 : d -= parseFloat(f.css(a, "border" + bx[e] + "Width")) || 0;
                }
            }
            return d + "px";
        }
        d = by(a, b);
        if (d < 0 || d == null) {
            d = a.style[b];
        }
        if (bt.test(d)) {
            return d;
        }
        d = parseFloat(d) || 0;
        if (c) {
            for (; e < g; e += 2) {
                d += parseFloat(f.css(a, "padding" + bx[e])) || 0, c !== "padding" && (d += parseFloat(f.css(a, "border" + bx[e] + "Width")) || 0), c === "margin" && (d += parseFloat(f.css(a, c + bx[e])) || 0);
            }
        }
        return d + "px";
    }
    function bo(a) {
        var b = c.createElement("div");
        bh.appendChild(b), b.innerHTML = a.outerHTML;
        return b.firstChild;
    }
    function bn(a) {
        var b = (a.nodeName || "").toLowerCase();
        b === "input" ? bm(a) : b !== "script" && typeof a.getElementsByTagName != "undefined" && f.grep(a.getElementsByTagName("input"), bm);
    }
    function bm(a) {
        if (a.type === "checkbox" || a.type === "radio") {
            a.defaultChecked = a.checked;
        }
    }
    function bl(a) {
        return typeof a.getElementsByTagName != "undefined" ? a.getElementsByTagName("*") : typeof a.querySelectorAll != "undefined" ? a.querySelectorAll("*") : [];
    }
    function bk(a, b) {
        var c;
        b.nodeType === 1 && (b.clearAttributes && b.clearAttributes(), b.mergeAttributes && b.mergeAttributes(a), c = b.nodeName.toLowerCase(), c === "object" ? b.outerHTML = a.outerHTML : c !== "input" || a.type !== "checkbox" && a.type !== "radio" ? c === "option" ? b.selected = a.defaultSelected : c === "input" || c === "textarea" ? b.defaultValue = a.defaultValue : c === "script" && b.text !== a.text && (b.text = a.text) : (a.checked && (b.defaultChecked = b.checked = a.checked), b.value !== a.value && (b.value = a.value)), b.removeAttribute(f.expando), b.removeAttribute("_submit_attached"), b.removeAttribute("_change_attached"));
    }
    function bj(a, b) {
        if (b.nodeType === 1&&!!f.hasData(a)) {
            var c, d, e, g = f._data(a), h = f._data(b, g), i = g.events;
            if (i) {
                delete h.handle, h.events = {};
                for (c in i) {
                    for (d = 0, e = i[c].length; d < e; d++) {
                        f.event.add(b, c, i[c][d]);
                    }
                }
            }
            h.data && (h.data = f.extend({}, h.data));
        }
    }
    function bi(a, b) {
        return f.nodeName(a, "table") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a;
    }
    function U(a) {
        var b = V.split("|"), c = a.createDocumentFragment();
        if (c.createElement) {
            while (b.length) {
                c.createElement(b.pop());
            }
        }
        return c;
    }
    function T(a, b, c) {
        b = b || 0;
        if (f.isFunction(b)) {
            return f.grep(a, function(a, d) {
                var e=!!b.call(a, d, a);
                return e === c;
            });
        }
        if (b.nodeType) {
            return f.grep(a, function(a, d) {
                return a === b === c;
            });
        }
        if (typeof b == "string") {
            var d = f.grep(a, function(a) {
                return a.nodeType === 1;
            });
            if (O.test(b)) {
                return f.filter(b, d, !c);
            }
            b = f.filter(b, d);
        }
        return f.grep(a, function(a, d) {
            return f.inArray(a, b) >= 0 === c;
        });
    }
    function S(a) {
        return !a ||!a.parentNode || a.parentNode.nodeType === 11;
    }
    function K() {
        return !0;
    }
    function J() {
        return !1;
    }
    function n(a, b, c) {
        var d = b + "defer", e = b + "queue", g = b + "mark", h = f._data(a, d);
        h && (c === "queue" ||!f._data(a, e)) && (c === "mark" ||!f._data(a, g)) && setTimeout(function() {
            !f._data(a, e)&&!f._data(a, g) && (f.removeData(a, d, !0), h.fire());
        }, 0);
    }
    function m(a) {
        for (var b in a) {
            if (b === "data" && f.isEmptyObject(a[b])) {
                continue;
            }
            if (b !== "toJSON") {
                return !1;
            }
        }
        return !0;
    }
    function l(a, c, d) {
        if (d === b && a.nodeType === 1) {
            var e = "data-" + c.replace(k, "-$1").toLowerCase();
            d = a.getAttribute(e);
            if (typeof d == "string") {
                try {
                    d = d === "true"?!0 : d === "false"?!1 : d === "null" ? null : f.isNumeric(d)?+d : j.test(d) ? f.parseJSON(d) : d;
                } catch (g) {}
                f.data(a, c, d);
            } else {
                d = b;
            }
        }
        return d;
    }
    function h(a) {
        var b = g[a] = {}, c, d;
        a = a.split(/\s+/);
        for (c = 0, d = a.length; c < d; c++) {
            b[a[c]]=!0;
        }
        return b;
    }
    var c = a.document, d = a.navigator, e = a.location, f = function() {
        function J() {
            if (!e.isReady) {
                try {
                    c.documentElement.doScroll("left");
                } catch (a) {
                    setTimeout(J, 1);
                    return;
                }
                e.ready();
            }
        }
        var e = function(a, b) {
            return new e.fn.init(a, b, h);
        }, f = a.jQuery, g = a.$, h, i = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/, j = /\S/, k = /^\s+/, l = /\s+$/, m = /^<(\w+)\s*\/?>(?:<\/\1>)?$/, n = /^[\],:{}\s]*$/, o = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, p = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, q = /(?:^|:|,)(?:\s*\[)+/g, r = /(webkit)[ \/]([\w.]+)/, s = /(opera)(?:.*version)?[ \/]([\w.]+)/, t = /(msie) ([\w.]+)/, u = /(mozilla)(?:.*? rv:([\w.]+))?/, v = /-([a-z]|[0-9])/ig, w = /^-ms-/, x = function(a, b) {
            return (b + "").toUpperCase();
        }, y = d.userAgent, z, A, B, C = Object.prototype.toString, D = Object.prototype.hasOwnProperty, E = Array.prototype.push, F = Array.prototype.slice, G = String.prototype.trim, H = Array.prototype.indexOf, I = {};
        e.fn = e.prototype = {
            constructor: e,
            init: function(a, d, f) {
                var g, h, j, k;
                if (!a) {
                    return this;
                }
                if (a.nodeType) {
                    this.context = this[0] = a, this.length = 1;
                    return this;
                }
                if (a === "body"&&!d && c.body) {
                    this.context = c, this[0] = c.body, this.selector = a, this.length = 1;
                    return this;
                }
                if (typeof a == "string") {
                    a.charAt(0) !== "<" || a.charAt(a.length - 1) !== ">" || a.length < 3 ? g = i.exec(a) : g = [null, a, null];
                    if (g && (g[1] ||!d)) {
                        if (g[1]) {
                            d = d instanceof e ? d[0] : d, k = d ? d.ownerDocument || d : c, j = m.exec(a), j ? e.isPlainObject(d) ? (a = [c.createElement(j[1])], e.fn.attr.call(a, d, !0)) : a = [k.createElement(j[1])] : (j = e.buildFragment([g[1]], [k]), a = (j.cacheable ? e.clone(j.fragment) : j.fragment).childNodes);
                            return e.merge(this, a);
                        }
                        h = c.getElementById(g[2]);
                        if (h && h.parentNode) {
                            if (h.id !== g[2]) {
                                return f.find(a);
                            }
                            this.length = 1, this[0] = h;
                        }
                        this.context = c, this.selector = a;
                        return this;
                    }
                    return !d || d.jquery ? (d || f).find(a) : this.constructor(d).find(a);
                }
                if (e.isFunction(a)) {
                    return f.ready(a);
                }
                a.selector !== b && (this.selector = a.selector, this.context = a.context);
                return e.makeArray(a, this);
            },
            selector: "",
            jquery: "1.7.2",
            length: 0,
            size: function() {
                return this.length;
            },
            toArray: function() {
                return F.call(this, 0);
            },
            get: function(a) {
                return a == null ? this.toArray() : a < 0 ? this[this.length + a] : this[a];
            },
            pushStack: function(a, b, c) {
                var d = this.constructor();
                e.isArray(a) ? E.apply(d, a) : e.merge(d, a), d.prevObject = this, d.context = this.context, b === "find" ? d.selector = this.selector + (this.selector ? " " : "") + c : b && (d.selector = this.selector + "." + b + "(" + c + ")");
                return d;
            },
            each: function(a, b) {
                return e.each(this, a, b);
            },
            ready: function(a) {
                e.bindReady(), A.add(a);
                return this;
            },
            eq: function(a) {
                a =+ a;
                return a===-1 ? this.slice(a) : this.slice(a, a + 1);
            },
            first: function() {
                return this.eq(0);
            },
            last: function() {
                return this.eq( - 1);
            },
            slice: function() {
                return this.pushStack(F.apply(this, arguments), "slice", F.call(arguments).join(","));
            },
            map: function(a) {
                return this.pushStack(e.map(this, function(b, c) {
                    return a.call(b, c, b);
                }));
            },
            end: function() {
                return this.prevObject || this.constructor(null);
            },
            push: E,
            sort: [].sort,
            splice: [].splice
        }, e.fn.init.prototype = e.fn, e.extend = e.fn.extend = function() {
            var a, c, d, f, g, h, i = arguments[0] || {}, j = 1, k = arguments.length, l=!1;
            typeof i == "boolean" && (l = i, i = arguments[1] || {}, j = 2), typeof i != "object"&&!e.isFunction(i) && (i = {}), k === j && (i = this, --j);
            for (; j < k; j++) {
                if ((a = arguments[j]) != null) {
                    for (c in a) {
                        d = i[c], f = a[c];
                        if (i === f) {
                            continue;
                        }
                        l && f && (e.isPlainObject(f) || (g = e.isArray(f))) ? (g ? (g=!1, h = d && e.isArray(d) ? d : []) : h = d && e.isPlainObject(d) ? d : {}, i[c] = e.extend(l, h, f)) : f !== b && (i[c] = f);
                    }
                }
            }
            return i;
        }, e.extend({
            noConflict: function(b) {
                a.$ === e && (a.$ = g), b && a.jQuery === e && (a.jQuery = f);
                return e;
            },
            isReady: !1,
            readyWait: 1,
            holdReady: function(a) {
                a ? e.readyWait++ : e.ready(!0);
            },
            ready: function(a) {
                if (a===!0&&!--e.readyWait || a!==!0&&!e.isReady) {
                    if (!c.body) {
                        return setTimeout(e.ready, 1);
                    }
                    e.isReady=!0;
                    if (a!==!0&&--e.readyWait > 0) {
                        return;
                    }
                    A.fireWith(c, [e]), e.fn.trigger && e(c).trigger("ready").off("ready");
                }
            },
            bindReady: function() {
                if (!A) {
                    A = e.Callbacks("once memory");
                    if (c.readyState === "complete") {
                        return setTimeout(e.ready, 1);
                    }
                    if (c.addEventListener) {
                        c.addEventListener("DOMContentLoaded", B, !1), a.addEventListener("load", e.ready, !1);
                    } else {
                        if (c.attachEvent) {
                            c.attachEvent("onreadystatechange", B), a.attachEvent("onload", e.ready);
                            var b=!1;
                            try {
                                b = a.frameElement == null;
                            } catch (d) {}
                            c.documentElement.doScroll && b && J();
                        }
                    }
                }
            },
            isFunction: function(a) {
                return e.type(a) === "function";
            },
            isArray: Array.isArray || function(a) {
                return e.type(a) === "array";
            },
            isWindow: function(a) {
                return a != null && a == a.window;
            },
            isNumeric: function(a) {
                return !isNaN(parseFloat(a)) && isFinite(a);
            },
            type: function(a) {
                return a == null ? String(a) : I[C.call(a)] || "object";
            },
            isPlainObject: function(a) {
                if (!a || e.type(a) !== "object" || a.nodeType || e.isWindow(a)) {
                    return !1;
                }
                try {
                    if (a.constructor&&!D.call(a, "constructor")&&!D.call(a.constructor.prototype, "isPrototypeOf")) {
                        return !1;
                    }
                } catch (c) {
                    return !1;
                }
                var d;
                for (d in a) {}
                return d === b || D.call(a, d);
            },
            isEmptyObject: function(a) {
                for (var b in a) {
                    return !1;
                }
                return !0;
            },
            error: function(a) {
                throw new Error(a);
            },
            parseJSON: function(b) {
                if (typeof b != "string" ||!b) {
                    return null;
                }
                b = e.trim(b);
                if (a.JSON && a.JSON.parse) {
                    return a.JSON.parse(b);
                }
                if (n.test(b.replace(o, "@").replace(p, "]").replace(q, ""))) {
                    return (new Function("return " + b))();
                }
                e.error("Invalid JSON: " + b);
            },
            parseXML: function(c) {
                if (typeof c != "string" ||!c) {
                    return null;
                }
                var d, f;
                try {
                    a.DOMParser ? (f = new DOMParser, d = f.parseFromString(c, "text/xml")) : (d = new ActiveXObject("Microsoft.XMLDOM"), d.async = "false", d.loadXML(c));
                } catch (g) {
                    d = b;
                }(!d ||!d.documentElement || d.getElementsByTagName("parsererror").length) && e.error("Invalid XML: " + c);
                return d;
            },
            noop: function() {},
            globalEval: function(b) {
                b && j.test(b) && (a.execScript || function(b) {
                    a.eval.call(a, b);
                })(b);
            },
            camelCase: function(a) {
                return a.replace(w, "ms-").replace(v, x);
            },
            nodeName: function(a, b) {
                return a.nodeName && a.nodeName.toUpperCase() === b.toUpperCase();
            },
            each: function(a, c, d) {
                var f, g = 0, h = a.length, i = h === b || e.isFunction(a);
                if (d) {
                    if (i) {
                        for (f in a) {
                            if (c.apply(a[f], d)===!1) {
                                break;
                            }
                        }
                    } else {
                        for (; g < h;) {
                            if (c.apply(a[g++], d)===!1) {
                                break;
                            }
                        }
                    }
                } else {
                    if (i) {
                        for (f in a) {
                            if (c.call(a[f], f, a[f])===!1) {
                                break;
                            }
                        }
                    } else {
                        for (; g < h;) {
                            if (c.call(a[g], g, a[g++])===!1) {
                                break;
                            }
                        }
                    }
                }
                return a;
            },
            trim: G ? function(a) {
                return a == null ? "" : G.call(a);
            }
            : function(a) {
                return a == null ? "" : (a + "").replace(k, "").replace(l, "");
            },
            makeArray: function(a, b) {
                var c = b || [];
                if (a != null) {
                    var d = e.type(a);
                    a.length == null || d === "string" || d === "function" || d === "regexp" || e.isWindow(a) ? E.call(c, a) : e.merge(c, a);
                }
                return c;
            },
            inArray: function(a, b, c) {
                var d;
                if (b) {
                    if (H) {
                        return H.call(b, a, c);
                    }
                    d = b.length, c = c ? c < 0 ? Math.max(0, d + c) : c : 0;
                    for (; c < d; c++) {
                        if (c in b && b[c] === a) {
                            return c;
                        }
                    }
                }
                return - 1;
            },
            merge: function(a, c) {
                var d = a.length, e = 0;
                if (typeof c.length == "number") {
                    for (var f = c.length; e < f; e++) {
                        a[d++] = c[e];
                    }
                } else {
                    while (c[e] !== b) {
                        a[d++] = c[e++];
                    }
                }
                a.length = d;
                return a;
            },
            grep: function(a, b, c) {
                var d = [], e;
                c=!!c;
                for (var f = 0, g = a.length; f < g; f++) {
                    e=!!b(a[f], f), c !== e && d.push(a[f]);
                }
                return d;
            },
            map: function(a, c, d) {
                var f, g, h = [], i = 0, j = a.length, k = a instanceof e || j !== b && typeof j == "number" && (j > 0 && a[0] && a[j - 1] || j === 0 || e.isArray(a));
                if (k) {
                    for (; i < j; i++) {
                        f = c(a[i], i, d), f != null && (h[h.length] = f);
                    }
                } else {
                    for (g in a) {
                        f = c(a[g], g, d), f != null && (h[h.length] = f);
                    }
                }
                return h.concat.apply([], h);
            },
            guid: 1,
            proxy: function(a, c) {
                if (typeof c == "string") {
                    var d = a[c];
                    c = a, a = d;
                }
                if (!e.isFunction(a)) {
                    return b;
                }
                var f = F.call(arguments, 2), g = function() {
                    return a.apply(c, f.concat(F.call(arguments)));
                };
                g.guid = a.guid = a.guid || g.guid || e.guid++;
                return g;
            },
            access: function(a, c, d, f, g, h, i) {
                var j, k = d == null, l = 0, m = a.length;
                if (d && typeof d == "object") {
                    for (l in d) {
                        e.access(a, c, l, d[l], 1, h, f);
                    }
                    g = 1;
                } else {
                    if (f !== b) {
                        j = i === b && e.isFunction(f), k && (j ? (j = c, c = function(a, b, c) {
                            return j.call(e(a), c);
                        }) : (c.call(a, f), c = null));
                        if (c) {
                            for (; l < m; l++) {
                                c(a[l], d, j ? f.call(a[l], l, c(a[l], d)) : f, i);
                            }
                        }
                        g = 1;
                    }
                }
                return g ? a : k ? c.call(a) : m ? c(a[0], d) : h;
            },
            now: function() {
                return (new Date).getTime();
            },
            uaMatch: function(a) {
                a = a.toLowerCase();
                var b = r.exec(a) || s.exec(a) || t.exec(a) || a.indexOf("compatible") < 0 && u.exec(a) || [];
                return {
                    browser: b[1] || "",
                    version: b[2] || "0"
                };
            },
            sub: function() {
                function a(b, c) {
                    return new a.fn.init(b, c);
                }
                e.extend(!0, a, this), a.superclass = this, a.fn = a.prototype = this (), a.fn.constructor = a, a.sub = this.sub, a.fn.init = function(d, f) {
                    f && f instanceof e&&!(f instanceof a) && (f = a(f));
                    return e.fn.init.call(this, d, f, b);
                }, a.fn.init.prototype = a.fn;
                var b = a(c);
                return a;
            },
            browser: {}
        }), e.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(a, b) {
            I["[object " + b + "]"] = b.toLowerCase();
        }), z = e.uaMatch(y), z.browser && (e.browser[z.browser]=!0, e.browser.version = z.version), e.browser.webkit && (e.browser.safari=!0), j.test(" ") && (k = /^[\s\xA0]+/, l = /[\s\xA0]+$/), h = e(c), c.addEventListener ? B = function() {
            c.removeEventListener("DOMContentLoaded", B, !1), e.ready();
        } : c.attachEvent && (B = function() {
            c.readyState === "complete" && (c.detachEvent("onreadystatechange", B), e.ready());
        });
        return e;
    }(), g = {};
    f.Callbacks = function(a) {
        a = a ? g[a] || h(a) : {};
        var c = [], d = [], e, i, j, k, l, m, n = function(b) {
            var d, e, g, h, i;
            for (d = 0, e = b.length; d < e; d++) {
                g = b[d], h = f.type(g), h === "array" ? n(g) : h === "function" && (!a.unique ||!p.has(g)) && c.push(g);
            }
        }, o = function(b, f) {
            f = f || [], e=!a.memory || [b, f], i=!0, j=!0, m = k || 0, k = 0, l = c.length;
            for (; c && m < l; m++) {
                if (c[m].apply(b, f)===!1 && a.stopOnFalse) {
                    e=!0;
                    break;
                }
            }
            j=!1, c && (a.once ? e===!0 ? p.disable() : c = [] : d && d.length && (e = d.shift(), p.fireWith(e[0], e[1])));
        }, p = {
            add: function() {
                if (c) {
                    var a = c.length;
                    n(arguments), j ? l = c.length : e && e!==!0 && (k = a, o(e[0], e[1]));
                }
                return this;
            },
            remove: function() {
                if (c) {
                    var b = arguments, d = 0, e = b.length;
                    for (; d < e; d++) {
                        for (var f = 0; f < c.length; f++) {
                            if (b[d] === c[f]) {
                                j && f <= l && (l--, f <= m && m--), c.splice(f--, 1);
                                if (a.unique) {
                                    break;
                                }
                            }
                        }
                    }
                }
                return this;
            },
            has: function(a) {
                if (c) {
                    var b = 0, d = c.length;
                    for (; b < d; b++) {
                        if (a === c[b]) {
                            return !0;
                        }
                    }
                }
                return !1;
            },
            empty: function() {
                c = [];
                return this;
            },
            disable: function() {
                c = d = e = b;
                return this;
            },
            disabled: function() {
                return !c;
            },
            lock: function() {
                d = b, (!e || e===!0) && p.disable();
                return this;
            },
            locked: function() {
                return !d;
            },
            fireWith: function(b, c) {
                d && (j ? a.once || d.push([b, c]) : (!a.once ||!e) && o(b, c));
                return this;
            },
            fire: function() {
                p.fireWith(this, arguments);
                return this;
            },
            fired: function() {
                return !!i;
            }
        };
        return p;
    };
    var i = [].slice;
    f.extend({
        Deferred: function(a) {
            var b = f.Callbacks("once memory"), c = f.Callbacks("once memory"), d = f.Callbacks("memory"), e = "pending", g = {
                resolve: b,
                reject: c,
                notify: d
            }, h = {
                done: b.add,
                fail: c.add,
                progress: d.add,
                state: function() {
                    return e;
                },
                isResolved: b.fired,
                isRejected: c.fired,
                then: function(a, b, c) {
                    i.done(a).fail(b).progress(c);
                    return this;
                },
                always: function() {
                    i.done.apply(i, arguments).fail.apply(i, arguments);
                    return this;
                },
                pipe: function(a, b, c) {
                    return f.Deferred(function(d) {
                        f.each({
                            done: [a, "resolve"],
                            fail: [b, "reject"],
                            progress: [c, "notify"]
                        }, function(a, b) {
                            var c = b[0], e = b[1], g;
                            f.isFunction(c) ? i[a](function() {
                                g = c.apply(this, arguments), g && f.isFunction(g.promise) ? g.promise().then(d.resolve, d.reject, d.notify) : d[e + "With"](this === i ? d : this, [g]);
                            }) : i[a](d[e]);
                        });
                    }).promise();
                },
                promise: function(a) {
                    if (a == null) {
                        a = h;
                    } else {
                        for (var b in h) {
                            a[b] = h[b];
                        }
                    }
                    return a;
                }
            }, i = h.promise({}), j;
            for (j in g) {
                i[j] = g[j].fire, i[j + "With"] = g[j].fireWith;
            }
            i.done(function() {
                e = "resolved";
            }, c.disable, d.lock).fail(function() {
                e = "rejected";
            }, b.disable, d.lock), a && a.call(i, i);
            return i;
        },
        when: function(a) {
            function m(a) {
                return function(b) {
                    e[a] = arguments.length > 1 ? i.call(arguments, 0) : b, j.notifyWith(k, e);
                };
            }
            function l(a) {
                return function(c) {
                    b[a] = arguments.length > 1 ? i.call(arguments, 0) : c, --g || j.resolveWith(j, b);
                };
            }
            var b = i.call(arguments, 0), c = 0, d = b.length, e = Array(d), g = d, h = d, j = d <= 1 && a && f.isFunction(a.promise) ? a: f.Deferred(), k = j.promise();
            if (d > 1) {
                for (; c < d; c++) {
                    b[c] && b[c].promise && f.isFunction(b[c].promise) ? b[c].promise().then(l(c), j.reject, m(c)) : --g;
                }
                g || j.resolveWith(j, b);
            } else {
                j !== a && j.resolveWith(j, d ? [a] : []);
            }
            return k;
        }
    }), f.support = function() {
        var b, d, e, g, h, i, j, k, l, m, n, o, p = c.createElement("div"), q = c.documentElement;
        p.setAttribute("className", "t"), p.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>", d = p.getElementsByTagName("*"), e = p.getElementsByTagName("a")[0];
        if (!d ||!d.length ||!e) {
            return {};
        }
        g = c.createElement("select"), h = g.appendChild(c.createElement("option")), i = p.getElementsByTagName("input")[0], b = {
            leadingWhitespace: p.firstChild.nodeType === 3,
            tbody: !p.getElementsByTagName("tbody").length,
            htmlSerialize: !!p.getElementsByTagName("link").length,
            style: /top/.test(e.getAttribute("style")),
            hrefNormalized: e.getAttribute("href") === "/a",
            opacity: /^0.55/.test(e.style.opacity),
            cssFloat: !!e.style.cssFloat,
            checkOn: i.value === "on",
            optSelected: h.selected,
            getSetAttribute: p.className !== "t",
            enctype: !!c.createElement("form").enctype,
            html5Clone: c.createElement("nav").cloneNode(!0).outerHTML !== "<:nav></:nav>",
            submitBubbles: !0,
            changeBubbles: !0,
            focusinBubbles: !1,
            deleteExpando: !0,
            noCloneEvent: !0,
            inlineBlockNeedsLayout: !1,
            shrinkWrapBlocks: !1,
            reliableMarginRight: !0,
            pixelMargin: !0
        }, f.boxModel = b.boxModel = c.compatMode === "CSS1Compat", i.checked=!0, b.noCloneChecked = i.cloneNode(!0).checked, g.disabled=!0, b.optDisabled=!h.disabled;
        try {
            delete p.test;
        } catch (r) {
            b.deleteExpando=!1;
        }
        !p.addEventListener && p.attachEvent && p.fireEvent && (p.attachEvent("onclick", function() {
            b.noCloneEvent=!1;
        }), p.cloneNode(!0).fireEvent("onclick")), i = c.createElement("input"), i.value = "t", i.setAttribute("type", "radio"), b.radioValue = i.value === "t", i.setAttribute("checked", "checked"), i.setAttribute("name", "t"), p.appendChild(i), j = c.createDocumentFragment(), j.appendChild(p.lastChild), b.checkClone = j.cloneNode(!0).cloneNode(!0).lastChild.checked, b.appendChecked = i.checked, j.removeChild(i), j.appendChild(p);
        if (p.attachEvent) {
            for (n in {
                submit: 1,
                change: 1,
                focusin: 1
            }) {
                m = "on" + n, o = m in p, o || (p.setAttribute(m, "return;"), o = typeof p[m] == "function"), b[n + "Bubbles"] = o;
            }
        }
        j.removeChild(p), j = g = h = p = i = null, f(function() {
            var d, e, g, h, i, j, l, m, n, q, r, s, t, u = c.getElementsByTagName("body")[0];
            !u || (m = 1, t = "padding:0;margin:0;border:", r = "position:absolute;top:0;left:0;width:1px;height:1px;", s = t + "0;visibility:hidden;", n = "style='" + r + t + "5px solid #000;", q = "<div " + n + "display:block;'><div style='" + t + "0;display:block;overflow:hidden;'></div></div>" + "<table " + n + "' cellpadding='0' cellspacing='0'>" + "<tr><td></td></tr></table>", d = c.createElement("div"), d.style.cssText = s + "width:0;height:0;position:static;top:0;margin-top:" + m + "px", u.insertBefore(d, u.firstChild), p = c.createElement("div"), d.appendChild(p), p.innerHTML = "<table><tr><td style='" + t + "0;display:none'></td><td>t</td></tr></table>", k = p.getElementsByTagName("td"), o = k[0].offsetHeight === 0, k[0].style.display = "", k[1].style.display = "none", b.reliableHiddenOffsets = o && k[0].offsetHeight === 0, a.getComputedStyle && (p.innerHTML = "", l = c.createElement("div"), l.style.width = "0", l.style.marginRight = "0", p.style.width = "2px", p.appendChild(l), b.reliableMarginRight = (parseInt((a.getComputedStyle(l, null) || {
                marginRight: 0
            }).marginRight, 10) || 0) === 0), typeof p.style.zoom != "undefined" && (p.innerHTML = "", p.style.width = p.style.padding = "1px", p.style.border = 0, p.style.overflow = "hidden", p.style.display = "inline", p.style.zoom = 1, b.inlineBlockNeedsLayout = p.offsetWidth === 3, p.style.display = "block", p.style.overflow = "visible", p.innerHTML = "<div style='width:5px;'></div>", b.shrinkWrapBlocks = p.offsetWidth !== 3), p.style.cssText = r + s, p.innerHTML = q, e = p.firstChild, g = e.firstChild, i = e.nextSibling.firstChild.firstChild, j = {
                doesNotAddBorder: g.offsetTop !== 5,
                doesAddBorderForTableAndCells: i.offsetTop === 5
            }, g.style.position = "fixed", g.style.top = "20px", j.fixedPosition = g.offsetTop === 20 || g.offsetTop === 15, g.style.position = g.style.top = "", e.style.overflow = "hidden", e.style.position = "relative", j.subtractsBorderForOverflowNotVisible = g.offsetTop===-5, j.doesNotIncludeMarginInBodyOffset = u.offsetTop !== m, a.getComputedStyle && (p.style.marginTop = "1%", b.pixelMargin = (a.getComputedStyle(p, null) || {
                marginTop: 0
            }).marginTop !== "1%"), typeof d.style.zoom != "undefined" && (d.style.zoom = 1), u.removeChild(d), l = p = d = null, f.extend(b, j));
        });
        return b;
    }();
    var j = /^(?:\{.*\}|\[.*\])$/, k = /([A-Z])/g;
    f.extend({
        cache: {},
        uuid: 0,
        expando: "jQuery" + (f.fn.jquery + Math.random()).replace(/\D/g, ""),
        noData: {
            embed: !0,
            object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
            applet: !0
        },
        hasData: function(a) {
            a = a.nodeType ? f.cache[a[f.expando]] : a[f.expando];
            return !!a&&!m(a);
        },
        data: function(a, c, d, e) {
            if (!!f.acceptData(a)) {
                var g, h, i, j = f.expando, k = typeof c == "string", l = a.nodeType, m = l ? f.cache: a, n = l ? a[j]: a[j] && j, o = c === "events";
                if ((!n ||!m[n] ||!o&&!e&&!m[n].data) && k && d === b) {
                    return;
                }
                n || (l ? a[j] = n=++f.uuid : n = j), m[n] || (m[n] = {}, l || (m[n].toJSON = f.noop));
                if (typeof c == "object" || typeof c == "function") {
                    e ? m[n] = f.extend(m[n], c) : m[n].data = f.extend(m[n].data, c);
                }
                g = h = m[n], e || (h.data || (h.data = {}), h = h.data), d !== b && (h[f.camelCase(c)] = d);
                if (o&&!h[c]) {
                    return g.events;
                }
                k ? (i = h[c], i == null && (i = h[f.camelCase(c)])) : i = h;
                return i;
            }
        },
        removeData: function(a, b, c) {
            if (!!f.acceptData(a)) {
                var d, e, g, h = f.expando, i = a.nodeType, j = i ? f.cache: a, k = i ? a[h]: h;
                if (!j[k]) {
                    return;
                }
                if (b) {
                    d = c ? j[k] : j[k].data;
                    if (d) {
                        f.isArray(b) || (b in d ? b = [b] : (b = f.camelCase(b), b in d ? b = [b] : b = b.split(" ")));
                        for (e = 0, g = b.length; e < g; e++) {
                            delete d[b[e]];
                        }
                        if (!(c ? m : f.isEmptyObject)(d)) {
                            return;
                        }
                    }
                }
                if (!c) {
                    delete j[k].data;
                    if (!m(j[k])) {
                        return;
                    }
                }
                f.support.deleteExpando ||!j.setInterval ? delete j[k] : j[k] = null, i && (f.support.deleteExpando ? delete a[h] : a.removeAttribute ? a.removeAttribute(h) : a[h] = null);
            }
        },
        _data: function(a, b, c) {
            return f.data(a, b, c, !0);
        },
        acceptData: function(a) {
            if (a.nodeName) {
                var b = f.noData[a.nodeName.toLowerCase()];
                if (b) {
                    return b!==!0 && a.getAttribute("classid") === b;
                }
            }
            return !0;
        }
    }), f.fn.extend({
        data: function(a, c) {
            var d, e, g, h, i, j = this[0], k = 0, m = null;
            if (a === b) {
                if (this.length) {
                    m = f.data(j);
                    if (j.nodeType === 1&&!f._data(j, "parsedAttrs")) {
                        g = j.attributes;
                        for (i = g.length; k < i; k++) {
                            h = g[k].name, h.indexOf("data-") === 0 && (h = f.camelCase(h.substring(5)), l(j, h, m[h]));
                        }
                        f._data(j, "parsedAttrs", !0);
                    }
                }
                return m;
            }
            if (typeof a == "object") {
                return this.each(function() {
                    f.data(this, a);
                });
            }
            d = a.split(".", 2), d[1] = d[1] ? "." + d[1] : "", e = d[1] + "!";
            return f.access(this, function(c) {
                if (c === b) {
                    m = this.triggerHandler("getData" + e, [d[0]]), m === b && j && (m = f.data(j, a), m = l(j, a, m));
                    return m === b && d[1] ? this.data(d[0]) : m;
                }
                d[1] = c, this.each(function() {
                    var b = f(this);
                    b.triggerHandler("setData" + e, d), f.data(this, a, c), b.triggerHandler("changeData" + e, d);
                });
            }, null, c, arguments.length > 1, null, !1);
        },
        removeData: function(a) {
            return this.each(function() {
                f.removeData(this, a);
            });
        }
    }), f.extend({
        _mark: function(a, b) {
            a && (b = (b || "fx") + "mark", f._data(a, b, (f._data(a, b) || 0) + 1));
        },
        _unmark: function(a, b, c) {
            a!==!0 && (c = b, b = a, a=!1);
            if (b) {
                c = c || "fx";
                var d = c + "mark", e = a ? 0: (f._data(b, d) || 1) - 1;
                e ? f._data(b, d, e) : (f.removeData(b, d, !0), n(b, c, "mark"));
            }
        },
        queue: function(a, b, c) {
            var d;
            if (a) {
                b = (b || "fx") + "queue", d = f._data(a, b), c && (!d || f.isArray(c) ? d = f._data(a, b, f.makeArray(c)) : d.push(c));
                return d || [];
            }
        },
        dequeue: function(a, b) {
            b = b || "fx";
            var c = f.queue(a, b), d = c.shift(), e = {};
            d === "inprogress" && (d = c.shift()), d && (b === "fx" && c.unshift("inprogress"), f._data(a, b + ".run", e), d.call(a, function() {
                f.dequeue(a, b);
            }, e)), c.length || (f.removeData(a, b + "queue " + b + ".run", !0), n(a, b, "queue"));
        }
    }), f.fn.extend({
        queue: function(a, c) {
            var d = 2;
            typeof a != "string" && (c = a, a = "fx", d--);
            if (arguments.length < d) {
                return f.queue(this[0], a);
            }
            return c === b ? this : this.each(function() {
                var b = f.queue(this, a, c);
                a === "fx" && b[0] !== "inprogress" && f.dequeue(this, a);
            });
        },
        dequeue: function(a) {
            return this.each(function() {
                f.dequeue(this, a);
            });
        },
        delay: function(a, b) {
            a = f.fx ? f.fx.speeds[a] || a : a, b = b || "fx";
            return this.queue(b, function(b, c) {
                var d = setTimeout(b, a);
                c.stop = function() {
                    clearTimeout(d);
                };
            });
        },
        clearQueue: function(a) {
            return this.queue(a || "fx", []);
        },
        promise: function(a, c) {
            function m() {
                --h || d.resolveWith(e, [e]);
            }
            typeof a != "string" && (c = a, a = b), a = a || "fx";
            var d = f.Deferred(), e = this, g = e.length, h = 1, i = a + "defer", j = a + "queue", k = a + "mark", l;
            while (g--) {
                if (l = f.data(e[g], i, b, !0) || (f.data(e[g], j, b, !0) || f.data(e[g], k, b, !0)) && f.data(e[g], i, f.Callbacks("once memory"), !0)) {
                    h++, l.add(m);
                }
            }
            m();
            return d.promise(c);
        }
    });
    var o = /[\n\t\r]/g, p = /\s+/, q = /\r/g, r = /^(?:button|input)$/i, s = /^(?:button|input|object|select|textarea)$/i, t = /^a(?:rea)?$/i, u = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i, v = f.support.getSetAttribute, w, x, y;
    f.fn.extend({
        attr: function(a, b) {
            return f.access(this, f.attr, a, b, arguments.length > 1);
        },
        removeAttr: function(a) {
            return this.each(function() {
                f.removeAttr(this, a);
            });
        },
        prop: function(a, b) {
            return f.access(this, f.prop, a, b, arguments.length > 1);
        },
        removeProp: function(a) {
            a = f.propFix[a] || a;
            return this.each(function() {
                try {
                    this[a] = b, delete this[a];
                } catch (c) {}
            });
        },
        addClass: function(a) {
            var b, c, d, e, g, h, i;
            if (f.isFunction(a)) {
                return this.each(function(b) {
                    f(this).addClass(a.call(this, b, this.className));
                });
            }
            if (a && typeof a == "string") {
                b = a.split(p);
                for (c = 0, d = this.length; c < d; c++) {
                    e = this[c];
                    if (e.nodeType === 1) {
                        if (!e.className && b.length === 1) {
                            e.className = a;
                        } else {
                            g = " " + e.className + " ";
                            for (h = 0, i = b.length; h < i; h++) {
                                ~g.indexOf(" " + b[h] + " ") || (g += b[h] + " ");
                            }
                            e.className = f.trim(g);
                        }
                    }
                }
            }
            return this;
        },
        removeClass: function(a) {
            var c, d, e, g, h, i, j;
            if (f.isFunction(a)) {
                return this.each(function(b) {
                    f(this).removeClass(a.call(this, b, this.className));
                });
            }
            if (a && typeof a == "string" || a === b) {
                c = (a || "").split(p);
                for (d = 0, e = this.length; d < e; d++) {
                    g = this[d];
                    if (g.nodeType === 1 && g.className) {
                        if (a) {
                            h = (" " + g.className + " ").replace(o, " ");
                            for (i = 0, j = c.length; i < j; i++) {
                                h = h.replace(" " + c[i] + " ", " ");
                            }
                            g.className = f.trim(h);
                        } else {
                            g.className = "";
                        }
                    }
                }
            }
            return this;
        },
        toggleClass: function(a, b) {
            var c = typeof a, d = typeof b == "boolean";
            if (f.isFunction(a)) {
                return this.each(function(c) {
                    f(this).toggleClass(a.call(this, c, this.className, b), b);
                });
            }
            return this.each(function() {
                if (c === "string") {
                    var e, g = 0, h = f(this), i = b, j = a.split(p);
                    while (e = j[g++]) {
                        i = d ? i : !h.hasClass(e), h[i ? "addClass": "removeClass"](e);
                    }
                } else {
                    if (c === "undefined" || c === "boolean") {
                        this.className && f._data(this, "__className__", this.className), this.className = this.className || a===!1 ? "" : f._data(this, "__className__") || "";
                    }
                }
            });
        },
        hasClass: function(a) {
            var b = " " + a + " ", c = 0, d = this.length;
            for (; c < d; c++) {
                if (this[c].nodeType === 1 && (" " + this[c].className + " ").replace(o, " ").indexOf(b)>-1) {
                    return !0;
                }
            }
            return !1;
        },
        val: function(a) {
            var c, d, e, g = this[0];
            if (!!arguments.length) {
                e = f.isFunction(a);
                return this.each(function(d) {
                    var g = f(this), h;
                    if (this.nodeType === 1) {
                        e ? h = a.call(this, d, g.val()) : h = a, h == null ? h = "" : typeof h == "number" ? h += "" : f.isArray(h) && (h = f.map(h, function(a) {
                            return a == null ? "" : a + "";
                        })), c = f.valHooks[this.type] || f.valHooks[this.nodeName.toLowerCase()];
                        if (!c ||!("set" in c) || c.set(this, h, "value") === b) {
                            this.value = h;
                        }
                    }
                });
            }
            if (g) {
                c = f.valHooks[g.type] || f.valHooks[g.nodeName.toLowerCase()];
                if (c && "get" in c && (d = c.get(g, "value")) !== b) {
                    return d;
                }
                d = g.value;
                return typeof d == "string" ? d.replace(q, "") : d == null ? "" : d;
            }
        }
    }), f.extend({
        valHooks: {
            option: {
                get: function(a) {
                    var b = a.attributes.value;
                    return !b || b.specified ? a.value : a.text;
                }
            },
            select: {
                get: function(a) {
                    var b, c, d, e, g = a.selectedIndex, h = [], i = a.options, j = a.type === "select-one";
                    if (g < 0) {
                        return null;
                    }
                    c = j ? g : 0, d = j ? g + 1 : i.length;
                    for (; c < d; c++) {
                        e = i[c];
                        if (e.selected && (f.support.optDisabled?!e.disabled : e.getAttribute("disabled") === null) && (!e.parentNode.disabled ||!f.nodeName(e.parentNode, "optgroup"))
                            ) {
                            b = f(e).val();
                            if (j) {
                                return b;
                            }
                            h.push(b);
                        }
                    }
                    if (j&&!h.length && i.length) {
                        return f(i[g]).val();
                    }
                    return h;
                },
                set: function(a, b) {
                    var c = f.makeArray(b);
                    f(a).find("option").each(function() {
                        this.selected = f.inArray(f(this).val(), c) >= 0;
                    }), c.length || (a.selectedIndex =- 1);
                    return c;
                }
            }
        },
        attrFn: {
            val: !0,
            css: !0,
            html: !0,
            text: !0,
            data: !0,
            width: !0,
            height: !0,
            offset: !0
        },
        attr: function(a, c, d, e) {
            var g, h, i, j = a.nodeType;
            if (!!a && j !== 3 && j !== 8 && j !== 2) {
                if (e && c in f.attrFn) {
                    return f(a)[c](d);
                }
                if (typeof a.getAttribute == "undefined") {
                    return f.prop(a, c, d);
                }
                i = j !== 1 ||!f.isXMLDoc(a), i && (c = c.toLowerCase(), h = f.attrHooks[c] || (u.test(c) ? x : w));
                if (d !== b) {
                    if (d === null) {
                        f.removeAttr(a, c);
                        return;
                    }
                    if (h && "set" in h && i && (g = h.set(a, d, c)) !== b) {
                        return g;
                    }
                    a.setAttribute(c, "" + d);
                    return d;
                }
                if (h && "get" in h && i && (g = h.get(a, c)) !== null) {
                    return g;
                }
                g = a.getAttribute(c);
                return g === null ? b : g;
            }
        },
        removeAttr: function(a, b) {
            var c, d, e, g, h, i = 0;
            if (b && a.nodeType === 1) {
                d = b.toLowerCase().split(p), g = d.length;
                for (; i < g; i++) {
                    e = d[i], e && (c = f.propFix[e] || e, h = u.test(e), h || f.attr(a, e, ""), a.removeAttribute(v ? e : c), h && c in a && (a[c]=!1));
                }
            }
        },
        attrHooks: {
            type: {
                set: function(a, b) {
                    if (r.test(a.nodeName) && a.parentNode) {
                        f.error("type property can't be changed");
                    } else {
                        if (!f.support.radioValue && b === "radio" && f.nodeName(a, "input")) {
                            var c = a.value;
                            a.setAttribute("type", b), c && (a.value = c);
                            return b;
                        }
                    }
                }
            },
            value: {
                get: function(a, b) {
                    if (w && f.nodeName(a, "button")) {
                        return w.get(a, b);
                    }
                    return b in a ? a.value : null;
                },
                set: function(a, b, c) {
                    if (w && f.nodeName(a, "button")) {
                        return w.set(a, b, c);
                    }
                    a.value = b;
                }
            }
        },
        propFix: {
            tabindex: "tabIndex",
            readonly: "readOnly",
            "for": "htmlFor",
            "class": "className",
            maxlength: "maxLength",
            cellspacing: "cellSpacing",
            cellpadding: "cellPadding",
            rowspan: "rowSpan",
            colspan: "colSpan",
            usemap: "useMap",
            frameborder: "frameBorder",
            contenteditable: "contentEditable"
        },
        prop: function(a, c, d) {
            var e, g, h, i = a.nodeType;
            if (!!a && i !== 3 && i !== 8 && i !== 2) {
                h = i !== 1 ||!f.isXMLDoc(a), h && (c = f.propFix[c] || c, g = f.propHooks[c]);
                return d !== b ? g && "set" in g && (e = g.set(a, d, c)) !== b ? e : a[c] = d : g && "get" in g && (e = g.get(a, c)) !== null ? e : a[c];
            }
        },
        propHooks: {
            tabIndex: {
                get: function(a) {
                    var c = a.getAttributeNode("tabindex");
                    return c && c.specified ? parseInt(c.value, 10) : s.test(a.nodeName) || t.test(a.nodeName) && a.href ? 0 : b;
                }
            }
        }
    }), f.attrHooks.tabindex = f.propHooks.tabIndex, x = {
        get: function(a, c) {
            var d, e = f.prop(a, c);
            return e===!0 || typeof e != "boolean" && (d = a.getAttributeNode(c)) && d.nodeValue!==!1 ? c.toLowerCase() : b;
        },
        set: function(a, b, c) {
            var d;
            b===!1 ? f.removeAttr(a, c) : (d = f.propFix[c] || c, d in a && (a[d]=!0), a.setAttribute(c, c.toLowerCase()));
            return c;
        }
    }, v || (y = {
        name: !0,
        id: !0,
        coords: !0
    }, w = f.valHooks.button = {
        get: function(a, c) {
            var d;
            d = a.getAttributeNode(c);
            return d && (y[c] ? d.nodeValue !== "" : d.specified) ? d.nodeValue : b;
        },
        set: function(a, b, d) {
            var e = a.getAttributeNode(d);
            e || (e = c.createAttribute(d), a.setAttributeNode(e));
            return e.nodeValue = b + "";
        }
    }, f.attrHooks.tabindex.set = w.set, f.each(["width", "height"], function(a, b) {
        f.attrHooks[b] = f.extend(f.attrHooks[b], {
            set: function(a, c) {
                if (c === "") {
                    a.setAttribute(b, "auto");
                    return c;
                }
            }
        });
    }), f.attrHooks.contenteditable = {
        get: w.get,
        set: function(a, b, c) {
            b === "" && (b = "false"), w.set(a, b, c);
        }
    }), f.support.hrefNormalized || f.each(["href", "src", "width", "height"], function(a, c) {
        f.attrHooks[c] = f.extend(f.attrHooks[c], {
            get: function(a) {
                var d = a.getAttribute(c, 2);
                return d === null ? b : d;
            }
        });
    }), f.support.style || (f.attrHooks.style = {
        get: function(a) {
            return a.style.cssText.toLowerCase() || b;
        },
        set: function(a, b) {
            return a.style.cssText = "" + b;
        }
    }), f.support.optSelected || (f.propHooks.selected = f.extend(f.propHooks.selected, {
        get: function(a) {
            var b = a.parentNode;
            b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex);
            return null;
        }
    })), f.support.enctype || (f.propFix.enctype = "encoding"), f.support.checkOn || f.each(["radio", "checkbox"], function() {
        f.valHooks[this] = {
            get: function(a) {
                return a.getAttribute("value") === null ? "on" : a.value;
            }
        };
    }), f.each(["radio", "checkbox"], function() {
        f.valHooks[this] = f.extend(f.valHooks[this], {
            set: function(a, b) {
                if (f.isArray(b)) {
                    return a.checked = f.inArray(f(a).val(), b) >= 0;
                }
            }
        });
    });
    var z = /^(?:textarea|input|select)$/i, A = /^([^\.]*)?(?:\.(.+))?$/, B = /(?:^|\s)hover(\.\S+)?\b/, C = /^key/, D = /^(?:mouse|contextmenu)|click/, E = /^(?:focusinfocus|focusoutblur)$/, F = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/, G = function(a) {
        var b = F.exec(a);
        b && (b[1] = (b[1] || "").toLowerCase(), b[3] = b[3] && new RegExp("(?:^|\\s)" + b[3] + "(?:\\s|$)"));
        return b;
    }, H = function(a, b) {
        var c = a.attributes || {};
        return (!b[1] || a.nodeName.toLowerCase() === b[1]) && (!b[2] || (c.id || {}).value === b[2]) && (!b[3] || b[3].test((c["class"] || {}).value));
    }, I = function(a) {
        return f.event.special.hover ? a : a.replace(B, "mouseenter$1 mouseleave$1");
    };
    f.event = {
        add: function(a, c, d, e, g) {
            var h, i, j, k, l, m, n, o, p, q, r, s;
            if (!(a.nodeType === 3 || a.nodeType === 8 ||!c ||!d ||!(h = f._data(a)))) {
                d.handler && (p = d, d = p.handler, g = p.selector), d.guid || (d.guid = f.guid++), j = h.events, j || (h.events = j = {}), i = h.handle, i || (h.handle = i = function(a) {
                    return typeof f != "undefined" && (!a || f.event.triggered !== a.type) ? f.event.dispatch.apply(i.elem, arguments) : b;
                }, i.elem = a), c = f.trim(I(c)).split(" ");
                for (k = 0; k < c.length; k++) {
                    l = A.exec(c[k]) || [], m = l[1], n = (l[2] || "").split(".").sort(), s = f.event.special[m] || {}, m = (g ? s.delegateType : s.bindType) || m, s = f.event.special[m] || {}, o = f.extend({
                        type: m,
                        origType: l[1],
                        data: e,
                        handler: d,
                        guid: d.guid,
                        selector: g,
                        quick: g && G(g),
                        namespace: n.join(".")
                    }, p), r = j[m];
                    if (!r) {
                        r = j[m] = [], r.delegateCount = 0;
                        if (!s.setup || s.setup.call(a, e, n, i)===!1) {
                            a.addEventListener ? a.addEventListener(m, i, !1) : a.attachEvent && a.attachEvent("on" + m, i);
                        }
                    }
                    s.add && (s.add.call(a, o), o.handler.guid || (o.handler.guid = d.guid)), g ? r.splice(r.delegateCount++, 0, o) : r.push(o), f.event.global[m]=!0;
                }
                a = null;
            }
        },
        global: {},
        remove: function(a, b, c, d, e) {
            var g = f.hasData(a) && f._data(a), h, i, j, k, l, m, n, o, p, q, r, s;
            if (!!g&&!!(o = g.events)) {
                b = f.trim(I(b || "")).split(" ");
                for (h = 0; h < b.length; h++) {
                    i = A.exec(b[h]) || [], j = k = i[1], l = i[2];
                    if (!j) {
                        for (j in o) {
                            f.event.remove(a, j + b[h], c, d, !0);
                        }
                        continue;
                    }
                    p = f.event.special[j] || {}, j = (d ? p.delegateType : p.bindType) || j, r = o[j] || [], m = r.length, l = l ? new RegExp("(^|\\.)" + l.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
                    for (n = 0; n < r.length; n++) {
                        s = r[n], (e || k === s.origType) && (!c || c.guid === s.guid) && (!l || l.test(s.namespace)) && (!d || d === s.selector || d === "**" && s.selector) && (r.splice(n--, 1), s.selector && r.delegateCount--, p.remove && p.remove.call(a, s));
                    }
                    r.length === 0 && m !== r.length && ((!p.teardown || p.teardown.call(a, l)===!1) && f.removeEvent(a, j, g.handle), delete o[j]);
                }
                f.isEmptyObject(o) && (q = g.handle, q && (q.elem = null), f.removeData(a, ["events", "handle"], !0));
            }
        },
        customEvent: {
            getData: !0,
            setData: !0,
            changeData: !0
        },
        trigger: function(c, d, e, g) {
            if (!e || e.nodeType !== 3 && e.nodeType !== 8) {
                var h = c.type || c, i = [], j, k, l, m, n, o, p, q, r, s;
                if (E.test(h + f.event.triggered)) {
                    return;
                }
                h.indexOf("!") >= 0 && (h = h.slice(0, - 1), k=!0), h.indexOf(".") >= 0 && (i = h.split("."), h = i.shift(), i.sort());
                if ((!e || f.event.customEvent[h])&&!f.event.global[h]) {
                    return;
                }
                c = typeof c == "object" ? c[f.expando] ? c : new f.Event(h, c) : new f.Event(h), c.type = h, c.isTrigger=!0, c.exclusive = k, c.namespace = i.join("."), c.namespace_re = c.namespace ? new RegExp("(^|\\.)" + i.join("\\.(?:.*\\.)?") + "(\\.|$)") : null, o = h.indexOf(":") < 0 ? "on" + h : "";
                if (!e) {
                    j = f.cache;
                    for (l in j) {
                        j[l].events && j[l].events[h] && f.event.trigger(c, d, j[l].handle.elem, !0);
                    }
                    return;
                }
                c.result = b, c.target || (c.target = e), d = d != null ? f.makeArray(d) : [], d.unshift(c), p = f.event.special[h] || {};
                if (p.trigger && p.trigger.apply(e, d)===!1) {
                    return;
                }
                r = [[e, p.bindType || h]];
                if (!g&&!p.noBubble&&!f.isWindow(e)) {
                    s = p.delegateType || h, m = E.test(s + h) ? e : e.parentNode, n = null;
                    for (; m; m = m.parentNode) {
                        r.push([m, s]), n = m;
                    }
                    n && n === e.ownerDocument && r.push([n.defaultView || n.parentWindow || a, s]);
                }
                for (l = 0; l < r.length&&!c.isPropagationStopped(); l++) {
                    m = r[l][0], c.type = r[l][1], q = (f._data(m, "events") || {})[c.type] && f._data(m, "handle"), q && q.apply(m, d), q = o && m[o], q && f.acceptData(m) && q.apply(m, d)===!1 && c.preventDefault();
                }
                c.type = h, !g&&!c.isDefaultPrevented() && (!p._default || p._default.apply(e.ownerDocument, d)===!1) && (h !== "click" ||!f.nodeName(e, "a")) && f.acceptData(e) && o && e[h] && (h !== "focus" && h !== "blur" || c.target.offsetWidth !== 0)&&!f.isWindow(e) && (n = e[o], n && (e[o] = null), f.event.triggered = h, e[h](), f.event.triggered = b, n && (e[o] = n));
                return c.result;
            }
        },
        dispatch: function(c) {
            c = f.event.fix(c || a.event);
            var d = (f._data(this, "events") || {})[c.type] || [], e = d.delegateCount, g = [].slice.call(arguments, 0), h=!c.exclusive&&!c.namespace, i = f.event.special[c.type] || {}, j = [], k, l, m, n, o, p, q, r, s, t, u;
            g[0] = c, c.delegateTarget = this;
            if (!i.preDispatch || i.preDispatch.call(this, c)!==!1) {
                if (e && (!c.button || c.type !== "click")) {
                    n = f(this), n.context = this.ownerDocument || this;
                    for (m = c.target; m != this; m = m.parentNode || this) {
                        if (m.disabled!==!0) {
                            p = {}, r = [], n[0] = m;
                            for (k = 0; k < e; k++) {
                                s = d[k], t = s.selector, p[t] === b && (p[t] = s.quick ? H(m, s.quick) : n.is(t)), p[t] && r.push(s);
                            }
                            r.length && j.push({
                                elem: m,
                                matches: r
                            });
                        }
                    }
                }
                d.length > e && j.push({
                    elem: this,
                    matches: d.slice(e)
                });
                for (k = 0; k < j.length&&!c.isPropagationStopped(); k++) {
                    q = j[k], c.currentTarget = q.elem;
                    for (l = 0; l < q.matches.length&&!c.isImmediatePropagationStopped(); l++) {
                        s = q.matches[l];
                        if (h ||!c.namespace&&!s.namespace || c.namespace_re && c.namespace_re.test(s.namespace)) {
                            c.data = s.data, c.handleObj = s, o = ((f.event.special[s.origType] || {}).handle || s.handler).apply(q.elem, g), o !== b && (c.result = o, o===!1 && (c.preventDefault(), c.stopPropagation()));
                        }
                    }
                }
                i.postDispatch && i.postDispatch.call(this, c);
                return c.result;
            }
        },
        props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(a, b) {
                a.which == null && (a.which = b.charCode != null ? b.charCode : b.keyCode);
                return a;
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(a, d) {
                var e, f, g, h = d.button, i = d.fromElement;
                a.pageX == null && d.clientX != null && (e = a.target.ownerDocument || c, f = e.documentElement, g = e.body, a.pageX = d.clientX + (f && f.scrollLeft || g && g.scrollLeft || 0) - (f && f.clientLeft || g && g.clientLeft || 0), a.pageY = d.clientY + (f && f.scrollTop || g && g.scrollTop || 0) - (f && f.clientTop || g && g.clientTop || 0)), !a.relatedTarget && i && (a.relatedTarget = i === a.target ? d.toElement : i), !a.which && h !== b && (a.which = h & 1 ? 1 : h & 2 ? 3 : h & 4 ? 2 : 0);
                return a;
            }
        },
        fix: function(a) {
            if (a[f.expando]) {
                return a;
            }
            var d, e, g = a, h = f.event.fixHooks[a.type] || {}, i = h.props ? this.props.concat(h.props): this.props;
            a = f.Event(g);
            for (d = i.length; d;) {
                e = i[--d], a[e] = g[e];
            }
            a.target || (a.target = g.srcElement || c), a.target.nodeType === 3 && (a.target = a.target.parentNode), a.metaKey === b && (a.metaKey = a.ctrlKey);
            return h.filter ? h.filter(a, g) : a;
        },
        special: {
            ready: {
                setup: f.bindReady
            },
            load: {
                noBubble: !0
            },
            focus: {
                delegateType: "focusin"
            },
            blur: {
                delegateType: "focusout"
            },
            beforeunload: {
                setup: function(a, b, c) {
                    f.isWindow(this) && (this.onbeforeunload = c);
                },
                teardown: function(a, b) {
                    this.onbeforeunload === b && (this.onbeforeunload = null);
                }
            }
        },
        simulate: function(a, b, c, d) {
            var e = f.extend(new f.Event, c, {
                type: a,
                isSimulated: !0,
                originalEvent: {}
            });
            d ? f.event.trigger(e, null, b) : f.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();
        }
    }, f.event.handle = f.event.dispatch, f.removeEvent = c.removeEventListener ? function(a, b, c) {
        a.removeEventListener && a.removeEventListener(b, c, !1);
    } : function(a, b, c) {
        a.detachEvent && a.detachEvent("on" + b, c);
    }, f.Event = function(a, b) {
        if (!(this instanceof f.Event)) {
            return new f.Event(a, b);
        }
        a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || a.returnValue===!1 || a.getPreventDefault && a.getPreventDefault() ? K : J) : this.type = a, b && f.extend(this, b), this.timeStamp = a && a.timeStamp || f.now(), this[f.expando]=!0;
    }, f.Event.prototype = {
        preventDefault: function() {
            this.isDefaultPrevented = K;
            var a = this.originalEvent;
            !a || (a.preventDefault ? a.preventDefault() : a.returnValue=!1);
        },
        stopPropagation: function() {
            this.isPropagationStopped = K;
            var a = this.originalEvent;
            !a || (a.stopPropagation && a.stopPropagation(), a.cancelBubble=!0);
        },
        stopImmediatePropagation: function() {
            this.isImmediatePropagationStopped = K, this.stopPropagation();
        },
        isDefaultPrevented: J,
        isPropagationStopped: J,
        isImmediatePropagationStopped: J
    }, f.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function(a, b) {
        f.event.special[a] = {
            delegateType: b,
            bindType: b,
            handle: function(a) {
                var c = this, d = a.relatedTarget, e = a.handleObj, g = e.selector, h;
                if (!d || d !== c&&!f.contains(c, d)) {
                    a.type = e.origType, h = e.handler.apply(this, arguments), a.type = b;
                }
                return h;
            }
        };
    }), f.support.submitBubbles || (f.event.special.submit = {
        setup: function() {
            if (f.nodeName(this, "form")) {
                return !1;
            }
            f.event.add(this, "click._submit keypress._submit", function(a) {
                var c = a.target, d = f.nodeName(c, "input") || f.nodeName(c, "button") ? c.form: b;
                d&&!d._submit_attached && (f.event.add(d, "submit._submit", function(a) {
                    a._submit_bubble=!0;
                }), d._submit_attached=!0);
            });
        },
        postDispatch: function(a) {
            a._submit_bubble && (delete a._submit_bubble, this.parentNode&&!a.isTrigger && f.event.simulate("submit", this.parentNode, a, !0));
        },
        teardown: function() {
            if (f.nodeName(this, "form")) {
                return !1;
            }
            f.event.remove(this, "._submit");
        }
    }), f.support.changeBubbles || (f.event.special.change = {
        setup: function() {
            if (z.test(this.nodeName)) {
                if (this.type === "checkbox" || this.type === "radio") {
                    f.event.add(this, "propertychange._change", function(a) {
                        a.originalEvent.propertyName === "checked" && (this._just_changed=!0);
                    }), f.event.add(this, "click._change", function(a) {
                        this._just_changed&&!a.isTrigger && (this._just_changed=!1, f.event.simulate("change", this, a, !0));
                    });
                }
                return !1;
            }
            f.event.add(this, "beforeactivate._change", function(a) {
                var b = a.target;
                z.test(b.nodeName)&&!b._change_attached && (f.event.add(b, "change._change", function(a) {
                    this.parentNode&&!a.isSimulated&&!a.isTrigger && f.event.simulate("change", this.parentNode, a, !0);
                }), b._change_attached=!0);
            });
        },
        handle: function(a) {
            var b = a.target;
            if (this !== b || a.isSimulated || a.isTrigger || b.type !== "radio" && b.type !== "checkbox") {
                return a.handleObj.handler.apply(this, arguments);
            }
        },
        teardown: function() {
            f.event.remove(this, "._change");
            return z.test(this.nodeName);
        }
    }), f.support.focusinBubbles || f.each({
        focus: "focusin",
        blur: "focusout"
    }, function(a, b) {
        var d = 0, e = function(a) {
            f.event.simulate(b, a.target, f.event.fix(a), !0);
        };
        f.event.special[b] = {
            setup: function() {
                d++===0 && c.addEventListener(a, e, !0);
            },
            teardown: function() {
                --d === 0 && c.removeEventListener(a, e, !0);
            }
        };
    }), f.fn.extend({
        on: function(a, c, d, e, g) {
            var h, i;
            if (typeof a == "object") {
                typeof c != "string" && (d = d || c, c = b);
                for (i in a) {
                    this.on(i, c, d, a[i], g);
                }
                return this;
            }
            d == null && e == null ? (e = c, d = c = b) : e == null && (typeof c == "string" ? (e = d, d = b) : (e = d, d = c, c = b));
            if (e===!1) {
                e = J;
            } else {
                if (!e) {
                    return this;
                }
            }
            g === 1 && (h = e, e = function(a) {
                f().off(a);
                return h.apply(this, arguments);
            }, e.guid = h.guid || (h.guid = f.guid++));
            return this.each(function() {
                f.event.add(this, a, e, d, c);
            });
        },
        one: function(a, b, c, d) {
            return this.on(a, b, c, d, 1);
        },
        off: function(a, c, d) {
            if (a && a.preventDefault && a.handleObj) {
                var e = a.handleObj;
                f(a.delegateTarget).off(e.namespace ? e.origType + "." + e.namespace : e.origType, e.selector, e.handler);
                return this;
            }
            if (typeof a == "object") {
                for (var g in a) {
                    this.off(g, c, a[g]);
                }
                return this;
            }
            if (c===!1 || typeof c == "function") {
                d = c, c = b;
            }
            d===!1 && (d = J);
            return this.each(function() {
                f.event.remove(this, a, d, c);
            });
        },
        bind: function(a, b, c) {
            return this.on(a, null, b, c);
        },
        unbind: function(a, b) {
            return this.off(a, null, b);
        },
        live: function(a, b, c) {
            f(this.context).on(a, this.selector, b, c);
            return this;
        },
        die: function(a, b) {
            f(this.context).off(a, this.selector || "**", b);
            return this;
        },
        delegate: function(a, b, c, d) {
            return this.on(b, a, c, d);
        },
        undelegate: function(a, b, c) {
            return arguments.length == 1 ? this.off(a, "**") : this.off(b, a, c);
        },
        trigger: function(a, b) {
            return this.each(function() {
                f.event.trigger(a, b, this);
            });
        },
        triggerHandler: function(a, b) {
            if (this[0]) {
                return f.event.trigger(a, b, this[0], !0);
            }
        },
        toggle: function(a) {
            var b = arguments, c = a.guid || f.guid++, d = 0, e = function(c) {
                var e = (f._data(this, "lastToggle" + a.guid) || 0)%d;
                f._data(this, "lastToggle" + a.guid, e + 1), c.preventDefault();
                return b[e].apply(this, arguments) ||!1;
            };
            e.guid = c;
            while (d < b.length) {
                b[d++].guid = c;
            }
            return this.click(e);
        },
        hover: function(a, b) {
            return this.mouseenter(a).mouseleave(b || a);
        }
    }), f.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(a, b) {
        f.fn[b] = function(a, c) {
            c == null && (c = a, a = null);
            return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
        }, f.attrFn && (f.attrFn[b]=!0), C.test(b) && (f.event.fixHooks[b] = f.event.keyHooks), D.test(b) && (f.event.fixHooks[b] = f.event.mouseHooks);
    }), function() {
        function x(a, b, c, e, f, g) {
            for (var h = 0, i = e.length; h < i; h++) {
                var j = e[h];
                if (j) {
                    var k=!1;
                    j = j[a];
                    while (j) {
                        if (j[d] === c) {
                            k = e[j.sizset];
                            break;
                        }
                        if (j.nodeType === 1) {
                            g || (j[d] = c, j.sizset = h);
                            if (typeof b != "string") {
                                if (j === b) {
                                    k=!0;
                                    break;
                                }
                            } else {
                                if (m.filter(b, [j]).length > 0) {
                                    k = j;
                                    break;
                                }
                            }
                        }
                        j = j[a];
                    }
                    e[h] = k;
                }
            }
        }
        function w(a, b, c, e, f, g) {
            for (var h = 0, i = e.length; h < i; h++) {
                var j = e[h];
                if (j) {
                    var k=!1;
                    j = j[a];
                    while (j) {
                        if (j[d] === c) {
                            k = e[j.sizset];
                            break;
                        }
                        j.nodeType === 1&&!g && (j[d] = c, j.sizset = h);
                        if (j.nodeName.toLowerCase() === b) {
                            k = j;
                            break;
                        }
                        j = j[a];
                    }
                    e[h] = k;
                }
            }
        }
        var a = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g, d = "sizcache" + (Math.random() + "").replace(".", ""), e = 0, g = Object.prototype.toString, h=!1, i=!0, j = /\\/g, k = /\r\n/g, l = /\W/;
        [0, 0].sort(function() {
            i=!1;
            return 0;
        });
        var m = function(b, d, e, f) {
            e = e || [], d = d || c;
            var h = d;
            if (d.nodeType !== 1 && d.nodeType !== 9) {
                return [];
            }
            if (!b || typeof b != "string") {
                return e;
            }
            var i, j, k, l, n, q, r, t, u=!0, v = m.isXML(d), w = [], x = b;
            do {
                a.exec(""), i = a.exec(x);
                if (i) {
                    x = i[3], w.push(i[1]);
                    if (i[2]) {
                        l = i[3];
                        break;
                    }
                }
            }
            while (i);
            if (w.length > 1 && p.exec(b)) {
                if (w.length === 2 && o.relative[w[0]]) {
                    j = y(w[0] + w[1], d, f);
                } else {
                    j = o.relative[w[0]] ? [d] : m(w.shift(), d);
                    while (w.length) {
                        b = w.shift(), o.relative[b] && (b += w.shift()), j = y(b, j, f);
                    }
                }
            } else {
                !f && w.length > 1 && d.nodeType === 9&&!v && o.match.ID.test(w[0])&&!o.match.ID.test(w[w.length - 1]) && (n = m.find(w.shift(), d, v), d = n.expr ? m.filter(n.expr, n.set)[0] : n.set[0]);
                if (d) {
                    n = f ? {
                        expr: w.pop(),
                        set: s(f)
                    } : m.find(w.pop(), w.length === 1 && (w[0] === "~" || w[0] === "+") && d.parentNode ? d.parentNode : d, v), j = n.expr ? m.filter(n.expr, n.set) : n.set, w.length > 0 ? k = s(j) : u=!1;
                    while (w.length) {
                        q = w.pop(), r = q, o.relative[q] ? r = w.pop() : q = "", r == null && (r = d), o.relative[q](k, r, v);
                    }
                } else {
                    k = w = [];
                }
            }
            k || (k = j), k || m.error(q || b);
            if (g.call(k) === "[object Array]") {
                if (!u) {
                    e.push.apply(e, k);
                } else {
                    if (d && d.nodeType === 1) {
                        for (t = 0; k[t] != null; t++) {
                            k[t] && (k[t]===!0 || k[t].nodeType === 1 && m.contains(d, k[t])) && e.push(j[t]);
                        }
                    } else {
                        for (t = 0; k[t] != null; t++) {
                            k[t] && k[t].nodeType === 1 && e.push(j[t]);
                        }
                    }
                }
            } else {
                s(k, e);
            }
            l && (m(l, h, e, f), m.uniqueSort(e));
            return e;
        };
        m.uniqueSort = function(a) {
            if (u) {
                h = i, a.sort(u);
                if (h) {
                    for (var b = 1; b < a.length; b++) {
                        a[b] === a[b - 1] && a.splice(b--, 1);
                    }
                }
            }
            return a;
        }, m.matches = function(a, b) {
            return m(a, null, null, b);
        }, m.matchesSelector = function(a, b) {
            return m(b, null, null, [a]).length > 0;
        }, m.find = function(a, b, c) {
            var d, e, f, g, h, i;
            if (!a) {
                return [];
            }
            for (e = 0, f = o.order.length; e < f; e++) {
                h = o.order[e];
                if (g = o.leftMatch[h].exec(a)) {
                    i = g[1], g.splice(1, 1);
                    if (i.substr(i.length - 1) !== "\\") {
                        g[1] = (g[1] || "").replace(j, ""), d = o.find[h](g, b, c);
                        if (d != null) {
                            a = a.replace(o.match[h], "");
                            break;
                        }
                    }
                }
            }
            d || (d = typeof b.getElementsByTagName != "undefined" ? b.getElementsByTagName("*") : []);
            return {
                set: d,
                expr: a
            };
        }, m.filter = function(a, c, d, e) {
            var f, g, h, i, j, k, l, n, p, q = a, r = [], s = c, t = c && c[0] && m.isXML(c[0]);
            while (a && c.length) {
                for (h in o.filter) {
                    if ((f = o.leftMatch[h].exec(a)) != null && f[2]) {
                        k = o.filter[h], l = f[1], g=!1, f.splice(1, 1);
                        if (l.substr(l.length - 1) === "\\") {
                            continue;
                        }
                        s === r && (r = []);
                        if (o.preFilter[h]) {
                            f = o.preFilter[h](f, s, d, r, e, t);
                            if (!f) {
                                g = i=!0;
                            } else {
                                if (f===!0) {
                                    continue;
                                }
                            }
                        }
                        if (f) {
                            for (n = 0; (j = s[n]) != null; n++) {
                                j && (i = k(j, f, n, s), p = e^i, d && i != null ? p ? g=!0 : s[n]=!1 : p && (r.push(j), g=!0));
                            }
                        }
                        if (i !== b) {
                            d || (s = r), a = a.replace(o.match[h], "");
                            if (!g) {
                                return [];
                            }
                            break;
                        }
                    }
                }
                if (a === q) {
                    if (g == null) {
                        m.error(a);
                    } else {
                        break;
                    }
                }
                q = a;
            }
            return s;
        }, m.error = function(a) {
            throw new Error("Syntax error, unrecognized expression: " + a);
        };
        var n = m.getText = function(a) {
            var b, c, d = a.nodeType, e = "";
            if (d) {
                if (d === 1 || d === 9 || d === 11) {
                    if (typeof a.textContent == "string") {
                        return a.textContent;
                    }
                    if (typeof a.innerText == "string") {
                        return a.innerText.replace(k, "");
                    }
                    for (a = a.firstChild; a; a = a.nextSibling) {
                        e += n(a);
                    }
                } else {
                    if (d === 3 || d === 4) {
                        return a.nodeValue;
                    }
                }
            } else {
                for (b = 0; c = a[b]; b++) {
                    c.nodeType !== 8 && (e += n(c));
                }
            }
            return e;
        }, o = m.selectors = {
            order: ["ID", "NAME", "TAG"],
            match: {
                ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
                ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
                TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
                CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
                POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
                PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
            },
            leftMatch: {},
            attrMap: {
                "class": "className",
                "for": "htmlFor"
            },
            attrHandle: {
                href: function(a) {
                    return a.getAttribute("href");
                },
                type: function(a) {
                    return a.getAttribute("type");
                }
            },
            relative: {
                "+": function(a, b) {
                    var c = typeof b == "string", d = c&&!l.test(b), e = c&&!d;
                    d && (b = b.toLowerCase());
                    for (var f = 0, g = a.length, h; f < g; f++) {
                        if (h = a[f]) {
                            while ((h = h.previousSibling) && h.nodeType !== 1) {}
                            a[f] = e || h && h.nodeName.toLowerCase() === b ? h ||!1 : h === b;
                        }
                    }
                    e && m.filter(b, a, !0);
                },
                ">": function(a, b) {
                    var c, d = typeof b == "string", e = 0, f = a.length;
                    if (d&&!l.test(b)) {
                        b = b.toLowerCase();
                        for (; e < f; e++) {
                            c = a[e];
                            if (c) {
                                var g = c.parentNode;
                                a[e] = g.nodeName.toLowerCase() === b ? g : !1;
                            }
                        }
                    } else {
                        for (; e < f; e++) {
                            c = a[e], c && (a[e] = d ? c.parentNode : c.parentNode === b);
                        }
                        d && m.filter(b, a, !0);
                    }
                },
                "": function(a, b, c) {
                    var d, f = e++, g = x;
                    typeof b == "string"&&!l.test(b) && (b = b.toLowerCase(), d = b, g = w), g("parentNode", b, f, a, d, c);
                },
                "~": function(a, b, c) {
                    var d, f = e++, g = x;
                    typeof b == "string"&&!l.test(b) && (b = b.toLowerCase(), d = b, g = w), g("previousSibling", b, f, a, d, c);
                }
            },
            find: {
                ID: function(a, b, c) {
                    if (typeof b.getElementById != "undefined"&&!c) {
                        var d = b.getElementById(a[1]);
                        return d && d.parentNode ? [d] : [];
                    }
                },
                NAME: function(a, b) {
                    if (typeof b.getElementsByName != "undefined") {
                        var c = [], d = b.getElementsByName(a[1]);
                        for (var e = 0, f = d.length; e < f; e++) {
                            d[e].getAttribute("name") === a[1] && c.push(d[e]);
                        }
                        return c.length === 0 ? null : c;
                    }
                },
                TAG: function(a, b) {
                    if (typeof b.getElementsByTagName != "undefined") {
                        return b.getElementsByTagName(a[1]);
                    }
                }
            },
            preFilter: {
                CLASS: function(a, b, c, d, e, f) {
                    a = " " + a[1].replace(j, "") + " ";
                    if (f) {
                        return a;
                    }
                    for (var g = 0, h; (h = b[g]) != null; g++) {
                        h && (e^(h.className && (" " + h.className + " ").replace(/[\t\n\r]/g, " ").indexOf(a) >= 0) ? c || d.push(h) : c && (b[g]=!1));
                    }
                    return !1;
                },
                ID: function(a) {
                    return a[1].replace(j, "");
                },
                TAG: function(a, b) {
                    return a[1].replace(j, "").toLowerCase();
                },
                CHILD: function(a) {
                    if (a[1] === "nth") {
                        a[2] || m.error(a[0]), a[2] = a[2].replace(/^\+|\s*/g, "");
                        var b = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2] === "even" && "2n" || a[2] === "odd" && "2n+1" ||!/\D/.test(a[2]) && "0n+" + a[2] || a[2]);
                        a[2] = b[1] + (b[2] || 1) - 0, a[3] = b[3] - 0;
                    } else {
                        a[2] && m.error(a[0]);
                    }
                    a[0] = e++;
                    return a;
                },
                ATTR: function(a, b, c, d, e, f) {
                    var g = a[1] = a[1].replace(j, "");
                    !f && o.attrMap[g] && (a[1] = o.attrMap[g]), a[4] = (a[4] || a[5] || "").replace(j, ""), a[2] === "~=" && (a[4] = " " + a[4] + " ");
                    return a;
                },
                PSEUDO: function(b, c, d, e, f) {
                    if (b[1] === "not") {
                        if ((a.exec(b[3]) || "").length > 1 || /^\w/.test(b[3])) {
                            b[3] = m(b[3], null, null, c);
                        } else {
                            var g = m.filter(b[3], c, d, !0^f);
                            d || e.push.apply(e, g);
                            return !1;
                        }
                    } else {
                        if (o.match.POS.test(b[0]) || o.match.CHILD.test(b[0])) {
                            return !0;
                        }
                    }
                    return b;
                },
                POS: function(a) {
                    a.unshift(!0);
                    return a;
                }
            },
            filters: {
                enabled: function(a) {
                    return a.disabled===!1 && a.type !== "hidden";
                },
                disabled: function(a) {
                    return a.disabled===!0;
                },
                checked: function(a) {
                    return a.checked===!0;
                },
                selected: function(a) {
                    a.parentNode && a.parentNode.selectedIndex;
                    return a.selected===!0;
                },
                parent: function(a) {
                    return !!a.firstChild;
                },
                empty: function(a) {
                    return !a.firstChild;
                },
                has: function(a, b, c) {
                    return !!m(c[3], a).length;
                },
                header: function(a) {
                    return /h\d/i.test(a.nodeName);
                },
                text: function(a) {
                    var b = a.getAttribute("type"), c = a.type;
                    return a.nodeName.toLowerCase() === "input" && "text" === c && (b === c || b === null);
                },
                radio: function(a) {
                    return a.nodeName.toLowerCase() === "input" && "radio" === a.type;
                },
                checkbox: function(a) {
                    return a.nodeName.toLowerCase() === "input" && "checkbox" === a.type;
                },
                file: function(a) {
                    return a.nodeName.toLowerCase() === "input" && "file" === a.type;
                },
                password: function(a) {
                    return a.nodeName.toLowerCase() === "input" && "password" === a.type;
                },
                submit: function(a) {
                    var b = a.nodeName.toLowerCase();
                    return (b === "input" || b === "button") && "submit" === a.type;
                },
                image: function(a) {
                    return a.nodeName.toLowerCase() === "input" && "image" === a.type;
                },
                reset: function(a) {
                    var b = a.nodeName.toLowerCase();
                    return (b === "input" || b === "button") && "reset" === a.type;
                },
                button: function(a) {
                    var b = a.nodeName.toLowerCase();
                    return b === "input" && "button" === a.type || b === "button";
                },
                input: function(a) {
                    return /input|select|textarea|button/i.test(a.nodeName);
                },
                focus: function(a) {
                    return a === a.ownerDocument.activeElement;
                }
            },
            setFilters: {
                first: function(a, b) {
                    return b === 0;
                },
                last: function(a, b, c, d) {
                    return b === d.length - 1;
                },
                even: function(a, b) {
                    return b%2 === 0;
                },
                odd: function(a, b) {
                    return b%2 === 1;
                },
                lt: function(a, b, c) {
                    return b < c[3] - 0;
                },
                gt: function(a, b, c) {
                    return b > c[3] - 0;
                },
                nth: function(a, b, c) {
                    return c[3] - 0 === b;
                },
                eq: function(a, b, c) {
                    return c[3] - 0 === b;
                }
            },
            filter: {
                PSEUDO: function(a, b, c, d) {
                    var e = b[1], f = o.filters[e];
                    if (f) {
                        return f(a, c, b, d);
                    }
                    if (e === "contains") {
                        return (a.textContent || a.innerText || n([a]) || "").indexOf(b[3]) >= 0;
                    }
                    if (e === "not") {
                        var g = b[3];
                        for (var h = 0, i = g.length; h < i; h++) {
                            if (g[h] === a) {
                                return !1;
                            }
                        }
                        return !0;
                    }
                    m.error(e);
                },
                CHILD: function(a, b) {
                    var c, e, f, g, h, i, j, k = b[1], l = a;
                    switch (k) {
                    case"only":
                    case"first":
                        while (l = l.previousSibling) {
                            if (l.nodeType === 1) {
                                return !1;
                            }
                        }
                        if (k === "first") {
                            return !0;
                        }
                        l = a;
                    case"last":
                        while (l = l.nextSibling) {
                            if (l.nodeType === 1) {
                                return !1;
                            }
                        }
                        return !0;
                    case"nth":
                        c = b[2], e = b[3];
                        if (c === 1 && e === 0) {
                            return !0;
                        }
                        f = b[0], g = a.parentNode;
                        if (g && (g[d] !== f ||!a.nodeIndex)) {
                            i = 0;
                            for (l = g.firstChild; l; l = l.nextSibling) {
                                l.nodeType === 1 && (l.nodeIndex=++i);
                            }
                            g[d] = f;
                        }
                        j = a.nodeIndex - e;
                        return c === 0 ? j === 0 : j%c === 0 && j / c >= 0;
                    }
                },
                ID: function(a, b) {
                    return a.nodeType === 1 && a.getAttribute("id") === b;
                },
                TAG: function(a, b) {
                    return b === "*" && a.nodeType === 1||!!a.nodeName && a.nodeName.toLowerCase() === b;
                },
                CLASS: function(a, b) {
                    return (" " + (a.className || a.getAttribute("class")) + " ").indexOf(b)>-1;
                },
                ATTR: function(a, b) {
                    var c = b[1], d = m.attr ? m.attr(a, c): o.attrHandle[c] ? o.attrHandle[c](a): a[c] != null ? a[c]: a.getAttribute(c), e = d + "", f = b[2], g = b[4];
                    return d == null ? f === "!=" : !f && m.attr ? d != null : f === "=" ? e === g : f === "*=" ? e.indexOf(g) >= 0 : f === "~=" ? (" " + e + " ").indexOf(g) >= 0 : g ? f === "!=" ? e !== g : f === "^=" ? e.indexOf(g) === 0 : f === "$=" ? e.substr(e.length - g.length) === g : f === "|=" ? e === g || e.substr(0, g.length + 1) === g + "-" : !1 : e && d!==!1;
                },
                POS: function(a, b, c, d) {
                    var e = b[2], f = o.setFilters[e];
                    if (f) {
                        return f(a, c, b, d);
                    }
                }
            }
        }, p = o.match.POS, q = function(a, b) {
            return "\\" + (b - 0 + 1);
        };
        for (var r in o.match) {
            o.match[r] = new RegExp(o.match[r].source + /(?![^\[]*\])(?![^\(]*\))/.source), o.leftMatch[r] = new RegExp(/(^(?:.|\r|\n)*?)/.source + o.match[r].source.replace(/\\(\d+)/g, q));
        }
        o.match.globalPOS = p;
        var s = function(a, b) {
            a = Array.prototype.slice.call(a, 0);
            if (b) {
                b.push.apply(b, a);
                return b;
            }
            return a;
        };
        try {
            Array.prototype.slice.call(c.documentElement.childNodes, 0)[0].nodeType;
        } catch (t) {
            s = function(a, b) {
                var c = 0, d = b || [];
                if (g.call(a) === "[object Array]") {
                    Array.prototype.push.apply(d, a);
                } else {
                    if (typeof a.length == "number") {
                        for (var e = a.length; c < e; c++) {
                            d.push(a[c]);
                        }
                    } else {
                        for (; a[c]; c++) {
                            d.push(a[c]);
                        }
                    }
                }
                return d;
            };
        }
        var u, v;
        c.documentElement.compareDocumentPosition ? u = function(a, b) {
            if (a === b) {
                h=!0;
                return 0;
            }
            if (!a.compareDocumentPosition ||!b.compareDocumentPosition) {
                return a.compareDocumentPosition?-1 : 1;
            }
            return a.compareDocumentPosition(b) & 4?-1 : 1;
        } : (u = function(a, b) {
            if (a === b) {
                h=!0;
                return 0;
            }
            if (a.sourceIndex && b.sourceIndex) {
                return a.sourceIndex - b.sourceIndex;
            }
            var c, d, e = [], f = [], g = a.parentNode, i = b.parentNode, j = g;
            if (g === i) {
                return v(a, b);
            }
            if (!g) {
                return - 1;
            }
            if (!i) {
                return 1;
            }
            while (j) {
                e.unshift(j), j = j.parentNode;
            }
            j = i;
            while (j) {
                f.unshift(j), j = j.parentNode;
            }
            c = e.length, d = f.length;
            for (var k = 0; k < c && k < d; k++) {
                if (e[k] !== f[k]) {
                    return v(e[k], f[k]);
                }
            }
            return k === c ? v(a, f[k], - 1) : v(e[k], b, 1);
        }, v = function(a, b, c) {
            if (a === b) {
                return c;
            }
            var d = a.nextSibling;
            while (d) {
                if (d === b) {
                    return - 1;
                }
                d = d.nextSibling;
            }
            return 1;
        }), function() {
            var a = c.createElement("div"), d = "script" + (new Date).getTime(), e = c.documentElement;
            a.innerHTML = "<a name='" + d + "'/>", e.insertBefore(a, e.firstChild), c.getElementById(d) && (o.find.ID = function(a, c, d) {
                if (typeof c.getElementById != "undefined"&&!d) {
                    var e = c.getElementById(a[1]);
                    return e ? e.id === a[1] || typeof e.getAttributeNode != "undefined" && e.getAttributeNode("id").nodeValue === a[1] ? [e] : b : [];
                }
            }, o.filter.ID = function(a, b) {
                var c = typeof a.getAttributeNode != "undefined" && a.getAttributeNode("id");
                return a.nodeType === 1 && c && c.nodeValue === b;
            }), e.removeChild(a), e = a = null;
        }(), function() {
            var a = c.createElement("div");
            a.appendChild(c.createComment("")), a.getElementsByTagName("*").length > 0 && (o.find.TAG = function(a, b) {
                var c = b.getElementsByTagName(a[1]);
                if (a[1] === "*") {
                    var d = [];
                    for (var e = 0; c[e]; e++) {
                        c[e].nodeType === 1 && d.push(c[e]);
                    }
                    c = d;
                }
                return c;
            }), a.innerHTML = "<a href='#'></a>", a.firstChild && typeof a.firstChild.getAttribute != "undefined" && a.firstChild.getAttribute("href") !== "#" && (o.attrHandle.href = function(a) {
                return a.getAttribute("href", 2);
            }), a = null;
        }(), c.querySelectorAll && function() {
            var a = m, b = c.createElement("div"), d = "__sizzle__";
            b.innerHTML = "<p class='TEST'></p>";
            if (!b.querySelectorAll || b.querySelectorAll(".TEST").length !== 0) {
                m = function(b, e, f, g) {
                    e = e || c;
                    if (!g&&!m.isXML(e)) {
                        var h = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);
                        if (h && (e.nodeType === 1 || e.nodeType === 9)) {
                            if (h[1]) {
                                return s(e.getElementsByTagName(b), f);
                            }
                            if (h[2] && o.find.CLASS && e.getElementsByClassName) {
                                return s(e.getElementsByClassName(h[2]), f);
                            }
                        }
                        if (e.nodeType === 9) {
                            if (b === "body" && e.body) {
                                return s([e.body], f);
                            }
                            if (h && h[3]) {
                                var i = e.getElementById(h[3]);
                                if (!i ||!i.parentNode) {
                                    return s([], f);
                                }
                                if (i.id === h[3]) {
                                    return s([i], f);
                                }
                            }
                            try {
                                return s(e.querySelectorAll(b), f);
                            } catch (j) {}
                        } else {
                            if (e.nodeType === 1 && e.nodeName.toLowerCase() !== "object") {
                                var k = e, l = e.getAttribute("id"), n = l || d, p = e.parentNode, q = /^\s*[+~]/.test(b);
                                l ? n = n.replace(/'/g, "\\$&") : e.setAttribute("id", n), q && p && (e = e.parentNode);
                                try {
                                    if (!q || p) {
                                        return s(e.querySelectorAll("[id='" + n + "'] " + b), f);
                                    }
                                } catch (r) {} finally {
                                    l || k.removeAttribute("id");
                                }
                            }
                        }
                    }
                    return a(b, e, f, g);
                };
                for (var e in a) {
                    m[e] = a[e];
                }
                b = null;
            }
        }(), function() {
            var a = c.documentElement, b = a.matchesSelector || a.mozMatchesSelector || a.webkitMatchesSelector || a.msMatchesSelector;
            if (b) {
                var d=!b.call(c.createElement("div"), "div"), e=!1;
                try {
                    b.call(c.documentElement, "[test!='']:sizzle");
                } catch (f) {
                    e=!0;
                }
                m.matchesSelector = function(a, c) {
                    c = c.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");
                    if (!m.isXML(a)) {
                        try {
                            if (e ||!o.match.PSEUDO.test(c)&&!/!=/.test(c)) {
                                var f = b.call(a, c);
                                if (f ||!d || a.document && a.document.nodeType !== 11) {
                                    return f;
                                }
                            }
                        } catch (g) {}
                    }
                    return m(c, null, null, [a]).length > 0;
                };
            }
        }(), function() {
            var a = c.createElement("div");
            a.innerHTML = "<div class='test e'></div><div class='test'></div>";
            if (!!a.getElementsByClassName && a.getElementsByClassName("e").length !== 0) {
                a.lastChild.className = "e";
                if (a.getElementsByClassName("e").length === 1) {
                    return;
                }
                o.order.splice(1, 0, "CLASS"), o.find.CLASS = function(a, b, c) {
                    if (typeof b.getElementsByClassName != "undefined"&&!c) {
                        return b.getElementsByClassName(a[1]);
                    }
                }, a = null;
            }
        }(), c.documentElement.contains ? m.contains = function(a, b) {
            return a !== b && (a.contains ? a.contains(b) : !0);
        } : c.documentElement.compareDocumentPosition ? m.contains = function(a, b) {
            return !!(a.compareDocumentPosition(b) & 16);
        } : m.contains = function() {
            return !1;
        }, m.isXML = function(a) {
            var b = (a ? a.ownerDocument || a : 0).documentElement;
            return b ? b.nodeName !== "HTML" : !1;
        };
        var y = function(a, b, c) {
            var d, e = [], f = "", g = b.nodeType ? [b]: b;
            while (d = o.match.PSEUDO.exec(a)) {
                f += d[0], a = a.replace(o.match.PSEUDO, "");
            }
            a = o.relative[a] ? a + "*" : a;
            for (var h = 0, i = g.length; h < i; h++) {
                m(a, g[h], e, c);
            }
            return m.filter(f, e);
        };
        m.attr = f.attr, m.selectors.attrMap = {}, f.find = m, f.expr = m.selectors, f.expr[":"] = f.expr.filters, f.unique = m.uniqueSort, f.text = m.getText, f.isXMLDoc = m.isXML, f.contains = m.contains;
    }();
    var L = /Until$/, M = /^(?:parents|prevUntil|prevAll)/, N = /,/, O = /^.[^:#\[\.,]*$/, P = Array.prototype.slice, Q = f.expr.match.globalPOS, R = {
        children: !0,
        contents: !0,
        next: !0,
        prev: !0
    };
    f.fn.extend({
        find: function(a) {
            var b = this, c, d;
            if (typeof a != "string") {
                return f(a).filter(function() {
                    for (c = 0, d = b.length; c < d; c++) {
                        if (f.contains(b[c], this)) {
                            return !0;
                        }
                    }
                });
            }
            var e = this.pushStack("", "find", a), g, h, i;
            for (c = 0, d = this.length; c < d; c++) {
                g = e.length, f.find(a, this[c], e);
                if (c > 0) {
                    for (h = g; h < e.length; h++) {
                        for (i = 0; i < g; i++) {
                            if (e[i] === e[h]) {
                                e.splice(h--, 1);
                                break;
                            }
                        }
                    }
                }
            }
            return e;
        },
        has: function(a) {
            var b = f(a);
            return this.filter(function() {
                for (var a = 0, c = b.length; a < c; a++) {
                    if (f.contains(this, b[a])) {
                        return !0;
                    }
                }
            });
        },
        not: function(a) {
            return this.pushStack(T(this, a, !1), "not", a);
        },
        filter: function(a) {
            return this.pushStack(T(this, a, !0), "filter", a);
        },
        is: function(a) {
            return !!a && (typeof a == "string" ? Q.test(a) ? f(a, this.context).index(this[0]) >= 0 : f.filter(a, this).length > 0 : this.filter(a).length > 0);
        },
        closest: function(a, b) {
            var c = [], d, e, g = this[0];
            if (f.isArray(a)) {
                var h = 1;
                while (g && g.ownerDocument && g !== b) {
                    for (d = 0; d < a.length; d++) {
                        f(g).is(a[d]) && c.push({
                            selector: a[d],
                            elem: g,
                            level: h
                        });
                    }
                    g = g.parentNode, h++;
                }
                return c;
            }
            var i = Q.test(a) || typeof a != "string" ? f(a, b || this.context): 0;
            for (d = 0, e = this.length; d < e; d++) {
                g = this[d];
                while (g) {
                    if (i ? i.index(g)>-1 : f.find.matchesSelector(g, a)) {
                        c.push(g);
                        break;
                    }
                    g = g.parentNode;
                    if (!g ||!g.ownerDocument || g === b || g.nodeType === 11) {
                        break;
                    }
                }
            }
            c = c.length > 1 ? f.unique(c) : c;
            return this.pushStack(c, "closest", a);
        },
        index: function(a) {
            if (!a) {
                return this[0] && this[0].parentNode ? this.prevAll().length : - 1;
            }
            if (typeof a == "string") {
                return f.inArray(this[0], f(a));
            }
            return f.inArray(a.jquery ? a[0] : a, this);
        },
        add: function(a, b) {
            var c = typeof a == "string" ? f(a, b): f.makeArray(a && a.nodeType ? [a] : a), d = f.merge(this.get(), c);
            return this.pushStack(S(c[0]) || S(d[0]) ? d : f.unique(d));
        },
        andSelf: function() {
            return this.add(this.prevObject);
        }
    }), f.each({
        parent: function(a) {
            var b = a.parentNode;
            return b && b.nodeType !== 11 ? b : null;
        },
        parents: function(a) {
            return f.dir(a, "parentNode");
        },
        parentsUntil: function(a, b, c) {
            return f.dir(a, "parentNode", c);
        },
        next: function(a) {
            return f.nth(a, 2, "nextSibling");
        },
        prev: function(a) {
            return f.nth(a, 2, "previousSibling");
        },
        nextAll: function(a) {
            return f.dir(a, "nextSibling");
        },
        prevAll: function(a) {
            return f.dir(a, "previousSibling");
        },
        nextUntil: function(a, b, c) {
            return f.dir(a, "nextSibling", c);
        },
        prevUntil: function(a, b, c) {
            return f.dir(a, "previousSibling", c);
        },
        siblings: function(a) {
            return f.sibling((a.parentNode || {}).firstChild, a);
        },
        children: function(a) {
            return f.sibling(a.firstChild);
        },
        contents: function(a) {
            return f.nodeName(a, "iframe") ? a.contentDocument || a.contentWindow.document : f.makeArray(a.childNodes);
        }
    }, function(a, b) {
        f.fn[a] = function(c, d) {
            var e = f.map(this, b, c);
            L.test(a) || (d = c), d && typeof d == "string" && (e = f.filter(d, e)), e = this.length > 1&&!R[a] ? f.unique(e) : e, (this.length > 1 || N.test(d)) && M.test(a) && (e = e.reverse());
            return this.pushStack(e, a, P.call(arguments).join(","));
        };
    }), f.extend({
        filter: function(a, b, c) {
            c && (a = ":not(" + a + ")");
            return b.length === 1 ? f.find.matchesSelector(b[0], a) ? [b[0]] : [] : f.find.matches(a, b);
        },
        dir: function(a, c, d) {
            var e = [], g = a[c];
            while (g && g.nodeType !== 9 && (d === b || g.nodeType !== 1 ||!f(g).is(d))) {
                g.nodeType === 1 && e.push(g), g = g[c];
            }
            return e;
        },
        nth: function(a, b, c, d) {
            b = b || 1;
            var e = 0;
            for (; a; a = a[c]) {
                if (a.nodeType === 1&&++e === b) {
                    break;
                }
            }
            return a;
        },
        sibling: function(a, b) {
            var c = [];
            for (; a; a = a.nextSibling) {
                a.nodeType === 1 && a !== b && c.push(a);
            }
            return c;
        }
    });
    var V = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", W = / jQuery\d+="(?:\d+|null)"/g, X = /^\s+/, Y = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig, Z = /<([\w:]+)/, $ = /<tbody/i, _ = /<|&#?\w+;/, ba = /<(?:script|style)/i, bb = /<(?:script|object|embed|option|style)/i, bc = new RegExp("<(?:" + V + ")[\\s/>]", "i"), bd = /checked\s*(?:[^=]|=\s*.checked.)/i, be = /\/(java|ecma)script/i, bf = /^\s*<!(?:\[CDATA\[|\-\-)/, bg = {
        option: [1, "<select multiple='multiple'>", "</select>"],
        legend: [1, "<fieldset>", "</fieldset>"],
        thead: [1, "<table>", "</table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
        area: [1, "<map>", "</map>"],
        _default: [0, "", ""]
    }, bh = U(c);
    bg.optgroup = bg.option, bg.tbody = bg.tfoot = bg.colgroup = bg.caption = bg.thead, bg.th = bg.td, f.support.htmlSerialize || (bg._default = [1, "div<div>", "</div>"]), f.fn.extend({
        text: function(a) {
            return f.access(this, function(a) {
                return a === b ? f.text(this) : this.empty().append((this[0] && this[0].ownerDocument || c).createTextNode(a));
            }, null, a, arguments.length);
        },
        wrapAll: function(a) {
            if (f.isFunction(a)) {
                return this.each(function(b) {
                    f(this).wrapAll(a.call(this, b));
                });
            }
            if (this[0]) {
                var b = f(a, this[0].ownerDocument).eq(0).clone(!0);
                this[0].parentNode && b.insertBefore(this[0]), b.map(function() {
                    var a = this;
                    while (a.firstChild && a.firstChild.nodeType === 1) {
                        a = a.firstChild;
                    }
                    return a;
                }).append(this);
            }
            return this;
        },
        wrapInner: function(a) {
            if (f.isFunction(a)) {
                return this.each(function(b) {
                    f(this).wrapInner(a.call(this, b));
                });
            }
            return this.each(function() {
                var b = f(this), c = b.contents();
                c.length ? c.wrapAll(a) : b.append(a);
            });
        },
        wrap: function(a) {
            var b = f.isFunction(a);
            return this.each(function(c) {
                f(this).wrapAll(b ? a.call(this, c) : a);
            });
        },
        unwrap: function() {
            return this.parent().each(function() {
                f.nodeName(this, "body") || f(this).replaceWith(this.childNodes);
            }).end();
        },
        append: function() {
            return this.domManip(arguments, !0, function(a) {
                this.nodeType === 1 && this.appendChild(a);
            });
        },
        prepend: function() {
            return this.domManip(arguments, !0, function(a) {
                this.nodeType === 1 && this.insertBefore(a, this.firstChild);
            });
        },
        before: function() {
            if (this[0] && this[0].parentNode) {
                return this.domManip(arguments, !1, function(a) {
                    this.parentNode.insertBefore(a, this);
                });
            }
            if (arguments.length) {
                var a = f.clean(arguments);
                a.push.apply(a, this.toArray());
                return this.pushStack(a, "before", arguments);
            }
        },
        after: function() {
            if (this[0] && this[0].parentNode) {
                return this.domManip(arguments, !1, function(a) {
                    this.parentNode.insertBefore(a, this.nextSibling);
                });
            }
            if (arguments.length) {
                var a = this.pushStack(this, "after", arguments);
                a.push.apply(a, f.clean(arguments));
                return a;
            }
        },
        remove: function(a, b) {
            for (var c = 0, d; (d = this[c]) != null; c++) {
                if (!a || f.filter(a, [d]).length) {
                    !b && d.nodeType === 1 && (f.cleanData(d.getElementsByTagName("*")), f.cleanData([d])), d.parentNode && d.parentNode.removeChild(d);
                }
            }
            return this;
        },
        empty: function() {
            for (var a = 0, b; (b = this[a]) != null; a++) {
                b.nodeType === 1 && f.cleanData(b.getElementsByTagName("*"));
                while (b.firstChild) {
                    b.removeChild(b.firstChild);
                }
            }
            return this;
        },
        clone: function(a, b) {
            a = a == null?!1 : a, b = b == null ? a : b;
            return this.map(function() {
                return f.clone(this, a, b);
            });
        },
        html: function(a) {
            return f.access(this, function(a) {
                var c = this[0] || {}, d = 0, e = this.length;
                if (a === b) {
                    return c.nodeType === 1 ? c.innerHTML.replace(W, "") : null;
                }
                if (typeof a == "string"&&!ba.test(a) && (f.support.leadingWhitespace ||!X.test(a))&&!bg[(Z.exec(a) || ["", ""])[1].toLowerCase()]) {
                    a = a.replace(Y, "<$1></$2>");
                    try {
                        for (; d < e; d++) {
                            c = this[d] || {}, c.nodeType === 1 && (f.cleanData(c.getElementsByTagName("*")), c.innerHTML = a);
                        }
                        c = 0;
                    } catch (g) {}
                }
                c && this.empty().append(a);
            }, null, a, arguments.length);
        },
        replaceWith: function(a) {
            if (this[0] && this[0].parentNode) {
                if (f.isFunction(a)) {
                    return this.each(function(b) {
                        var c = f(this), d = c.html();
                        c.replaceWith(a.call(this, b, d));
                    });
                }
                typeof a != "string" && (a = f(a).detach());
                return this.each(function() {
                    var b = this.nextSibling, c = this.parentNode;
                    f(this).remove(), b ? f(b).before(a) : f(c).append(a);
                });
            }
            return this.length ? this.pushStack(f(f.isFunction(a) ? a() : a), "replaceWith", a) : this;
        },
        detach: function(a) {
            return this.remove(a, !0);
        },
        domManip: function(a, c, d) {
            var e, g, h, i, j = a[0], k = [];
            if (!f.support.checkClone && arguments.length === 3 && typeof j == "string" && bd.test(j)) {
                return this.each(function() {
                    f(this).domManip(a, c, d, !0);
                });
            }
            if (f.isFunction(j)) {
                return this.each(function(e) {
                    var g = f(this);
                    a[0] = j.call(this, e, c ? g.html() : b), g.domManip(a, c, d);
                });
            }
            if (this[0]) {
                i = j && j.parentNode, f.support.parentNode && i && i.nodeType === 11 && i.childNodes.length === this.length ? e = {
                    fragment: i
                } : e = f.buildFragment(a, this, k), h = e.fragment, h.childNodes.length === 1 ? g = h = h.firstChild : g = h.firstChild;
                if (g) {
                    c = c && f.nodeName(g, "tr");
                    for (var l = 0, m = this.length, n = m - 1; l < m; l++) {
                        d.call(c ? bi(this[l], g) : this[l], e.cacheable || m > 1 && l < n ? f.clone(h, !0, !0) : h);
                    }
                }
                k.length && f.each(k, function(a, b) {
                    b.src ? f.ajax({
                        type: "GET",
                        global: !1,
                        url: b.src,
                        async: !1,
                        dataType: "script"
                    }) : f.globalEval((b.text || b.textContent || b.innerHTML || "").replace(bf, "/*$0*/")), b.parentNode && b.parentNode.removeChild(b);
                });
            }
            return this;
        }
    }), f.buildFragment = function(a, b, d) {
        var e, g, h, i, j = a[0];
        b && b[0] && (i = b[0].ownerDocument || b[0]), i.createDocumentFragment || (i = c), a.length === 1 && typeof j == "string" && j.length < 512 && i === c && j.charAt(0) === "<"&&!bb.test(j) && (f.support.checkClone ||!bd.test(j)) && (f.support.html5Clone ||!bc.test(j)) && (g=!0, h = f.fragments[j], h && h !== 1 && (e = h)), e || (e = i.createDocumentFragment(), f.clean(a, i, e, d)), g && (f.fragments[j] = h ? e : 1);
        return {
            fragment: e,
            cacheable: g
        };
    }, f.fragments = {}, f.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(a, b) {
        f.fn[a] = function(c) {
            var d = [], e = f(c), g = this.length === 1 && this[0].parentNode;
            if (g && g.nodeType === 11 && g.childNodes.length === 1 && e.length === 1) {
                e[b](this[0]);
                return this;
            }
            for (var h = 0, i = e.length; h < i; h++) {
                var j = (h > 0 ? this.clone(!0) : this).get();
                f(e[h])[b](j), d = d.concat(j);
            }
            return this.pushStack(d, a, e.selector);
        };
    }), f.extend({
        clone: function(a, b, c) {
            var d, e, g, h = f.support.html5Clone || f.isXMLDoc(a) ||!bc.test("<" + a.nodeName + ">") ? a.cloneNode(!0): bo(a);
            if ((!f.support.noCloneEvent ||!f.support.noCloneChecked) && (a.nodeType === 1 || a.nodeType === 11)&&!f.isXMLDoc(a)) {
                bk(a, h), d = bl(a), e = bl(h);
                for (g = 0; d[g]; ++g) {
                    e[g] && bk(d[g], e[g]);
                }
            }
            if (b) {
                bj(a, h);
                if (c) {
                    d = bl(a), e = bl(h);
                    for (g = 0; d[g]; ++g) {
                        bj(d[g], e[g]);
                    }
                }
            }
            d = e = null;
            return h;
        },
        clean: function(a, b, d, e) {
            var g, h, i, j = [];
            b = b || c, typeof b.createElement == "undefined" && (b = b.ownerDocument || b[0] && b[0].ownerDocument || c);
            for (var k = 0, l; (l = a[k]) != null; k++) {
                typeof l == "number" && (l += "");
                if (!l) {
                    continue;
                }
                if (typeof l == "string") {
                    if (!_.test(l)) {
                        l = b.createTextNode(l);
                    } else {
                        l = l.replace(Y, "<$1></$2>");
                        var m = (Z.exec(l) || ["", ""])[1].toLowerCase(), n = bg[m] || bg._default, o = n[0], p = b.createElement("div"), q = bh.childNodes, r;
                        b === c ? bh.appendChild(p) : U(b).appendChild(p), p.innerHTML = n[1] + l + n[2];
                        while (o--) {
                            p = p.lastChild;
                        }
                        if (!f.support.tbody) {
                            var s = $.test(l), t = m === "table"&&!s ? p.firstChild && p.firstChild.childNodes: n[1] === "<table>"&&!s ? p.childNodes: [];
                            for (i = t.length - 1; i >= 0; --i) {
                                f.nodeName(t[i], "tbody")&&!t[i].childNodes.length && t[i].parentNode.removeChild(t[i]);
                            }
                        }
                        !f.support.leadingWhitespace && X.test(l) && p.insertBefore(b.createTextNode(X.exec(l)[0]), p.firstChild), l = p.childNodes, p && (p.parentNode.removeChild(p), q.length > 0 && (r = q[q.length - 1], r && r.parentNode && r.parentNode.removeChild(r)));
                    }
                }
                var u;
                if (!f.support.appendChecked) {
                    if (l[0] && typeof(u = l.length) == "number") {
                        for (i = 0; i < u; i++) {
                            bn(l[i]);
                        }
                    } else {
                        bn(l);
                    }
                }
                l.nodeType ? j.push(l) : j = f.merge(j, l);
            }
            if (d) {
                g = function(a) {
                    return !a.type || be.test(a.type);
                };
                for (k = 0; j[k]; k++) {
                    h = j[k];
                    if (e && f.nodeName(h, "script") && (!h.type || be.test(h.type))) {
                        e.push(h.parentNode ? h.parentNode.removeChild(h) : h);
                    } else {
                        if (h.nodeType === 1) {
                            var v = f.grep(h.getElementsByTagName("script"), g);
                            j.splice.apply(j, [k + 1, 0].concat(v));
                        }
                        d.appendChild(h);
                    }
                }
            }
            return j;
        },
        cleanData: function(a) {
            var b, c, d = f.cache, e = f.event.special, g = f.support.deleteExpando;
            for (var h = 0, i; (i = a[h]) != null; h++) {
                if (i.nodeName && f.noData[i.nodeName.toLowerCase()]) {
                    continue;
                }
                c = i[f.expando];
                if (c) {
                    b = d[c];
                    if (b && b.events) {
                        for (var j in b.events) {
                            e[j] ? f.event.remove(i, j) : f.removeEvent(i, j, b.handle);
                        }
                        b.handle && (b.handle.elem = null);
                    }
                    g ? delete i[f.expando] : i.removeAttribute && i.removeAttribute(f.expando), delete d[c];
                }
            }
        }
    });
    var bp = /alpha\([^)]*\)/i, bq = /opacity=([^)]*)/, br = /([A-Z]|^ms)/g, bs = /^[\-+]?(?:\d*\.)?\d+$/i, bt = /^-?(?:\d*\.)?\d+(?!px)[^\d\s]+$/i, bu = /^([\-+])=([\-+.\de]+)/, bv = /^margin/, bw = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, bx = ["Top", "Right", "Bottom", "Left"], by, bz, bA;
    f.fn.css = function(a, c) {
        return f.access(this, function(a, c, d) {
            return d !== b ? f.style(a, c, d) : f.css(a, c);
        }, a, c, arguments.length > 1);
    }, f.extend({
        cssHooks: {
            opacity: {
                get: function(a, b) {
                    if (b) {
                        var c = by(a, "opacity");
                        return c === "" ? "1" : c;
                    }
                    return a.style.opacity;
                }
            }
        },
        cssNumber: {
            fillOpacity: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {
            "float": f.support.cssFloat ? "cssFloat": "styleFloat"
        },
        style: function(a, c, d, e) {
            if (!!a && a.nodeType !== 3 && a.nodeType !== 8&&!!a.style) {
                var g, h, i = f.camelCase(c), j = a.style, k = f.cssHooks[i];
                c = f.cssProps[i] || i;
                if (d === b) {
                    if (k && "get" in k && (g = k.get(a, !1, e)) !== b) {
                        return g;
                    }
                    return j[c];
                }
                h = typeof d, h === "string" && (g = bu.exec(d)) && (d =+ (g[1] + 1)*+g[2] + parseFloat(f.css(a, c)), h = "number");
                if (d == null || h === "number" && isNaN(d)) {
                    return;
                }
                h === "number"&&!f.cssNumber[i] && (d += "px");
                if (!k ||!("set" in k) || (d = k.set(a, d)) !== b) {
                    try {
                        j[c] = d;
                    } catch (l) {}
                }
            }
        },
        css: function(a, c, d) {
            var e, g;
            c = f.camelCase(c), g = f.cssHooks[c], c = f.cssProps[c] || c, c === "cssFloat" && (c = "float");
            if (g && "get" in g && (e = g.get(a, !0, d)) !== b) {
                return e;
            }
            if (by) {
                return by(a, c);
            }
        },
        swap: function(a, b, c) {
            var d = {}, e, f;
            for (f in b) {
                d[f] = a.style[f], a.style[f] = b[f];
            }
            e = c.call(a);
            for (f in b) {
                a.style[f] = d[f];
            }
            return e;
        }
    }), f.curCSS = f.css, c.defaultView && c.defaultView.getComputedStyle && (bz = function(a, b) {
        var c, d, e, g, h = a.style;
        b = b.replace(br, "-$1").toLowerCase(), (d = a.ownerDocument.defaultView) && (e = d.getComputedStyle(a, null)) && (c = e.getPropertyValue(b), c === ""&&!f.contains(a.ownerDocument.documentElement, a) && (c = f.style(a, b))), !f.support.pixelMargin && e && bv.test(b) && bt.test(c) && (g = h.width, h.width = c, c = e.width, h.width = g);
        return c;
    }), c.documentElement.currentStyle && (bA = function(a, b) {
        var c, d, e, f = a.currentStyle && a.currentStyle[b], g = a.style;
        f == null && g && (e = g[b]) && (f = e), bt.test(f) && (c = g.left, d = a.runtimeStyle && a.runtimeStyle.left, d && (a.runtimeStyle.left = a.currentStyle.left), g.left = b === "fontSize" ? "1em" : f, f = g.pixelLeft + "px", g.left = c, d && (a.runtimeStyle.left = d));
        return f === "" ? "auto" : f;
    }), by = bz || bA, f.each(["height", "width"], function(a, b) {
        f.cssHooks[b] = {
            get: function(a, c, d) {
                if (c) {
                    return a.offsetWidth !== 0 ? bB(a, b, d) : f.swap(a, bw, function() {
                        return bB(a, b, d);
                    });
                }
            },
            set: function(a, b) {
                return bs.test(b) ? b + "px" : b;
            }
        };
    }), f.support.opacity || (f.cssHooks.opacity = {
        get: function(a, b) {
            return bq.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || "") ? parseFloat(RegExp.$1) / 100 + "" : b ? "1" : "";
        },
        set: function(a, b) {
            var c = a.style, d = a.currentStyle, e = f.isNumeric(b) ? "alpha(opacity=" + b * 100 + ")": "", g = d && d.filter || c.filter || "";
            c.zoom = 1;
            if (b >= 1 && f.trim(g.replace(bp, "")) === "") {
                c.removeAttribute("filter");
                if (d&&!d.filter) {
                    return;
                }
            }
            c.filter = bp.test(g) ? g.replace(bp, e) : g + " " + e;
        }
    }), f(function() {
        f.support.reliableMarginRight || (f.cssHooks.marginRight = {
            get: function(a, b) {
                return f.swap(a, {
                    display: "inline-block"
                }, function() {
                    return b ? by(a, "margin-right") : a.style.marginRight;
                });
            }
        });
    }), f.expr && f.expr.filters && (f.expr.filters.hidden = function(a) {
        var b = a.offsetWidth, c = a.offsetHeight;
        return b === 0 && c === 0 ||!f.support.reliableHiddenOffsets && (a.style && a.style.display || f.css(a, "display")) === "none";
    }, f.expr.filters.visible = function(a) {
        return !f.expr.filters.hidden(a);
    }), f.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(a, b) {
        f.cssHooks[a + b] = {
            expand: function(c) {
                var d, e = typeof c == "string" ? c.split(" "): [c], f = {};
                for (d = 0; d < 4; d++) {
                    f[a + bx[d] + b] = e[d] || e[d - 2] || e[0];
                }
                return f;
            }
        };
    });
    var bC = /%20/g, bD = /\[\]$/, bE = /\r?\n/g, bF = /#.*$/, bG = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, bH = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i, bI = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/, bJ = /^(?:GET|HEAD)$/, bK = /^\/\//, bL = /\?/, bM = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, bN = /^(?:select|textarea)/i, bO = /\s+/, bP = /([?&])_=[^&]*/, bQ = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/, bR = f.fn.load, bS = {}, bT = {}, bU, bV, bW = ["*/"] + ["*"];
    try {
        bU = e.href;
    } catch (bX) {
        bU = c.createElement("a"), bU.href = "", bU = bU.href;
    }
    bV = bQ.exec(bU.toLowerCase()) || [], f.fn.extend({
        load: function(a, c, d) {
            if (typeof a != "string" && bR) {
                return bR.apply(this, arguments);
            }
            if (!this.length) {
                return this;
            }
            var e = a.indexOf(" ");
            if (e >= 0) {
                var g = a.slice(e, a.length);
                a = a.slice(0, e);
            }
            var h = "GET";
            c && (f.isFunction(c) ? (d = c, c = b) : typeof c == "object" && (c = f.param(c, f.ajaxSettings.traditional), h = "POST"));
            var i = this;
            f.ajax({
                url: a,
                type: h,
                dataType: "html",
                data: c,
                complete: function(a, b, c) {
                    c = a.responseText, a.isResolved() && (a.done(function(a) {
                        c = a;
                    }), i.html(g ? f("<div>").append(c.replace(bM, "")).find(g) : c)), d && i.each(d, [c, b, a]);
                }
            });
            return this;
        },
        serialize: function() {
            return f.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                return this.elements ? f.makeArray(this.elements) : this;
            }).filter(function() {
                return this.name&&!this.disabled && (this.checked || bN.test(this.nodeName) || bH.test(this.type));
            }).map(function(a, b) {
                var c = f(this).val();
                return c == null ? null : f.isArray(c) ? f.map(c, function(a, c) {
                    return {
                        name: b.name,
                        value: a.replace(bE, "\r\n")
                    };
                }) : {
                    name: b.name,
                    value: c.replace(bE, "\r\n")
                };
            }).get();
        }
    }), f.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function(a, b) {
        f.fn[b] = function(a) {
            return this.on(b, a);
        };
    }), f.each(["get", "post"], function(a, c) {
        f[c] = function(a, d, e, g) {
            f.isFunction(d) && (g = g || e, e = d, d = b);
            return f.ajax({
                type: c,
                url: a,
                data: d,
                success: e,
                dataType: g
            });
        };
    }), f.extend({
        getScript: function(a, c) {
            return f.get(a, b, c, "script");
        },
        getJSON: function(a, b, c) {
            return f.get(a, b, c, "json");
        },
        ajaxSetup: function(a, b) {
            b ? b$(a, f.ajaxSettings) : (b = a, a = f.ajaxSettings), b$(a, b);
            return a;
        },
        ajaxSettings: {
            url: bU,
            isLocal: bI.test(bV[1]),
            global: !0,
            type: "GET",
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            processData: !0,
            async: !0,
            accepts: {
                xml: "application/xml, text/xml",
                html: "text/html",
                text: "text/plain",
                json: "application/json, text/javascript",
                "*": bW
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText"
            },
            converters: {
                "* text": a.String,
                "text html": !0,
                "text json": f.parseJSON,
                "text xml": f.parseXML
            },
            flatOptions: {
                context: !0,
                url: !0
            }
        },
        ajaxPrefilter: bY(bS),
        ajaxTransport: bY(bT),
        ajax: function(a, c) {
            function w(a, c, l, m) {
                if (s !== 2) {
                    s = 2, q && clearTimeout(q), p = b, n = m || "", v.readyState = a > 0 ? 4 : 0;
                    var o, r, u, w = c, x = l ? ca(d, v, l): b, y, z;
                    if (a >= 200 && a < 300 || a === 304) {
                        if (d.ifModified) {
                            if (y = v.getResponseHeader("Last-Modified")) {
                                f.lastModified[k] = y;
                            }
                            if (z = v.getResponseHeader("Etag")) {
                                f.etag[k] = z;
                            }
                        }
                        if (a === 304) {
                            w = "notmodified", o=!0;
                        } else {
                            try {
                                r = cb(d, x), w = "success", o=!0;
                            } catch (A) {
                                w = "parsererror", u = A;
                            }
                        }
                    } else {
                        u = w;
                        if (!w || a) {
                            w = "error", a < 0 && (a = 0);
                        }
                    }
                    v.status = a, v.statusText = "" + (c || w), o ? h.resolveWith(e, [r, w, v]) : h.rejectWith(e, [v, w, u]), v.statusCode(j), j = b, t && g.trigger("ajax" + (o ? "Success" : "Error"), [v, d, o ? r: u]), i.fireWith(e, [v, w]), t && (g.trigger("ajaxComplete", [v, d]), --f.active || f.event.trigger("ajaxStop"));
                }
            }
            typeof a == "object" && (c = a, a = b), c = c || {};
            var d = f.ajaxSetup({}, c), e = d.context || d, g = e !== d && (e.nodeType || e instanceof f) ? f(e): f.event, h = f.Deferred(), i = f.Callbacks("once memory"), j = d.statusCode || {}, k, l = {}, m = {}, n, o, p, q, r, s = 0, t, u, v = {
                readyState: 0,
                setRequestHeader: function(a, b) {
                    if (!s) {
                        var c = a.toLowerCase();
                        a = m[c] = m[c] || a, l[a] = b;
                    }
                    return this;
                },
                getAllResponseHeaders: function() {
                    return s === 2 ? n : null;
                },
                getResponseHeader: function(a) {
                    var c;
                    if (s === 2) {
                        if (!o) {
                            o = {};
                            while (c = bG.exec(n)) {
                                o[c[1].toLowerCase()] = c[2];
                            }
                        }
                        c = o[a.toLowerCase()];
                    }
                    return c === b ? null : c;
                },
                overrideMimeType: function(a) {
                    s || (d.mimeType = a);
                    return this;
                },
                abort: function(a) {
                    a = a || "abort", p && p.abort(a), w(0, a);
                    return this;
                }
            };
            h.promise(v), v.success = v.done, v.error = v.fail, v.complete = i.add, v.statusCode = function(a) {
                if (a) {
                    var b;
                    if (s < 2) {
                        for (b in a) {
                            j[b] = [j[b], a[b]];
                        }
                    } else {
                        b = a[v.status], v.then(b, b);
                    }
                }
                return this;
            }, d.url = ((a || d.url) + "").replace(bF, "").replace(bK, bV[1] + "//"), d.dataTypes = f.trim(d.dataType || "*").toLowerCase().split(bO), d.crossDomain == null && (r = bQ.exec(d.url.toLowerCase()), d.crossDomain=!(!r || r[1] == bV[1] && r[2] == bV[2] && (r[3] || (r[1] === "http:" ? 80 : 443)) == (bV[3] || (bV[1] === "http:" ? 80 : 443)))), d.data && d.processData && typeof d.data != "string" && (d.data = f.param(d.data, d.traditional)), bZ(bS, d, c, v);
            if (s === 2) {
                return !1;
            }
            t = d.global, d.type = d.type.toUpperCase(), d.hasContent=!bJ.test(d.type), t && f.active++===0 && f.event.trigger("ajaxStart");
            if (!d.hasContent) {
                d.data && (d.url += (bL.test(d.url) ? "&" : "?") + d.data, delete d.data), k = d.url;
                if (d.cache===!1) {
                    var x = f.now(), y = d.url.replace(bP, "$1_=" + x);
                    d.url = y + (y === d.url ? (bL.test(d.url) ? "&" : "?") + "_=" + x : "");
                }
            }(d.data && d.hasContent && d.contentType!==!1 || c.contentType) && v.setRequestHeader("Content-Type", d.contentType), d.ifModified && (k = k || d.url, f.lastModified[k] && v.setRequestHeader("If-Modified-Since", f.lastModified[k]), f.etag[k] && v.setRequestHeader("If-None-Match", f.etag[k])), v.setRequestHeader("Accept", d.dataTypes[0] && d.accepts[d.dataTypes[0]] ? d.accepts[d.dataTypes[0]] + (d.dataTypes[0] !== "*" ? ", " + bW + "; q=0.01" : "") : d.accepts["*"]);
            for (u in d.headers) {
                v.setRequestHeader(u, d.headers[u]);
            }
            if (d.beforeSend && (d.beforeSend.call(e, v, d)===!1 || s === 2)) {
                v.abort();
                return !1;
            }
            for (u in {
                success: 1,
                error: 1,
                complete: 1
            }) {
                v[u](d[u]);
            }
            p = bZ(bT, d, c, v);
            if (!p) {
                w( - 1, "No Transport");
            } else {
                v.readyState = 1, t && g.trigger("ajaxSend", [v, d]), d.async && d.timeout > 0 && (q = setTimeout(function() {
                    v.abort("timeout");
                }, d.timeout));
                try {
                    s = 1, p.send(l, w);
                } catch (z) {
                    if (s < 2) {
                        w( - 1, z);
                    } else {
                        throw z;
                    }
                }
            }
            return v;
        },
        param: function(a, c) {
            var d = [], e = function(a, b) {
                b = f.isFunction(b) ? b() : b, d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b);
            };
            c === b && (c = f.ajaxSettings.traditional);
            if (f.isArray(a) || a.jquery&&!f.isPlainObject(a)) {
                f.each(a, function() {
                    e(this.name, this.value);
                });
            } else {
                for (var g in a) {
                    b_(g, a[g], c, e);
                }
            }
            return d.join("&").replace(bC, "+");
        }
    }), f.extend({
        active: 0,
        lastModified: {},
        etag: {}
    });
    var cc = f.now(), cd = /(\=)\?(&|$)|\?\?/i;
    f.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            return f.expando + "_" + cc++;
        }
    }), f.ajaxPrefilter("json jsonp", function(b, c, d) {
        var e = typeof b.data == "string" && /^application\/x\-www\-form\-urlencoded/.test(b.contentType);
        if (b.dataTypes[0] === "jsonp" || b.jsonp!==!1 && (cd.test(b.url) || e && cd.test(b.data))) {
            var g, h = b.jsonpCallback = f.isFunction(b.jsonpCallback) ? b.jsonpCallback(): b.jsonpCallback, i = a[h], j = b.url, k = b.data, l = "$1" + h + "$2";
            b.jsonp!==!1 && (j = j.replace(cd, l), b.url === j && (e && (k = k.replace(cd, l)), b.data === k && (j += (/\?/.test(j) ? "&" : "?") + b.jsonp + "=" + h))), b.url = j, b.data = k, a[h] = function(a) {
                g = [a];
            }, d.always(function() {
                a[h] = i, g && f.isFunction(i) && a[h](g[0]);
            }), b.converters["script json"] = function() {
                g || f.error(h + " was not called");
                return g[0];
            }, b.dataTypes[0] = "json";
            return "script";
        }
    }), f.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /javascript|ecmascript/
        },
        converters: {
            "text script": function(a) {
                f.globalEval(a);
                return a;
            }
        }
    }), f.ajaxPrefilter("script", function(a) {
        a.cache === b && (a.cache=!1), a.crossDomain && (a.type = "GET", a.global=!1);
    }), f.ajaxTransport("script", function(a) {
        if (a.crossDomain) {
            var d, e = c.head || c.getElementsByTagName("head")[0] || c.documentElement;
            return {
                send: function(f, g) {
                    d = c.createElement("script"), d.async = "async", a.scriptCharset && (d.charset = a.scriptCharset), d.src = a.url, d.onload = d.onreadystatechange = function(a, c) {
                        if (c ||!d.readyState || /loaded|complete/.test(d.readyState)) {
                            d.onload = d.onreadystatechange = null, e && d.parentNode && e.removeChild(d), d = b, c || g(200, "success");
                        }
                    }, e.insertBefore(d, e.firstChild);
                },
                abort: function() {
                    d && d.onload(0, 1);
                }
            };
        }
    });
    var ce = a.ActiveXObject ? function() {
        for (var a in cg) {
            cg[a](0, 1);
        }
    }
    : !1, cf = 0, cg;
    f.ajaxSettings.xhr = a.ActiveXObject ? function() {
        return !this.isLocal && ch() || ci();
    } : ch, function(a) {
        f.extend(f.support, {
            ajax: !!a,
            cors: !!a && "withCredentials" in a
        });
    }(f.ajaxSettings.xhr()), f.support.ajax && f.ajaxTransport(function(c) {
        if (!c.crossDomain || f.support.cors) {
            var d;
            return {
                send: function(e, g) {
                    var h = c.xhr(), i, j;
                    c.username ? h.open(c.type, c.url, c.async, c.username, c.password) : h.open(c.type, c.url, c.async);
                    if (c.xhrFields) {
                        for (j in c.xhrFields) {
                            h[j] = c.xhrFields[j];
                        }
                    }
                    c.mimeType && h.overrideMimeType && h.overrideMimeType(c.mimeType), !c.crossDomain&&!e["X-Requested-With"] && (e["X-Requested-With"] = "XMLHttpRequest");
                    try {
                        for (j in e) {
                            h.setRequestHeader(j, e[j]);
                        }
                    } catch (k) {}
                    h.send(c.hasContent && c.data || null), d = function(a, e) {
                        var j, k, l, m, n;
                        try {
                            if (d && (e || h.readyState === 4)) {
                                d = b, i && (h.onreadystatechange = f.noop, ce && delete cg[i]);
                                if (e) {
                                    h.readyState !== 4 && h.abort();
                                } else {
                                    j = h.status, l = h.getAllResponseHeaders(), m = {}, n = h.responseXML, n && n.documentElement && (m.xml = n);
                                    try {
                                        m.text = h.responseText;
                                    } catch (a) {}
                                    try {
                                        k = h.statusText;
                                    } catch (o) {
                                        k = "";
                                    }
                                    !j && c.isLocal&&!c.crossDomain ? j = m.text ? 200 : 404 : j === 1223 && (j = 204);
                                }
                            }
                        } catch (p) {
                            e || g( - 1, p);
                        }
                        m && g(j, k, m, l);
                    }, !c.async || h.readyState === 4 ? d() : (i=++cf, ce && (cg || (cg = {}, f(a).unload(ce)), cg[i] = d), h.onreadystatechange = d);
                },
                abort: function() {
                    d && d(0, 1);
                }
            };
        }
    });
    var cj = {}, ck, cl, cm = /^(?:toggle|show|hide)$/, cn = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i, co, cp = [["height", "marginTop", "marginBottom", "paddingTop", "paddingBottom"], ["width", "marginLeft", "marginRight", "paddingLeft", "paddingRight"], ["opacity"]], cq;
    f.fn.extend({
        show: function(a, b, c) {
            var d, e;
            if (a || a === 0) {
                return this.animate(ct("show", 3), a, b, c);
            }
            for (var g = 0, h = this.length; g < h; g++) {
                d = this[g], d.style && (e = d.style.display, !f._data(d, "olddisplay") && e === "none" && (e = d.style.display = ""), (e === "" && f.css(d, "display") === "none" ||!f.contains(d.ownerDocument.documentElement, d)) && f._data(d, "olddisplay", cu(d.nodeName)));
            }
            for (g = 0; g < h; g++) {
                d = this[g];
                if (d.style) {
                    e = d.style.display;
                    if (e === "" || e === "none") {
                        d.style.display = f._data(d, "olddisplay") || "";
                    }
                }
            }
            return this;
        },
        hide: function(a, b, c) {
            if (a || a === 0) {
                return this.animate(ct("hide", 3), a, b, c);
            }
            var d, e, g = 0, h = this.length;
            for (; g < h; g++) {
                d = this[g], d.style && (e = f.css(d, "display"), e !== "none"&&!f._data(d, "olddisplay") && f._data(d, "olddisplay", e));
            }
            for (g = 0; g < h; g++) {
                this[g].style && (this[g].style.display = "none");
            }
            return this;
        },
        _toggle: f.fn.toggle,
        toggle: function(a, b, c) {
            var d = typeof a == "boolean";
            f.isFunction(a) && f.isFunction(b) ? this._toggle.apply(this, arguments) : a == null || d ? this.each(function() {
                var b = d ? a: f(this).is(":hidden");
                f(this)[b ? "show": "hide"]();
            }) : this.animate(ct("toggle", 3), a, b, c);
            return this;
        },
        fadeTo: function(a, b, c, d) {
            return this.filter(":hidden").css("opacity", 0).show().end().animate({
                opacity: b
            }, a, c, d);
        },
        animate: function(a, b, c, d) {
            function g() {
                e.queue===!1 && f._mark(this);
                var b = f.extend({}, e), c = this.nodeType === 1, d = c && f(this).is(":hidden"), g, h, i, j, k, l, m, n, o, p, q;
                b.animatedProperties = {};
                for (i in a) {
                    g = f.camelCase(i), i !== g && (a[g] = a[i], delete a[i]);
                    if ((k = f.cssHooks[g]) && "expand" in k) {
                        l = k.expand(a[g]), delete a[g];
                        for (i in l) {
                            i in a || (a[i] = l[i]);
                        }
                    }
                }
                for (g in a) {
                    h = a[g], f.isArray(h) ? (b.animatedProperties[g] = h[1], h = a[g] = h[0]) : b.animatedProperties[g] = b.specialEasing && b.specialEasing[g] || b.easing || "swing";
                    if (h === "hide" && d || h === "show"&&!d) {
                        return b.complete.call(this);
                    }
                    c && (g === "height" || g === "width") && (b.overflow = [this.style.overflow, this.style.overflowX, this.style.overflowY], f.css(this, "display") === "inline" && f.css(this, "float") === "none" && (!f.support.inlineBlockNeedsLayout || cu(this.nodeName) === "inline" ? this.style.display = "inline-block" : this.style.zoom = 1));
                }
                b.overflow != null && (this.style.overflow = "hidden");
                for (i in a) {
                    j = new f.fx(this, b, i), h = a[i], cm.test(h) ? (q = f._data(this, "toggle" + i) || (h === "toggle" ? d ? "show" : "hide" : 0), q ? (f._data(this, "toggle" + i, q === "show" ? "hide" : "show"), j[q]()) : j[h]()) : (m = cn.exec(h), n = j.cur(), m ? (o = parseFloat(m[2]), p = m[3] || (f.cssNumber[i] ? "" : "px"), p !== "px" && (f.style(this, i, (o || 1) + p), n = (o || 1) / j.cur() * n, f.style(this, i, n + p)), m[1] && (o = (m[1] === "-="?-1 : 1) * o + n), j.custom(n, o, p)) : j.custom(n, h, ""));
                }
                return !0;
            }
            var e = f.speed(b, c, d);
            if (f.isEmptyObject(a)) {
                return this.each(e.complete, [!1]);
            }
            a = f.extend({}, a);
            return e.queue===!1 ? this.each(g) : this.queue(e.queue, g);
        },
        stop: function(a, c, d) {
            typeof a != "string" && (d = c, c = a, a = b), c && a!==!1 && this.queue(a || "fx", []);
            return this.each(function() {
                function h(a, b, c) {
                    var e = b[c];
                    f.removeData(a, c, !0), e.stop(d);
                }
                var b, c=!1, e = f.timers, g = f._data(this);
                d || f._unmark(!0, this);
                if (a == null) {
                    for (b in g) {
                        g[b] && g[b].stop && b.indexOf(".run") === b.length - 4 && h(this, g, b);
                    }
                } else {
                    g[b = a + ".run"] && g[b].stop && h(this, g, b);
                }
                for (b = e.length; b--;) {
                    e[b].elem === this && (a == null || e[b].queue === a) && (d ? e[b](!0) : e[b].saveState(), c=!0, e.splice(b, 1));
                }(!d ||!c) && f.dequeue(this, a);
            });
        }
    }), f.each({
        slideDown: ct("show", 1),
        slideUp: ct("hide", 1),
        slideToggle: ct("toggle", 1),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(a, b) {
        f.fn[a] = function(a, c, d) {
            return this.animate(b, a, c, d);
        };
    }), f.extend({
        speed: function(a, b, c) {
            var d = a && typeof a == "object" ? f.extend({}, a): {
                complete: c ||!c && b || f.isFunction(a) && a,
                duration: a,
                easing: c && b || b&&!f.isFunction(b) && b
            };
            d.duration = f.fx.off ? 0 : typeof d.duration == "number" ? d.duration : d.duration in f.fx.speeds ? f.fx.speeds[d.duration] : f.fx.speeds._default;
            if (d.queue == null || d.queue===!0) {
                d.queue = "fx";
            }
            d.old = d.complete, d.complete = function(a) {
                f.isFunction(d.old) && d.old.call(this), d.queue ? f.dequeue(this, d.queue) : a!==!1 && f._unmark(this);
            };
            return d;
        },
        easing: {
            linear: function(a) {
                return a;
            },
            swing: function(a) {
                return - Math.cos(a * Math.PI) / 2 + 0.5;
            }
        },
        timers: [],
        fx: function(a, b, c) {
            this.options = b, this.elem = a, this.prop = c, b.orig = b.orig || {};
        }
    }), f.fx.prototype = {
        update: function() {
            this.options.step && this.options.step.call(this.elem, this.now, this), (f.fx.step[this.prop] || f.fx.step._default)(this);
        },
        cur: function() {
            if (this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null)) {
                return this.elem[this.prop];
            }
            var a, b = f.css(this.elem, this.prop);
            return isNaN(a = parseFloat(b))?!b || b === "auto" ? 0 : b : a;
        },
        custom: function(a, c, d) {
            function h(a) {
                return e.step(a);
            }
            var e = this, g = f.fx;
            this.startTime = cq || cr(), this.end = c, this.now = this.start = a, this.pos = this.state = 0, this.unit = d || this.unit || (f.cssNumber[this.prop] ? "" : "px"), h.queue = this.options.queue, h.elem = this.elem, h.saveState = function() {
                f._data(e.elem, "fxshow" + e.prop) === b && (e.options.hide ? f._data(e.elem, "fxshow" + e.prop, e.start) : e.options.show && f._data(e.elem, "fxshow" + e.prop, e.end));
            }, h() && f.timers.push(h)&&!co && (co = setInterval(g.tick, g.interval));
        },
        show: function() {
            var a = f._data(this.elem, "fxshow" + this.prop);
            this.options.orig[this.prop] = a || f.style(this.elem, this.prop), this.options.show=!0, a !== b ? this.custom(this.cur(), a) : this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur()), f(this.elem).show();
        },
        hide: function() {
            this.options.orig[this.prop] = f._data(this.elem, "fxshow" + this.prop) || f.style(this.elem, this.prop), this.options.hide=!0, this.custom(this.cur(), 0);
        },
        step: function(a) {
            var b, c, d, e = cq || cr(), g=!0, h = this.elem, i = this.options;
            if (a || e >= i.duration + this.startTime) {
                this.now = this.end, this.pos = this.state = 1, this.update(), i.animatedProperties[this.prop]=!0;
                for (b in i.animatedProperties) {
                    i.animatedProperties[b]!==!0 && (g=!1);
                }
                if (g) {
                    i.overflow != null&&!f.support.shrinkWrapBlocks && f.each(["", "X", "Y"], function(a, b) {
                        h.style["overflow" + b] = i.overflow[a];
                    }), i.hide && f(h).hide();
                    if (i.hide || i.show) {
                        for (b in i.animatedProperties) {
                            f.style(h, b, i.orig[b]), f.removeData(h, "fxshow" + b, !0), f.removeData(h, "toggle" + b, !0);
                        }
                    }
                    d = i.complete, d && (i.complete=!1, d.call(h));
                }
                return !1;
            }
            i.duration == Infinity ? this.now = e : (c = e - this.startTime, this.state = c / i.duration, this.pos = f.easing[i.animatedProperties[this.prop]](this.state, c, 0, 1, i.duration), this.now = this.start + (this.end - this.start) * this.pos), this.update();
            return !0;
        }
    }, f.extend(f.fx, {
        tick: function() {
            var a, b = f.timers, c = 0;
            for (; c < b.length; c++) {
                a = b[c], !a() && b[c] === a && b.splice(c--, 1);
            }
            b.length || f.fx.stop();
        },
        interval: 13,
        stop: function() {
            clearInterval(co), co = null;
        },
        speeds: {
            slow: 600,
            fast: 200,
            _default: 400
        },
        step: {
            opacity: function(a) {
                f.style(a.elem, "opacity", a.now);
            },
            _default: function(a) {
                a.elem.style && a.elem.style[a.prop] != null ? a.elem.style[a.prop] = a.now + a.unit : a.elem[a.prop] = a.now;
            }
        }
    }), f.each(cp.concat.apply([], cp), function(a, b) {
        b.indexOf("margin") && (f.fx.step[b] = function(a) {
            f.style(a.elem, b, Math.max(0, a.now) + a.unit);
        });
    }), f.expr && f.expr.filters && (f.expr.filters.animated = function(a) {
        return f.grep(f.timers, function(b) {
            return a === b.elem;
        }).length;
    });
    var cv, cw = /^t(?:able|d|h)$/i, cx = /^(?:body|html)$/i;
    "getBoundingClientRect" in c.documentElement ? cv = function(a, b, c, d) {
        try {
            d = a.getBoundingClientRect();
        } catch (e) {}
        if (!d ||!f.contains(c, a)) {
            return d ? {
                top: d.top,
                left: d.left
            } : {
                top: 0,
                left: 0
            };
        }
        var g = b.body, h = cy(b), i = c.clientTop || g.clientTop || 0, j = c.clientLeft || g.clientLeft || 0, k = h.pageYOffset || f.support.boxModel && c.scrollTop || g.scrollTop, l = h.pageXOffset || f.support.boxModel && c.scrollLeft || g.scrollLeft, m = d.top + k - i, n = d.left + l - j;
        return {
            top: m,
            left: n
        };
    } : cv = function(a, b, c) {
        var d, e = a.offsetParent, g = a, h = b.body, i = b.defaultView, j = i ? i.getComputedStyle(a, null): a.currentStyle, k = a.offsetTop, l = a.offsetLeft;
        while ((a = a.parentNode) && a !== h && a !== c) {
            if (f.support.fixedPosition && j.position === "fixed") {
                break;
            }
            d = i ? i.getComputedStyle(a, null) : a.currentStyle, k -= a.scrollTop, l -= a.scrollLeft, a === e && (k += a.offsetTop, l += a.offsetLeft, f.support.doesNotAddBorder && (!f.support.doesAddBorderForTableAndCells ||!cw.test(a.nodeName)) && (k += parseFloat(d.borderTopWidth) || 0, l += parseFloat(d.borderLeftWidth) || 0), g = e, e = a.offsetParent), f.support.subtractsBorderForOverflowNotVisible && d.overflow !== "visible" && (k += parseFloat(d.borderTopWidth) || 0, l += parseFloat(d.borderLeftWidth) || 0), j = d;
        }
        if (j.position === "relative" || j.position === "static") {
            k += h.offsetTop, l += h.offsetLeft;
        }
        f.support.fixedPosition && j.position === "fixed" && (k += Math.max(c.scrollTop, h.scrollTop), l += Math.max(c.scrollLeft, h.scrollLeft));
        return {
            top: k,
            left: l
        };
    }, f.fn.offset = function(a) {
        if (arguments.length) {
            return a === b ? this : this.each(function(b) {
                f.offset.setOffset(this, a, b);
            });
        }
        var c = this[0], d = c && c.ownerDocument;
        if (!d) {
            return null;
        }
        if (c === d.body) {
            return f.offset.bodyOffset(c);
        }
        return cv(c, d, d.documentElement);
    }, f.offset = {
        bodyOffset: function(a) {
            var b = a.offsetTop, c = a.offsetLeft;
            f.support.doesNotIncludeMarginInBodyOffset && (b += parseFloat(f.css(a, "marginTop")) || 0, c += parseFloat(f.css(a, "marginLeft")) || 0);
            return {
                top: b,
                left: c
            };
        },
        setOffset: function(a, b, c) {
            var d = f.css(a, "position");
            d === "static" && (a.style.position = "relative");
            var e = f(a), g = e.offset(), h = f.css(a, "top"), i = f.css(a, "left"), j = (d === "absolute" || d === "fixed") && f.inArray("auto", [h, i])>-1, k = {}, l = {}, m, n;
            j ? (l = e.position(), m = l.top, n = l.left) : (m = parseFloat(h) || 0, n = parseFloat(i) || 0), f.isFunction(b) && (b = b.call(a, c, g)), b.top != null && (k.top = b.top - g.top + m), b.left != null && (k.left = b.left - g.left + n), "using" in b ? b.using.call(a, k) : e.css(k);
        }
    }, f.fn.extend({
        position: function() {
            if (!this[0]) {
                return null;
            }
            var a = this[0], b = this.offsetParent(), c = this.offset(), d = cx.test(b[0].nodeName) ? {
                top: 0,
                left: 0
            }
            : b.offset();
            c.top -= parseFloat(f.css(a, "marginTop")) || 0, c.left -= parseFloat(f.css(a, "marginLeft")) || 0, d.top += parseFloat(f.css(b[0], "borderTopWidth")) || 0, d.left += parseFloat(f.css(b[0], "borderLeftWidth")) || 0;
            return {
                top: c.top - d.top,
                left: c.left - d.left
            };
        },
        offsetParent: function() {
            return this.map(function() {
                var a = this.offsetParent || c.body;
                while (a&&!cx.test(a.nodeName) && f.css(a, "position") === "static") {
                    a = a.offsetParent;
                }
                return a;
            });
        }
    }), f.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(a, c) {
        var d = /Y/.test(c);
        f.fn[a] = function(e) {
            return f.access(this, function(a, e, g) {
                var h = cy(a);
                if (g === b) {
                    return h ? c in h ? h[c] : f.support.boxModel && h.document.documentElement[e] || h.document.body[e] : a[e];
                }
                h ? h.scrollTo(d ? f(h).scrollLeft() : g, d ? g : f(h).scrollTop()) : a[e] = g;
            }, a, e, arguments.length, null);
        };
    }), f.each({
        Height: "height",
        Width: "width"
    }, function(a, c) {
        var d = "client" + a, e = "scroll" + a, g = "offset" + a;
        f.fn["inner" + a] = function() {
            var a = this[0];
            return a ? a.style ? parseFloat(f.css(a, c, "padding")) : this[c]() : null;
        }, f.fn["outer" + a] = function(a) {
            var b = this[0];
            return b ? b.style ? parseFloat(f.css(b, c, a ? "margin" : "border")) : this[c]() : null;
        }, f.fn[c] = function(a) {
            return f.access(this, function(a, c, h) {
                var i, j, k, l;
                if (f.isWindow(a)) {
                    i = a.document, j = i.documentElement[d];
                    return f.support.boxModel && j || i.body && i.body[d] || j;
                }
                if (a.nodeType === 9) {
                    i = a.documentElement;
                    if (i[d] >= i[e]) {
                        return i[d];
                    }
                    return Math.max(a.body[e], i[e], a.body[g], i[g]);
                }
                if (h === b) {
                    k = f.css(a, c), l = parseFloat(k);
                    return f.isNumeric(l) ? l : k;
                }
                f(a).css(c, h);
            }, c, a, arguments.length, null);
        };
    }), a.jQuery = a.$ = f, typeof define == "function" && define.amd && define.amd.jQuery && define("jquery", [], function() {
        return f;
    });
})(window);
$j = jQuery.noConflict();
var cnnCurrDay;
var cnnOmniHour;
var cnnOmniTime;
if (typeof(cnnCurrMin) != "undefined") {
    var cnnOmniMint = "00";
    if (cnnCurrMin >= 15 && cnnCurrMin < 30) {
        cnnOmniMint = "15";
    }
    if (cnnCurrMin >= 30 && cnnCurrMin < 45) {
        cnnOmniMint = "30";
    }
    if (cnnCurrMin >= 45 && cnnCurrMin < 60) {
        cnnOmniMint = "45";
    }
}
if (typeof(cnnCurrHour) != "undefined") {
    if (cnnCurrHour < 10) {
        var cnnOmniHour = "0" + cnnCurrHour;
    } else {
        cnnOmniHour = cnnCurrHour;
    }
}
if (typeof(cnnCurrHour) != "undefined") {
    var cnnOmniTime = cnnOmniHour + ":" + cnnOmniMint;
}
var Prototype = {
    Version: "1.6.0.3",
    Browser: {
        IE: !!(window.attachEvent && navigator.userAgent.indexOf("Opera")===-1),
        Opera: navigator.userAgent.indexOf("Opera")>-1,
        WebKit: navigator.userAgent.indexOf("AppleWebKit/")>-1,
        Gecko: navigator.userAgent.indexOf("Gecko")>-1 && navigator.userAgent.indexOf("KHTML")===-1,
        MobileSafari: !!navigator.userAgent.match(/Apple.*Mobile.*Safari/)
    },
    BrowserFeatures: {
        XPath: !!document.evaluate,
        SelectorsAPI: !!document.querySelector,
        ElementExtensions: !!window.HTMLElement,
        SpecificElementExtensions: document.createElement("div")["__proto__"] && document.createElement("div")["__proto__"] !== document.createElement("form")["__proto__"]
    },
    ScriptFragment: "<script[^>]*>([\\S\\s]*?)<\/script>",
    JSONFilter: /^\/\*-secure-([\s\S]*)\*\/\s*$/,
    emptyFunction: function() {},
    K: function(a) {
        return a;
    }
};
if (Prototype.Browser.MobileSafari) {
    Prototype.BrowserFeatures.SpecificElementExtensions = false;
}
var Class = {
    create: function() {
        var b = null, c = $A(arguments);
        if (Object.isFunction(c[0])) {
            b = c.shift();
        }
        function a() {
            this.initialize.apply(this, arguments);
        }
        Object.extend(a, Class.Methods);
        a.superclass = b;
        a.subclasses = [];
        if (b) {
            var e = function() {};
            e.prototype = b.prototype;
            a.prototype = new e;
            b.subclasses.push(a);
        }
        for (var d = 0; d < c.length; d++) {
            a.addMethods(c[d]);
        }
        if (!a.prototype.initialize) {
            a.prototype.initialize = Prototype.emptyFunction;
        }
        a.prototype.constructor = a;
        return a;
    }
};
Class.Methods = {
    addMethods: function(c) {
        var g = this.superclass && this.superclass.prototype;
        var h = Object.keys(c);
        if (!Object.keys({
            toString: true
        }).length) {
            h.push("toString", "valueOf");
        }
        for (var a = 0, f = h.length; a < f; a++) {
            var d = h[a], e = c[d];
            if (g && Object.isFunction(e) && e.argumentNames().first() == "$super") {
                var b = e;
                e = (function(k) {
                    return function() {
                        return g[k].apply(this, arguments);
                    };
                })(d).wrap(b);
                e.valueOf = b.valueOf.bind(b);
                e.toString = b.toString.bind(b);
            }
            this.prototype[d] = e;
        }
        return this;
    }
};
var Abstract = {};
Object.extend = function(a, b) {
    for (var c in b) {
        a[c] = b[c];
    }
    return a;
};
Object.extend(Object, {
    inspect: function(a) {
        try {
            if (Object.isUndefined(a)) {
                return "undefined";
            }
            if (a === null) {
                return "null";
            }
            return a.inspect ? a.inspect() : String(a);
        } catch (b) {
            if (b instanceof RangeError) {
                return "...";
            }
            throw b;
        }
    },
    toJSON: function(a) {
        var d = typeof a;
        switch (d) {
        case"undefined":
        case"function":
        case"unknown":
            return;
        case"boolean":
            return a.toString();
        }
        if (a === null) {
            return "null";
        }
        if (a.toJSON) {
            return a.toJSON();
        }
        if (Object.isElement(a)) {
            return;
        }
        var e = [];
        for (var b in a) {
            var c = Object.toJSON(a[b]);
            if (!Object.isUndefined(c)) {
                e.push(b.toJSON() + ": " + c);
            }
        }
        return "{" + e.join(", ") + "}";
    },
    toQueryString: function(a) {
        return $H(a).toQueryString();
    },
    toHTML: function(a) {
        return a && a.toHTML ? a.toHTML() : String.interpret(a);
    },
    keys: function(a) {
        var c = [];
        for (var b in a) {
            c.push(b);
        }
        return c;
    },
    values: function(c) {
        var a = [];
        for (var b in c) {
            a.push(c[b]);
        }
        return a;
    },
    clone: function(a) {
        return Object.extend({}, a);
    },
    isElement: function(a) {
        return !!(a && a.nodeType == 1);
    },
    isArray: function(a) {
        return a != null && typeof a == "object" && "splice" in a && "join" in a;
    },
    isHash: function(a) {
        return a instanceof Hash;
    },
    isFunction: function(a) {
        return typeof a == "function";
    },
    isString: function(a) {
        return typeof a == "string";
    },
    isNumber: function(a) {
        return typeof a == "number";
    },
    isUndefined: function(a) {
        return typeof a == "undefined";
    }
});
Object.extend(Function.prototype, {
    argumentNames: function() {
        var a = this.toString().match(/^[\s\(]*function[^(]*\(([^\)]*)\)/)[1].replace(/\s+/g, "").split(",");
        return a.length == 1&&!a[0] ? [] : a;
    },
    bind: function() {
        if (arguments.length < 2 && Object.isUndefined(arguments[0])) {
            return this;
        }
        var a = this, b = $A(arguments), c = b.shift();
        return function() {
            return a.apply(c, b.concat($A(arguments)));
        };
    },
    bindAsEventListener: function() {
        var a = this, b = $A(arguments), c = b.shift();
        return function(d) {
            return a.apply(c, [d || window.event].concat(b));
        };
    },
    curry: function() {
        if (!arguments.length) {
            return this;
        }
        var a = this, b = $A(arguments);
        return function() {
            return a.apply(this, b.concat($A(arguments)));
        };
    },
    delay: function() {
        var a = this, c = $A(arguments), b = c.shift() * 1000;
        return window.setTimeout(function() {
            return a.apply(a, c);
        }, b);
    },
    defer: function() {
        var a = [0.01].concat($A(arguments));
        return this.delay.apply(this, a);
    },
    wrap: function(b) {
        var a = this;
        return function() {
            return b.apply(this, [a.bind(this)].concat($A(arguments)));
        };
    },
    methodize: function() {
        if (this._methodized) {
            return this._methodized;
        }
        var a = this;
        return this._methodized = function() {
            return a.apply(null, [this].concat($A(arguments)));
        };
    }
});
Date.prototype.toJSON = function() {
    return '"' + this.getUTCFullYear() + "-" + (this.getUTCMonth() + 1).toPaddedString(2) + "-" + this.getUTCDate().toPaddedString(2) + "T" + this.getUTCHours().toPaddedString(2) + ":" + this.getUTCMinutes().toPaddedString(2) + ":" + this.getUTCSeconds().toPaddedString(2) + 'Z"';
};
var Try = {
    these: function() {
        var d;
        for (var e = 0, c = arguments.length; e < c; e++) {
            var a = arguments[e];
            try {
                d = a();
                break;
            } catch (b) {}
        }
        return d;
    }
};
RegExp.prototype.match = RegExp.prototype.test;
RegExp.escape = function(a) {
    return String(a).replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1");
};
var PeriodicalExecuter = Class.create({
    initialize: function(b, a) {
        this.callback = b;
        this.frequency = a;
        this.currentlyExecuting = false;
        this.registerCallback();
    },
    registerCallback: function() {
        this.timer = setInterval(this.onTimerEvent.bind(this), this.frequency * 1000);
    },
    execute: function() {
        this.callback(this);
    },
    stop: function() {
        if (!this.timer) {
            return;
        }
        clearInterval(this.timer);
        this.timer = null;
    },
    onTimerEvent: function() {
        if (!this.currentlyExecuting) {
            try {
                this.currentlyExecuting = true;
                this.execute();
            } finally {
                this.currentlyExecuting = false;
            }
        }
    }
});
Object.extend(String, {
    interpret: function(a) {
        return a == null ? "" : String(a);
    },
    specialChar: {
        "\b": "\\b",
        "\t": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        "\\": "\\\\"
    }
});
Object.extend(String.prototype, {
    gsub: function(b, d) {
        var a = "", c = this, e;
        d = arguments.callee.prepareReplacement(d);
        while (c.length > 0) {
            if (e = c.match(b)) {
                a += c.slice(0, e.index);
                a += String.interpret(d(e));
                c = c.slice(e.index + e[0].length);
            } else {
                a += c, c = "";
            }
        }
        return a;
    },
    sub: function(b, a, c) {
        a = this.gsub.prepareReplacement(a);
        c = Object.isUndefined(c) ? 1 : c;
        return this.gsub(b, function(d) {
            if (--c < 0) {
                return d[0];
            }
            return a(d);
        });
    },
    scan: function(b, a) {
        this.gsub(b, a);
        return String(this);
    },
    truncate: function(b, a) {
        b = b || 30;
        a = Object.isUndefined(a) ? "..." : a;
        return this.length > b ? this.slice(0, b - a.length) + a : String(this);
    },
    strip: function() {
        return this.replace(/^\s+/, "").replace(/\s+$/, "");
    },
    stripTags: function() {
        return this.replace(/<\/?[^>]+>/gi, "");
    },
    stripScripts: function() {
        return this.replace(new RegExp(Prototype.ScriptFragment, "img"), "");
    },
    extractScripts: function() {
        var b = new RegExp(Prototype.ScriptFragment, "img");
        var a = new RegExp(Prototype.ScriptFragment, "im");
        return (this.match(b) || []).map(function(c) {
            return (c.match(a) || ["", ""])[1];
        });
    },
    evalScripts: function() {
        return this.extractScripts().map(function(script) {
            return eval(script);
        });
    },
    escapeHTML: function() {
        var a = arguments.callee;
        a.text.data = this;
        return a.div.innerHTML;
    },
    unescapeHTML: function() {
        var a = new Element("div");
        a.innerHTML = this.stripTags();
        return a.childNodes[0] ? (a.childNodes.length > 1 ? $A(a.childNodes).inject("", function(c, b) {
            return c + b.nodeValue;
        }) : a.childNodes[0].nodeValue) : "";
    },
    toQueryParams: function(b) {
        var a = this.strip().match(/([^?#]*)(#.*)?$/);
        if (!a) {
            return {};
        }
        return a[1].split(b || "&").inject({}, function(d, c) {
            if ((c = c.split("="))[0]) {
                var f = decodeURIComponent(c.shift());
                var e = c.length > 1 ? c.join("="): c[0];
                if (e != undefined) {
                    e = decodeURIComponent(e);
                }
                if (f in d) {
                    if (!Object.isArray(d[f])) {
                        d[f] = [d[f]];
                    }
                    d[f].push(e);
                } else {
                    d[f] = e;
                }
            }
            return d;
        });
    },
    toArray: function() {
        return this.split("");
    },
    succ: function() {
        return this.slice(0, this.length - 1) + String.fromCharCode(this.charCodeAt(this.length - 1) + 1);
    },
    times: function(a) {
        return a < 1 ? "" : new Array(a + 1).join(this);
    },
    camelize: function() {
        var b = this.split("-"), a = b.length;
        if (a == 1) {
            return b[0];
        }
        var c = this.charAt(0) == "-" ? b[0].charAt(0).toUpperCase() + b[0].substring(1): b[0];
        for (var d = 1; d < a; d++) {
            c += b[d].charAt(0).toUpperCase() + b[d].substring(1);
        }
        return c;
    },
    capitalize: function() {
        return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase();
    },
    underscore: function() {
        return this.gsub(/::/, "/").gsub(/([A-Z]+)([A-Z][a-z])/, "#{1}_#{2}").gsub(/([a-z\d])([A-Z])/, "#{1}_#{2}").gsub(/-/, "_").toLowerCase();
    },
    dasherize: function() {
        return this.gsub(/_/, "-");
    },
    inspect: function(b) {
        var a = this.gsub(/[\x00-\x1f\\]/, function(d) {
            var c = String.specialChar[d[0]];
            return c ? c : "\\u00" + d[0].charCodeAt().toPaddedString(2, 16);
        });
        if (b) {
            return '"' + a.replace(/"/g, '\\"') + '"';
        }
        return "'" + a.replace(/'/g, "\\'") + "'";
    },
    toJSON: function() {
        return this.inspect(true);
    },
    unfilterJSON: function(a) {
        return this.sub(a || Prototype.JSONFilter, "#{1}");
    },
    isJSON: function() {
        var a = this;
        if (a.blank()) {
            return false;
        }
        a = this.replace(/\\./g, "@").replace(/"[^"\\\n\r]*"/g, "");
        return (/^[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]*$/).test(a);
    },
    evalJSON: function(sanitize) {
        var json = this.unfilterJSON();
        try {
            if (!sanitize || json.isJSON()) {
                return eval("(" + json + ")");
            }
        } catch (e) {}
        throw new SyntaxError("Badly formed JSON string: " + this.inspect());
    },
    include: function(a) {
        return this.indexOf(a)>-1;
    },
    startsWith: function(a) {
        return this.indexOf(a) === 0;
    },
    endsWith: function(a) {
        var b = this.length - a.length;
        return b >= 0 && this.lastIndexOf(a) === b;
    },
    empty: function() {
        return this == "";
    },
    blank: function() {
        return /^\s*$/.test(this);
    },
    interpolate: function(a, b) {
        return new Template(this, b).evaluate(a);
    }
});
if (Prototype.Browser.WebKit || Prototype.Browser.IE) {
    Object.extend(String.prototype, {
        escapeHTML: function() {
            return this.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        },
        unescapeHTML: function() {
            return this.stripTags().replace(/&amp;/g, "&").replace(/&lt;/g, "<").replace(/&gt;/g, ">");
        }
    });
}
String.prototype.gsub.prepareReplacement = function(b) {
    if (Object.isFunction(b)) {
        return b;
    }
    var a = new Template(b);
    return function(c) {
        return a.evaluate(c);
    };
};
String.prototype.parseQuery = String.prototype.toQueryParams;
Object.extend(String.prototype.escapeHTML, {
    div: document.createElement("div"),
    text: document.createTextNode("")
});
String.prototype.escapeHTML.div.appendChild(String.prototype.escapeHTML.text);
var Template = Class.create({
    initialize: function(a, b) {
        this.template = a.toString();
        this.pattern = b || Template.Pattern;
    },
    evaluate: function(a) {
        if (Object.isFunction(a.toTemplateReplacements)) {
            a = a.toTemplateReplacements();
        }
        return this.template.gsub(this.pattern, function(e) {
            if (a == null) {
                return "";
            }
            var c = e[1] || "";
            if (c == "\\") {
                return e[2];
            }
            var g = a, b = e[3];
            var d = /^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/;
            e = d.exec(b);
            if (e == null) {
                return c;
            }
            while (e != null) {
                var f = e[1].startsWith("[") ? e[2].gsub("\\\\]", "]"): e[1];
                g = g[f];
                if (null == g || "" == e[3]) {
                    break;
                }
                b = b.substring("[" == e[3] ? e[1].length : e[0].length);
                e = d.exec(b);
            }
            return c + String.interpret(g);
        });
    }
});
Template.Pattern = /(^|.|\r|\n)(#\{(.*?)\})/;
var $break = {};
var Enumerable = {
    each: function(c, d) {
        var a = 0;
        try {
            this._each(function(e) {
                c.call(d, e, a++);
            });
        } catch (b) {
            if (b != $break) {
                throw b;
            }
        }
        return this;
    },
    eachSlice: function(d, e, f) {
        var a =- d, c = [], b = this.toArray();
        if (d < 1) {
            return b;
        }
        while ((a += d) < b.length) {
            c.push(b.slice(a, a + d));
        }
        return c.collect(e, f);
    },
    all: function(b, c) {
        b = b || Prototype.K;
        var a = true;
        this.each(function(d, e) {
            a = a&&!!b.call(c, d, e);
            if (!a) {
                throw $break;
            }
        });
        return a;
    },
    any: function(b, c) {
        b = b || Prototype.K;
        var a = false;
        this.each(function(d, e) {
            if (a=!!b.call(c, d, e)) {
                throw $break;
            }
        });
        return a;
    },
    collect: function(b, c) {
        b = b || Prototype.K;
        var a = [];
        this.each(function(d, e) {
            a.push(b.call(c, d, e));
        });
        return a;
    },
    detect: function(b, c) {
        var a;
        this.each(function(d, e) {
            if (b.call(c, d, e)) {
                a = d;
                throw $break;
            }
        });
        return a;
    },
    findAll: function(b, c) {
        var a = [];
        this.each(function(d, e) {
            if (b.call(c, d, e)) {
                a.push(d);
            }
        });
        return a;
    },
    grep: function(b, c, d) {
        c = c || Prototype.K;
        var a = [];
        if (Object.isString(b)) {
            b = new RegExp(b);
        }
        this.each(function(e, f) {
            if (b.match(e)) {
                a.push(c.call(d, e, f));
            }
        });
        return a;
    },
    include: function(a) {
        if (Object.isFunction(this.indexOf)) {
            if (this.indexOf(a)!=-1) {
                return true;
            }
        }
        var b = false;
        this.each(function(c) {
            if (c == a) {
                b = true;
                throw $break;
            }
        });
        return b;
    },
    inGroupsOf: function(b, a) {
        a = Object.isUndefined(a) ? null : a;
        return this.eachSlice(b, function(c) {
            while (c.length < b) {
                c.push(a);
            }
            return c;
        });
    },
    inject: function(a, b, c) {
        this.each(function(d, e) {
            a = b.call(c, a, d, e);
        });
        return a;
    },
    invoke: function(b) {
        var a = $A(arguments).slice(1);
        return this.map(function(c) {
            return c[b].apply(c, a);
        });
    },
    max: function(b, c) {
        b = b || Prototype.K;
        var a;
        this.each(function(d, e) {
            d = b.call(c, d, e);
            if (a == null || d >= a) {
                a = d;
            }
        });
        return a;
    },
    min: function(b, c) {
        b = b || Prototype.K;
        var a;
        this.each(function(d, e) {
            d = b.call(c, d, e);
            if (a == null || d < a) {
                a = d;
            }
        });
        return a;
    },
    partition: function(b, d) {
        b = b || Prototype.K;
        var c = [], a = [];
        this.each(function(e, f) {
            (b.call(d, e, f) ? c : a).push(e);
        });
        return [c, a];
    },
    pluck: function(b) {
        var a = [];
        this.each(function(c) {
            a.push(c[b]);
        });
        return a;
    },
    reject: function(b, c) {
        var a = [];
        this.each(function(d, e) {
            if (!b.call(c, d, e)) {
                a.push(d);
            }
        });
        return a;
    },
    sortBy: function(b, a) {
        return this.map(function(c, d) {
            return {
                value: c,
                criteria: b.call(a, c, d)
            };
        }).sort(function(c, d) {
            var e = c.criteria, f = d.criteria;
            return e < f?-1 : e > f ? 1 : 0;
        }).pluck("value");
    },
    toArray: function() {
        return this.map();
    },
    zip: function() {
        var c = Prototype.K, a = $A(arguments);
        if (Object.isFunction(a.last())) {
            c = a.pop();
        }
        var b = [this].concat(a).map($A);
        return this.map(function(d, e) {
            return c(b.pluck(e));
        });
    },
    size: function() {
        return this.toArray().length;
    },
    inspect: function() {
        return "#<Enumerable:" + this.toArray().inspect() + ">";
    }
};
Object.extend(Enumerable, {
    map: Enumerable.collect,
    find: Enumerable.detect,
    select: Enumerable.findAll,
    filter: Enumerable.findAll,
    member: Enumerable.include,
    entries: Enumerable.toArray,
    every: Enumerable.all,
    some: Enumerable.any
});
function $A(b) {
    if (!b) {
        return [];
    }
    if (b.toArray) {
        return b.toArray();
    }
    var c = b.length || 0, a = new Array(c);
    while (c--) {
        a[c] = b[c];
    }
    return a;
}
if (Prototype.Browser.WebKit) {
    $A = function(b) {
        if (!b) {
            return [];
        }
        if (!(typeof b === "function" && typeof b.length === "number" && typeof b.item === "function") && b.toArray) {
            return b.toArray();
        }
        var c = b.length || 0, a = new Array(c);
        while (c--) {
            a[c] = b[c];
        }
        return a;
    };
}
Array.from = $A;
Object.extend(Array.prototype, Enumerable);
if (!Array.prototype._reverse) {
    Array.prototype._reverse = Array.prototype.reverse;
}
Object.extend(Array.prototype, {
    _each: function(c) {
        for (var a = 0, b = this.length; a < b; a++) {
            c(this[a]);
        }
    },
    clear: function() {
        this.length = 0;
        return this;
    },
    first: function() {
        return this[0];
    },
    last: function() {
        return this[this.length - 1];
    },
    compact: function() {
        return this.select(function(a) {
            return a != null;
        });
    },
    flatten: function() {
        return this.inject([], function(b, a) {
            return b.concat(Object.isArray(a) ? a.flatten() : [a]);
        });
    },
    without: function() {
        var a = $A(arguments);
        return this.select(function(b) {
            return !a.include(b);
        });
    },
    reverse: function(a) {
        return (a !== false ? this : this.toArray())._reverse();
    },
    reduce: function() {
        return this.length > 1 ? this : this[0];
    },
    uniq: function(a) {
        return this.inject([], function(b, c, d) {
            if (0 == d || (a ? b.last() != c : !b.include(c))) {
                b.push(c);
            }
            return b;
        });
    },
    intersect: function(a) {
        return this.uniq().findAll(function(b) {
            return a.detect(function(c) {
                return b === c;
            });
        });
    },
    clone: function() {
        return [].concat(this);
    },
    size: function() {
        return this.length;
    },
    inspect: function() {
        return "[" + this.map(Object.inspect).join(", ") + "]";
    },
    toJSON: function() {
        var a = [];
        this.each(function(c) {
            var b = Object.toJSON(c);
            if (!Object.isUndefined(b)) {
                a.push(b);
            }
        });
        return "[" + a.join(", ") + "]";
    }
});
if (Object.isFunction(Array.prototype.forEach)) {
    Array.prototype._each = Array.prototype.forEach;
}
if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function(b, a) {
        a || (a = 0);
        var c = this.length;
        if (a < 0) {
            a = c + a;
        }
        for (; a < c; a++) {
            if (this[a] === b) {
                return a;
            }
        }
        return - 1;
    };
}
if (!Array.prototype.lastIndexOf) {
    Array.prototype.lastIndexOf = function(c, a) {
        a = isNaN(a) ? this.length : (a < 0 ? this.length + a : a) + 1;
        var b = this.slice(0, a).reverse().indexOf(c);
        return (b < 0) ? b : a - b - 1;
    };
}
Array.prototype.toArray = Array.prototype.clone;
function $w(a) {
    if (!Object.isString(a)) {
        return [];
    }
    a = a.strip();
    return a ? a.split(/\s+/) : [];
}
if (Prototype.Browser.Opera) {
    Array.prototype.concat = function() {
        var b = [];
        for (var e = 0, d = this.length; e < d; e++) {
            b.push(this[e]);
        }
        for (var e = 0, d = arguments.length; e < d; e++) {
            if (Object.isArray(arguments[e])) {
                for (var a = 0, c = arguments[e].length; a < c; a++) {
                    b.push(arguments[e][a]);
                }
            } else {
                b.push(arguments[e]);
            }
        }
        return b;
    };
}
Object.extend(Number.prototype, {
    toColorPart: function() {
        return this.toPaddedString(2, 16);
    },
    succ: function() {
        return this + 1;
    },
    times: function(b, a) {
        $R(0, this, true).each(b, a);
        return this;
    },
    toPaddedString: function(b, c) {
        var a = this.toString(c || 10);
        return "0".times(b - a.length) + a;
    },
    toJSON: function() {
        return isFinite(this) ? this.toString() : "null";
    }
});
$w("abs round ceil floor").each(function(a) {
    Number.prototype[a] = Math[a].methodize();
});
function $H(a) {
    return new Hash(a);
}
var Hash = Class.create(Enumerable, (function() {
    function a(c, b) {
        if (Object.isUndefined(b)) {
            return c;
        }
        return c + "=" + encodeURIComponent(String.interpret(b));
    }
    return {
        initialize: function(b) {
            this._object = Object.isHash(b) ? b.toObject() : Object.clone(b);
        },
        _each: function(d) {
            for (var e in this._object) {
                var c = this._object[e], b = [e, c];
                b.key = e;
                b.value = c;
                d(b);
            }
        },
        set: function(c, b) {
            return this._object[c] = b;
        },
        get: function(b) {
            if (this._object[b] !== Object.prototype[b]) {
                return this._object[b];
            }
        },
        unset: function(c) {
            var b = this._object[c];
            delete this._object[c];
            return b;
        },
        toObject: function() {
            return Object.clone(this._object);
        },
        keys: function() {
            return this.pluck("key");
        },
        values: function() {
            return this.pluck("value");
        },
        index: function(b) {
            var c = this.detect(function(d) {
                return d.value === b;
            });
            return c && c.key;
        },
        merge: function(b) {
            return this.clone().update(b);
        },
        update: function(b) {
            return new Hash(b).inject(this, function(d, c) {
                d.set(c.key, c.value);
                return d;
            });
        },
        toQueryString: function() {
            return this.inject([], function(c, b) {
                var d = encodeURIComponent(b.key), e = b.value;
                if (e && typeof e == "object") {
                    if (Object.isArray(e)) {
                        return c.concat(e.map(a.curry(d)));
                    }
                } else {
                    c.push(a(d, e));
                }
                return c;
            }).join("&");
        },
        inspect: function() {
            return "#<Hash:{" + this.map(function(b) {
                return b.map(Object.inspect).join(": ");
            }).join(", ") + "}>";
        },
        toJSON: function() {
            return Object.toJSON(this.toObject());
        },
        clone: function() {
            return new Hash(this);
        }
    };
})());
Hash.prototype.toTemplateReplacements = Hash.prototype.toObject;
Hash.from = $H;
var ObjectRange = Class.create(Enumerable, {
    initialize: function(b, a, c) {
        this.start = b;
        this.end = a;
        this.exclusive = c;
    },
    _each: function(a) {
        var b = this.start;
        while (this.include(b)) {
            a(b);
            b = b.succ();
        }
    },
    include: function(a) {
        if (a < this.start) {
            return false;
        }
        if (this.exclusive) {
            return a < this.end;
        }
        return a <= this.end;
    }
});
var $R = function(b, a, c) {
    return new ObjectRange(b, a, c);
};
var Ajax = {
    getTransport: function() {
        return Try.these(function() {
            return new XMLHttpRequest();
        }, function() {
            return new ActiveXObject("Msxml2.XMLHTTP");
        }, function() {
            return new ActiveXObject("Microsoft.XMLHTTP");
        }) || false;
    },
    activeRequestCount: 0
};
Ajax.Responders = {
    responders: [],
    _each: function(a) {
        this.responders._each(a);
    },
    register: function(a) {
        if (!this.include(a)) {
            this.responders.push(a);
        }
    },
    unregister: function(a) {
        this.responders = this.responders.without(a);
    },
    dispatch: function(b, d, c, a) {
        this.each(function(f) {
            if (Object.isFunction(f[b])) {
                try {
                    f[b].apply(f, [d, c, a]);
                } catch (e) {}
            }
        });
    }
};
Object.extend(Ajax.Responders, Enumerable);
Ajax.Responders.register({
    onCreate: function() {
        Ajax.activeRequestCount++;
    },
    onComplete: function() {
        Ajax.activeRequestCount--;
    }
});
Ajax.Base = Class.create({
    initialize: function(a) {
        this.options = {
            method: "post",
            asynchronous: true,
            contentType: "application/x-www-form-urlencoded",
            encoding: "UTF-8",
            parameters: "",
            evalJSON: true,
            evalJS: true
        };
        Object.extend(this.options, a || {});
        this.options.method = this.options.method.toLowerCase();
        if (Object.isString(this.options.parameters)) {
            this.options.parameters = this.options.parameters.toQueryParams();
        } else {
            if (Object.isHash(this.options.parameters)) {
                this.options.parameters = this.options.parameters.toObject();
            }
        }
    }
});
Ajax.Request = Class.create(Ajax.Base, {
    _complete: false,
    initialize: function($super, b, a) {
        $super(a);
        this.transport = Ajax.getTransport();
        this.request(b);
    },
    request: function(d) {
        this.url = d;
        this.method = this.options.method;
        var b = Object.clone(this.options.parameters);
        if (!["get", "post"].include(this.method)) {
            b._method = this.method;
            this.method = "post";
        }
        this.parameters = b;
        if (b = Object.toQueryString(b)) {
            if (this.method == "get") {
                this.url += (this.url.include("?") ? "&" : "?") + b;
            } else {
                if (/Konqueror|Safari|KHTML/.test(navigator.userAgent)) {
                    b += "&_=";
                }
            }
        }
        try {
            var a = new Ajax.Response(this);
            if (this.options.onCreate) {
                this.options.onCreate(a);
            }
            Ajax.Responders.dispatch("onCreate", this, a);
            this.transport.open(this.method.toUpperCase(), this.url, this.options.asynchronous);
            if (this.options.asynchronous) {
                this.respondToReadyState.bind(this).defer(1);
            }
            this.transport.onreadystatechange = this.onStateChange.bind(this);
            this.setRequestHeaders();
            this.body = this.method == "post" ? (this.options.postBody || b) : null;
            this.transport.send(this.body);
            if (!this.options.asynchronous && this.transport.overrideMimeType) {
                this.onStateChange();
            }
        } catch (c) {
            this.dispatchException(c);
        }
    },
    onStateChange: function() {
        var a = this.transport.readyState;
        if (a > 1&&!((a == 4) && this._complete)) {
            this.respondToReadyState(this.transport.readyState);
        }
    },
    setRequestHeaders: function() {
        var b = {
            "X-Requested-With": "XMLHttpRequest",
            "X-Prototype-Version": Prototype.Version,
            Accept: "text/javascript, text/html, application/xml, text/xml, */*"
        };
        if (this.method == "post") {
            b["Content-type"] = this.options.contentType + (this.options.encoding ? "; charset=" + this.options.encoding : "");
            if (this.transport.overrideMimeType && (navigator.userAgent.match(/Gecko\/(\d{4})/) || [0, 2005])[1] < 2005) {
                b.Connection = "close";
            }
        }
        if (typeof this.options.requestHeaders == "object") {
            var d = this.options.requestHeaders;
            if (Object.isFunction(d.push)) {
                for (var e = 0, c = d.length; e < c; e += 2) {
                    b[d[e]] = d[e + 1];
                }
            } else {
                $H(d).each(function(f) {
                    b[f.key] = f.value;
                });
            }
        }
        for (var a in b) {
            this.transport.setRequestHeader(a, b[a]);
        }
    },
    success: function() {
        var a = this.getStatus();
        return !a || (a >= 200 && a < 300);
    },
    getStatus: function() {
        try {
            return this.transport.status || 0;
        } catch (a) {
            return 0;
        }
    },
    respondToReadyState: function(a) {
        var d = Ajax.Request.Events[a], e = new Ajax.Response(this);
        if (d == "Complete") {
            try {
                this._complete = true;
                (this.options["on" + e.status] || this.options["on" + (this.success() ? "Success" : "Failure")] || Prototype.emptyFunction)(e, e.headerJSON);
            } catch (c) {
                this.dispatchException(c);
            }
            var b = e.getHeader("Content-type");
            if (this.options.evalJS == "force" || (this.options.evalJS && this.isSameOrigin() && b && b.match(/^\s*(text|application)\/(x-)?(java|ecma)script(;.*)?\s*$/i))) {
                this.evalResponse();
            }
        }
        try {
            (this.options["on" + d] || Prototype.emptyFunction)(e, e.headerJSON);
            Ajax.Responders.dispatch("on" + d, this, e, e.headerJSON);
        } catch (c) {
            this.dispatchException(c);
        }
        if (d == "Complete") {
            this.transport.onreadystatechange = Prototype.emptyFunction;
        }
    },
    isSameOrigin: function() {
        var a = this.url.match(/^\s*https?:\/\/[^\/]*/);
        return !a || (a[0] == "#{protocol}//#{domain}#{port}".interpolate({
            protocol: location.protocol,
            domain: document.domain,
            port: location.port ? ":" + location.port: ""
        }));
    },
    getHeader: function(a) {
        try {
            return this.transport.getResponseHeader(a) || null;
        } catch (b) {
            return null;
        }
    },
    evalResponse: function() {
        try {
            return eval((this.transport.responseText || "").unfilterJSON());
        } catch (e) {
            this.dispatchException(e);
        }
    },
    dispatchException: function(a) {
        (this.options.onException || Prototype.emptyFunction)(this, a);
        Ajax.Responders.dispatch("onException", this, a);
    }
});
Ajax.Request.Events = ["Uninitialized", "Loading", "Loaded", "Interactive", "Complete"];
Ajax.Response = Class.create({
    initialize: function(c) {
        this.request = c;
        var b = this.transport = c.transport, a = this.readyState = b.readyState;
        if ((a > 2&&!Prototype.Browser.IE) || a == 4) {
            this.status = this.getStatus();
            this.statusText = this.getStatusText();
            this.responseText = String.interpret(b.responseText);
            this.headerJSON = this._getHeaderJSON();
        }
        if (a == 4) {
            var d = b.responseXML;
            this.responseXML = Object.isUndefined(d) ? null : d;
            this.responseJSON = this._getResponseJSON();
        }
    },
    status: 0,
    statusText: "",
    getStatus: Ajax.Request.prototype.getStatus,
    getStatusText: function() {
        try {
            return this.transport.statusText || "";
        } catch (a) {
            return "";
        }
    },
    getHeader: Ajax.Request.prototype.getHeader,
    getAllHeaders: function() {
        try {
            return this.getAllResponseHeaders();
        } catch (a) {
            return null;
        }
    },
    getResponseHeader: function(a) {
        return this.transport.getResponseHeader(a);
    },
    getAllResponseHeaders: function() {
        return this.transport.getAllResponseHeaders();
    },
    _getHeaderJSON: function() {
        var a = this.getHeader("X-JSON");
        if (!a) {
            return null;
        }
        a = decodeURIComponent(escape(a));
        try {
            return a.evalJSON(this.request.options.sanitizeJSON ||!this.request.isSameOrigin());
        } catch (b) {
            this.request.dispatchException(b);
        }
    },
    _getResponseJSON: function() {
        var a = this.request.options;
        if (!a.evalJSON || (a.evalJSON != "force"&&!(this.getHeader("Content-type") || "").include("application/json")) || this.responseText.blank()) {
            return null;
        }
        try {
            return this.responseText.evalJSON(a.sanitizeJSON ||!this.request.isSameOrigin());
        } catch (b) {
            this.request.dispatchException(b);
        }
    }
});
Ajax.Updater = Class.create(Ajax.Request, {
    initialize: function($super, a, c, d) {
        this.container = {
            success: (a.success || a),
            failure: (a.failure || (a.success ? null : a))
        };
        d = Object.clone(d);
        var b = d.onComplete;
        d.onComplete = (function(f, e) {
            this.updateContent(f.responseText);
            if (Object.isFunction(b)) {
                b(f, e);
            }
        }).bind(this);
        $super(c, d);
    },
    updateContent: function(b) {
        var c = this.container[this.success() ? "success": "failure"], a = this.options;
        if (!a.evalScripts) {
            b = b.stripScripts();
        }
        if (c = $(c)) {
            if (a.insertion) {
                if (Object.isString(a.insertion)) {
                    var d = {};
                    d[a.insertion] = b;
                    c.insert(d);
                } else {
                    a.insertion(c, b);
                }
            } else {
                c.update(b);
            }
        }
    }
});
Ajax.PeriodicalUpdater = Class.create(Ajax.Base, {
    initialize: function($super, a, b, c) {
        $super(c);
        this.onComplete = this.options.onComplete;
        this.frequency = (this.options.frequency || 2);
        this.decay = (this.options.decay || 1);
        this.updater = {};
        this.container = a;
        this.url = b;
        this.start();
    },
    start: function() {
        this.options.onComplete = this.updateComplete.bind(this);
        this.onTimerEvent();
    },
    stop: function() {
        this.updater.options.onComplete = undefined;
        clearTimeout(this.timer);
        (this.onComplete || Prototype.emptyFunction).apply(this, arguments);
    },
    updateComplete: function(a) {
        if (this.options.decay) {
            this.decay = (a.responseText == this.lastText ? this.decay * this.options.decay : 1);
            this.lastText = a.responseText;
        }
        this.timer = this.onTimerEvent.bind(this).delay(this.decay * this.frequency);
    },
    onTimerEvent: function() {
        this.updater = new Ajax.Updater(this.container, this.url, this.options);
    }
});
function $(d) {
    if (arguments.length > 1) {
        for (var a = 0, b = [], c = arguments.length; a < c; a++) {
            b.push($(arguments[a]));
        }
        return b;
    }
    if (Object.isString(d)) {
        d = document.getElementById(d);
    }
    return Element.extend(d);
}
if (Prototype.BrowserFeatures.XPath) {
    document._getElementsByXPath = function(b, a) {
        var e = [];
        var c = document.evaluate(b, $(a) || document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
        for (var f = 0, d = c.snapshotLength; f < d; f++) {
            e.push(Element.extend(c.snapshotItem(f)));
        }
        return e;
    };
}
if (!window.Node) {
    var Node = {};
}
if (!Node.ELEMENT_NODE) {
    Object.extend(Node, {
        ELEMENT_NODE: 1,
        ATTRIBUTE_NODE: 2,
        TEXT_NODE: 3,
        CDATA_SECTION_NODE: 4,
        ENTITY_REFERENCE_NODE: 5,
        ENTITY_NODE: 6,
        PROCESSING_INSTRUCTION_NODE: 7,
        COMMENT_NODE: 8,
        DOCUMENT_NODE: 9,
        DOCUMENT_TYPE_NODE: 10,
        DOCUMENT_FRAGMENT_NODE: 11,
        NOTATION_NODE: 12
    });
}(function() {
    var a = this.Element;
    this.Element = function(b, c) {
        c = c || {};
        b = b.toLowerCase();
        var d = Element.cache;
        if (Prototype.Browser.IE && c.name) {
            b = "<" + b + ' name="' + c.name + '">';
            delete c.name;
            return Element.writeAttribute(document.createElement(b), c);
        }
        if (!d[b]) {
            d[b] = Element.extend(document.createElement(b));
        }
        return Element.writeAttribute(d[b].cloneNode(false), c);
    };
    Object.extend(this.Element, a || {});
    if (a) {
        this.Element.prototype = a.prototype;
    }
}).call(window);
Element.cache = {};
Element.Methods = {
    visible: function(a) {
        return $(a).style.display != "none";
    },
    toggle: function(a) {
        a = $(a);
        Element[Element.visible(a) ? "hide": "show"](a);
        return a;
    },
    hide: function(a) {
        a = $(a);
        a.style.display = "none";
        return a;
    },
    show: function(a) {
        a = $(a);
        a.style.display = "";
        return a;
    },
    remove: function(a) {
        a = $(a);
        a.parentNode.removeChild(a);
        return a;
    },
    update: function(a, b) {
        a = $(a);
        if (b && b.toElement) {
            b = b.toElement();
        }
        if (Object.isElement(b)) {
            return a.update().insert(b);
        }
        b = Object.toHTML(b);
        a.innerHTML = b.stripScripts();
        b.evalScripts.bind(b).defer();
        return a;
    },
    replace: function(c, b) {
        c = $(c);
        if (b && b.toElement) {
            b = b.toElement();
        } else {
            if (!Object.isElement(b)) {
                b = Object.toHTML(b);
                var a = c.ownerDocument.createRange();
                a.selectNode(c);
                b.evalScripts.bind(b).defer();
                b = a.createContextualFragment(b.stripScripts());
            }
        }
        c.parentNode.replaceChild(b, c);
        return c;
    },
    insert: function(f, d) {
        f = $(f);
        if (Object.isString(d) || Object.isNumber(d) || Object.isElement(d) || (d && (d.toElement || d.toHTML))) {
            d = {
                bottom: d
            };
        }
        var e, c, g, b;
        for (var a in d) {
            e = d[a];
            a = a.toLowerCase();
            c = Element._insertionTranslations[a];
            if (e && e.toElement) {
                e = e.toElement();
            }
            if (Object.isElement(e)) {
                c(f, e);
                continue;
            }
            e = Object.toHTML(e);
            g = ((a == "before" || a == "after") ? f.parentNode : f).tagName.toUpperCase();
            b = Element._getContentFromAnonymousElement(g, e.stripScripts());
            if (a == "top" || a == "after") {
                b.reverse();
            }
            b.each(c.curry(f));
            e.evalScripts.bind(e).defer();
        }
        return f;
    },
    wrap: function(c, b, a) {
        c = $(c);
        if (Object.isElement(b)) {
            $(b).writeAttribute(a || {});
        } else {
            if (Object.isString(b)) {
                b = new Element(b, a);
            } else {
                b = new Element("div", b);
            }
        }
        if (c.parentNode) {
            c.parentNode.replaceChild(b, c);
        }
        b.appendChild(c);
        return b;
    },
    inspect: function(b) {
        b = $(b);
        var a = "<" + b.tagName.toLowerCase();
        $H({
            id: "id",
            className: "class"
        }).each(function(c) {
            var d = c.first(), f = c.last();
            var e = (b[d] || "").toString();
            if (e) {
                a += " " + f + "=" + e.inspect(true);
            }
        });
        return a + ">";
    },
    recursivelyCollect: function(a, b) {
        a = $(a);
        var c = [];
        while (a = a[b]) {
            if (a.nodeType == 1) {
                c.push(Element.extend(a));
            }
        }
        return c;
    },
    ancestors: function(a) {
        return $(a).recursivelyCollect("parentNode");
    },
    descendants: function(a) {
        return $(a).select("*");
    },
    firstDescendant: function(a) {
        a = $(a).firstChild;
        while (a && a.nodeType != 1) {
            a = a.nextSibling;
        }
        return $(a);
    },
    immediateDescendants: function(a) {
        if (!(a = $(a).firstChild)) {
            return [];
        }
        while (a && a.nodeType != 1) {
            a = a.nextSibling;
        }
        if (a) {
            return [a].concat($(a).nextSiblings());
        }
        return [];
    },
    previousSiblings: function(a) {
        return $(a).recursivelyCollect("previousSibling");
    },
    nextSiblings: function(a) {
        return $(a).recursivelyCollect("nextSibling");
    },
    siblings: function(a) {
        a = $(a);
        return a.previousSiblings().reverse().concat(a.nextSiblings());
    },
    match: function(b, a) {
        if (Object.isString(a)) {
            a = new Selector(a);
        }
        return a.match($(b));
    },
    up: function(d, b, a) {
        d = $(d);
        if (arguments.length == 1) {
            return $(d.parentNode);
        }
        var c = d.ancestors();
        return Object.isNumber(b) ? c[b] : Selector.findElement(c, b, a);
    },
    down: function(c, b, a) {
        c = $(c);
        if (arguments.length == 1) {
            return c.firstDescendant();
        }
        return Object.isNumber(b) ? c.descendants()[b] : Element.select(c, b)[a || 0];
    },
    previous: function(d, b, a) {
        d = $(d);
        if (arguments.length == 1) {
            return $(Selector.handlers.previousElementSibling(d));
        }
        var c = d.previousSiblings();
        return Object.isNumber(b) ? c[b] : Selector.findElement(c, b, a);
    },
    next: function(c, b, d) {
        c = $(c);
        if (arguments.length == 1) {
            return $(Selector.handlers.nextElementSibling(c));
        }
        var a = c.nextSiblings();
        return Object.isNumber(b) ? a[b] : Selector.findElement(a, b, d);
    },
    select: function() {
        var a = $A(arguments), b = $(a.shift());
        return Selector.findChildElements(b, a);
    },
    adjacent: function() {
        var a = $A(arguments), b = $(a.shift());
        return Selector.findChildElements(b.parentNode, a).without(b);
    },
    identify: function(c) {
        c = $(c);
        var b = c.readAttribute("id"), a = arguments.callee;
        if (b) {
            return b;
        }
        do {
            b = "anonymous_element_" + a.counter++;
        }
        while ($(b));
        c.writeAttribute("id", b);
        return b;
    },
    readAttribute: function(b, a) {
        b = $(b);
        if (Prototype.Browser.IE) {
            var c = Element._attributeTranslations.read;
            if (c.values[a]) {
                return c.values[a](b, a);
            }
            if (c.names[a]) {
                a = c.names[a];
            }
            if (a.include(":")) {
                return (!b.attributes ||!b.attributes[a]) ? null : b.attributes[a].value;
            }
        }
        return b.getAttribute(a);
    },
    writeAttribute: function(c, e, b) {
        c = $(c);
        var f = {}, d = Element._attributeTranslations.write;
        if (typeof e == "object") {
            f = e;
        } else {
            f[e] = Object.isUndefined(b) ? true : b;
        }
        for (var a in f) {
            e = d.names[a] || a;
            b = f[a];
            if (d.values[a]) {
                e = d.values[a](c, b);
            }
            if (b === false || b === null) {
                c.removeAttribute(e);
            } else {
                if (b === true) {
                    c.setAttribute(e, e);
                } else {
                    c.setAttribute(e, b);
                }
            }
        }
        return c;
    },
    getHeight: function(a) {
        return $(a).getDimensions().height;
    },
    getWidth: function(a) {
        return $(a).getDimensions().width;
    },
    classNames: function(a) {
        return new Element.ClassNames(a);
    },
    hasClassName: function(a, c) {
        if (!(a = $(a))) {
            return;
        }
        var b = a.className;
        return (b.length > 0 && (b == c || new RegExp("(^|\\s)" + c + "(\\s|$)").test(b)));
    },
    addClassName: function(a, b) {
        if (!(a = $(a))) {
            return;
        }
        if (!a.hasClassName(b)) {
            a.className += (a.className ? " " : "") + b;
        }
        return a;
    },
    removeClassName: function(a, b) {
        if (!(a = $(a))) {
            return;
        }
        a.className = a.className.replace(new RegExp("(^|\\s+)" + b + "(\\s+|$)"), " ").strip();
        return a;
    },
    toggleClassName: function(a, b) {
        if (!(a = $(a))) {
            return;
        }
        return a[a.hasClassName(b) ? "removeClassName": "addClassName"](b);
    },
    cleanWhitespace: function(c) {
        c = $(c);
        var b = c.firstChild;
        while (b) {
            var a = b.nextSibling;
            if (b.nodeType == 3&&!/\S/.test(b.nodeValue)) {
                c.removeChild(b);
            }
            b = a;
        }
        return c;
    },
    empty: function(a) {
        return $(a).innerHTML.blank();
    },
    descendantOf: function(b, a) {
        b = $(b), a = $(a);
        if (b.compareDocumentPosition) {
            return (b.compareDocumentPosition(a) & 8) === 8;
        }
        if (a.contains) {
            return a.contains(b) && a !== b;
        }
        while (b = b.parentNode) {
            if (b == a) {
                return true;
            }
        }
        return false;
    },
    scrollTo: function(a) {
        a = $(a);
        var b = a.cumulativeOffset();
        window.scrollTo(b[0], b[1]);
        return a;
    },
    getStyle: function(d, c) {
        d = $(d);
        c = c == "float" ? "cssFloat" : c.camelize();
        var b = d.style[c];
        if (!b || b == "auto") {
            var a = document.defaultView.getComputedStyle(d, null);
            b = a ? a[c] : null;
        }
        if (c == "opacity") {
            return b ? parseFloat(b) : 1;
        }
        return b == "auto" ? null : b;
    },
    getOpacity: function(a) {
        return $(a).getStyle("opacity");
    },
    setStyle: function(e, d) {
        e = $(e);
        var b = e.style, a;
        if (Object.isString(d)) {
            e.style.cssText += ";" + d;
            return d.include("opacity") ? e.setOpacity(d.match(/opacity:\s*(\d?\.?\d*)/)[1]) : e;
        }
        for (var c in d) {
            if (c == "opacity") {
                e.setOpacity(d[c]);
            } else {
                b[(c == "float" || c == "cssFloat") ? (Object.isUndefined(b.styleFloat) ? "cssFloat" : "styleFloat"): c] = d[c];
            }
        }
        return e;
    },
    setOpacity: function(a, b) {
        a = $(a);
        a.style.opacity = (b == 1 || b === "") ? "" : (b < 0.00001) ? 0 : b;
        return a;
    },
    getDimensions: function(g) {
        g = $(g);
        var c = g.getStyle("display");
        if (c != "none" && c != null) {
            return {
                width: g.offsetWidth,
                height: g.offsetHeight
            };
        }
        var h = g.style;
        var d = h.visibility;
        var f = h.position;
        var a = h.display;
        h.visibility = "hidden";
        h.position = "absolute";
        h.display = "block";
        var b = g.clientWidth;
        var e = g.clientHeight;
        h.display = a;
        h.position = f;
        h.visibility = d;
        return {
            width: b,
            height: e
        };
    },
    makePositioned: function(a) {
        a = $(a);
        var b = Element.getStyle(a, "position");
        if (b == "static" ||!b) {
            a._madePositioned = true;
            a.style.position = "relative";
            if (Prototype.Browser.Opera) {
                a.style.top = 0;
                a.style.left = 0;
            }
        }
        return a;
    },
    undoPositioned: function(a) {
        a = $(a);
        if (a._madePositioned) {
            a._madePositioned = undefined;
            a.style.position = a.style.top = a.style.left = a.style.bottom = a.style.right = "";
        }
        return a;
    },
    makeClipping: function(a) {
        a = $(a);
        if (a._overflow) {
            return a;
        }
        a._overflow = Element.getStyle(a, "overflow") || "auto";
        if (a._overflow !== "hidden") {
            a.style.overflow = "hidden";
        }
        return a;
    },
    undoClipping: function(a) {
        a = $(a);
        if (!a._overflow) {
            return a;
        }
        a.style.overflow = a._overflow == "auto" ? "" : a._overflow;
        a._overflow = null;
        return a;
    },
    cumulativeOffset: function(c) {
        var a = 0, b = 0;
        do {
            a += c.offsetTop || 0;
            b += c.offsetLeft || 0;
            c = c.offsetParent;
        }
        while (c);
        return Element._returnOffset(b, a);
    },
    positionedOffset: function(d) {
        var a = 0, b = 0;
        do {
            a += d.offsetTop || 0;
            b += d.offsetLeft || 0;
            d = d.offsetParent;
            if (d) {
                if (d.tagName.toUpperCase() == "BODY") {
                    break;
                }
                var c = Element.getStyle(d, "position");
                if (c !== "static") {
                    break;
                }
            }
        }
        while (d);
        return Element._returnOffset(b, a);
    },
    absolutize: function(f) {
        f = $(f);
        if (f.getStyle("position") == "absolute") {
            return f;
        }
        var d = f.positionedOffset();
        var b = d[1];
        var c = d[0];
        var e = f.clientWidth;
        var a = f.clientHeight;
        f._originalLeft = c - parseFloat(f.style.left || 0);
        f._originalTop = b - parseFloat(f.style.top || 0);
        f._originalWidth = f.style.width;
        f._originalHeight = f.style.height;
        f.style.position = "absolute";
        f.style.top = b + "px";
        f.style.left = c + "px";
        f.style.width = e + "px";
        f.style.height = a + "px";
        return f;
    },
    relativize: function(a) {
        a = $(a);
        if (a.getStyle("position") == "relative") {
            return a;
        }
        a.style.position = "relative";
        var b = parseFloat(a.style.top || 0) - (a._originalTop || 0);
        var c = parseFloat(a.style.left || 0) - (a._originalLeft || 0);
        a.style.top = b + "px";
        a.style.left = c + "px";
        a.style.height = a._originalHeight;
        a.style.width = a._originalWidth;
        return a;
    },
    cumulativeScrollOffset: function(c) {
        var a = 0, b = 0;
        do {
            a += c.scrollTop || 0;
            b += c.scrollLeft || 0;
            c = c.parentNode;
        }
        while (c);
        return Element._returnOffset(b, a);
    },
    getOffsetParent: function(a) {
        if (a.offsetParent) {
            return $(a.offsetParent);
        }
        if (a == document.body) {
            return $(a);
        }
        while ((a = a.parentNode) && a != document.body) {
            if (Element.getStyle(a, "position") != "static") {
                return $(a);
            }
        }
        return $(document.body);
    },
    viewportOffset: function(b) {
        var a = 0, c = 0;
        var d = b;
        do {
            a += d.offsetTop || 0;
            c += d.offsetLeft || 0;
            if (d.offsetParent == document.body && Element.getStyle(d, "position") == "absolute") {
                break;
            }
        }
        while (d = d.offsetParent);
        d = b;
        do {
            if (!Prototype.Browser.Opera || (d.tagName && (d.tagName.toUpperCase() == "BODY"))) {
                a -= d.scrollTop || 0;
                c -= d.scrollLeft || 0;
            }
        }
        while (d = d.parentNode);
        return Element._returnOffset(c, a);
    },
    clonePosition: function(f, d) {
        var a = Object.extend({
            setLeft: true,
            setTop: true,
            setWidth: true,
            setHeight: true,
            offsetTop: 0,
            offsetLeft: 0
        }, arguments[2] || {});
        d = $(d);
        var c = d.viewportOffset();
        f = $(f);
        var b = [0, 0];
        var e = null;
        if (Element.getStyle(f, "position") == "absolute") {
            e = f.getOffsetParent();
            b = e.viewportOffset();
        }
        if (e == document.body) {
            b[0] -= document.body.offsetLeft;
            b[1] -= document.body.offsetTop;
        }
        if (a.setLeft) {
            f.style.left = (c[0] - b[0] + a.offsetLeft) + "px";
        }
        if (a.setTop) {
            f.style.top = (c[1] - b[1] + a.offsetTop) + "px";
        }
        if (a.setWidth) {
            f.style.width = d.offsetWidth + "px";
        }
        if (a.setHeight) {
            f.style.height = d.offsetHeight + "px";
        }
        return f;
    }
};
Element.Methods.identify.counter = 1;
Object.extend(Element.Methods, {
    getElementsBySelector: Element.Methods.select,
    childElements: Element.Methods.immediateDescendants
});
Element._attributeTranslations = {
    write: {
        names: {
            className: "class",
            htmlFor: "for"
        },
        values: {}
    }
};
if (Prototype.Browser.Opera) {
    Element.Methods.getStyle = Element.Methods.getStyle.wrap(function(c, e, d) {
        switch (d) {
        case"left":
        case"top":
        case"right":
        case"bottom":
            if (c(e, "position") === "static") {
                return null;
            }
        case"height":
        case"width":
            if (!Element.visible(e)) {
                return null;
            }
            var b = parseInt(c(e, d), 10);
            if (b !== e["offset" + d.capitalize()]) {
                return b + "px";
            }
            var a;
            if (d === "height") {
                a = ["border-top-width", "padding-top", "padding-bottom", "border-bottom-width"];
            } else {
                a = ["border-left-width", "padding-left", "padding-right", "border-right-width"];
            }
            return a.inject(b, function(h, g) {
                var f = c(e, g);
                return f === null ? h : h - parseInt(f, 10);
            }) + "px";
        default:
            return c(e, d);
        }
    });
    Element.Methods.readAttribute = Element.Methods.readAttribute.wrap(function(b, a, c) {
        if (c === "title") {
            return a.title;
        }
        return b(a, c);
    });
} else {
    if (Prototype.Browser.IE) {
        Element.Methods.getOffsetParent = Element.Methods.getOffsetParent.wrap(function(d, e) {
            e = $(e);
            try {
                e.offsetParent;
            } catch (b) {
                return $(document.body);
            }
            var a = e.getStyle("position");
            if (a !== "static") {
                return d(e);
            }
            e.setStyle({
                position: "relative"
            });
            var c = d(e);
            e.setStyle({
                position: a
            });
            return c;
        });
        $w("positionedOffset viewportOffset").each(function(a) {
            Element.Methods[a] = Element.Methods[a].wrap(function(d, f) {
                f = $(f);
                try {
                    f.offsetParent;
                } catch (b) {
                    return Element._returnOffset(0, 0);
                }
                var g = f.getStyle("position");
                if (g !== "static") {
                    return d(f);
                }
                var e = f.getOffsetParent();
                if (e && e.getStyle("position") === "fixed") {
                    e.setStyle({
                        zoom: 1
                    });
                }
                f.setStyle({
                    position: "relative"
                });
                var c = d(f);
                f.setStyle({
                    position: g
                });
                return c;
            });
        });
        Element.Methods.cumulativeOffset = Element.Methods.cumulativeOffset.wrap(function(c, a) {
            try {
                a.offsetParent;
            } catch (b) {
                return Element._returnOffset(0, 0);
            }
            return c(a);
        });
        Element.Methods.getStyle = function(a, c) {
            a = $(a);
            c = (c == "float" || c == "cssFloat") ? "styleFloat" : c.camelize();
            var b = a.style[c];
            if (!b && a.currentStyle) {
                b = a.currentStyle[c];
            }
            if (c == "opacity") {
                if (b = (a.getStyle("filter") || "").match(/alpha\(opacity=(.*)\)/)) {
                    if (b[1]) {
                        return parseFloat(b[1]) / 100;
                    }
                }
                return 1;
            }
            if (b == "auto") {
                if ((c == "width" || c == "height") && (a.getStyle("display") != "none")) {
                    return a["offset" + c.capitalize()] + "px";
                }
                return null;
            }
            return b;
        };
        Element.Methods.setOpacity = function(f, c) {
            function b(g) {
                return g.replace(/alpha\([^\)]*\)/gi, "");
            }
            f = $(f);
            var a = f.currentStyle;
            if ((a&&!a.hasLayout) || (!a && f.style.zoom == "normal")) {
                f.style.zoom = 1;
            }
            var d = f.getStyle("filter"), e = f.style;
            if (c == 1 || c === "") {
                (d = b(d)) ? e.filter = d : e.removeAttribute("filter");
                return f;
            } else {
                if (c < 0.00001) {
                    c = 0;
                }
            }
            e.filter = b(d) + "alpha(opacity=" + (c * 100) + ")";
            return f;
        };
        Element._attributeTranslations = {
            read: {
                names: {
                    "class": "className",
                    "for": "htmlFor"
                },
                values: {
                    _getAttr: function(a, b) {
                        return a.getAttribute(b, 2);
                    },
                    _getAttrNode: function(a, b) {
                        var c = a.getAttributeNode(b);
                        return c ? c.value : "";
                    },
                    _getEv: function(a, b) {
                        b = a.getAttribute(b);
                        return b ? b.toString().slice(23, - 2) : null;
                    },
                    _flag: function(a, b) {
                        return $(a).hasAttribute(b) ? b : null;
                    },
                    style: function(a) {
                        return a.style.cssText.toLowerCase();
                    },
                    title: function(a) {
                        return a.title;
                    }
                }
            }
        };
        Element._attributeTranslations.write = {
            names: Object.extend({
                cellpadding: "cellPadding",
                cellspacing: "cellSpacing"
            }, Element._attributeTranslations.read.names),
            values: {
                checked: function(a, b) {
                    a.checked=!!b;
                },
                style: function(a, b) {
                    a.style.cssText = b ? b : "";
                }
            }
        };
        Element._attributeTranslations.has = {};
        $w("colSpan rowSpan vAlign dateTime accessKey tabIndex encType maxLength readOnly longDesc frameBorder").each(function(a) {
            Element._attributeTranslations.write.names[a.toLowerCase()] = a;
            Element._attributeTranslations.has[a.toLowerCase()] = a;
        });
        (function(a) {
            Object.extend(a, {
                href: a._getAttr,
                src: a._getAttr,
                type: a._getAttr,
                action: a._getAttrNode,
                disabled: a._flag,
                checked: a._flag,
                readonly: a._flag,
                multiple: a._flag,
                onload: a._getEv,
                onunload: a._getEv,
                onclick: a._getEv,
                ondblclick: a._getEv,
                onmousedown: a._getEv,
                onmouseup: a._getEv,
                onmouseover: a._getEv,
                onmousemove: a._getEv,
                onmouseout: a._getEv,
                onfocus: a._getEv,
                onblur: a._getEv,
                onkeypress: a._getEv,
                onkeydown: a._getEv,
                onkeyup: a._getEv,
                onsubmit: a._getEv,
                onreset: a._getEv,
                onselect: a._getEv,
                onchange: a._getEv
            });
        })(Element._attributeTranslations.read.values);
    } else {
        if (Prototype.Browser.Gecko && /rv:1\.8\.0/.test(navigator.userAgent)) {
            Element.Methods.setOpacity = function(a, b) {
                a = $(a);
                a.style.opacity = (b == 1) ? 0.999999 : (b === "") ? "" : (b < 0.00001) ? 0 : b;
                return a;
            };
        } else {
            if (Prototype.Browser.WebKit) {
                Element.Methods.setOpacity = function(a, d) {
                    a = $(a);
                    a.style.opacity = (d == 1 || d === "") ? "" : (d < 0.00001) ? 0 : d;
                    if (d == 1) {
                        if (a.tagName.toUpperCase() == "IMG" && a.width) {
                            a.width++;
                            a.width--;
                        } else {
                            try {
                                var b = document.createTextNode(" ");
                                a.appendChild(b);
                                a.removeChild(b);
                            } catch (c) {}
                        }
                    }
                    return a;
                };
                Element.Methods.cumulativeOffset = function(c) {
                    var a = 0, b = 0;
                    do {
                        a += c.offsetTop || 0;
                        b += c.offsetLeft || 0;
                        if (c.offsetParent == document.body) {
                            if (Element.getStyle(c, "position") == "absolute") {
                                break;
                            }
                        }
                        c = c.offsetParent;
                    }
                    while (c);
                    return Element._returnOffset(b, a);
                };
            }
        }
    }
}
if (Prototype.Browser.IE || Prototype.Browser.Opera) {
    Element.Methods.update = function(c, b) {
        c = $(c);
        if (b && b.toElement) {
            b = b.toElement();
        }
        if (Object.isElement(b)) {
            return c.update().insert(b);
        }
        b = Object.toHTML(b);
        var a = c.tagName.toUpperCase();
        if (a in Element._insertionTranslations.tags) {
            $A(c.childNodes).each(function(d) {
                c.removeChild(d);
            });
            Element._getContentFromAnonymousElement(a, b.stripScripts()).each(function(d) {
                c.appendChild(d);
            });
        } else {
            c.innerHTML = b.stripScripts();
        }
        b.evalScripts.bind(b).defer();
        return c;
    };
}
if ("outerHTML" in document.createElement("div")) {
    Element.Methods.replace = function(e, c) {
        e = $(e);
        if (c && c.toElement) {
            c = c.toElement();
        }
        if (Object.isElement(c)) {
            e.parentNode.replaceChild(c, e);
            return e;
        }
        c = Object.toHTML(c);
        var d = e.parentNode, f = d.tagName.toUpperCase();
        if (Element._insertionTranslations.tags[f]) {
            var b = e.next();
            var a = Element._getContentFromAnonymousElement(f, c.stripScripts());
            d.removeChild(e);
            if (b) {
                a.each(function(g) {
                    d.insertBefore(g, b);
                });
            } else {
                a.each(function(g) {
                    d.appendChild(g);
                });
            }
        } else {
            e.outerHTML = c.stripScripts();
        }
        c.evalScripts.bind(c).defer();
        return e;
    };
}
Element._returnOffset = function(c, b) {
    var a = [c, b];
    a.left = c;
    a.top = b;
    return a;
};
Element._getContentFromAnonymousElement = function(c, d) {
    var b = new Element("div"), a = Element._insertionTranslations.tags[c];
    if (a) {
        b.innerHTML = a[0] + d + a[1];
        a[2].times(function() {
            b = b.firstChild;
        });
    } else {
        b.innerHTML = d;
    }
    return $A(b.childNodes);
};
Element._insertionTranslations = {
    before: function(a, b) {
        a.parentNode.insertBefore(b, a);
    },
    top: function(a, b) {
        a.insertBefore(b, a.firstChild);
    },
    bottom: function(a, b) {
        a.appendChild(b);
    },
    after: function(a, b) {
        a.parentNode.insertBefore(b, a.nextSibling);
    },
    tags: {
        TABLE: ["<table>", "</table>", 1],
        TBODY: ["<table><tbody>", "</tbody></table>", 2],
        TR: ["<table><tbody><tr>", "</tr></tbody></table>", 3],
        TD: ["<table><tbody><tr><td>", "</td></tr></tbody></table>", 4],
        SELECT: ["<select>", "</select>", 1]
    }
};
(function() {
    Object.extend(this.tags, {
        THEAD: this.tags.TBODY,
        TFOOT: this.tags.TBODY,
        TH: this.tags.TD
    });
}).call(Element._insertionTranslations);
Element.Methods.Simulated = {
    hasAttribute: function(a, b) {
        b = Element._attributeTranslations.has[b] || b;
        var c = $(a).getAttributeNode(b);
        return !!(c && c.specified);
    }
};
Element.Methods.ByTag = {};
Object.extend(Element, Element.Methods);
if (!Prototype.BrowserFeatures.ElementExtensions && document.createElement("div")["__proto__"]) {
    window.HTMLElement = {};
    window.HTMLElement.prototype = document.createElement("div")["__proto__"];
    Prototype.BrowserFeatures.ElementExtensions = true;
}
Element.extend = (function() {
    if (Prototype.BrowserFeatures.SpecificElementExtensions) {
        return Prototype.K;
    }
    var a = {}, c = Element.Methods.ByTag;
    var b = Object.extend(function(f) {
        if (!f || f._extendedByPrototype || f.nodeType != 1 || f == window) {
            return f;
        }
        var h = Object.clone(a), g = f.tagName.toUpperCase(), d, e;
        if (c[g]) {
            Object.extend(h, c[g]);
        }
        for (d in h) {
            e = h[d];
            if (Object.isFunction(e)&&!(d in f)) {
                f[d] = e.methodize();
            }
        }
        f._extendedByPrototype = Prototype.emptyFunction;
        return f;
    }, {
        refresh: function() {
            if (!Prototype.BrowserFeatures.ElementExtensions) {
                Object.extend(a, Element.Methods);
                Object.extend(a, Element.Methods.Simulated);
            }
        }
    });
    b.refresh();
    return b;
})();
Element.hasAttribute = function(a, b) {
    if (a.hasAttribute) {
        return a.hasAttribute(b);
    }
    return Element.Methods.Simulated.hasAttribute(a, b);
};
Element.addMethods = function(b) {
    var f = Prototype.BrowserFeatures, a = Element.Methods.ByTag;
    if (!b) {
        Object.extend(Form, Form.Methods);
        Object.extend(Form.Element, Form.Element.Methods);
        Object.extend(Element.Methods.ByTag, {
            FORM: Object.clone(Form.Methods),
            INPUT: Object.clone(Form.Element.Methods),
            SELECT: Object.clone(Form.Element.Methods),
            TEXTAREA: Object.clone(Form.Element.Methods)
        });
    }
    if (arguments.length == 2) {
        var c = b;
        b = arguments[1];
    }
    if (!c) {
        Object.extend(Element.Methods, b || {});
    } else {
        if (Object.isArray(c)) {
            c.each(g);
        } else {
            g(c);
        }
    }
    function g(l) {
        l = l.toUpperCase();
        if (!Element.Methods.ByTag[l]) {
            Element.Methods.ByTag[l] = {};
        }
        Object.extend(Element.Methods.ByTag[l], b);
    }
    function d(l, m, n) {
        n = n || false;
        for (var o in l) {
            var p = l[o];
            if (!Object.isFunction(p)) {
                continue;
            }
            if (!n ||!(o in m)) {
                m[o] = p.methodize();
            }
        }
    }
    function k(l) {
        var n;
        var m = {
            OPTGROUP: "OptGroup",
            TEXTAREA: "TextArea",
            P: "Paragraph",
            FIELDSET: "FieldSet",
            UL: "UList",
            OL: "OList",
            DL: "DList",
            DIR: "Directory",
            H1: "Heading",
            H2: "Heading",
            H3: "Heading",
            H4: "Heading",
            H5: "Heading",
            H6: "Heading",
            Q: "Quote",
            INS: "Mod",
            DEL: "Mod",
            A: "Anchor",
            IMG: "Image",
            CAPTION: "TableCaption",
            COL: "TableCol",
            COLGROUP: "TableCol",
            THEAD: "TableSection",
            TFOOT: "TableSection",
            TBODY: "TableSection",
            TR: "TableRow",
            TH: "TableCell",
            TD: "TableCell",
            FRAMESET: "FrameSet",
            IFRAME: "IFrame"
        };
        if (m[l]) {
            n = "HTML" + m[l] + "Element";
        }
        if (window[n]) {
            return window[n];
        }
        n = "HTML" + l + "Element";
        if (window[n]) {
            return window[n];
        }
        n = "HTML" + l.capitalize() + "Element";
        if (window[n]) {
            return window[n];
        }
        window[n] = {};
        window[n].prototype = document.createElement(l)["__proto__"];
        return window[n];
    }
    if (f.ElementExtensions) {
        d(Element.Methods, HTMLElement.prototype);
        d(Element.Methods.Simulated, HTMLElement.prototype, true);
    }
    if (f.SpecificElementExtensions) {
        for (var e in Element.Methods.ByTag) {
            var h = k(e);
            if (Object.isUndefined(h)) {
                continue;
            }
            d(a[e], h.prototype);
        }
    }
    Object.extend(Element, Element.Methods);
    delete Element.ByTag;
    if (Element.extend.refresh) {
        Element.extend.refresh();
    }
    Element.cache = {};
};
document.viewport = {
    getDimensions: function() {
        var a = {}, b = Prototype.Browser;
        $w("width height").each(function(c) {
            var d = c.capitalize();
            if (b.WebKit&&!document.evaluate) {
                a[c] = self["inner" + d];
            } else {
                if (b.Opera && parseFloat(window.opera.version()) < 9.5) {
                    a[c] = document.body["client" + d];
                } else {
                    a[c] = document.documentElement["client" + d];
                }
            }
        });
        return a;
    },
    getWidth: function() {
        return this.getDimensions().width;
    },
    getHeight: function() {
        return this.getDimensions().height;
    },
    getScrollOffsets: function() {
        return Element._returnOffset(window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft, window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop);
    }
};
var Selector = Class.create({
    initialize: function(a) {
        this.expression = a.strip();
        if (this.shouldUseSelectorsAPI()) {
            this.mode = "selectorsAPI";
        } else {
            if (this.shouldUseXPath()) {
                this.mode = "xpath";
                this.compileXPathMatcher();
            } else {
                this.mode = "normal";
                this.compileMatcher();
            }
        }
    },
    shouldUseXPath: function() {
        if (!Prototype.BrowserFeatures.XPath) {
            return false;
        }
        var a = this.expression;
        if (Prototype.Browser.WebKit && (a.include("-of-type") || a.include(":empty"))) {
            return false;
        }
        if ((/(\[[\w-]*?:|:checked)/).test(a)) {
            return false;
        }
        return true;
    },
    shouldUseSelectorsAPI: function() {
        if (!Prototype.BrowserFeatures.SelectorsAPI) {
            return false;
        }
        if (!Selector._div) {
            Selector._div = new Element("div");
        }
        try {
            Selector._div.querySelector(this.expression);
        } catch (a) {
            return false;
        }
        return true;
    },
    compileMatcher: function() {
        var e = this.expression, ps = Selector.patterns, h = Selector.handlers, c = Selector.criteria, le, p, m;
        if (Selector._cache[e]) {
            this.matcher = Selector._cache[e];
            return;
        }
        this.matcher = ["this.matcher = function(root) {", "var r = root, h = Selector.handlers, c = false, n;"];
        while (e && le != e && (/\S/).test(e)) {
            le = e;
            for (var i in ps) {
                p = ps[i];
                if (m = e.match(p)) {
                    this.matcher.push(Object.isFunction(c[i]) ? c[i](m) : new Template(c[i]).evaluate(m));
                    e = e.replace(m[0], "");
                    break;
                }
            }
        }
        this.matcher.push("return h.unique(n);\n}");
        eval(this.matcher.join("\n"));
        Selector._cache[this.expression] = this.matcher;
    },
    compileXPathMatcher: function() {
        var c = this.expression, b = Selector.patterns, f = Selector.xpath, d, a;
        if (Selector._cache[c]) {
            this.xpath = Selector._cache[c];
            return;
        }
        this.matcher = [".//*"];
        while (c && d != c && (/\S/).test(c)) {
            d = c;
            for (var e in b) {
                if (a = c.match(b[e])) {
                    this.matcher.push(Object.isFunction(f[e]) ? f[e](a) : new Template(f[e]).evaluate(a));
                    c = c.replace(a[0], "");
                    break;
                }
            }
        }
        this.xpath = this.matcher.join("");
        Selector._cache[this.expression] = this.xpath;
    },
    findElements: function(a) {
        a = a || document;
        var d = this.expression, e;
        switch (this.mode) {
        case"selectorsAPI":
            if (a !== document) {
                var c = a.id, b = $(a).identify();
                d = "#" + b + " " + d;
            }
            e = $A(a.querySelectorAll(d)).map(Element.extend);
            a.id = c;
            return e;
        case"xpath":
            return document._getElementsByXPath(this.xpath, a);
        default:
            return this.matcher(a);
        }
    },
    match: function(k) {
        this.tokens = [];
        var e = this.expression, d = Selector.patterns, n = Selector.assertions;
        var c, a, m;
        while (e && c !== e && (/\S/).test(e)) {
            c = e;
            for (var h in d) {
                a = d[h];
                if (m = e.match(a)) {
                    if (n[h]) {
                        this.tokens.push([h, Object.clone(m)]);
                        e = e.replace(m[0], "");
                    } else {
                        return this.findElements(document).include(k);
                    }
                }
            }
        }
        var f = true, b, g;
        for (var h = 0, l; l = this.tokens[h]; h++) {
            b = l[0], g = l[1];
            if (!Selector.assertions[b](k, g)) {
                f = false;
                break;
            }
        }
        return f;
    },
    toString: function() {
        return this.expression;
    },
    inspect: function() {
        return "#<Selector:" + this.expression.inspect() + ">";
    }
});
Object.extend(Selector, {
    _cache: {},
    xpath: {
        descendant: "//*",
        child: "/*",
        adjacent: "/following-sibling::*[1]",
        laterSibling: "/following-sibling::*",
        tagName: function(a) {
            if (a[1] == "*") {
                return "";
            }
            return "[local-name()='" + a[1].toLowerCase() + "' or local-name()='" + a[1].toUpperCase() + "']";
        },
        className: "[contains(concat(' ', @class, ' '), ' #{1} ')]",
        id: "[@id='#{1}']",
        attrPresence: function(a) {
            a[1] = a[1].toLowerCase();
            return new Template("[@#{1}]").evaluate(a);
        },
        attr: function(a) {
            a[1] = a[1].toLowerCase();
            a[3] = a[5] || a[6];
            return new Template(Selector.xpath.operators[a[2]]).evaluate(a);
        },
        pseudo: function(a) {
            var b = Selector.xpath.pseudos[a[1]];
            if (!b) {
                return "";
            }
            if (Object.isFunction(b)) {
                return b(a);
            }
            return new Template(Selector.xpath.pseudos[a[1]]).evaluate(a);
        },
        operators: {
            "=": "[@#{1}='#{3}']",
            "!=": "[@#{1}!='#{3}']",
            "^=": "[starts-with(@#{1}, '#{3}')]",
            "$=": "[substring(@#{1}, (string-length(@#{1}) - string-length('#{3}') + 1))='#{3}']",
            "*=": "[contains(@#{1}, '#{3}')]",
            "~=": "[contains(concat(' ', @#{1}, ' '), ' #{3} ')]",
            "|=": "[contains(concat('-', @#{1}, '-'), '-#{3}-')]"
        },
        pseudos: {
            "first-child": "[not(preceding-sibling::*)]",
            "last-child": "[not(following-sibling::*)]",
            "only-child": "[not(preceding-sibling::* or following-sibling::*)]",
            empty: "[count(*) = 0 and (count(text()) = 0)]",
            checked: "[@checked]",
            disabled: "[(@disabled) and (@type!='hidden')]",
            enabled: "[not(@disabled) and (@type!='hidden')]",
            not: function(h) {
                var b = h[6], c = Selector.patterns, a = Selector.xpath, e, g;
                var d = [];
                while (b && e != b && (/\S/).test(b)) {
                    e = b;
                    for (var f in c) {
                        if (h = b.match(c[f])) {
                            g = Object.isFunction(a[f]) ? a[f](h) : new Template(a[f]).evaluate(h);
                            d.push("(" + g.substring(1, g.length - 1) + ")");
                            b = b.replace(h[0], "");
                            break;
                        }
                    }
                }
                return "[not(" + d.join(" and ") + ")]";
            },
            "nth-child": function(a) {
                return Selector.xpath.pseudos.nth("(count(./preceding-sibling::*) + 1) ", a);
            },
            "nth-last-child": function(a) {
                return Selector.xpath.pseudos.nth("(count(./following-sibling::*) + 1) ", a);
            },
            "nth-of-type": function(a) {
                return Selector.xpath.pseudos.nth("position() ", a);
            },
            "nth-last-of-type": function(a) {
                return Selector.xpath.pseudos.nth("(last() + 1 - position()) ", a);
            },
            "first-of-type": function(a) {
                a[6] = "1";
                return Selector.xpath.pseudos["nth-of-type"](a);
            },
            "last-of-type": function(a) {
                a[6] = "1";
                return Selector.xpath.pseudos["nth-last-of-type"](a);
            },
            "only-of-type": function(a) {
                var b = Selector.xpath.pseudos;
                return b["first-of-type"](a) + b["last-of-type"](a);
            },
            nth: function(d, f) {
                var c, b = f[6], g;
                if (b == "even") {
                    b = "2n+0";
                }
                if (b == "odd") {
                    b = "2n+1";
                }
                if (c = b.match(/^(\d+)$/)) {
                    return "[" + d + "= " + c[1] + "]";
                }
                if (c = b.match(/^(-?\d*)?n(([+-])(\d+))?/)) {
                    if (c[1] == "-") {
                        c[1] =- 1;
                    }
                    var e = c[1] ? Number(c[1]): 1;
                    var a = c[2] ? Number(c[2]): 0;
                    g = "[((#{fragment} - #{b}) mod #{a} = 0) and ((#{fragment} - #{b}) div #{a} >= 0)]";
                    return new Template(g).evaluate({
                        fragment: d,
                        a: e,
                        b: a
                    });
                }
            }
        }
    },
    criteria: {
        tagName: 'n = h.tagName(n, r, "#{1}", c);      c = false;',
        className: 'n = h.className(n, r, "#{1}", c);    c = false;',
        id: 'n = h.id(n, r, "#{1}", c);           c = false;',
        attrPresence: 'n = h.attrPresence(n, r, "#{1}", c); c = false;',
        attr: function(a) {
            a[3] = (a[5] || a[6]);
            return new Template('n = h.attr(n, r, "#{1}", "#{3}", "#{2}", c); c = false;').evaluate(a);
        },
        pseudo: function(a) {
            if (a[6]) {
                a[6] = a[6].replace(/"/g, '\\"');
            }
            return new Template('n = h.pseudo(n, "#{1}", "#{6}", r, c); c = false;').evaluate(a);
        },
        descendant: 'c = "descendant";',
        child: 'c = "child";',
        adjacent: 'c = "adjacent";',
        laterSibling: 'c = "laterSibling";'
    },
    patterns: {
        laterSibling: /^\s*~\s*/,
        child: /^\s*>\s*/,
        adjacent: /^\s*\+\s*/,
        descendant: /^\s/,
        tagName: /^\s*(\*|[\w\-]+)(\b|$)?/,
        id: /^#([\w\-\*]+)(\b|$)/,
        className: /^\.([\w\-\*]+)(\b|$)/,
        pseudo: /^:((first|last|nth|nth-last|only)(-child|-of-type)|empty|checked|(en|dis)abled|not)(\((.*?)\))?(\b|$|(?=\s|[:+~>]))/,
        attrPresence: /^\[((?:[\w]+:)?[\w]+)\]/,
        attr: /\[((?:[\w-]*:)?[\w-]+)\s*(?:([!^$*~|]?=)\s*((['"])([^\4]*?)\4|([^'"][^\]]*?)))?\]/
    },
    assertions: {
        tagName: function(a, b) {
            return b[1].toUpperCase() == a.tagName.toUpperCase();
        },
        className: function(a, b) {
            return Element.hasClassName(a, b[1]);
        },
        id: function(a, b) {
            return a.id === b[1];
        },
        attrPresence: function(a, b) {
            return Element.hasAttribute(a, b[1]);
        },
        attr: function(c, b) {
            var a = Element.readAttribute(c, b[1]);
            return a && Selector.operators[b[2]](a, b[5] || b[6]);
        }
    },
    handlers: {
        concat: function(d, a) {
            for (var c = 0, b; b = a[c]; c++) {
                d.push(b);
            }
            return d;
        },
        mark: function(a) {
            var b = Prototype.emptyFunction;
            for (var d = 0, c; c = a[d]; d++) {
                c._countedByPrototype = b;
            }
            return a;
        },
        unmark: function(a) {
            for (var c = 0, b; b = a[c]; c++) {
                b._countedByPrototype = undefined;
            }
            return a;
        },
        index: function(a, e, b) {
            a._countedByPrototype = Prototype.emptyFunction;
            if (e) {
                for (var g = a.childNodes, d = g.length - 1, f = 1; d >= 0; d--) {
                    var c = g[d];
                    if (c.nodeType == 1 && (!b || c._countedByPrototype)) {
                        c.nodeIndex = f++;
                    }
                }
            } else {
                for (var d = 0, f = 1, g = a.childNodes; c = g[d]; d++) {
                    if (c.nodeType == 1 && (!b || c._countedByPrototype)) {
                        c.nodeIndex = f++;
                    }
                }
            }
        },
        unique: function(e) {
            if (e.length == 0) {
                return e;
            }
            var c = [], b;
            for (var d = 0, a = e.length; d < a; d++) {
                if (!(b = e[d])._countedByPrototype) {
                    b._countedByPrototype = Prototype.emptyFunction;
                    c.push(Element.extend(b));
                }
            }
            return Selector.handlers.unmark(c);
        },
        descendant: function(a) {
            var c = Selector.handlers;
            for (var d = 0, e = [], b; b = a[d]; d++) {
                c.concat(e, b.getElementsByTagName("*"));
            }
            return e;
        },
        child: function(a) {
            var d = Selector.handlers;
            for (var e = 0, f = [], c; c = a[e]; e++) {
                for (var g = 0, b; b = c.childNodes[g]; g++) {
                    if (b.nodeType == 1 && b.tagName != "!") {
                        f.push(b);
                    }
                }
            }
            return f;
        },
        adjacent: function(a) {
            for (var d = 0, e = [], b; b = a[d]; d++) {
                var c = this.nextElementSibling(b);
                if (c) {
                    e.push(c);
                }
            }
            return e;
        },
        laterSibling: function(a) {
            var c = Selector.handlers;
            for (var d = 0, e = [], b; b = a[d]; d++) {
                c.concat(e, Element.nextSiblings(b));
            }
            return e;
        },
        nextElementSibling: function(a) {
            while (a = a.nextSibling) {
                if (a.nodeType == 1) {
                    return a;
                }
            }
            return null;
        },
        previousElementSibling: function(a) {
            while (a = a.previousSibling) {
                if (a.nodeType == 1) {
                    return a;
                }
            }
            return null;
        },
        tagName: function(d, f, b, c) {
            var e = b.toUpperCase();
            var k = [], g = Selector.handlers;
            if (d) {
                if (c) {
                    if (c == "descendant") {
                        for (var h = 0, a; a = d[h]; h++) {
                            g.concat(k, a.getElementsByTagName(b));
                        }
                        return k;
                    } else {
                        d = this[c](d);
                    }
                    if (b == "*") {
                        return d;
                    }
                }
                for (var h = 0, a; a = d[h]; h++) {
                    if (a.tagName.toUpperCase() === e) {
                        k.push(a);
                    }
                }
                return k;
            } else {
                return f.getElementsByTagName(b);
            }
        },
        id: function(h, a, b, d) {
            var c = $(b), f = Selector.handlers;
            if (!c) {
                return [];
            }
            if (!h && a == document) {
                return [c];
            }
            if (h) {
                if (d) {
                    if (d == "child") {
                        for (var g = 0, e; e = h[g]; g++) {
                            if (c.parentNode == e) {
                                return [c];
                            }
                        }
                    } else {
                        if (d == "descendant") {
                            for (var g = 0, e; e = h[g]; g++) {
                                if (Element.descendantOf(c, e)) {
                                    return [c];
                                }
                            }
                        } else {
                            if (d == "adjacent") {
                                for (var g = 0, e; e = h[g]; g++) {
                                    if (Selector.handlers.previousElementSibling(c) == e) {
                                        return [c];
                                    }
                                }
                            } else {
                                h = f[d](h);
                            }
                        }
                    }
                }
                for (var g = 0, e; e = h[g]; g++) {
                    if (e == c) {
                        return [c];
                    }
                }
                return [];
            }
            return (c && Element.descendantOf(c, a)) ? [c] : [];
        },
        className: function(d, a, c, b) {
            if (d && b) {
                d = this[b](d);
            }
            return Selector.handlers.byClassName(d, a, c);
        },
        byClassName: function(g, h, d) {
            if (!g) {
                g = Selector.handlers.descendant([h]);
            }
            var b = " " + d + " ";
            for (var e = 0, f = [], c, a; c = g[e]; e++) {
                a = c.className;
                if (a.length == 0) {
                    continue;
                }
                if (a == d || (" " + a + " ").include(b)) {
                    f.push(c);
                }
            }
            return f;
        },
        attrPresence: function(f, g, a, b) {
            if (!f) {
                f = g.getElementsByTagName("*");
            }
            if (f && b) {
                f = this[b](f);
            }
            var d = [];
            for (var e = 0, c; c = f[e]; e++) {
                if (Element.hasAttribute(c, a)) {
                    d.push(c);
                }
            }
            return d;
        },
        attr: function(d, g, h, f, b, c) {
            if (!d) {
                d = g.getElementsByTagName("*");
            }
            if (d && c) {
                d = this[c](d);
            }
            var e = Selector.operators[b], l = [];
            for (var m = 0, a; a = d[m]; m++) {
                var k = Element.readAttribute(a, h);
                if (k === null) {
                    continue;
                }
                if (e(k, f)) {
                    l.push(a);
                }
            }
            return l;
        },
        pseudo: function(e, d, b, a, c) {
            if (e && c) {
                e = this[c](e);
            }
            if (!e) {
                e = a.getElementsByTagName("*");
            }
            return Selector.pseudos[d](e, b, a);
        }
    },
    pseudos: {
        "first-child": function(f, b, a) {
            for (var d = 0, e = [], c; c = f[d]; d++) {
                if (Selector.handlers.previousElementSibling(c)) {
                    continue;
                }
                e.push(c);
            }
            return e;
        },
        "last-child": function(f, b, a) {
            for (var d = 0, e = [], c; c = f[d]; d++) {
                if (Selector.handlers.nextElementSibling(c)) {
                    continue;
                }
                e.push(c);
            }
            return e;
        },
        "only-child": function(g, b, a) {
            var d = Selector.handlers;
            for (var e = 0, f = [], c; c = g[e]; e++) {
                if (!d.previousElementSibling(c)&&!d.nextElementSibling(c)) {
                    f.push(c);
                }
            }
            return f;
        },
        "nth-child": function(c, b, a) {
            return Selector.pseudos.nth(c, b, a);
        },
        "nth-last-child": function(c, b, a) {
            return Selector.pseudos.nth(c, b, a, true);
        },
        "nth-of-type": function(c, b, a) {
            return Selector.pseudos.nth(c, b, a, false, true);
        },
        "nth-last-of-type": function(c, b, a) {
            return Selector.pseudos.nth(c, b, a, true, true);
        },
        "first-of-type": function(c, b, a) {
            return Selector.pseudos.nth(c, "1", a, false, true);
        },
        "last-of-type": function(c, b, a) {
            return Selector.pseudos.nth(c, "1", a, true, true);
        },
        "only-of-type": function(d, b, a) {
            var c = Selector.pseudos;
            return c["last-of-type"](c["first-of-type"](d, b, a), b, a);
        },
        getIndices: function(c, a, b) {
            if (c == 0) {
                return a > 0 ? [a] : [];
            }
            return $R(1, b).inject([], function(e, d) {
                if (0 == (d - a)%c && (d - a) / c >= 0) {
                    e.push(d);
                }
                return e;
            });
        },
        nth: function(d, k, g, l, b) {
            if (d.length == 0) {
                return [];
            }
            if (k == "even") {
                k = "2n+0";
            }
            if (k == "odd") {
                k = "2n+1";
            }
            var m = Selector.handlers, n = [], c = [], r;
            m.mark(d);
            for (var o = 0, a; a = d[o]; o++) {
                if (!a.parentNode._countedByPrototype) {
                    m.index(a.parentNode, l, b);
                    c.push(a.parentNode);
                }
            }
            if (k.match(/^\d+$/)) {
                k = Number(k);
                for (var o = 0, a; a = d[o]; o++) {
                    if (a.nodeIndex == k) {
                        n.push(a);
                    }
                }
            } else {
                if (r = k.match(/^(-?\d*)?n(([+-])(\d+))?/)) {
                    if (r[1] == "-") {
                        r[1] =- 1;
                    }
                    var f = r[1] ? Number(r[1]): 1;
                    var h = r[2] ? Number(r[2]): 0;
                    var e = Selector.pseudos.getIndices(f, h, d.length);
                    for (var o = 0, a, q = e.length; a = d[o]; o++) {
                        for (var p = 0; p < q; p++) {
                            if (a.nodeIndex == e[p]) {
                                n.push(a);
                            }
                        }
                    }
                }
            }
            m.unmark(d);
            m.unmark(c);
            return n;
        },
        empty: function(f, b, a) {
            for (var d = 0, e = [], c; c = f[d]; d++) {
                if (c.tagName == "!" || c.firstChild) {
                    continue;
                }
                e.push(c);
            }
            return e;
        },
        not: function(d, a, f) {
            var h = Selector.handlers, e, b;
            var g = new Selector(a).findElements(f);
            h.mark(g);
            for (var k = 0, l = [], c; c = d[k]; k++) {
                if (!c._countedByPrototype) {
                    l.push(c);
                }
            }
            h.unmark(g);
            return l;
        },
        enabled: function(f, b, a) {
            for (var d = 0, e = [], c; c = f[d]; d++) {
                if (!c.disabled && (!c.type || c.type !== "hidden")) {
                    e.push(c);
                }
            }
            return e;
        },
        disabled: function(f, b, a) {
            for (var d = 0, e = [], c; c = f[d]; d++) {
                if (c.disabled) {
                    e.push(c);
                }
            }
            return e;
        },
        checked: function(f, b, a) {
            for (var d = 0, e = [], c; c = f[d]; d++) {
                if (c.checked) {
                    e.push(c);
                }
            }
            return e;
        }
    },
    operators: {
        "=": function(b, a) {
            return b == a;
        },
        "!=": function(b, a) {
            return b != a;
        },
        "^=": function(b, a) {
            return b == a || b && b.startsWith(a);
        },
        "$=": function(b, a) {
            return b == a || b && b.endsWith(a);
        },
        "*=": function(b, a) {
            return b == a || b && b.include(a);
        },
        "$=": function(b, a) {
            return b.endsWith(a);
        },
        "*=": function(b, a) {
            return b.include(a);
        },
        "~=": function(b, a) {
            return (" " + b + " ").include(" " + a + " ");
        },
        "|=": function(b, a) {
            return ("-" + (b || "").toUpperCase() + "-").include("-" + (a || "").toUpperCase() + "-");
        }
    },
    split: function(b) {
        var a = [];
        b.scan(/(([\w#:.~>+()\s-]+|\*|\[.*?\])+)\s*(,|$)/, function(c) {
            a.push(c[1].strip());
        });
        return a;
    },
    matchElements: function(c, b) {
        var d = $$(b), e = Selector.handlers;
        e.mark(d);
        for (var f = 0, g = [], a; a = c[f]; f++) {
            if (a._countedByPrototype) {
                g.push(a);
            }
        }
        e.unmark(d);
        return g;
    },
    findElement: function(c, b, a) {
        if (Object.isNumber(b)) {
            a = b;
            b = false;
        }
        return Selector.matchElements(c, b || "*")[a || 0];
    },
    findChildElements: function(d, b) {
        b = Selector.split(b.join(","));
        var e = [], c = Selector.handlers;
        for (var f = 0, g = b.length, a; f < g; f++) {
            a = new Selector(b[f].strip());
            c.concat(e, a.findElements(d));
        }
        return (g > 1) ? c.unique(e) : e;
    }
});
if (Prototype.Browser.IE) {
    Object.extend(Selector.handlers, {
        concat: function(d, a) {
            for (var c = 0, b; b = a[c]; c++) {
                if (b.tagName !== "!") {
                    d.push(b);
                }
            }
            return d;
        },
        unmark: function(a) {
            for (var c = 0, b; b = a[c]; c++) {
                b.removeAttribute("_countedByPrototype");
            }
            return a;
        }
    });
}
function $$() {
    return Selector.findChildElements(document, $A(arguments));
}
var Form = {
    reset: function(a) {
        $(a).reset();
        return a;
    },
    serializeElements: function(b, g) {
        if (typeof g != "object") {
            g = {
                hash: !!g
            };
        } else {
            if (Object.isUndefined(g.hash)) {
                g.hash = true;
            }
        }
        var f, c, a = false, d = g.submit;
        var e = b.inject({}, function(k, h) {
            if (!h.disabled && h.name) {
                f = h.name;
                c = $(h).getValue();
                if (c != null && h.type != "file" && (h.type != "submit" || (!a && d !== false && (!d || f == d) && (a = true)))) {
                    if (f in k) {
                        if (!Object.isArray(k[f])) {
                            k[f] = [k[f]];
                        }
                        k[f].push(c);
                    } else {
                        k[f] = c;
                    }
                }
            }
            return k;
        });
        return g.hash ? e : Object.toQueryString(e);
    }
};
Form.Methods = {
    serialize: function(b, a) {
        return Form.serializeElements(Form.getElements(b), a);
    },
    getElements: function(a) {
        return $A($(a).getElementsByTagName("*")).inject([], function(c, b) {
            if (Form.Element.Serializers[b.tagName.toLowerCase()]) {
                c.push(Element.extend(b));
            }
            return c;
        });
    },
    getInputs: function(c, g, f) {
        c = $(c);
        var a = c.getElementsByTagName("input");
        if (!g&&!f) {
            return $A(a).map(Element.extend);
        }
        for (var e = 0, b = [], d = a.length; e < d; e++) {
            var h = a[e];
            if ((g && h.type != g) || (f && h.name != f)) {
                continue;
            }
            b.push(Element.extend(h));
        }
        return b;
    },
    disable: function(a) {
        a = $(a);
        Form.getElements(a).invoke("disable");
        return a;
    },
    enable: function(a) {
        a = $(a);
        Form.getElements(a).invoke("enable");
        return a;
    },
    findFirstElement: function(c) {
        var b = $(c).getElements().findAll(function(d) {
            return "hidden" != d.type&&!d.disabled;
        });
        var a = b.findAll(function(d) {
            return d.hasAttribute("tabIndex") && d.tabIndex >= 0;
        }).sortBy(function(d) {
            return d.tabIndex;
        }).first();
        return a ? a : b.find(function(d) {
            return ["input", "select", "textarea"].include(d.tagName.toLowerCase());
        });
    },
    focusFirstElement: function(a) {
        a = $(a);
        a.findFirstElement().activate();
        return a;
    },
    request: function(d, a) {
        d = $(d), a = Object.clone(a || {});
        var b = a.parameters, c = d.readAttribute("action") || "";
        if (c.blank()) {
            c = window.location.href;
        }
        a.parameters = d.serialize(true);
        if (b) {
            if (Object.isString(b)) {
                b = b.toQueryParams();
            }
            Object.extend(a.parameters, b);
        }
        if (d.hasAttribute("method")&&!a.method) {
            a.method = d.method;
        }
        return new Ajax.Request(c, a);
    }
};
Form.Element = {
    focus: function(a) {
        $(a).focus();
        return a;
    },
    select: function(a) {
        $(a).select();
        return a;
    }
};
Form.Element.Methods = {
    serialize: function(a) {
        a = $(a);
        if (!a.disabled && a.name) {
            var c = a.getValue();
            if (c != undefined) {
                var b = {};
                b[a.name] = c;
                return Object.toQueryString(b);
            }
        }
        return "";
    },
    getValue: function(a) {
        a = $(a);
        var b = a.tagName.toLowerCase();
        return Form.Element.Serializers[b](a);
    },
    setValue: function(a, c) {
        a = $(a);
        var b = a.tagName.toLowerCase();
        Form.Element.Serializers[b](a, c);
        return a;
    },
    clear: function(a) {
        $(a).value = "";
        return a;
    },
    present: function(a) {
        return $(a).value != "";
    },
    activate: function(a) {
        a = $(a);
        try {
            a.focus();
            if (a.select && (a.tagName.toLowerCase() != "input" ||!["button", "reset", "submit"].include(a.type))) {
                a.select();
            }
        } catch (b) {}
        return a;
    },
    disable: function(a) {
        a = $(a);
        a.disabled = true;
        return a;
    },
    enable: function(a) {
        a = $(a);
        a.disabled = false;
        return a;
    }
};
var Field = Form.Element;
var $F = Form.Element.Methods.getValue;
Form.Element.Serializers = {
    input: function(a, b) {
        switch (a.type.toLowerCase()) {
        case"checkbox":
        case"radio":
            return Form.Element.Serializers.inputSelector(a, b);
        default:
            return Form.Element.Serializers.textarea(a, b);
        }
    },
    inputSelector: function(a, b) {
        if (Object.isUndefined(b)) {
            return a.checked ? a.value : null;
        } else {
            a.checked=!!b;
        }
    },
    textarea: function(a, b) {
        if (Object.isUndefined(b)) {
            return a.value;
        } else {
            a.value = b;
        }
    },
    select: function(f, c) {
        if (Object.isUndefined(c)) {
            return this[f.type == "select-one" ? "selectOne": "selectMany"](f);
        } else {
            var g, e, b=!Object.isArray(c);
            for (var a = 0, d = f.length; a < d; a++) {
                g = f.options[a];
                e = this.optionValue(g);
                if (b) {
                    if (e == c) {
                        g.selected = true;
                        return;
                    }
                } else {
                    g.selected = c.include(e);
                }
            }
        }
    },
    selectOne: function(b) {
        var a = b.selectedIndex;
        return a >= 0 ? this.optionValue(b.options[a]) : null;
    },
    selectMany: function(c) {
        var a, b = c.length;
        if (!b) {
            return null;
        }
        for (var d = 0, a = []; d < b; d++) {
            var e = c.options[d];
            if (e.selected) {
                a.push(this.optionValue(e));
            }
        }
        return a;
    },
    optionValue: function(a) {
        return Element.extend(a).hasAttribute("value") ? a.value : a.text;
    }
};
Abstract.TimedObserver = Class.create(PeriodicalExecuter, {
    initialize: function($super, a, c, b) {
        $super(b, c);
        this.element = $(a);
        this.lastValue = this.getValue();
    },
    execute: function() {
        var a = this.getValue();
        if (Object.isString(this.lastValue) && Object.isString(a) ? this.lastValue != a : String(this.lastValue) != String(a)) {
            this.callback(this.element, a);
            this.lastValue = a;
        }
    }
});
Form.Element.Observer = Class.create(Abstract.TimedObserver, {
    getValue: function() {
        return Form.Element.getValue(this.element);
    }
});
Form.Observer = Class.create(Abstract.TimedObserver, {
    getValue: function() {
        return Form.serialize(this.element);
    }
});
Abstract.EventObserver = Class.create({
    initialize: function(a, b) {
        this.element = $(a);
        this.callback = b;
        this.lastValue = this.getValue();
        if (this.element.tagName.toLowerCase() == "form") {
            this.registerFormCallbacks();
        } else {
            this.registerCallback(this.element);
        }
    },
    onElementEvent: function() {
        var a = this.getValue();
        if (this.lastValue != a) {
            this.callback(this.element, a);
            this.lastValue = a;
        }
    },
    registerFormCallbacks: function() {
        Form.getElements(this.element).each(this.registerCallback, this);
    },
    registerCallback: function(a) {
        if (a.type) {
            switch (a.type.toLowerCase()) {
            case"checkbox":
            case"radio":
                Event.observe(a, "click", this.onElementEvent.bind(this));
                break;
            default:
                Event.observe(a, "change", this.onElementEvent.bind(this));
                break;
            }
        }
    }
});
Form.Element.EventObserver = Class.create(Abstract.EventObserver, {
    getValue: function() {
        return Form.Element.getValue(this.element);
    }
});
Form.EventObserver = Class.create(Abstract.EventObserver, {
    getValue: function() {
        return Form.serialize(this.element);
    }
});
if (!window.Event) {
    var Event = {};
}
Object.extend(Event, {
    KEY_BACKSPACE: 8,
    KEY_TAB: 9,
    KEY_RETURN: 13,
    KEY_ESC: 27,
    KEY_LEFT: 37,
    KEY_UP: 38,
    KEY_RIGHT: 39,
    KEY_DOWN: 40,
    KEY_DELETE: 46,
    KEY_HOME: 36,
    KEY_END: 35,
    KEY_PAGEUP: 33,
    KEY_PAGEDOWN: 34,
    KEY_INSERT: 45,
    cache: {},
    relatedTarget: function(b) {
        var a;
        switch (b.type) {
        case"mouseover":
            a = b.fromElement;
            break;
        case"mouseout":
            a = b.toElement;
            break;
        default:
            return null;
        }
        return Element.extend(a);
    }
});
Event.Methods = (function() {
    var a;
    if (Prototype.Browser.IE) {
        var b = {
            0: 1,
            1: 4,
            2: 2
        };
        a = function(c, d) {
            return c.button == b[d];
        };
    } else {
        if (Prototype.Browser.WebKit) {
            a = function(c, d) {
                switch (d) {
                case 0:
                    return c.which == 1&&!c.metaKey;
                case 1:
                    return c.which == 1 && c.metaKey;
                default:
                    return false;
                }
            };
        } else {
            a = function(c, d) {
                return c.which ? (c.which === d + 1) : (c.button === d);
            };
        }
    }
    return {
        isLeftClick: function(c) {
            return a(c, 0);
        },
        isMiddleClick: function(c) {
            return a(c, 1);
        },
        isRightClick: function(c) {
            return a(c, 2);
        },
        element: function(d) {
            d = Event.extend(d);
            var e = d.target, f = d.type, c = d.currentTarget;
            if (c && c.tagName) {
                if (f === "load" || f === "error" || (f === "click" && c.tagName.toLowerCase() === "input" && c.type === "radio")) {
                    e = c;
                }
            }
            if (e.nodeType == Node.TEXT_NODE) {
                e = e.parentNode;
            }
            return Element.extend(e);
        },
        findElement: function(e, c) {
            var f = Event.element(e);
            if (!c) {
                return f;
            }
            var d = [f].concat(f.ancestors());
            return Selector.findElement(d, c, 0);
        },
        pointer: function(c) {
            var d = document.documentElement, e = document.body || {
                scrollLeft: 0,
                scrollTop: 0
            };
            return {
                x: c.pageX || (c.clientX + (d.scrollLeft || e.scrollLeft) - (d.clientLeft || 0)),
                y: c.pageY || (c.clientY + (d.scrollTop || e.scrollTop) - (d.clientTop || 0))
            };
        },
        pointerX: function(c) {
            return Event.pointer(c).x;
        },
        pointerY: function(c) {
            return Event.pointer(c).y;
        },
        stop: function(c) {
            Event.extend(c);
            c.preventDefault();
            c.stopPropagation();
            c.stopped = true;
        }
    };
})();
Event.extend = (function() {
    var a = Object.keys(Event.Methods).inject({}, function(c, b) {
        c[b] = Event.Methods[b].methodize();
        return c;
    });
    if (Prototype.Browser.IE) {
        Object.extend(a, {
            stopPropagation: function() {
                this.cancelBubble = true;
            },
            preventDefault: function() {
                this.returnValue = false;
            },
            inspect: function() {
                return "[object Event]";
            }
        });
        return function(c) {
            if (!c) {
                return false;
            }
            if (c._extendedByPrototype) {
                return c;
            }
            c._extendedByPrototype = Prototype.emptyFunction;
            var b = Event.pointer(c);
            Object.extend(c, {
                target: c.srcElement,
                relatedTarget: Event.relatedTarget(c),
                pageX: b.x,
                pageY: b.y
            });
            return Object.extend(c, a);
        };
    } else {
        Event.prototype = Event.prototype || document.createEvent("HTMLEvents")["__proto__"];
        Object.extend(Event.prototype, a);
        return Prototype.K;
    }
})();
Object.extend(Event, (function() {
    var c = Event.cache;
    function b(l) {
        if (l._prototypeEventID) {
            return l._prototypeEventID[0];
        }
        arguments.callee.id = arguments.callee.id || 1;
        return l._prototypeEventID = [++arguments.callee.id];
    }
    function g(l) {
        if (l && l.include(":")) {
            return "dataavailable";
        }
        return l;
    }
    function d(l) {
        return c[l] = c[l] || {};
    }
    function h(l, n) {
        var m = d(l);
        return m[n] = m[n] || [];
    }
    function f(m, n, l) {
        var o = b(m);
        var p = h(o, n);
        if (p.pluck("handler").include(l)) {
            return false;
        }
        var q = function(r) {
            if (!Event ||!Event.extend || (r.eventName && r.eventName != n)) {
                return false;
            }
            Event.extend(r);
            l.call(m, r);
        };
        q.handler = l;
        p.push(q);
        return q;
    }
    function e(o, n, m) {
        var l = h(o, n);
        return l.find(function(p) {
            return p.handler == m;
        });
    }
    function a(o, n, m) {
        var l = d(o);
        if (!l[n]) {
            return false;
        }
        l[n] = l[n].without(e(o, n, m));
    }
    function k() {
        for (var l in c) {
            for (var m in c[l]) {
                c[l][m] = null;
            }
        }
    }
    if (window.attachEvent) {
        window.attachEvent("onunload", k);
    }
    if (Prototype.Browser.WebKit) {
        window.addEventListener("unload", Prototype.emptyFunction, false);
    }
    return {
        observe: function(l, n, p) {
            l = $(l);
            var m = g(n);
            var o = f(l, n, p);
            if (!o) {
                return l;
            }
            if (l.addEventListener) {
                l.addEventListener(m, o, false);
            } else {
                l.attachEvent("on" + m, o);
            }
            return l;
        },
        stopObserving: function(l, n, q) {
            l = $(l);
            var o = b(l), m = g(n);
            if (!q && n) {
                h(o, n).each(function(r) {
                    l.stopObserving(n, r.handler);
                });
                return l;
            } else {
                if (!n) {
                    Object.keys(d(o)).each(function(r) {
                        l.stopObserving(r);
                    });
                    return l;
                }
            }
            var p = e(o, n, q);
            if (!p) {
                return l;
            }
            if (l.removeEventListener) {
                l.removeEventListener(m, p, false);
            } else {
                l.detachEvent("on" + m, p);
            }
            a(o, n, q);
            return l;
        },
        fire: function(l, m, n) {
            l = $(l);
            if (l == document && document.createEvent&&!l.dispatchEvent) {
                l = document.documentElement;
            }
            var o;
            if (document.createEvent) {
                o = document.createEvent("HTMLEvents");
                o.initEvent("dataavailable", true, true);
            } else {
                o = document.createEventObject();
                o.eventType = "ondataavailable";
            }
            o.eventName = m;
            o.memo = n || {};
            if (document.createEvent) {
                l.dispatchEvent(o);
            } else {
                l.fireEvent(o.eventType, o);
            }
            return Event.extend(o);
        }
    };
})());
Object.extend(Event, Event.Methods);
Element.addMethods({
    fire: Event.fire,
    observe: Event.observe,
    stopObserving: Event.stopObserving
});
Object.extend(document, {
    fire: Element.Methods.fire.methodize(),
    observe: Element.Methods.observe.methodize(),
    stopObserving: Element.Methods.stopObserving.methodize(),
    loaded: false
});
(function() {
    var b;
    function a() {
        if (document.loaded) {
            return;
        }
        if (b) {
            window.clearInterval(b);
        }
        document.fire("dom:loaded");
        document.loaded = true;
    }
    if (document.addEventListener) {
        if (Prototype.Browser.WebKit) {
            b = window.setInterval(function() {
                if (/loaded|complete/.test(document.readyState)) {
                    a();
                }
            }, 0);
            Event.observe(window, "load", a);
        } else {
            document.addEventListener("DOMContentLoaded", a, false);
        }
    } else {
        document.write("<script id=__onDOMContentLoaded defer src=//:><\/script>");
        $("__onDOMContentLoaded").onreadystatechange = function() {
            if (this.readyState == "complete") {
                this.onreadystatechange = null;
                a();
            }
        };
    }
})();
Hash.toQueryString = Object.toQueryString;
var Toggle = {
    display: Element.toggle
};
Element.Methods.childOf = Element.Methods.descendantOf;
var Insertion = {
    Before: function(a, b) {
        return Element.insert(a, {
            before: b
        });
    },
    Top: function(a, b) {
        return Element.insert(a, {
            top: b
        });
    },
    Bottom: function(a, b) {
        return Element.insert(a, {
            bottom: b
        });
    },
    After: function(a, b) {
        return Element.insert(a, {
            after: b
        });
    }
};
var $continue = new Error('"throw $continue" is deprecated, use "return" instead');
var Position = {
    includeScrollOffsets: false,
    prepare: function() {
        this.deltaX = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;
        this.deltaY = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
    },
    within: function(c, a, b) {
        if (this.includeScrollOffsets) {
            return this.withinIncludingScrolloffsets(c, a, b);
        }
        this.xcomp = a;
        this.ycomp = b;
        this.offset = Element.cumulativeOffset(c);
        return (b >= this.offset[1] && b < this.offset[1] + c.offsetHeight && a >= this.offset[0] && a < this.offset[0] + c.offsetWidth);
    },
    withinIncludingScrolloffsets: function(d, a, b) {
        var c = Element.cumulativeScrollOffset(d);
        this.xcomp = a + c[0] - this.deltaX;
        this.ycomp = b + c[1] - this.deltaY;
        this.offset = Element.cumulativeOffset(d);
        return (this.ycomp >= this.offset[1] && this.ycomp < this.offset[1] + d.offsetHeight && this.xcomp >= this.offset[0] && this.xcomp < this.offset[0] + d.offsetWidth);
    },
    overlap: function(b, a) {
        if (!b) {
            return 0;
        }
        if (b == "vertical") {
            return ((this.offset[1] + a.offsetHeight) - this.ycomp) / a.offsetHeight;
        }
        if (b == "horizontal") {
            return ((this.offset[0] + a.offsetWidth) - this.xcomp) / a.offsetWidth;
        }
    },
    cumulativeOffset: Element.Methods.cumulativeOffset,
    positionedOffset: Element.Methods.positionedOffset,
    absolutize: function(a) {
        Position.prepare();
        return Element.absolutize(a);
    },
    relativize: function(a) {
        Position.prepare();
        return Element.relativize(a);
    },
    realOffset: Element.Methods.cumulativeScrollOffset,
    offsetParent: Element.Methods.getOffsetParent,
    page: Element.Methods.viewportOffset,
    clone: function(c, b, a) {
        a = a || {};
        return Element.clonePosition(b, c, a);
    }
};
if (!document.getElementsByClassName) {
    document.getElementsByClassName = function(b) {
        function a(c) {
            return c.blank() ? null : "[contains(concat(' ', @class, ' '), ' " + c + " ')]";
        }
        b.getElementsByClassName = Prototype.BrowserFeatures.XPath ? function(e, c) {
            c = c.toString().strip();
            var d = /\s/.test(c) ? $w(c).map(a).join(""): a(c);
            return d ? document._getElementsByXPath(".//*" + d, e) : [];
        } : function(h, g) {
            g = g.toString().strip();
            var f = [], e = (/\s/.test(g) ? $w(g) : null);
            if (!e&&!g) {
                return f;
            }
            var l = $(h).getElementsByTagName("*");
            g = " " + g + " ";
            for (var k = 0, c, d; c = l[k]; k++) {
                if (c.className && (d = " " + c.className + " ") && (d.include(g) || (e && e.all(function(m) {
                    return !m.toString().blank() && d.include(" " + m + " ");
                })))) {
                    f.push(Element.extend(c));
                }
            }
            return f;
        };
        return function(c, d) {
            return $(d || document.body).getElementsByClassName(c);
        };
    }(Element.Methods);
}
Element.ClassNames = Class.create();
Element.ClassNames.prototype = {
    initialize: function(a) {
        this.element = $(a);
    },
    _each: function(a) {
        this.element.className.split(/\s+/).select(function(b) {
            return b.length > 0;
        })._each(a);
    },
    set: function(a) {
        this.element.className = a;
    },
    add: function(a) {
        if (this.include(a)) {
            return;
        }
        this.set($A(this).concat(a).join(" "));
    },
    remove: function(a) {
        if (!this.include(a)) {
            return;
        }
        this.set($A(this).without(a).join(" "));
    },
    toString: function() {
        return $A(this).join(" ");
    }
};
Object.extend(Element.ClassNames.prototype, Enumerable);
Element.addMethods();
var Scriptaculous = {
    Version: "1.8.2",
    require: function(a) {
        document.write('<script type="text/javascript" src="' + a + '"><\/script>');
    },
    REQUIRED_PROTOTYPE: "1.6.0.3",
    load: function() {
        function a(c) {
            var b = c.replace(/_.*|\./g, "");
            b = parseInt(b + "0".times(4 - b.length));
            return c.indexOf("_")>-1 ? b - 1 : b;
        }
        if ((typeof Prototype == "undefined") || (typeof Element == "undefined") || (typeof Element.Methods == "undefined") || (a(Prototype.Version) < a(Scriptaculous.REQUIRED_PROTOTYPE))) {
            throw ("script.aculo.us requires the Prototype JavaScript framework >= " + Scriptaculous.REQUIRED_PROTOTYPE);
        }
    }
};
Scriptaculous.load();
var Builder = {
    NODEMAP: {
        AREA: "map",
        CAPTION: "table",
        COL: "table",
        COLGROUP: "table",
        LEGEND: "fieldset",
        OPTGROUP: "select",
        OPTION: "select",
        PARAM: "object",
        TBODY: "table",
        TD: "table",
        TFOOT: "table",
        TH: "table",
        THEAD: "table",
        TR: "table"
    },
    node: function(a) {
        a = a.toUpperCase();
        var b = this.NODEMAP[a] || "div";
        var f = document.createElement(b);
        try {
            f.innerHTML = "<" + a + "></" + a + ">";
        } catch (c) {}
        var d = f.firstChild || null;
        if (d && (d.tagName.toUpperCase() != a)) {
            d = d.getElementsByTagName(a)[0];
        }
        if (!d) {
            d = document.createElement(a);
        }
        if (!d) {
            return;
        }
        if (arguments[1]) {
            if (this._isStringOrNumber(arguments[1]) || (arguments[1] instanceof Array) || arguments[1].tagName) {
                this._children(d, arguments[1]);
            } else {
                var e = this._attributes(arguments[1]);
                if (e.length) {
                    try {
                        f.innerHTML = "<" + a + " " + e + "></" + a + ">";
                    } catch (c) {}
                    d = f.firstChild || null;
                    if (!d) {
                        d = document.createElement(a);
                        for (attr in arguments[1]) {
                            d[attr == "class" ? "className": attr] = arguments[1][attr];
                        }
                    }
                    if (d.tagName.toUpperCase() != a) {
                        d = f.getElementsByTagName(a)[0];
                    }
                }
            }
        }
        if (arguments[2]) {
            this._children(d, arguments[2]);
        }
        return $(d);
    },
    _text: function(a) {
        return document.createTextNode(a);
    },
    ATTR_MAP: {
        className: "class",
        htmlFor: "for"
    },
    _attributes: function(a) {
        var b = [];
        for (attribute in a) {
            b.push((attribute in this.ATTR_MAP ? this.ATTR_MAP[attribute] : attribute) + '="' + a[attribute].toString().escapeHTML().gsub(/"/, "&quot;") + '"');
        }
        return b.join(" ");
    },
    _children: function(b, a) {
        if (a.tagName) {
            b.appendChild(a);
            return;
        }
        if (typeof a == "object") {
            a.flatten().each(function(c) {
                if (typeof c == "object") {
                    b.appendChild(c);
                } else {
                    if (Builder._isStringOrNumber(c)) {
                        b.appendChild(Builder._text(c));
                    }
                }
            });
        } else {
            if (Builder._isStringOrNumber(a)) {
                b.appendChild(Builder._text(a));
            }
        }
    },
    _isStringOrNumber: function(a) {
        return (typeof a == "string" || typeof a == "number");
    },
    build: function(b) {
        var a = this.node("div");
        $(a).update(b.strip());
        return a.down();
    },
    dump: function(b) {
        if (typeof b != "object" && typeof b != "function") {
            b = window;
        }
        var a = ("A ABBR ACRONYM ADDRESS APPLET AREA B BASE BASEFONT BDO BIG BLOCKQUOTE BODY BR BUTTON CAPTION CENTER CITE CODE COL COLGROUP DD DEL DFN DIR DIV DL DT EM FIELDSET FONT FORM FRAME FRAMESET H1 H2 H3 H4 H5 H6 HEAD HR HTML I IFRAME IMG INPUT INS ISINDEX KBD LABEL LEGEND LI LINK MAP MENU META NOFRAMES NOSCRIPT OBJECT OL OPTGROUP OPTION P PARAM PRE Q S SAMP SCRIPT SELECT SMALL SPAN STRIKE STRONG STYLE SUB SUP TABLE TBODY TD TEXTAREA TFOOT TH THEAD TITLE TR TT U UL VAR").split(/\s+/);
        a.each(function(c) {
            b[c] = function() {
                return Builder.node.apply(Builder, [c].concat($A(arguments)));
            };
        });
    }
};
String.prototype.parseColor = function() {
    var a = "#";
    if (this.slice(0, 4) == "rgb(") {
        var b = this.slice(4, this.length - 1).split(",");
        var c = 0;
        do {
            a += parseInt(b[c]).toColorPart();
        }
        while (++c < 3);
    } else {
        if (this.slice(0, 1) == "#") {
            if (this.length == 4) {
                for (var c = 1; c < 4; c++) {
                    a += (this.charAt(c) + this.charAt(c)).toLowerCase();
                }
            }
            if (this.length == 7) {
                a = this.toLowerCase();
            }
        }
    }
    return (a.length == 7 ? a : (arguments[0] || this));
};
Element.collectTextNodes = function(a) {
    return $A($(a).childNodes).collect(function(b) {
        return (b.nodeType == 3 ? b.nodeValue : (b.hasChildNodes() ? Element.collectTextNodes(b) : ""));
    }).flatten().join("");
};
Element.collectTextNodesIgnoreClass = function(a, b) {
    return $A($(a).childNodes).collect(function(c) {
        return (c.nodeType == 3 ? c.nodeValue : ((c.hasChildNodes()&&!Element.hasClassName(c, b)) ? Element.collectTextNodesIgnoreClass(c, b) : ""));
    }).flatten().join("");
};
Element.setContentZoom = function(a, b) {
    a = $(a);
    a.setStyle({
        fontSize: (b / 100) + "em"
    });
    if (Prototype.Browser.WebKit) {
        window.scrollBy(0, 0);
    }
    return a;
};
Element.getInlineOpacity = function(a) {
    return $(a).style.opacity || "";
};
Element.forceRerendering = function(a) {
    try {
        a = $(a);
        var b = document.createTextNode(" ");
        a.appendChild(b);
        a.removeChild(b);
    } catch (c) {}
};
var Effect = {
    _elementDoesNotExistError: {
        name: "ElementDoesNotExistError",
        message: "The specified DOM element does not exist, but is required for this effect to operate"
    },
    Transitions: {
        linear: Prototype.K,
        sinoidal: function(a) {
            return ( - Math.cos(a * Math.PI) / 2) + 0.5;
        },
        reverse: function(a) {
            return 1 - a;
        },
        flicker: function(a) {
            var a = (( - Math.cos(a * Math.PI) / 4) + 0.75) + Math.random() / 4;
            return a > 1 ? 1 : a;
        },
        wobble: function(a) {
            return ( - Math.cos(a * Math.PI * (9 * a)) / 2) + 0.5;
        },
        pulse: function(b, a) {
            return ( - Math.cos((b * ((a || 5) - 0.5) * 2) * Math.PI) / 2) + 0.5;
        },
        spring: function(a) {
            return 1 - (Math.cos(a * 4.5 * Math.PI) * Math.exp( - a * 6));
        },
        none: function(a) {
            return 0;
        },
        full: function(a) {
            return 1;
        }
    },
    DefaultOptions: {
        duration: 1,
        fps: 100,
        sync: false,
        from: 0,
        to: 1,
        delay: 0,
        queue: "parallel"
    },
    tagifyText: function(a) {
        var b = "position:relative";
        if (Prototype.Browser.IE) {
            b += ";zoom:1";
        }
        a = $(a);
        $A(a.childNodes).each(function(c) {
            if (c.nodeType == 3) {
                c.nodeValue.toArray().each(function(d) {
                    a.insertBefore(new Element("span", {
                        style: b
                    }).update(d == " " ? String.fromCharCode(160) : d), c);
                });
                Element.remove(c);
            }
        });
    },
    multiple: function(e, d) {
        var b;
        if (((typeof e == "object") || Object.isFunction(e)) && (e.length)) {
            b = e;
        } else {
            b = $(e).childNodes;
        }
        var a = Object.extend({
            speed: 0.1,
            delay: 0
        }, arguments[2] || {});
        var c = a.delay;
        $A(b).each(function(f, g) {
            new d(f, Object.extend(a, {
                delay: g * a.speed + c
            }));
        });
    },
    PAIRS: {
        slide: ["SlideDown", "SlideUp"],
        blind: ["BlindDown", "BlindUp"],
        appear: ["Appear", "Fade"]
    },
    toggle: function(c, b) {
        c = $(c);
        b = (b || "appear").toLowerCase();
        var a = Object.extend({
            queue: {
                position: "end",
                scope: (c.id || "global"),
                limit: 1
            }
        }, arguments[2] || {});
        Effect[c.visible() ? Effect.PAIRS[b][1]: Effect.PAIRS[b][0]](c, a);
    }
};
Effect.DefaultOptions.transition = Effect.Transitions.sinoidal;
Effect.ScopedQueue = Class.create(Enumerable, {
    initialize: function() {
        this.effects = [];
        this.interval = null;
    },
    _each: function(a) {
        this.effects._each(a);
    },
    add: function(c) {
        var b = new Date().getTime();
        var a = Object.isString(c.options.queue) ? c.options.queue: c.options.queue.position;
        switch (a) {
        case"front":
            this.effects.findAll(function(d) {
                return d.state == "idle";
            }).each(function(d) {
                d.startOn += c.finishOn;
                d.finishOn += c.finishOn;
            });
            break;
        case"with-last":
            b = this.effects.pluck("startOn").max() || b;
            break;
        case"end":
            b = this.effects.pluck("finishOn").max() || b;
            break;
        }
        c.startOn += b;
        c.finishOn += b;
        if (!c.options.queue.limit || (this.effects.length < c.options.queue.limit)) {
            this.effects.push(c);
        }
        if (!this.interval) {
            this.interval = setInterval(this.loop.bind(this), 15);
        }
    },
    remove: function(a) {
        this.effects = this.effects.reject(function(b) {
            return b == a;
        });
        if (this.effects.length == 0) {
            clearInterval(this.interval);
            this.interval = null;
        }
    },
    loop: function() {
        var b = new Date().getTime();
        for (var c = 0, a = this.effects.length; c < a; c++) {
            this.effects[c] && this.effects[c].loop(b);
        }
    }
});
Effect.Queues = {
    instances: $H(),
    get: function(a) {
        if (!Object.isString(a)) {
            return a;
        }
        return this.instances.get(a) || this.instances.set(a, new Effect.ScopedQueue());
    }
};
Effect.Queue = Effect.Queues.get("global");
Effect.Base = Class.create({
    position: null,
    start: function(a) {
        function b(c, d) {
            return ((c[d + "Internal"] ? "this.options." + d + "Internal(this);" : "") + (c[d] ? "this.options." + d + "(this);" : ""));
        }
        if (a && a.transition === false) {
            a.transition = Effect.Transitions.linear;
        }
        this.options = Object.extend(Object.extend({}, Effect.DefaultOptions), a || {});
        this.currentFrame = 0;
        this.state = "idle";
        this.startOn = this.options.delay * 1000;
        this.finishOn = this.startOn + (this.options.duration * 1000);
        this.fromToDelta = this.options.to - this.options.from;
        this.totalTime = this.finishOn - this.startOn;
        this.totalFrames = this.options.fps * this.options.duration;
        this.render = (function() {
            function c(d, e) {
                if (d.options[e + "Internal"]) {
                    d.options[e + "Internal"](d);
                }
                if (d.options[e]) {
                    d.options[e](d);
                }
            }
            return function(d) {
                if (this.state === "idle") {
                    this.state = "running";
                    c(this, "beforeSetup");
                    if (this.setup) {
                        this.setup();
                    }
                    c(this, "afterSetup");
                }
                if (this.state === "running") {
                    d = (this.options.transition(d) * this.fromToDelta) + this.options.from;
                    this.position = d;
                    c(this, "beforeUpdate");
                    if (this.update) {
                        this.update(d);
                    }
                    c(this, "afterUpdate");
                }
            };
        })();
        this.event("beforeStart");
        if (!this.options.sync) {
            Effect.Queues.get(Object.isString(this.options.queue) ? "global" : this.options.queue.scope).add(this);
        }
    },
    loop: function(b) {
        if (b >= this.startOn) {
            if (b >= this.finishOn) {
                this.render(1);
                this.cancel();
                this.event("beforeFinish");
                if (this.finish) {
                    this.finish();
                }
                this.event("afterFinish");
                return;
            }
            var c = (b - this.startOn) / this.totalTime, a = (c * this.totalFrames).round();
            if (a > this.currentFrame) {
                this.render(c);
                this.currentFrame = a;
            }
        }
    },
    cancel: function() {
        if (!this.options.sync) {
            Effect.Queues.get(Object.isString(this.options.queue) ? "global" : this.options.queue.scope).remove(this);
        }
        this.state = "finished";
    },
    event: function(a) {
        if (this.options[a + "Internal"]) {
            this.options[a + "Internal"](this);
        }
        if (this.options[a]) {
            this.options[a](this);
        }
    },
    inspect: function() {
        var a = $H();
        for (property in this) {
            if (!Object.isFunction(this[property])) {
                a.set(property, this[property]);
            }
        }
        return "#<Effect:" + a.inspect() + ",options:" + $H(this.options).inspect() + ">";
    }
});
Effect.Parallel = Class.create(Effect.Base, {
    initialize: function(a) {
        this.effects = a || [];
        this.start(arguments[1]);
    },
    update: function(a) {
        this.effects.invoke("render", a);
    },
    finish: function(a) {
        this.effects.each(function(b) {
            b.render(1);
            b.cancel();
            b.event("beforeFinish");
            if (b.finish) {
                b.finish(a);
            }
            b.event("afterFinish");
        });
    }
});
Effect.Tween = Class.create(Effect.Base, {
    initialize: function(e, b, c) {
        e = Object.isString(e) ? $(e) : e;
        var f = $A(arguments), d = f.last(), a = f.length == 5 ? f[3]: null;
        this.method = Object.isFunction(d) ? d.bind(e) : Object.isFunction(e[d]) ? e[d].bind(e) : function(g) {
            e[d] = g;
        };
        this.start(Object.extend({
            from: b,
            to: c
        }, a || {}));
    },
    update: function(a) {
        this.method(a);
    }
});
Effect.Event = Class.create(Effect.Base, {
    initialize: function() {
        this.start(Object.extend({
            duration: 0
        }, arguments[0] || {}));
    },
    update: Prototype.emptyFunction
});
Effect.Opacity = Class.create(Effect.Base, {
    initialize: function(b) {
        this.element = $(b);
        if (!this.element) {
            throw (Effect._elementDoesNotExistError);
        }
        if (Prototype.Browser.IE && (!this.element.currentStyle.hasLayout)) {
            this.element.setStyle({
                zoom: 1
            });
        }
        var a = Object.extend({
            from: this.element.getOpacity() || 0,
            to: 1
        }, arguments[1] || {});
        this.start(a);
    },
    update: function(a) {
        this.element.setOpacity(a);
    }
});
Effect.Move = Class.create(Effect.Base, {
    initialize: function(b) {
        this.element = $(b);
        if (!this.element) {
            throw (Effect._elementDoesNotExistError);
        }
        var a = Object.extend({
            x: 0,
            y: 0,
            mode: "relative"
        }, arguments[1] || {});
        this.start(a);
    },
    setup: function() {
        this.element.makePositioned();
        this.originalLeft = parseFloat(this.element.getStyle("left") || "0");
        this.originalTop = parseFloat(this.element.getStyle("top") || "0");
        if (this.options.mode == "absolute") {
            this.options.x = this.options.x - this.originalLeft;
            this.options.y = this.options.y - this.originalTop;
        }
    },
    update: function(a) {
        this.element.setStyle({
            left: (this.options.x * a + this.originalLeft).round() + "px",
            top: (this.options.y * a + this.originalTop).round() + "px"
        });
    }
});
Effect.MoveBy = function(c, a, b) {
    return new Effect.Move(c, Object.extend({
        x: b,
        y: a
    }, arguments[3] || {}));
};
Effect.Scale = Class.create(Effect.Base, {
    initialize: function(c, b) {
        this.element = $(c);
        if (!this.element) {
            throw (Effect._elementDoesNotExistError);
        }
        var a = Object.extend({
            scaleX: true,
            scaleY: true,
            scaleContent: true,
            scaleFromCenter: false,
            scaleMode: "box",
            scaleFrom: 100,
            scaleTo: b
        }, arguments[2] || {});
        this.start(a);
    },
    setup: function() {
        this.restoreAfterFinish = this.options.restoreAfterFinish || false;
        this.elementPositioning = this.element.getStyle("position");
        this.originalStyle = {};
        ["top", "left", "width", "height", "fontSize"].each(function(b) {
            this.originalStyle[b] = this.element.style[b];
        }.bind(this));
        this.originalTop = this.element.offsetTop;
        this.originalLeft = this.element.offsetLeft;
        var a = this.element.getStyle("font-size") || "100%";
        ["em", "px", "%", "pt"].each(function(b) {
            if (a.indexOf(b) > 0) {
                this.fontSize = parseFloat(a);
                this.fontSizeType = b;
            }
        }.bind(this));
        this.factor = (this.options.scaleTo - this.options.scaleFrom) / 100;
        this.dims = null;
        if (this.options.scaleMode == "box") {
            this.dims = [this.element.offsetHeight, this.element.offsetWidth];
        }
        if (/^content/.test(this.options.scaleMode)) {
            this.dims = [this.element.scrollHeight, this.element.scrollWidth];
        }
        if (!this.dims) {
            this.dims = [this.options.scaleMode.originalHeight, this.options.scaleMode.originalWidth];
        }
    },
    update: function(a) {
        var b = (this.options.scaleFrom / 100) + (this.factor * a);
        if (this.options.scaleContent && this.fontSize) {
            this.element.setStyle({
                fontSize: this.fontSize * b + this.fontSizeType
            });
        }
        this.setDimensions(this.dims[0] * b, this.dims[1] * b);
    },
    finish: function(a) {
        if (this.restoreAfterFinish) {
            this.element.setStyle(this.originalStyle);
        }
    },
    setDimensions: function(a, c) {
        var b = {};
        if (this.options.scaleX) {
            b.width = c.round() + "px";
        }
        if (this.options.scaleY) {
            b.height = a.round() + "px";
        }
        if (this.options.scaleFromCenter) {
            var d = (a - this.dims[0]) / 2;
            var e = (c - this.dims[1]) / 2;
            if (this.elementPositioning == "absolute") {
                if (this.options.scaleY) {
                    b.top = this.originalTop - d + "px";
                }
                if (this.options.scaleX) {
                    b.left = this.originalLeft - e + "px";
                }
            } else {
                if (this.options.scaleY) {
                    b.top =- d + "px";
                }
                if (this.options.scaleX) {
                    b.left =- e + "px";
                }
            }
        }
        this.element.setStyle(b);
    }
});
Effect.Highlight = Class.create(Effect.Base, {
    initialize: function(b) {
        this.element = $(b);
        if (!this.element) {
            throw (Effect._elementDoesNotExistError);
        }
        var a = Object.extend({
            startcolor: "#ffff99"
        }, arguments[1] || {});
        this.start(a);
    },
    setup: function() {
        if (this.element.getStyle("display") == "none") {
            this.cancel();
            return;
        }
        this.oldStyle = {};
        if (!this.options.keepBackgroundImage) {
            this.oldStyle.backgroundImage = this.element.getStyle("background-image");
            this.element.setStyle({
                backgroundImage: "none"
            });
        }
        if (!this.options.endcolor) {
            this.options.endcolor = this.element.getStyle("background-color").parseColor("#ffffff");
        }
        if (!this.options.restorecolor) {
            this.options.restorecolor = this.element.getStyle("background-color");
        }
        this._base = $R(0, 2).map(function(a) {
            return parseInt(this.options.startcolor.slice(a * 2 + 1, a * 2 + 3), 16);
        }.bind(this));
        this._delta = $R(0, 2).map(function(a) {
            return parseInt(this.options.endcolor.slice(a * 2 + 1, a * 2 + 3), 16) - this._base[a];
        }.bind(this));
    },
    update: function(a) {
        this.element.setStyle({
            backgroundColor: $R(0, 2).inject("#", function(d, c, b) {
                return d + ((this._base[b] + (this._delta[b] * a)).round().toColorPart());
            }.bind(this))
        });
    },
    finish: function() {
        this.element.setStyle(Object.extend(this.oldStyle, {
            backgroundColor: this.options.restorecolor
        }));
    }
});
Effect.ScrollTo = function(c) {
    var d = arguments[1] || {}, a = document.viewport.getScrollOffsets(), b = $(c).cumulativeOffset();
    if (d.offset) {
        b[1] += d.offset;
    }
    return new Effect.Tween(null, a.top, b[1], d, function(e) {
        scrollTo(a.left, e.round());
    });
};
Effect.Fade = function(b) {
    b = $(b);
    var a = b.getInlineOpacity();
    var c = Object.extend({
        from: b.getOpacity() || 1,
        to: 0,
        afterFinishInternal: function(d) {
            if (d.options.to != 0) {
                return;
            }
            d.element.hide().setStyle({
                opacity: a
            });
        }
    }, arguments[1] || {});
    return new Effect.Opacity(b, c);
};
Effect.Appear = function(b) {
    b = $(b);
    var a = Object.extend({
        from: (b.getStyle("display") == "none" ? 0 : b.getOpacity() || 0),
        to: 1,
        afterFinishInternal: function(c) {
            c.element.forceRerendering();
        },
        beforeSetup: function(c) {
            c.element.setOpacity(c.options.from).show();
        }
    }, arguments[1] || {});
    return new Effect.Opacity(b, a);
};
Effect.Puff = function(b) {
    b = $(b);
    var a = {
        opacity: b.getInlineOpacity(),
        position: b.getStyle("position"),
        top: b.style.top,
        left: b.style.left,
        width: b.style.width,
        height: b.style.height
    };
    return new Effect.Parallel([new Effect.Scale(b, 200, {
        sync: true,
        scaleFromCenter: true,
        scaleContent: true,
        restoreAfterFinish: true
    }), new Effect.Opacity(b, {
        sync: true,
        to: 0
    })], Object.extend({
        duration: 1,
        beforeSetupInternal: function(c) {
            Position.absolutize(c.effects[0].element);
        },
        afterFinishInternal: function(c) {
            c.effects[0].element.hide().setStyle(a);
        }
    }, arguments[1] || {}));
};
Effect.BlindUp = function(a) {
    a = $(a);
    a.makeClipping();
    return new Effect.Scale(a, 0, Object.extend({
        scaleContent: false,
        scaleX: false,
        restoreAfterFinish: true,
        afterFinishInternal: function(b) {
            b.element.hide().undoClipping();
        }
    }, arguments[1] || {}));
};
Effect.BlindDown = function(b) {
    b = $(b);
    var a = b.getDimensions();
    return new Effect.Scale(b, 100, Object.extend({
        scaleContent: false,
        scaleX: false,
        scaleFrom: 0,
        scaleMode: {
            originalHeight: a.height,
            originalWidth: a.width
        },
        restoreAfterFinish: true,
        afterSetup: function(c) {
            c.element.makeClipping().setStyle({
                height: "0px"
            }).show();
        },
        afterFinishInternal: function(c) {
            c.element.undoClipping();
        }
    }, arguments[1] || {}));
};
Effect.SwitchOff = function(b) {
    b = $(b);
    var a = b.getInlineOpacity();
    return new Effect.Appear(b, Object.extend({
        duration: 0.4,
        from: 0,
        transition: Effect.Transitions.flicker,
        afterFinishInternal: function(c) {
            new Effect.Scale(c.element, 1, {
                duration: 0.3,
                scaleFromCenter: true,
                scaleX: false,
                scaleContent: false,
                restoreAfterFinish: true,
                beforeSetup: function(d) {
                    d.element.makePositioned().makeClipping();
                },
                afterFinishInternal: function(d) {
                    d.element.hide().undoClipping().undoPositioned().setStyle({
                        opacity: a
                    });
                }
            });
        }
    }, arguments[1] || {}));
};
Effect.DropOut = function(b) {
    b = $(b);
    var a = {
        top: b.getStyle("top"),
        left: b.getStyle("left"),
        opacity: b.getInlineOpacity()
    };
    return new Effect.Parallel([new Effect.Move(b, {
        x: 0,
        y: 100,
        sync: true
    }), new Effect.Opacity(b, {
        sync: true,
        to: 0
    })], Object.extend({
        duration: 0.5,
        beforeSetup: function(c) {
            c.effects[0].element.makePositioned();
        },
        afterFinishInternal: function(c) {
            c.effects[0].element.hide().undoPositioned().setStyle(a);
        }
    }, arguments[1] || {}));
};
Effect.Shake = function(c) {
    c = $(c);
    var e = Object.extend({
        distance: 20,
        duration: 0.5
    }, arguments[1] || {});
    var b = parseFloat(e.distance);
    var d = parseFloat(e.duration) / 10;
    var a = {
        top: c.getStyle("top"),
        left: c.getStyle("left")
    };
    return new Effect.Move(c, {
        x: b,
        y: 0,
        duration: d,
        afterFinishInternal: function(f) {
            new Effect.Move(f.element, {
                x: - b * 2,
                y: 0,
                duration: d * 2,
                afterFinishInternal: function(g) {
                    new Effect.Move(g.element, {
                        x: b * 2,
                        y: 0,
                        duration: d * 2,
                        afterFinishInternal: function(h) {
                            new Effect.Move(h.element, {
                                x: - b * 2,
                                y: 0,
                                duration: d * 2,
                                afterFinishInternal: function(k) {
                                    new Effect.Move(k.element, {
                                        x: b * 2,
                                        y: 0,
                                        duration: d * 2,
                                        afterFinishInternal: function(l) {
                                            new Effect.Move(l.element, {
                                                x: - b,
                                                y: 0,
                                                duration: d,
                                                afterFinishInternal: function(m) {
                                                    m.element.undoPositioned().setStyle(a);
                                                }
                                            });
                                        }
                                    });
                                }
                            });
                        }
                    });
                }
            });
        }
    });
};
Effect.SlideDown = function(b) {
    b = $(b).cleanWhitespace();
    var a = b.down().getStyle("bottom");
    var c = b.getDimensions();
    return new Effect.Scale(b, 100, Object.extend({
        scaleContent: false,
        scaleX: false,
        scaleFrom: window.opera ? 0: 1,
        scaleMode: {
            originalHeight: c.height,
            originalWidth: c.width
        },
        restoreAfterFinish: true,
        afterSetup: function(d) {
            d.element.makePositioned();
            d.element.down().makePositioned();
            if (window.opera) {
                d.element.setStyle({
                    top: ""
                });
            }
            d.element.makeClipping().setStyle({
                height: "0px"
            }).show();
        },
        afterUpdateInternal: function(d) {
            d.element.down().setStyle({
                bottom: (d.dims[0] - d.element.clientHeight) + "px"
            });
        },
        afterFinishInternal: function(d) {
            d.element.undoClipping().undoPositioned();
            d.element.down().undoPositioned().setStyle({
                bottom: a
            });
        }
    }, arguments[1] || {}));
};
Effect.SlideUp = function(b) {
    b = $(b).cleanWhitespace();
    var a = b.down().getStyle("bottom");
    var c = b.getDimensions();
    return new Effect.Scale(b, window.opera ? 0 : 1, Object.extend({
        scaleContent: false,
        scaleX: false,
        scaleMode: "box",
        scaleFrom: 100,
        scaleMode: {
            originalHeight: c.height,
            originalWidth: c.width
        },
        restoreAfterFinish: true,
        afterSetup: function(d) {
            d.element.makePositioned();
            d.element.down().makePositioned();
            if (window.opera) {
                d.element.setStyle({
                    top: ""
                });
            }
            d.element.makeClipping().show();
        },
        afterUpdateInternal: function(d) {
            d.element.down().setStyle({
                bottom: (d.dims[0] - d.element.clientHeight) + "px"
            });
        },
        afterFinishInternal: function(d) {
            d.element.hide().undoClipping().undoPositioned();
            d.element.down().undoPositioned().setStyle({
                bottom: a
            });
        }
    }, arguments[1] || {}));
};
Effect.Squish = function(a) {
    return new Effect.Scale(a, window.opera ? 1 : 0, {
        restoreAfterFinish: true,
        beforeSetup: function(b) {
            b.element.makeClipping();
        },
        afterFinishInternal: function(b) {
            b.element.hide().undoClipping();
        }
    });
};
Effect.Grow = function(g) {
    g = $(g);
    var h = Object.extend({
        direction: "center",
        moveTransition: Effect.Transitions.sinoidal,
        scaleTransition: Effect.Transitions.sinoidal,
        opacityTransition: Effect.Transitions.full
    }, arguments[1] || {});
    var a = {
        top: g.style.top,
        left: g.style.left,
        height: g.style.height,
        width: g.style.width,
        opacity: g.getInlineOpacity()
    };
    var c = g.getDimensions();
    var b, d;
    var e, f;
    switch (h.direction) {
    case"top-left":
        b = d = e = f = 0;
        break;
    case"top-right":
        b = c.width;
        d = f = 0;
        e =- c.width;
        break;
    case"bottom-left":
        b = e = 0;
        d = c.height;
        f =- c.height;
        break;
    case"bottom-right":
        b = c.width;
        d = c.height;
        e =- c.width;
        f =- c.height;
        break;
    case"center":
        b = c.width / 2;
        d = c.height / 2;
        e =- c.width / 2;
        f =- c.height / 2;
        break;
    }
    return new Effect.Move(g, {
        x: b,
        y: d,
        duration: 0.01,
        beforeSetup: function(k) {
            k.element.hide().makeClipping().makePositioned();
        },
        afterFinishInternal: function(k) {
            new Effect.Parallel([new Effect.Opacity(k.element, {
                sync: true,
                to: 1,
                from: 0,
                transition: h.opacityTransition
            }), new Effect.Move(k.element, {
                x: e,
                y: f,
                sync: true,
                transition: h.moveTransition
            }), new Effect.Scale(k.element, 100, {
                scaleMode: {
                    originalHeight: c.height,
                    originalWidth: c.width
                },
                sync: true,
                scaleFrom: window.opera ? 1: 0,
                transition: h.scaleTransition,
                restoreAfterFinish: true
            })], Object.extend({
                beforeSetup: function(l) {
                    l.effects[0].element.setStyle({
                        height: "0px"
                    }).show();
                },
                afterFinishInternal: function(l) {
                    l.effects[0].element.undoClipping().undoPositioned().setStyle(a);
                }
            }, h));
        }
    });
};
Effect.Shrink = function(e) {
    e = $(e);
    var f = Object.extend({
        direction: "center",
        moveTransition: Effect.Transitions.sinoidal,
        scaleTransition: Effect.Transitions.sinoidal,
        opacityTransition: Effect.Transitions.none
    }, arguments[1] || {});
    var a = {
        top: e.style.top,
        left: e.style.left,
        height: e.style.height,
        width: e.style.width,
        opacity: e.getInlineOpacity()
    };
    var b = e.getDimensions();
    var c, d;
    switch (f.direction) {
    case"top-left":
        c = d = 0;
        break;
    case"top-right":
        c = b.width;
        d = 0;
        break;
    case"bottom-left":
        c = 0;
        d = b.height;
        break;
    case"bottom-right":
        c = b.width;
        d = b.height;
        break;
    case"center":
        c = b.width / 2;
        d = b.height / 2;
        break;
    }
    return new Effect.Parallel([new Effect.Opacity(e, {
        sync: true,
        to: 0,
        from: 1,
        transition: f.opacityTransition
    }), new Effect.Scale(e, window.opera ? 1 : 0, {
        sync: true,
        transition: f.scaleTransition,
        restoreAfterFinish: true
    }), new Effect.Move(e, {
        x: c,
        y: d,
        sync: true,
        transition: f.moveTransition
    })], Object.extend({
        beforeStartInternal: function(g) {
            g.effects[0].element.makePositioned().makeClipping();
        },
        afterFinishInternal: function(g) {
            g.effects[0].element.hide().undoClipping().undoPositioned().setStyle(a);
        }
    }, f));
};
Effect.Pulsate = function(d) {
    d = $(d);
    var e = arguments[1] || {}, a = d.getInlineOpacity(), b = e.transition || Effect.Transitions.linear, c = function(f) {
        return 1 - b(( - Math.cos((f * (e.pulses || 5) * 2) * Math.PI) / 2) + 0.5);
    };
    return new Effect.Opacity(d, Object.extend(Object.extend({
        duration: 2,
        from: 0,
        afterFinishInternal: function(f) {
            f.element.setStyle({
                opacity: a
            });
        }
    }, e), {
        transition: c
    }));
};
Effect.Fold = function(b) {
    b = $(b);
    var a = {
        top: b.style.top,
        left: b.style.left,
        width: b.style.width,
        height: b.style.height
    };
    b.makeClipping();
    return new Effect.Scale(b, 5, Object.extend({
        scaleContent: false,
        scaleX: false,
        afterFinishInternal: function(c) {
            new Effect.Scale(b, 1, {
                scaleContent: false,
                scaleY: false,
                afterFinishInternal: function(d) {
                    d.element.hide().undoClipping().setStyle(a);
                }
            });
        }
    }, arguments[1] || {}));
};
Effect.Morph = Class.create(Effect.Base, {
    initialize: function(b) {
        this.element = $(b);
        if (!this.element) {
            throw (Effect._elementDoesNotExistError);
        }
        var a = Object.extend({
            style: {}
        }, arguments[1] || {});
        if (!Object.isString(a.style)) {
            this.style = $H(a.style);
        } else {
            if (a.style.include(":")) {
                this.style = a.style.parseStyle();
            } else {
                this.element.addClassName(a.style);
                this.style = $H(this.element.getStyles());
                this.element.removeClassName(a.style);
                var c = this.element.getStyles();
                this.style = this.style.reject(function(d) {
                    return d.value == c[d.key];
                });
                a.afterFinishInternal = function(d) {
                    d.element.addClassName(d.options.style);
                    d.transforms.each(function(e) {
                        d.element.style[e.style] = "";
                    });
                };
            }
        }
        this.start(a);
    },
    setup: function() {
        function a(b) {
            if (!b || ["rgba(0, 0, 0, 0)", "transparent"].include(b)) {
                b = "#ffffff";
            }
            b = b.parseColor();
            return $R(0, 2).map(function(c) {
                return parseInt(b.slice(c * 2 + 1, c * 2 + 3), 16);
            });
        }
        this.transforms = this.style.map(function(b) {
            var c = b[0], d = b[1], e = null;
            if (d.parseColor("#zzzzzz") != "#zzzzzz") {
                d = d.parseColor();
                e = "color";
            } else {
                if (c == "opacity") {
                    d = parseFloat(d);
                    if (Prototype.Browser.IE && (!this.element.currentStyle.hasLayout)) {
                        this.element.setStyle({
                            zoom: 1
                        });
                    }
                } else {
                    if (Element.CSS_LENGTH.test(d)) {
                        var f = d.match(/^([\+\-]?[0-9\.]+)(.*)$/);
                        d = parseFloat(f[1]);
                        e = (f.length == 3) ? f[2] : null;
                    }
                }
            }
            var g = this.element.getStyle(c);
            return {
                style: c.camelize(),
                originalValue: e == "color" ? a(g): parseFloat(g || 0),
                targetValue: e == "color" ? a(d): d,
                unit: e
            };
        }.bind(this)).reject(function(b) {
            return ((b.originalValue == b.targetValue) || (b.unit != "color" && (isNaN(b.originalValue) || isNaN(b.targetValue))));
        });
    },
    update: function(a) {
        var b = {}, d, c = this.transforms.length;
        while (c--) {
            b[(d = this.transforms[c]).style] = d.unit == "color" ? "#" + (Math.round(d.originalValue[0] + (d.targetValue[0] - d.originalValue[0]) * a)).toColorPart() + (Math.round(d.originalValue[1] + (d.targetValue[1] - d.originalValue[1]) * a)).toColorPart() + (Math.round(d.originalValue[2] + (d.targetValue[2] - d.originalValue[2]) * a)).toColorPart() : (d.originalValue + (d.targetValue - d.originalValue) * a).toFixed(3) + (d.unit === null ? "" : d.unit);
        }
        this.element.setStyle(b, true);
    }
});
Effect.Transform = Class.create({
    initialize: function(a) {
        this.tracks = [];
        this.options = arguments[1] || {};
        this.addTracks(a);
    },
    addTracks: function(a) {
        a.each(function(c) {
            c = $H(c);
            var b = c.values().first();
            this.tracks.push($H({
                ids: c.keys().first(),
                effect: Effect.Morph,
                options: {
                    style: b
                }
            }));
        }.bind(this));
        return this;
    },
    play: function() {
        return new Effect.Parallel(this.tracks.map(function(a) {
            var c = a.get("ids"), d = a.get("effect"), e = a.get("options");
            var b = [$(c) || $$(c)].flatten();
            return b.map(function(f) {
                return new d(f, Object.extend({
                    sync: true
                }, e));
            });
        }).flatten(), this.options);
    }
});
Element.CSS_PROPERTIES = $w("backgroundColor backgroundPosition borderBottomColor borderBottomStyle borderBottomWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderSpacing borderTopColor borderTopStyle borderTopWidth bottom clip color fontSize fontWeight height left letterSpacing lineHeight marginBottom marginLeft marginRight marginTop markerOffset maxHeight maxWidth minHeight minWidth opacity outlineColor outlineOffset outlineWidth paddingBottom paddingLeft paddingRight paddingTop right textIndent top width wordSpacing zIndex");
Element.CSS_LENGTH = /^(([\+\-]?[0-9\.]+)(em|ex|px|in|cm|mm|pt|pc|\%))|0$/;
String.__parseStyleElement = document.createElement("div");
String.prototype.parseStyle = function() {
    var b, a = $H();
    if (Prototype.Browser.WebKit) {
        b = new Element("div", {
            style: this
        }).style;
    } else {
        String.__parseStyleElement.innerHTML = '<div style="' + this + '"></div>';
        b = String.__parseStyleElement.childNodes[0].style;
    }
    Element.CSS_PROPERTIES.each(function(c) {
        if (b[c]) {
            a.set(c, b[c]);
        }
    });
    if (Prototype.Browser.IE && this.include("opacity")) {
        a.set("opacity", this.match(/opacity:\s*((?:0|1)?(?:\.\d*)?)/)[1]);
    }
    return a;
};
if (document.defaultView && document.defaultView.getComputedStyle) {
    Element.getStyles = function(b) {
        var a = document.defaultView.getComputedStyle($(b), null);
        return Element.CSS_PROPERTIES.inject({}, function(d, c) {
            d[c] = a[c];
            return d;
        });
    };
} else {
    Element.getStyles = function(c) {
        c = $(c);
        var a = c.currentStyle, b;
        b = Element.CSS_PROPERTIES.inject({}, function(e, d) {
            e[d] = a[d];
            return e;
        });
        if (!b.opacity) {
            b.opacity = c.getOpacity();
        }
        return b;
    };
}
Effect.Methods = {
    morph: function(a, b) {
        a = $(a);
        new Effect.Morph(a, Object.extend({
            style: b
        }, arguments[2] || {}));
        return a;
    },
    visualEffect: function(d, b, e) {
        d = $(d);
        var c = b.dasherize().camelize(), a = c.charAt(0).toUpperCase() + c.substring(1);
        new Effect[a](d, e);
        return d;
    },
    highlight: function(b, a) {
        b = $(b);
        new Effect.Highlight(b, a);
        return b;
    }
};
$w("fade appear grow shrink fold blindUp blindDown slideUp slideDown pulsate shake puff squish switchOff dropOut").each(function(a) {
    Effect.Methods[a] = function(b, c) {
        b = $(b);
        Effect[a.charAt(0).toUpperCase() + a.substring(1)](b, c);
        return b;
    };
});
$w("getInlineOpacity forceRerendering setContentZoom collectTextNodes collectTextNodesIgnoreClass getStyles").each(function(a) {
    Effect.Methods[a] = Element[a];
});
Element.addMethods(Effect.Methods);
if (Object.isUndefined(Effect)) {
    throw ("dragdrop.js requires including script.aculo.us' effects.js library");
}
var Droppables = {
    drops: [],
    remove: function(a) {
        this.drops = this.drops.reject(function(b) {
            return b.element == $(a);
        });
    },
    add: function(c) {
        c = $(c);
        var a = Object.extend({
            greedy: true,
            hoverclass: null,
            tree: false
        }, arguments[1] || {});
        if (a.containment) {
            a._containers = [];
            var b = a.containment;
            if (Object.isArray(b)) {
                b.each(function(d) {
                    a._containers.push($(d));
                });
            } else {
                a._containers.push($(b));
            }
        }
        if (a.accept) {
            a.accept = [a.accept].flatten();
        }
        Element.makePositioned(c);
        a.element = c;
        this.drops.push(a);
    },
    findDeepestChild: function(a) {
        deepest = a[0];
        for (i = 1; i < a.length; ++i) {
            if (Element.isParent(a[i].element, deepest.element)) {
                deepest = a[i];
            }
        }
        return deepest;
    },
    isContained: function(c, a) {
        var b;
        if (a.tree) {
            b = c.treeNode;
        } else {
            b = c.parentNode;
        }
        return a._containers.detect(function(d) {
            return b == d;
        });
    },
    isAffected: function(a, b, c) {
        return ((c.element != b) && ((!c._containers) || this.isContained(b, c)) && ((!c.accept) || (Element.classNames(b).detect(function(d) {
            return c.accept.include(d);
        }))) && Position.within(c.element, a[0], a[1]));
    },
    deactivate: function(a) {
        if (a.hoverclass) {
            Element.removeClassName(a.element, a.hoverclass);
        }
        this.last_active = null;
    },
    activate: function(a) {
        if (a.hoverclass) {
            Element.addClassName(a.element, a.hoverclass);
        }
        this.last_active = a;
    },
    show: function(a, c) {
        if (!this.drops.length) {
            return;
        }
        var d, b = [];
        this.drops.each(function(e) {
            if (Droppables.isAffected(a, c, e)) {
                b.push(e);
            }
        });
        if (b.length > 0) {
            d = Droppables.findDeepestChild(b);
        }
        if (this.last_active && this.last_active != d) {
            this.deactivate(this.last_active);
        }
        if (d) {
            Position.within(d.element, a[0], a[1]);
            if (d.onHover) {
                d.onHover(c, d.element, Position.overlap(d.overlap, d.element));
            }
            if (d != this.last_active) {
                Droppables.activate(d);
            }
        }
    },
    fire: function(b, a) {
        if (!this.last_active) {
            return;
        }
        Position.prepare();
        if (this.isAffected([Event.pointerX(b), Event.pointerY(b)], a, this.last_active)) {
            if (this.last_active.onDrop) {
                this.last_active.onDrop(a, this.last_active.element, b);
                return true;
            }
        }
    },
    reset: function() {
        if (this.last_active) {
            this.deactivate(this.last_active);
        }
    }
};
var Draggables = {
    drags: [],
    observers: [],
    register: function(a) {
        if (this.drags.length == 0) {
            this.eventMouseUp = this.endDrag.bindAsEventListener(this);
            this.eventMouseMove = this.updateDrag.bindAsEventListener(this);
            this.eventKeypress = this.keyPress.bindAsEventListener(this);
            Event.observe(document, "mouseup", this.eventMouseUp);
            Event.observe(document, "mousemove", this.eventMouseMove);
            Event.observe(document, "keypress", this.eventKeypress);
        }
        this.drags.push(a);
    },
    unregister: function(a) {
        this.drags = this.drags.reject(function(b) {
            return b == a;
        });
        if (this.drags.length == 0) {
            Event.stopObserving(document, "mouseup", this.eventMouseUp);
            Event.stopObserving(document, "mousemove", this.eventMouseMove);
            Event.stopObserving(document, "keypress", this.eventKeypress);
        }
    },
    activate: function(a) {
        if (a.options.delay) {
            this._timeout = setTimeout(function() {
                Draggables._timeout = null;
                window.focus();
                Draggables.activeDraggable = a;
            }.bind(this), a.options.delay);
        } else {
            window.focus();
            this.activeDraggable = a;
        }
    },
    deactivate: function() {
        this.activeDraggable = null;
    },
    updateDrag: function(a) {
        if (!this.activeDraggable) {
            return;
        }
        var b = [Event.pointerX(a), Event.pointerY(a)];
        if (this._lastPointer && (this._lastPointer.inspect() == b.inspect())) {
            return;
        }
        this._lastPointer = b;
        this.activeDraggable.updateDrag(a, b);
    },
    endDrag: function(a) {
        if (this._timeout) {
            clearTimeout(this._timeout);
            this._timeout = null;
        }
        if (!this.activeDraggable) {
            return;
        }
        this._lastPointer = null;
        this.activeDraggable.endDrag(a);
        this.activeDraggable = null;
    },
    keyPress: function(a) {
        if (this.activeDraggable) {
            this.activeDraggable.keyPress(a);
        }
    },
    addObserver: function(a) {
        this.observers.push(a);
        this._cacheObserverCallbacks();
    },
    removeObserver: function(a) {
        this.observers = this.observers.reject(function(b) {
            return b.element == a;
        });
        this._cacheObserverCallbacks();
    },
    notify: function(c, a, b) {
        if (this[c + "Count"] > 0) {
            this.observers.each(function(d) {
                if (d[c]) {
                    d[c](c, a, b);
                }
            });
        }
        if (a.options[c]) {
            a.options[c](a, b);
        }
    },
    _cacheObserverCallbacks: function() {
        ["onStart", "onEnd", "onDrag"].each(function(a) {
            Draggables[a + "Count"] = Draggables.observers.select(function(b) {
                return b[a];
            }).length;
        });
    }
};
var Draggable = Class.create({
    initialize: function(c) {
        var b = {
            handle: false,
            reverteffect: function(e, f, g) {
                var d = Math.sqrt(Math.abs(f^2) + Math.abs(g^2)) * 0.02;
                new Effect.Move(e, {
                    x: - g,
                    y: - f,
                    duration: d,
                    queue: {
                        scope: "_draggable",
                        position: "end"
                    }
                });
            },
            endeffect: function(d) {
                var e = Object.isNumber(d._opacity) ? d._opacity: 1;
                new Effect.Opacity(d, {
                    duration: 0.2,
                    from: 0.7,
                    to: e,
                    queue: {
                        scope: "_draggable",
                        position: "end"
                    },
                    afterFinish: function() {
                        Draggable._dragging[d] = false;
                    }
                });
            },
            zindex: 1000,
            revert: false,
            quiet: false,
            scroll: false,
            scrollSensitivity: 20,
            scrollSpeed: 15,
            snap: false,
            delay: 0
        };
        if (!arguments[1] || Object.isUndefined(arguments[1].endeffect)) {
            Object.extend(b, {
                starteffect: function(d) {
                    d._opacity = Element.getOpacity(d);
                    Draggable._dragging[d] = true;
                    new Effect.Opacity(d, {
                        duration: 0.2,
                        from: d._opacity,
                        to: 0.7
                    });
                }
            });
        }
        var a = Object.extend(b, arguments[1] || {});
        this.element = $(c);
        if (a.handle && Object.isString(a.handle)) {
            this.handle = this.element.down("." + a.handle, 0);
        }
        if (!this.handle) {
            this.handle = $(a.handle);
        }
        if (!this.handle) {
            this.handle = this.element;
        }
        if (a.scroll&&!a.scroll.scrollTo&&!a.scroll.outerHTML) {
            a.scroll = $(a.scroll);
            this._isScrollChild = Element.childOf(this.element, a.scroll);
        }
        Element.makePositioned(this.element);
        this.options = a;
        this.dragging = false;
        this.eventMouseDown = this.initDrag.bindAsEventListener(this);
        Event.observe(this.handle, "mousedown", this.eventMouseDown);
        Draggables.register(this);
    },
    destroy: function() {
        Event.stopObserving(this.handle, "mousedown", this.eventMouseDown);
        Draggables.unregister(this);
    },
    currentDelta: function() {
        return ([parseInt(Element.getStyle(this.element, "left") || "0"), parseInt(Element.getStyle(this.element, "top") || "0")]);
    },
    initDrag: function(a) {
        if (!Object.isUndefined(Draggable._dragging[this.element]) && Draggable._dragging[this.element]) {
            return;
        }
        if (Event.isLeftClick(a)) {
            var c = Event.element(a);
            if ((tag_name = c.tagName.toUpperCase()) && (tag_name == "INPUT" || tag_name == "SELECT" || tag_name == "OPTION" || tag_name == "BUTTON" || tag_name == "TEXTAREA")) {
                return;
            }
            var d = [Event.pointerX(a), Event.pointerY(a)];
            var b = Position.cumulativeOffset(this.element);
            this.offset = [0, 1].map(function(e) {
                return (d[e] - b[e]);
            });
            Draggables.activate(this);
            Event.stop(a);
        }
    },
    startDrag: function(b) {
        this.dragging = true;
        if (!this.delta) {
            this.delta = this.currentDelta();
        }
        if (this.options.zindex) {
            this.originalZ = parseInt(Element.getStyle(this.element, "z-index") || 0);
            this.element.style.zIndex = this.options.zindex;
        }
        if (this.options.ghosting) {
            this._clone = this.element.cloneNode(true);
            this._originallyAbsolute = (this.element.getStyle("position") == "absolute");
            if (!this._originallyAbsolute) {
                Position.absolutize(this.element);
            }
            this.element.parentNode.insertBefore(this._clone, this.element);
        }
        if (this.options.scroll) {
            if (this.options.scroll == window) {
                var a = this._getWindowScroll(this.options.scroll);
                this.originalScrollLeft = a.left;
                this.originalScrollTop = a.top;
            } else {
                this.originalScrollLeft = this.options.scroll.scrollLeft;
                this.originalScrollTop = this.options.scroll.scrollTop;
            }
        }
        Draggables.notify("onStart", this, b);
        if (this.options.starteffect) {
            this.options.starteffect(this.element);
        }
    },
    updateDrag: function(event, pointer) {
        if (!this.dragging) {
            this.startDrag(event);
        }
        if (!this.options.quiet) {
            Position.prepare();
            Droppables.show(pointer, this.element);
        }
        Draggables.notify("onDrag", this, event);
        this.draw(pointer);
        if (this.options.change) {
            this.options.change(this);
        }
        if (this.options.scroll) {
            this.stopScrolling();
            var p;
            if (this.options.scroll == window) {
                with (this._getWindowScroll(this.options.scroll)) {
                    p = [left, top, left + width, top + height];
                }
            } else {
                p = Position.page(this.options.scroll);
                p[0] += this.options.scroll.scrollLeft + Position.deltaX;
                p[1] += this.options.scroll.scrollTop + Position.deltaY;
                p.push(p[0] + this.options.scroll.offsetWidth);
                p.push(p[1] + this.options.scroll.offsetHeight);
            }
            var speed = [0, 0];
            if (pointer[0] < (p[0] + this.options.scrollSensitivity)) {
                speed[0] = pointer[0] - (p[0] + this.options.scrollSensitivity);
            }
            if (pointer[1] < (p[1] + this.options.scrollSensitivity)) {
                speed[1] = pointer[1] - (p[1] + this.options.scrollSensitivity);
            }
            if (pointer[0] > (p[2] - this.options.scrollSensitivity)) {
                speed[0] = pointer[0] - (p[2] - this.options.scrollSensitivity);
            }
            if (pointer[1] > (p[3] - this.options.scrollSensitivity)) {
                speed[1] = pointer[1] - (p[3] - this.options.scrollSensitivity);
            }
            this.startScrolling(speed);
        }
        if (Prototype.Browser.WebKit) {
            window.scrollBy(0, 0);
        }
        Event.stop(event);
    },
    finishDrag: function(f, c) {
        this.dragging = false;
        if (this.options.quiet) {
            Position.prepare();
            var d = [Event.pointerX(f), Event.pointerY(f)];
            Droppables.show(d, this.element);
        }
        if (this.options.ghosting) {
            if (!this._originallyAbsolute) {
                Position.relativize(this.element);
            }
            delete this._originallyAbsolute;
            Element.remove(this._clone);
            this._clone = null;
        }
        var b = false;
        if (c) {
            b = Droppables.fire(f, this.element);
            if (!b) {
                b = false;
            }
        }
        if (b && this.options.onDropped) {
            this.options.onDropped(this.element);
        }
        Draggables.notify("onEnd", this, f);
        var a = this.options.revert;
        if (a && Object.isFunction(a)) {
            a = a(this.element);
        }
        var e = this.currentDelta();
        if (a && this.options.reverteffect) {
            if (b == 0 || a != "failure") {
                this.options.reverteffect(this.element, e[1] - this.delta[1], e[0] - this.delta[0]);
            }
        } else {
            this.delta = e;
        }
        if (this.options.zindex) {
            this.element.style.zIndex = this.originalZ;
        }
        if (this.options.endeffect) {
            this.options.endeffect(this.element);
        }
        Draggables.deactivate(this);
        Droppables.reset();
    },
    keyPress: function(a) {
        if (a.keyCode != Event.KEY_ESC) {
            return;
        }
        this.finishDrag(a, false);
        Event.stop(a);
    },
    endDrag: function(a) {
        if (!this.dragging) {
            return;
        }
        this.stopScrolling();
        this.finishDrag(a, true);
        Event.stop(a);
    },
    draw: function(a) {
        var b = Position.cumulativeOffset(this.element);
        if (this.options.ghosting) {
            var e = Position.realOffset(this.element);
            b[0] += e[0] - Position.deltaX;
            b[1] += e[1] - Position.deltaY;
        }
        var c = this.currentDelta();
        b[0] -= c[0];
        b[1] -= c[1];
        if (this.options.scroll && (this.options.scroll != window && this._isScrollChild)) {
            b[0] -= this.options.scroll.scrollLeft - this.originalScrollLeft;
            b[1] -= this.options.scroll.scrollTop - this.originalScrollTop;
        }
        var d = [0, 1].map(function(g) {
            return (a[g] - b[g] - this.offset[g]);
        }.bind(this));
        if (this.options.snap) {
            if (Object.isFunction(this.options.snap)) {
                d = this.options.snap(d[0], d[1], this);
            } else {
                if (Object.isArray(this.options.snap)) {
                    d = d.map(function(h, g) {
                        return (h / this.options.snap[g]).round() * this.options.snap[g];
                    }.bind(this));
                } else {
                    d = d.map(function(g) {
                        return (g / this.options.snap).round() * this.options.snap;
                    }.bind(this));
                }
            }
        }
        var f = this.element.style;
        if ((!this.options.constraint) || (this.options.constraint == "horizontal")) {
            f.left = d[0] + "px";
        }
        if ((!this.options.constraint) || (this.options.constraint == "vertical")) {
            f.top = d[1] + "px";
        }
        if (f.visibility == "hidden") {
            f.visibility = "";
        }
    },
    stopScrolling: function() {
        if (this.scrollInterval) {
            clearInterval(this.scrollInterval);
            this.scrollInterval = null;
            Draggables._lastScrollPointer = null;
        }
    },
    startScrolling: function(a) {
        if (!(a[0] || a[1])) {
            return;
        }
        this.scrollSpeed = [a[0] * this.options.scrollSpeed, a[1] * this.options.scrollSpeed];
        this.lastScrolled = new Date();
        this.scrollInterval = setInterval(this.scroll.bind(this), 10);
    },
    scroll: function() {
        var current = new Date();
        var delta = current - this.lastScrolled;
        this.lastScrolled = current;
        if (this.options.scroll == window) {
            with (this._getWindowScroll(this.options.scroll)) {
                if (this.scrollSpeed[0] || this.scrollSpeed[1]) {
                    var d = delta / 1000;
                    this.options.scroll.scrollTo(left + d * this.scrollSpeed[0], top + d * this.scrollSpeed[1]);
                }
            }
        } else {
            this.options.scroll.scrollLeft += this.scrollSpeed[0] * delta / 1000;
            this.options.scroll.scrollTop += this.scrollSpeed[1] * delta / 1000;
        }
        Position.prepare();
        Droppables.show(Draggables._lastPointer, this.element);
        Draggables.notify("onDrag", this);
        if (this._isScrollChild) {
            Draggables._lastScrollPointer = Draggables._lastScrollPointer || $A(Draggables._lastPointer);
            Draggables._lastScrollPointer[0] += this.scrollSpeed[0] * delta / 1000;
            Draggables._lastScrollPointer[1] += this.scrollSpeed[1] * delta / 1000;
            if (Draggables._lastScrollPointer[0] < 0) {
                Draggables._lastScrollPointer[0] = 0;
            }
            if (Draggables._lastScrollPointer[1] < 0) {
                Draggables._lastScrollPointer[1] = 0;
            }
            this.draw(Draggables._lastScrollPointer);
        }
        if (this.options.change) {
            this.options.change(this);
        }
    },
    _getWindowScroll: function(w) {
        var T, L, W, H;
        with (w.document) {
            if (w.document.documentElement && documentElement.scrollTop) {
                T = documentElement.scrollTop;
                L = documentElement.scrollLeft;
            } else {
                if (w.document.body) {
                    T = body.scrollTop;
                    L = body.scrollLeft;
                }
            }
            if (w.innerWidth) {
                W = w.innerWidth;
                H = w.innerHeight;
            } else {
                if (w.document.documentElement && documentElement.clientWidth) {
                    W = documentElement.clientWidth;
                    H = documentElement.clientHeight;
                } else {
                    W = body.offsetWidth;
                    H = body.offsetHeight;
                }
            }
        }
        return {
            top: T,
            left: L,
            width: W,
            height: H
        };
    }
});
Draggable._dragging = {};
var SortableObserver = Class.create({
    initialize: function(b, a) {
        this.element = $(b);
        this.observer = a;
        this.lastValue = Sortable.serialize(this.element);
    },
    onStart: function() {
        this.lastValue = Sortable.serialize(this.element);
    },
    onEnd: function() {
        Sortable.unmark();
        if (this.lastValue != Sortable.serialize(this.element)) {
            this.observer(this.element);
        }
    }
});
var Sortable = {
    SERIALIZE_RULE: /^[^_\-](?:[A-Za-z0-9\-\_]*)[_](.*)$/,
    sortables: {},
    _findRootElement: function(a) {
        while (a.tagName.toUpperCase() != "BODY") {
            if (a.id && Sortable.sortables[a.id]) {
                return a;
            }
            a = a.parentNode;
        }
    },
    options: function(a) {
        a = Sortable._findRootElement($(a));
        if (!a) {
            return;
        }
        return Sortable.sortables[a.id];
    },
    destroy: function(a) {
        a = $(a);
        var b = Sortable.sortables[a.id];
        if (b) {
            Draggables.removeObserver(b.element);
            b.droppables.each(function(c) {
                Droppables.remove(c);
            });
            b.draggables.invoke("destroy");
            delete Sortable.sortables[b.element.id];
        }
    },
    create: function(d) {
        d = $(d);
        var e = Object.extend({
            element: d,
            tag: "li",
            dropOnEmpty: false,
            tree: false,
            treeTag: "ul",
            overlap: "vertical",
            constraint: "vertical",
            containment: d,
            handle: false,
            only: false,
            delay: 0,
            hoverclass: null,
            ghosting: false,
            quiet: false,
            scroll: false,
            scrollSensitivity: 20,
            scrollSpeed: 15,
            format: this.SERIALIZE_RULE,
            elements: false,
            handles: false,
            onChange: Prototype.emptyFunction,
            onUpdate: Prototype.emptyFunction
        }, arguments[1] || {});
        this.destroy(d);
        var a = {
            revert: true,
            quiet: e.quiet,
            scroll: e.scroll,
            scrollSpeed: e.scrollSpeed,
            scrollSensitivity: e.scrollSensitivity,
            delay: e.delay,
            ghosting: e.ghosting,
            constraint: e.constraint,
            handle: e.handle
        };
        if (e.starteffect) {
            a.starteffect = e.starteffect;
        }
        if (e.reverteffect) {
            a.reverteffect = e.reverteffect;
        } else {
            if (e.ghosting) {
                a.reverteffect = function(f) {
                    f.style.top = 0;
                    f.style.left = 0;
                };
            }
        }
        if (e.endeffect) {
            a.endeffect = e.endeffect;
        }
        if (e.zindex) {
            a.zindex = e.zindex;
        }
        var c = {
            overlap: e.overlap,
            containment: e.containment,
            tree: e.tree,
            hoverclass: e.hoverclass,
            onHover: Sortable.onHover
        };
        var b = {
            onHover: Sortable.onEmptyHover,
            overlap: e.overlap,
            containment: e.containment,
            hoverclass: e.hoverclass
        };
        Element.cleanWhitespace(d);
        e.draggables = [];
        e.droppables = [];
        if (e.dropOnEmpty || e.tree) {
            Droppables.add(d, b);
            e.droppables.push(d);
        }(e.elements || this.findElements(d, e) || []).each(function(f, h) {
            var g = e.handles ? $(e.handles[h]): (e.handle ? $(f).select("." + e.handle)[0] : f);
            e.draggables.push(new Draggable(f, Object.extend(a, {
                handle: g
            })));
            Droppables.add(f, c);
            if (e.tree) {
                f.treeNode = d;
            }
            e.droppables.push(f);
        });
        if (e.tree) {
            (Sortable.findTreeElements(d, e) || []).each(function(f) {
                Droppables.add(f, b);
                f.treeNode = d;
                e.droppables.push(f);
            });
        }
        this.sortables[d.id] = e;
        Draggables.addObserver(new SortableObserver(d, e.onUpdate));
    },
    findElements: function(b, a) {
        return Element.findChildren(b, a.only, a.tree ? true : false, a.tag);
    },
    findTreeElements: function(b, a) {
        return Element.findChildren(b, a.only, a.tree ? true : false, a.treeTag);
    },
    onHover: function(b, c, a) {
        if (Element.isParent(c, b)) {
            return;
        }
        if (a > 0.33 && a < 0.66 && Sortable.options(c).tree) {
            return;
        } else {
            if (a > 0.5) {
                Sortable.mark(c, "before");
                if (c.previousSibling != b) {
                    var e = b.parentNode;
                    b.style.visibility = "hidden";
                    c.parentNode.insertBefore(b, c);
                    if (c.parentNode != e) {
                        Sortable.options(e).onChange(b);
                    }
                    Sortable.options(c.parentNode).onChange(b);
                }
            } else {
                Sortable.mark(c, "after");
                var d = c.nextSibling || null;
                if (d != b) {
                    var e = b.parentNode;
                    b.style.visibility = "hidden";
                    c.parentNode.insertBefore(b, d);
                    if (c.parentNode != e) {
                        Sortable.options(e).onChange(b);
                    }
                    Sortable.options(c.parentNode).onChange(b);
                }
            }
        }
    },
    onEmptyHover: function(k, g, f) {
        var e = k.parentNode;
        var d = Sortable.options(g);
        if (!Element.isParent(g, k)) {
            var h;
            var b = Sortable.findElements(g, {
                tag: d.tag,
                only: d.only
            });
            var c = null;
            if (b) {
                var a = Element.offsetSize(g, d.overlap) * (1 - f);
                for (h = 0; h < b.length; h += 1) {
                    if (a - Element.offsetSize(b[h], d.overlap) >= 0) {
                        a -= Element.offsetSize(b[h], d.overlap);
                    } else {
                        if (a - (Element.offsetSize(b[h], d.overlap) / 2) >= 0) {
                            c = h + 1 < b.length ? b[h + 1] : null;
                            break;
                        } else {
                            c = b[h];
                            break;
                        }
                    }
                }
            }
            g.insertBefore(k, c);
            Sortable.options(e).onChange(k);
            d.onChange(k);
        }
    },
    unmark: function() {
        if (Sortable._marker) {
            Sortable._marker.hide();
        }
    },
    mark: function(d, a) {
        var b = Sortable.options(d.parentNode);
        if (b&&!b.ghosting) {
            return;
        }
        if (!Sortable._marker) {
            Sortable._marker = ($("dropmarker") || Element.extend(document.createElement("DIV"))).hide().addClassName("dropmarker").setStyle({
                position: "absolute"
            });
            document.getElementsByTagName("body").item(0).appendChild(Sortable._marker);
        }
        var c = Position.cumulativeOffset(d);
        Sortable._marker.setStyle({
            left: c[0] + "px",
            top: c[1] + "px"
        });
        if (a == "after") {
            if (b.overlap == "horizontal") {
                Sortable._marker.setStyle({
                    left: (c[0] + d.clientWidth) + "px"
                });
            } else {
                Sortable._marker.setStyle({
                    top: (c[1] + d.clientHeight) + "px"
                });
            }
        }
        Sortable._marker.show();
    },
    _tree: function(d, g, c) {
        var e = Sortable.findElements(d, g) || [];
        for (var f = 0; f < e.length; ++f) {
            var a = e[f].id.match(g.format);
            if (!a) {
                continue;
            }
            var b = {
                id: encodeURIComponent(a ? a[1] : null),
                element: d,
                parent: c,
                children: [],
                position: c.children.length,
                container: $(e[f]).down(g.treeTag)
            };
            if (b.container) {
                this._tree(b.container, g, b);
            }
            c.children.push(b);
        }
        return c;
    },
    tree: function(b) {
        b = $(b);
        var c = this.options(b);
        var d = Object.extend({
            tag: c.tag,
            treeTag: c.treeTag,
            only: c.only,
            name: b.id,
            format: c.format
        }, arguments[1] || {});
        var a = {
            id: null,
            parent: null,
            children: [],
            container: b,
            position: 0
        };
        return Sortable._tree(b, d, a);
    },
    _constructIndex: function(b) {
        var a = "";
        do {
            if (b.id) {
                a = "[" + b.position + "]" + a;
            }
        }
        while ((b = b.parent) != null);
        return a;
    },
    sequence: function(b) {
        b = $(b);
        var a = Object.extend(this.options(b), arguments[1] || {});
        return $(this.findElements(b, a) || []).map(function(c) {
            return c.id.match(a.format) ? c.id.match(a.format)[1] : "";
        });
    },
    setSequence: function(d, c) {
        d = $(d);
        var a = Object.extend(this.options(d), arguments[2] || {});
        var b = {};
        this.findElements(d, a).each(function(e) {
            if (e.id.match(a.format)) {
                b[e.id.match(a.format)[1]] = [e, e.parentNode];
            }
            e.parentNode.removeChild(e);
        });
        c.each(function(f) {
            var e = b[f];
            if (e) {
                e[1].appendChild(e[0]);
                delete b[f];
            }
        });
    },
    serialize: function(b) {
        b = $(b);
        var c = Object.extend(Sortable.options(b), arguments[1] || {});
        var a = encodeURIComponent((arguments[1] && arguments[1].name) ? arguments[1].name : b.id);
        if (c.tree) {
            return Sortable.tree(b, arguments[1]).children.map(function(d) {
                return [a + Sortable._constructIndex(d) + "[id]=" + encodeURIComponent(d.id)].concat(d.children.map(arguments.callee));
            }).flatten().join("&");
        } else {
            return Sortable.sequence(b, arguments[1]).map(function(d) {
                return a + "[]=" + encodeURIComponent(d);
            }).join("&");
        }
    }
};
Element.isParent = function(b, a) {
    if (!b.parentNode || b == a) {
        return false;
    }
    if (b.parentNode == a) {
        return true;
    }
    return Element.isParent(b.parentNode, a);
};
Element.findChildren = function(c, e, a, d) {
    if (!c.hasChildNodes()) {
        return null;
    }
    d = d.toUpperCase();
    if (e) {
        e = [e].flatten();
    }
    var b = [];
    $A(c.childNodes).each(function(f) {
        if (f.tagName && f.tagName.toUpperCase() == d && (!e || (Element.classNames(f).detect(function(h) {
            return e.include(h);
        })))) {
            b.push(f);
        }
        if (a) {
            var g = Element.findChildren(f, e, a, d);
            if (g) {
                b.push(g);
            }
        }
    });
    return (b.length > 0 ? b.flatten() : []);
};
Element.offsetSize = function(a, b) {
    return a["offset" + ((b == "vertical" || b == "height") ? "Height" : "Width")];
};
if (typeof Effect == "undefined") {
    throw ("controls.js requires including script.aculo.us' effects.js library");
}
var Autocompleter = {};
Autocompleter.Base = Class.create({
    baseInitialize: function(c, b, a) {
        c = $(c);
        this.element = c;
        this.update = $(b);
        this.hasFocus = false;
        this.changed = false;
        this.active = false;
        this.index = 0;
        this.entryCount = 0;
        this.oldElementValue = this.element.value;
        if (this.setOptions) {
            this.setOptions(a);
        } else {
            this.options = a || {};
        }
        this.options.paramName = this.options.paramName || this.element.name;
        this.options.tokens = this.options.tokens || [];
        this.options.frequency = this.options.frequency || 0.4;
        this.options.minChars = this.options.minChars || 1;
        this.options.onShow = this.options.onShow || function(e, d) {
            if (!d.style.position || d.style.position == "absolute") {
                d.style.position = "absolute";
                Position.clone(e, d, {
                    setHeight: false,
                    offsetTop: e.offsetHeight
                });
            }
            Effect.Appear(d, {
                duration: 0.15
            });
        };
        this.options.onHide = this.options.onHide || function(e, d) {
            new Effect.Fade(d, {
                duration: 0.15
            });
        };
        if (typeof(this.options.tokens) == "string") {
            this.options.tokens = new Array(this.options.tokens);
        }
        if (!this.options.tokens.include("\n")) {
            this.options.tokens.push("\n");
        }
        this.observer = null;
        this.element.setAttribute("autocomplete", "off");
        Element.hide(this.update);
        Event.observe(this.element, "blur", this.onBlur.bindAsEventListener(this));
        Event.observe(this.element, "keydown", this.onKeyPress.bindAsEventListener(this));
    },
    show: function() {
        if (Element.getStyle(this.update, "display") == "none") {
            this.options.onShow(this.element, this.update);
        }
        if (!this.iefix && (Prototype.Browser.IE) && (Element.getStyle(this.update, "position") == "absolute")) {
            new Insertion.After(this.update, '<iframe id="' + this.update.id + '_iefix" style="display:none;position:absolute;filter:progid:DXImageTransform.Microsoft.Alpha(opacity=0);" src="javascript:false;" frameborder="0" scrolling="no"></iframe>');
            this.iefix = $(this.update.id + "_iefix");
        }
        if (this.iefix) {
            setTimeout(this.fixIEOverlapping.bind(this), 50);
        }
    },
    fixIEOverlapping: function() {
        Position.clone(this.update, this.iefix, {
            setTop: (!this.update.style.height)
        });
        this.iefix.style.zIndex = 1;
        this.update.style.zIndex = 2;
        Element.show(this.iefix);
    },
    hide: function() {
        this.stopIndicator();
        if (Element.getStyle(this.update, "display") != "none") {
            this.options.onHide(this.element, this.update);
        }
        if (this.iefix) {
            Element.hide(this.iefix);
        }
    },
    startIndicator: function() {
        if (this.options.indicator) {
            Element.show(this.options.indicator);
        }
    },
    stopIndicator: function() {
        if (this.options.indicator) {
            Element.hide(this.options.indicator);
        }
    },
    onKeyPress: function(a) {
        if (this.active) {
            switch (a.keyCode) {
            case Event.KEY_TAB:
            case Event.KEY_RETURN:
                this.selectEntry();
                Event.stop(a);
            case Event.KEY_ESC:
                this.hide();
                this.active = false;
                Event.stop(a);
                return;
            case Event.KEY_LEFT:
            case Event.KEY_RIGHT:
                return;
            case Event.KEY_UP:
                this.markPrevious();
                this.render();
                Event.stop(a);
                return;
            case Event.KEY_DOWN:
                this.markNext();
                this.render();
                Event.stop(a);
                return;
            }
        } else {
            if (a.keyCode == Event.KEY_TAB || a.keyCode == Event.KEY_RETURN || (Prototype.Browser.WebKit > 0 && a.keyCode == 0)) {
                return;
            }
        }
        this.changed = true;
        this.hasFocus = true;
        if (this.observer) {
            clearTimeout(this.observer);
        }
        this.observer = setTimeout(this.onObserverEvent.bind(this), this.options.frequency * 1000);
    },
    activate: function() {
        this.changed = false;
        this.hasFocus = true;
        this.getUpdatedChoices();
    },
    onHover: function(b) {
        var a = Event.findElement(b, "LI");
        if (this.index != a.autocompleteIndex) {
            this.index = a.autocompleteIndex;
            this.render();
        }
        Event.stop(b);
    },
    onClick: function(b) {
        var a = Event.findElement(b, "LI");
        this.index = a.autocompleteIndex;
        this.selectEntry();
        this.hide();
    },
    onBlur: function(a) {
        setTimeout(this.hide.bind(this), 250);
        this.hasFocus = false;
        this.active = false;
    },
    render: function() {
        if (this.entryCount > 0) {
            for (var a = 0; a < this.entryCount; a++) {
                this.index == a ? Element.addClassName(this.getEntry(a), "selected") : Element.removeClassName(this.getEntry(a), "selected");
            }
            if (this.hasFocus) {
                this.show();
                this.active = true;
            }
        } else {
            this.active = false;
            this.hide();
        }
    },
    markPrevious: function() {
        if (this.index > 0) {
            this.index--;
        } else {
            this.index = this.entryCount - 1;
        }
        this.getEntry(this.index).scrollIntoView(true);
    },
    markNext: function() {
        if (this.index < this.entryCount - 1) {
            this.index++;
        } else {
            this.index = 0;
        }
        this.getEntry(this.index).scrollIntoView(false);
    },
    getEntry: function(a) {
        return this.update.firstChild.childNodes[a];
    },
    getCurrentEntry: function() {
        return this.getEntry(this.index);
    },
    selectEntry: function() {
        this.active = false;
        this.updateElement(this.getCurrentEntry());
    },
    updateElement: function(b) {
        if (this.options.updateElement) {
            this.options.updateElement(b);
            return;
        }
        var d = "";
        if (this.options.select) {
            var a = $(b).select("." + this.options.select) || [];
            if (a.length > 0) {
                d = Element.collectTextNodes(a[0], this.options.select);
            }
        } else {
            d = Element.collectTextNodesIgnoreClass(b, "informal");
        }
        var e = this.getTokenBounds();
        if (e[0]!=-1) {
            var c = this.element.value.substr(0, e[0]);
            var f = this.element.value.substr(e[0]).match(/^\s+/);
            if (f) {
                c += f[0];
            }
            this.element.value = c + d + this.element.value.substr(e[1]);
        } else {
            this.element.value = d;
        }
        this.oldElementValue = this.element.value;
        this.element.focus();
        if (this.options.afterUpdateElement) {
            this.options.afterUpdateElement(this.element, b);
        }
    },
    updateChoices: function(b) {
        if (!this.changed && this.hasFocus) {
            this.update.innerHTML = b;
            Element.cleanWhitespace(this.update);
            Element.cleanWhitespace(this.update.down());
            if (this.update.firstChild && this.update.down().childNodes) {
                this.entryCount = this.update.down().childNodes.length;
                for (var a = 0; a < this.entryCount; a++) {
                    var c = this.getEntry(a);
                    c.autocompleteIndex = a;
                    this.addObservers(c);
                }
            } else {
                this.entryCount = 0;
            }
            this.stopIndicator();
            this.index = 0;
            if (this.entryCount == 1 && this.options.autoSelect) {
                this.selectEntry();
                this.hide();
            } else {
                this.render();
            }
        }
    },
    addObservers: function(a) {
        Event.observe(a, "mouseover", this.onHover.bindAsEventListener(this));
        Event.observe(a, "click", this.onClick.bindAsEventListener(this));
    },
    onObserverEvent: function() {
        this.changed = false;
        this.tokenBounds = null;
        if (this.getToken().length >= this.options.minChars) {
            this.getUpdatedChoices();
        } else {
            this.active = false;
            this.hide();
        }
        this.oldElementValue = this.element.value;
    },
    getToken: function() {
        var a = this.getTokenBounds();
        return this.element.value.substring(a[0], a[1]).strip();
    },
    getTokenBounds: function() {
        if (null != this.tokenBounds) {
            return this.tokenBounds;
        }
        var e = this.element.value;
        if (e.strip().empty()) {
            return [ - 1, 0];
        }
        var d = arguments.callee.getFirstDifferencePos(e, this.oldElementValue);
        var b = (d == this.oldElementValue.length ? 1 : 0);
        var f =- 1, g = e.length;
        var c;
        for (var h = 0, a = this.options.tokens.length; h < a; ++h) {
            c = e.lastIndexOf(this.options.tokens[h], d + b - 1);
            if (c > f) {
                f = c;
            }
            c = e.indexOf(this.options.tokens[h], d + b);
            if ( - 1 != c && c < g) {
                g = c;
            }
        }
        return (this.tokenBounds = [f + 1, g]);
    }
});
Autocompleter.Base.prototype.getTokenBounds.getFirstDifferencePos = function(c, a) {
    var b = Math.min(c.length, a.length);
    for (var d = 0; d < b; ++d) {
        if (c[d] != a[d]) {
            return d;
        }
    }
    return b;
};
Ajax.Autocompleter = Class.create(Autocompleter.Base, {
    initialize: function(c, b, d, a) {
        this.baseInitialize(c, b, a);
        this.options.asynchronous = true;
        this.options.onComplete = this.onComplete.bind(this);
        this.options.defaultParams = this.options.parameters || null;
        this.url = d;
    },
    getUpdatedChoices: function() {
        this.startIndicator();
        var a = encodeURIComponent(this.options.paramName) + "=" + encodeURIComponent(this.getToken());
        this.options.parameters = this.options.callback ? this.options.callback(this.element, a) : a;
        if (this.options.defaultParams) {
            this.options.parameters += "&" + this.options.defaultParams;
        }
        new Ajax.Request(this.url, this.options);
    },
    onComplete: function(a) {
        this.updateChoices(a.responseText);
    }
});
Autocompleter.Local = Class.create(Autocompleter.Base, {
    initialize: function(d, b, c, a) {
        this.baseInitialize(d, b, a);
        this.options.array = c;
    },
    getUpdatedChoices: function() {
        this.updateChoices(this.options.selector(this));
    },
    setOptions: function(a) {
        this.options = Object.extend({
            choices: 10,
            partialSearch: true,
            partialChars: 2,
            ignoreCase: true,
            fullSearch: false,
            selector: function(k) {
                var g = [];
                var h = [];
                var c = k.getToken();
                var d = 0;
                for (var f = 0; f < k.options.array.length && g.length < k.options.choices; f++) {
                    var e = k.options.array[f];
                    var b = k.options.ignoreCase ? e.toLowerCase().indexOf(c.toLowerCase()): e.indexOf(c);
                    while (b!=-1) {
                        if (b == 0 && e.length != c.length) {
                            g.push("<li><strong>" + e.substr(0, c.length) + "</strong>" + e.substr(c.length) + "</li>");
                            break;
                        } else {
                            if (c.length >= k.options.partialChars && k.options.partialSearch && b!=-1) {
                                if (k.options.fullSearch || /\s/.test(e.substr(b - 1, 1))) {
                                    h.push("<li>" + e.substr(0, b) + "<strong>" + e.substr(b, c.length) + "</strong>" + e.substr(b + c.length) + "</li>");
                                    break;
                                }
                            }
                        }
                        b = k.options.ignoreCase ? e.toLowerCase().indexOf(c.toLowerCase(), b + 1) : e.indexOf(c, b + 1);
                    }
                }
                if (h.length) {
                    g = g.concat(h.slice(0, k.options.choices - g.length));
                }
                return "<ul>" + g.join("") + "</ul>";
            }
        }, a || {});
    }
});
Field.scrollFreeActivate = function(a) {
    setTimeout(function() {
        Field.activate(a);
    }, 1);
};
Ajax.InPlaceEditor = Class.create({
    initialize: function(b, c, a) {
        this.url = c;
        this.element = b = $(b);
        this.prepareOptions();
        this._controls = {};
        arguments.callee.dealWithDeprecatedOptions(a);
        Object.extend(this.options, a || {});
        if (!this.options.formId && this.element.id) {
            this.options.formId = this.element.id + "-inplaceeditor";
            if ($(this.options.formId)) {
                this.options.formId = "";
            }
        }
        if (this.options.externalControl) {
            this.options.externalControl = $(this.options.externalControl);
        }
        if (!this.options.externalControl) {
            this.options.externalControlOnly = false;
        }
        this._originalBackground = this.element.getStyle("background-color") || "transparent";
        this.element.title = this.options.clickToEditText;
        this._boundCancelHandler = this.handleFormCancellation.bind(this);
        this._boundComplete = (this.options.onComplete || Prototype.emptyFunction).bind(this);
        this._boundFailureHandler = this.handleAJAXFailure.bind(this);
        this._boundSubmitHandler = this.handleFormSubmission.bind(this);
        this._boundWrapperHandler = this.wrapUp.bind(this);
        this.registerListeners();
    },
    checkForEscapeOrReturn: function(a) {
        if (!this._editing || a.ctrlKey || a.altKey || a.shiftKey) {
            return;
        }
        if (Event.KEY_ESC == a.keyCode) {
            this.handleFormCancellation(a);
        } else {
            if (Event.KEY_RETURN == a.keyCode) {
                this.handleFormSubmission(a);
            }
        }
    },
    createControl: function(b, f, g) {
        var d = this.options[b + "Control"];
        var c = this.options[b + "Text"];
        if ("button" == d) {
            var a = document.createElement("input");
            a.type = "submit";
            a.value = c;
            a.className = "editor_" + b + "_button";
            if ("cancel" == b) {
                a.onclick = this._boundCancelHandler;
            }
            this._form.appendChild(a);
            this._controls[b] = a;
        } else {
            if ("link" == d) {
                var e = document.createElement("a");
                e.href = "#";
                e.appendChild(document.createTextNode(c));
                e.onclick = "cancel" == b ? this._boundCancelHandler : this._boundSubmitHandler;
                e.className = "editor_" + b + "_link";
                if (g) {
                    e.className += " " + g;
                }
                this._form.appendChild(e);
                this._controls[b] = e;
            }
        }
    },
    createEditField: function() {
        var b = (this.options.loadTextURL ? this.options.loadingText : this.getText());
        var c;
        if (1 >= this.options.rows&&!/\r|\n/.test(this.getText())) {
            c = document.createElement("input");
            c.type = "text";
            var a = this.options.size || this.options.cols || 0;
            if (0 < a) {
                c.size = a;
            }
        } else {
            c = document.createElement("textarea");
            c.rows = (1 >= this.options.rows ? this.options.autoRows : this.options.rows);
            c.cols = this.options.cols || 40;
        }
        c.name = this.options.paramName;
        c.value = b;
        c.className = "editor_field";
        if (this.options.submitOnBlur) {
            c.onblur = this._boundSubmitHandler;
        }
        this._controls.editor = c;
        if (this.options.loadTextURL) {
            this.loadExternalText();
        }
        this._form.appendChild(this._controls.editor);
    },
    createForm: function() {
        var b = this;
        function a(d, c) {
            var e = b.options["text" + d + "Controls"];
            if (!e || c === false) {
                return;
            }
            b._form.appendChild(document.createTextNode(e));
        }
        this._form = $(document.createElement("form"));
        this._form.id = this.options.formId;
        this._form.addClassName(this.options.formClassName);
        this._form.onsubmit = this._boundSubmitHandler;
        this.createEditField();
        if ("textarea" == this._controls.editor.tagName.toLowerCase()) {
            this._form.appendChild(document.createElement("br"));
        }
        if (this.options.onFormCustomization) {
            this.options.onFormCustomization(this, this._form);
        }
        a("Before", this.options.okControl || this.options.cancelControl);
        this.createControl("ok", this._boundSubmitHandler);
        a("Between", this.options.okControl && this.options.cancelControl);
        this.createControl("cancel", this._boundCancelHandler, "editor_cancel");
        a("After", this.options.okControl || this.options.cancelControl);
    },
    destroy: function() {
        if (this._oldInnerHTML) {
            this.element.innerHTML = this._oldInnerHTML;
        }
        this.leaveEditMode();
        this.unregisterListeners();
    },
    enterEditMode: function(a) {
        if (this._saving || this._editing) {
            return;
        }
        this._editing = true;
        this.triggerCallback("onEnterEditMode");
        if (this.options.externalControl) {
            this.options.externalControl.hide();
        }
        this.element.hide();
        this.createForm();
        this.element.parentNode.insertBefore(this._form, this.element);
        if (!this.options.loadTextURL) {
            this.postProcessEditField();
        }
        if (a) {
            Event.stop(a);
        }
    },
    enterHover: function(a) {
        if (this.options.hoverClassName) {
            this.element.addClassName(this.options.hoverClassName);
        }
        if (this._saving) {
            return;
        }
        this.triggerCallback("onEnterHover");
    },
    getText: function() {
        return this.element.innerHTML.unescapeHTML();
    },
    handleAJAXFailure: function(a) {
        this.triggerCallback("onFailure", a);
        if (this._oldInnerHTML) {
            this.element.innerHTML = this._oldInnerHTML;
            this._oldInnerHTML = null;
        }
    },
    handleFormCancellation: function(a) {
        this.wrapUp();
        if (a) {
            Event.stop(a);
        }
    },
    handleFormSubmission: function(c) {
        var e = this._form;
        var d = $F(this._controls.editor);
        this.prepareSubmission();
        var b = this.options.callback(e, d) || "";
        if (Object.isString(b)) {
            b = b.toQueryParams();
        }
        b.editorId = this.element.id;
        if (this.options.htmlResponse) {
            var a = Object.extend({
                evalScripts: true
            }, this.options.ajaxOptions);
            Object.extend(a, {
                parameters: b,
                onComplete: this._boundWrapperHandler,
                onFailure: this._boundFailureHandler
            });
            new Ajax.Updater({
                success: this.element
            }, this.url, a);
        } else {
            var a = Object.extend({
                method: "get"
            }, this.options.ajaxOptions);
            Object.extend(a, {
                parameters: b,
                onComplete: this._boundWrapperHandler,
                onFailure: this._boundFailureHandler
            });
            new Ajax.Request(this.url, a);
        }
        if (c) {
            Event.stop(c);
        }
    },
    leaveEditMode: function() {
        this.element.removeClassName(this.options.savingClassName);
        this.removeForm();
        this.leaveHover();
        this.element.style.backgroundColor = this._originalBackground;
        this.element.show();
        if (this.options.externalControl) {
            this.options.externalControl.show();
        }
        this._saving = false;
        this._editing = false;
        this._oldInnerHTML = null;
        this.triggerCallback("onLeaveEditMode");
    },
    leaveHover: function(a) {
        if (this.options.hoverClassName) {
            this.element.removeClassName(this.options.hoverClassName);
        }
        if (this._saving) {
            return;
        }
        this.triggerCallback("onLeaveHover");
    },
    loadExternalText: function() {
        this._form.addClassName(this.options.loadingClassName);
        this._controls.editor.disabled = true;
        var a = Object.extend({
            method: "get"
        }, this.options.ajaxOptions);
        Object.extend(a, {
            parameters: "editorId=" + encodeURIComponent(this.element.id),
            onComplete: Prototype.emptyFunction,
            onSuccess: function(b) {
                this._form.removeClassName(this.options.loadingClassName);
                var c = b.responseText;
                if (this.options.stripLoadedTextTags) {
                    c = c.stripTags();
                }
                this._controls.editor.value = c;
                this._controls.editor.disabled = false;
                this.postProcessEditField();
            }.bind(this),
            onFailure: this._boundFailureHandler
        });
        new Ajax.Request(this.options.loadTextURL, a);
    },
    postProcessEditField: function() {
        var a = this.options.fieldPostCreation;
        if (a) {
            $(this._controls.editor)["focus" == a ? "focus": "activate"]();
        }
    },
    prepareOptions: function() {
        this.options = Object.clone(Ajax.InPlaceEditor.DefaultOptions);
        Object.extend(this.options, Ajax.InPlaceEditor.DefaultCallbacks);
        [this._extraDefaultOptions].flatten().compact().each(function(a) {
            Object.extend(this.options, a);
        }.bind(this));
    },
    prepareSubmission: function() {
        this._saving = true;
        this.removeForm();
        this.leaveHover();
        this.showSaving();
    },
    registerListeners: function() {
        this._listeners = {};
        var a;
        $H(Ajax.InPlaceEditor.Listeners).each(function(b) {
            a = this[b.value].bind(this);
            this._listeners[b.key] = a;
            if (!this.options.externalControlOnly) {
                this.element.observe(b.key, a);
            }
            if (this.options.externalControl) {
                this.options.externalControl.observe(b.key, a);
            }
        }.bind(this));
    },
    removeForm: function() {
        if (!this._form) {
            return;
        }
        this._form.remove();
        this._form = null;
        this._controls = {};
    },
    showSaving: function() {
        this._oldInnerHTML = this.element.innerHTML;
        this.element.innerHTML = this.options.savingText;
        this.element.addClassName(this.options.savingClassName);
        this.element.style.backgroundColor = this._originalBackground;
        this.element.show();
    },
    triggerCallback: function(b, a) {
        if ("function" == typeof this.options[b]) {
            this.options[b](this, a);
        }
    },
    unregisterListeners: function() {
        $H(this._listeners).each(function(a) {
            if (!this.options.externalControlOnly) {
                this.element.stopObserving(a.key, a.value);
            }
            if (this.options.externalControl) {
                this.options.externalControl.stopObserving(a.key, a.value);
            }
        }.bind(this));
    },
    wrapUp: function(a) {
        this.leaveEditMode();
        this._boundComplete(a, this.element);
    }
});
Object.extend(Ajax.InPlaceEditor.prototype, {
    dispose: Ajax.InPlaceEditor.prototype.destroy
});
Ajax.InPlaceCollectionEditor = Class.create(Ajax.InPlaceEditor, {
    initialize: function($super, b, c, a) {
        this._extraDefaultOptions = Ajax.InPlaceCollectionEditor.DefaultOptions;
        $super(b, c, a);
    },
    createEditField: function() {
        var a = document.createElement("select");
        a.name = this.options.paramName;
        a.size = 1;
        this._controls.editor = a;
        this._collection = this.options.collection || [];
        if (this.options.loadCollectionURL) {
            this.loadCollection();
        } else {
            this.checkForExternalText();
        }
        this._form.appendChild(this._controls.editor);
    },
    loadCollection: function() {
        this._form.addClassName(this.options.loadingClassName);
        this.showLoadingText(this.options.loadingCollectionText);
        var options = Object.extend({
            method: "get"
        }, this.options.ajaxOptions);
        Object.extend(options, {
            parameters: "editorId=" + encodeURIComponent(this.element.id),
            onComplete: Prototype.emptyFunction,
            onSuccess: function(transport) {
                var js = transport.responseText.strip();
                if (!/^\[.*\]$/.test(js)) {
                    throw ("Server returned an invalid collection representation.");
                }
                this._collection = eval(js);
                this.checkForExternalText();
            }.bind(this),
            onFailure: this.onFailure
        });
        new Ajax.Request(this.options.loadCollectionURL, options);
    },
    showLoadingText: function(b) {
        this._controls.editor.disabled = true;
        var a = this._controls.editor.firstChild;
        if (!a) {
            a = document.createElement("option");
            a.value = "";
            this._controls.editor.appendChild(a);
            a.selected = true;
        }
        a.update((b || "").stripScripts().stripTags());
    },
    checkForExternalText: function() {
        this._text = this.getText();
        if (this.options.loadTextURL) {
            this.loadExternalText();
        } else {
            this.buildOptionList();
        }
    },
    loadExternalText: function() {
        this.showLoadingText(this.options.loadingText);
        var a = Object.extend({
            method: "get"
        }, this.options.ajaxOptions);
        Object.extend(a, {
            parameters: "editorId=" + encodeURIComponent(this.element.id),
            onComplete: Prototype.emptyFunction,
            onSuccess: function(b) {
                this._text = b.responseText.strip();
                this.buildOptionList();
            }.bind(this),
            onFailure: this.onFailure
        });
        new Ajax.Request(this.options.loadTextURL, a);
    },
    buildOptionList: function() {
        this._form.removeClassName(this.options.loadingClassName);
        this._collection = this._collection.map(function(d) {
            return 2 === d.length ? d : [d, d].flatten();
        });
        var c = ("value" in this.options) ? this.options.value: this._text;
        var a = this._collection.any(function(d) {
            return d[0] == c;
        }.bind(this));
        this._controls.editor.update("");
        var b;
        this._collection.each(function(d, e) {
            b = document.createElement("option");
            b.value = d[0];
            b.selected = a ? d[0] == c : 0 == e;
            b.appendChild(document.createTextNode(d[1]));
            this._controls.editor.appendChild(b);
        }.bind(this));
        this._controls.editor.disabled = false;
        Field.scrollFreeActivate(this._controls.editor);
    }
});
Ajax.InPlaceEditor.prototype.initialize.dealWithDeprecatedOptions = function(a) {
    if (!a) {
        return;
    }
    function b(d, c) {
        if (d in a || c === undefined) {
            return;
        }
        a[d] = c;
    }
    b("cancelControl", (a.cancelLink ? "link" : (a.cancelButton ? "button" : a.cancelLink == a.cancelButton == false ? false : undefined)));
    b("okControl", (a.okLink ? "link" : (a.okButton ? "button" : a.okLink == a.okButton == false ? false : undefined)));
    b("highlightColor", a.highlightcolor);
    b("highlightEndColor", a.highlightendcolor);
};
Object.extend(Ajax.InPlaceEditor, {
    DefaultOptions: {
        ajaxOptions: {},
        autoRows: 3,
        cancelControl: "link",
        cancelText: "cancel",
        clickToEditText: "Click to edit",
        externalControl: null,
        externalControlOnly: false,
        fieldPostCreation: "activate",
        formClassName: "inplaceeditor-form",
        formId: null,
        highlightColor: "#ffff99",
        highlightEndColor: "#ffffff",
        hoverClassName: "",
        htmlResponse: true,
        loadingClassName: "inplaceeditor-loading",
        loadingText: "Loading...",
        okControl: "button",
        okText: "ok",
        paramName: "value",
        rows: 1,
        savingClassName: "inplaceeditor-saving",
        savingText: "Saving...",
        size: 0,
        stripLoadedTextTags: false,
        submitOnBlur: false,
        textAfterControls: "",
        textBeforeControls: "",
        textBetweenControls: ""
    },
    DefaultCallbacks: {
        callback: function(a) {
            return Form.serialize(a);
        },
        onComplete: function(b, a) {
            new Effect.Highlight(a, {
                startcolor: this.options.highlightColor,
                keepBackgroundImage: true
            });
        },
        onEnterEditMode: null,
        onEnterHover: function(a) {
            a.element.style.backgroundColor = a.options.highlightColor;
            if (a._effect) {
                a._effect.cancel();
            }
        },
        onFailure: function(b, a) {
            alert("Error communication with the server: " + b.responseText.stripTags());
        },
        onFormCustomization: null,
        onLeaveEditMode: null,
        onLeaveHover: function(a) {
            a._effect = new Effect.Highlight(a.element, {
                startcolor: a.options.highlightColor,
                endcolor: a.options.highlightEndColor,
                restorecolor: a._originalBackground,
                keepBackgroundImage: true
            });
        }
    },
    Listeners: {
        click: "enterEditMode",
        keydown: "checkForEscapeOrReturn",
        mouseover: "enterHover",
        mouseout: "leaveHover"
    }
});
Ajax.InPlaceCollectionEditor.DefaultOptions = {
    loadingCollectionText: "Loading options..."
};
Form.Element.DelayedObserver = Class.create({
    initialize: function(c, a, b) {
        this.delay = a || 0.5;
        this.element = $(c);
        this.callback = b;
        this.timer = null;
        this.lastValue = $F(this.element);
        Event.observe(this.element, "keyup", this.delayedListener.bindAsEventListener(this));
    },
    delayedListener: function(a) {
        if (this.lastValue == $F(this.element)) {
            return;
        }
        if (this.timer) {
            clearTimeout(this.timer);
        }
        this.timer = setTimeout(this.onTimerEvent.bind(this), this.delay * 1000);
        this.lastValue = $F(this.element);
    },
    onTimerEvent: function() {
        this.timer = null;
        this.callback(this.element, $F(this.element));
    }
});
if (!Control) {
    var Control = {};
}
Control.Slider = Class.create({
    initialize: function(b, a, d) {
        var c = this;
        if (Object.isArray(b)) {
            this.handles = b.collect(function(e) {
                return $(e);
            });
        } else {
            this.handles = [$(b)];
        }
        this.track = $(a);
        this.options = d || {};
        this.axis = this.options.axis || "horizontal";
        this.increment = this.options.increment || 1;
        this.step = parseInt(this.options.step || "1");
        this.range = this.options.range || $R(0, 1);
        this.value = 0;
        this.values = this.handles.map(function() {
            return 0;
        });
        this.spans = this.options.spans ? this.options.spans.map(function(e) {
            return $(e);
        }) : false;
        this.options.startSpan = $(this.options.startSpan || null);
        this.options.endSpan = $(this.options.endSpan || null);
        this.restricted = this.options.restricted || false;
        this.maximum = this.options.maximum || this.range.end;
        this.minimum = this.options.minimum || this.range.start;
        this.alignX = parseInt(this.options.alignX || "0");
        this.alignY = parseInt(this.options.alignY || "0");
        this.trackLength = this.maximumOffset() - this.minimumOffset();
        this.handleLength = this.isVertical() ? (this.handles[0].offsetHeight != 0 ? this.handles[0].offsetHeight : this.handles[0].style.height.replace(/px$/, "")) : (this.handles[0].offsetWidth != 0 ? this.handles[0].offsetWidth : this.handles[0].style.width.replace(/px$/, ""));
        this.active = false;
        this.dragging = false;
        this.disabled = false;
        if (this.options.disabled) {
            this.setDisabled();
        }
        this.allowedValues = this.options.values ? this.options.values.sortBy(Prototype.K) : false;
        if (this.allowedValues) {
            this.minimum = this.allowedValues.min();
            this.maximum = this.allowedValues.max();
        }
        this.eventMouseDown = this.startDrag.bindAsEventListener(this);
        this.eventMouseUp = this.endDrag.bindAsEventListener(this);
        this.eventMouseMove = this.update.bindAsEventListener(this);
        this.handles.each(function(e, f) {
            f = c.handles.length - 1 - f;
            c.setValue(parseFloat((Object.isArray(c.options.sliderValue) ? c.options.sliderValue[f] : c.options.sliderValue) || c.range.start), f);
            e.makePositioned().observe("mousedown", c.eventMouseDown);
        });
        this.track.observe("mousedown", this.eventMouseDown);
        document.observe("mouseup", this.eventMouseUp);
        document.observe("mousemove", this.eventMouseMove);
        this.initialized = true;
    },
    dispose: function() {
        var a = this;
        Event.stopObserving(this.track, "mousedown", this.eventMouseDown);
        Event.stopObserving(document, "mouseup", this.eventMouseUp);
        Event.stopObserving(document, "mousemove", this.eventMouseMove);
        this.handles.each(function(b) {
            Event.stopObserving(b, "mousedown", a.eventMouseDown);
        });
    },
    setDisabled: function() {
        this.disabled = true;
    },
    setEnabled: function() {
        this.disabled = false;
    },
    getNearestValue: function(a) {
        if (this.allowedValues) {
            if (a >= this.allowedValues.max()) {
                return (this.allowedValues.max());
            }
            if (a <= this.allowedValues.min()) {
                return (this.allowedValues.min());
            }
            var b = Math.abs(this.allowedValues[0] - a);
            var c = this.allowedValues[0];
            this.allowedValues.each(function(e) {
                var d = Math.abs(e - a);
                if (d <= b) {
                    c = e;
                    b = d;
                }
            });
            return c;
        }
        if (a > this.range.end) {
            return this.range.end;
        }
        if (a < this.range.start) {
            return this.range.start;
        }
        return a;
    },
    setValue: function(b, a) {
        if (!this.active) {
            this.activeHandleIdx = a || 0;
            this.activeHandle = this.handles[this.activeHandleIdx];
            this.updateStyles();
        }
        a = a || this.activeHandleIdx || 0;
        if (this.initialized && this.restricted) {
            if ((a > 0) && (b < this.values[a - 1])) {
                b = this.values[a - 1];
            }
            if ((a < (this.handles.length - 1)) && (b > this.values[a + 1])) {
                b = this.values[a + 1];
            }
        }
        b = this.getNearestValue(b);
        this.values[a] = b;
        this.value = this.values[0];
        this.handles[a].style[this.isVertical() ? "top": "left"] = this.translateToPx(b);
        this.drawSpans();
        if (!this.dragging ||!this.event) {
            this.updateFinished();
        }
    },
    setValueBy: function(b, a) {
        this.setValue(this.values[a || this.activeHandleIdx || 0] + b, a || this.activeHandleIdx || 0);
    },
    translateToPx: function(a) {
        return Math.round(((this.trackLength - this.handleLength) / (this.range.end - this.range.start)) * (a - this.range.start)) + "px";
    },
    translateToValue: function(a) {
        return ((a / (this.trackLength - this.handleLength) * (this.range.end - this.range.start)) + this.range.start);
    },
    getRange: function(b) {
        var a = this.values.sortBy(Prototype.K);
        b = b || 0;
        return $R(a[b], a[b + 1]);
    },
    minimumOffset: function() {
        return (this.isVertical() ? this.alignY : this.alignX);
    },
    maximumOffset: function() {
        return (this.isVertical() ? (this.track.offsetHeight != 0 ? this.track.offsetHeight : this.track.style.height.replace(/px$/, "")) - this.alignY : (this.track.offsetWidth != 0 ? this.track.offsetWidth : this.track.style.width.replace(/px$/, "")) - this.alignX);
    },
    isVertical: function() {
        return (this.axis == "vertical");
    },
    drawSpans: function() {
        var a = this;
        if (this.spans) {
            $R(0, this.spans.length - 1).each(function(b) {
                a.setSpan(a.spans[b], a.getRange(b));
            });
        }
        if (this.options.startSpan) {
            this.setSpan(this.options.startSpan, $R(0, this.values.length > 1 ? this.getRange(0).min() : this.value));
        }
        if (this.options.endSpan) {
            this.setSpan(this.options.endSpan, $R(this.values.length > 1 ? this.getRange(this.spans.length - 1).max() : this.value, this.maximum));
        }
    },
    setSpan: function(b, a) {
        if (this.isVertical()) {
            b.style.top = this.translateToPx(a.start);
            b.style.height = this.translateToPx(a.end - a.start + this.range.start);
        } else {
            b.style.left = this.translateToPx(a.start);
            b.style.width = this.translateToPx(a.end - a.start + this.range.start);
        }
    },
    updateStyles: function() {
        this.handles.each(function(a) {
            Element.removeClassName(a, "selected");
        });
        Element.addClassName(this.activeHandle, "selected");
    },
    startDrag: function(d) {
        if (Event.isLeftClick(d)) {
            if (!this.disabled) {
                this.active = true;
                var c = Event.element(d);
                var b = [Event.pointerX(d), Event.pointerY(d)];
                var a = c;
                if (a == this.track) {
                    var e = Position.cumulativeOffset(this.track);
                    this.event = d;
                    this.setValue(this.translateToValue((this.isVertical() ? b[1] - e[1] : b[0] - e[0]) - (this.handleLength / 2)));
                    var e = Position.cumulativeOffset(this.activeHandle);
                    this.offsetX = (b[0] - e[0]);
                    this.offsetY = (b[1] - e[1]);
                } else {
                    while ((this.handles.indexOf(c)==-1) && c.parentNode) {
                        c = c.parentNode;
                    }
                    if (this.handles.indexOf(c)!=-1) {
                        this.activeHandle = c;
                        this.activeHandleIdx = this.handles.indexOf(this.activeHandle);
                        this.updateStyles();
                        var e = Position.cumulativeOffset(this.activeHandle);
                        this.offsetX = (b[0] - e[0]);
                        this.offsetY = (b[1] - e[1]);
                    }
                }
            }
            Event.stop(d);
        }
    },
    update: function(a) {
        if (this.active) {
            if (!this.dragging) {
                this.dragging = true;
            }
            this.draw(a);
            if (Prototype.Browser.WebKit) {
                window.scrollBy(0, 0);
            }
            Event.stop(a);
        }
    },
    draw: function(c) {
        var b = [Event.pointerX(c), Event.pointerY(c)];
        var a = Position.cumulativeOffset(this.track);
        b[0] -= this.offsetX + a[0];
        b[1] -= this.offsetY + a[1];
        this.event = c;
        this.setValue(this.translateToValue(this.isVertical() ? b[1] : b[0]));
        if (this.initialized && this.options.onSlide) {
            this.options.onSlide(this.values.length > 1 ? this.values : this.value, this);
        }
    },
    endDrag: function(a) {
        if (this.active && this.dragging) {
            this.finishDrag(a, true);
            Event.stop(a);
        }
        this.active = false;
        this.dragging = false;
    },
    finishDrag: function(a, b) {
        this.active = false;
        this.dragging = false;
        this.updateFinished();
    },
    updateFinished: function() {
        if (this.initialized && this.options.onChange) {
            this.options.onChange(this.values.length > 1 ? this.values : this.value, this);
        }
        this.event = null;
    }
});
Sound = {
    tracks: {},
    _enabled: true,
    template: new Template('<embed style="height:0" id="sound_#{track}_#{id}" src="#{url}" loop="false" autostart="true" hidden="true"/>'),
    enable: function() {
        Sound._enabled = true;
    },
    disable: function() {
        Sound._enabled = false;
    },
    play: function(b) {
        if (!Sound._enabled) {
            return;
        }
        var a = Object.extend({
            track: "global",
            url: b,
            replace: false
        }, arguments[1] || {});
        if (a.replace && this.tracks[a.track]) {
            $R(0, this.tracks[a.track].id).each(function(c) {
                var d = $("sound_" + a.track + "_" + c);
                d.Stop && d.Stop();
                d.remove();
            });
            this.tracks[a.track] = null;
        }
        if (!this.tracks[a.track]) {
            this.tracks[a.track] = {
                id: 0
            };
        } else {
            this.tracks[a.track].id++;
        }
        a.id = this.tracks[a.track].id;
        $$("body")[0].insert(Prototype.Browser.IE ? new Element("bgsound", {
            id: "sound_" + a.track + "_" + a.id,
            src: a.url,
            loop: 1,
            autostart: true
        }) : Sound.template.evaluate(a));
    }
};
if (Prototype.Browser.Gecko && navigator.userAgent.indexOf("Win") > 0) {
    if (navigator.plugins && $A(navigator.plugins).detect(function(a) {
        return a.name.indexOf("QuickTime")!=-1;
    })) {
        Sound.template = new Template('<object id="sound_#{track}_#{id}" width="0" height="0" type="audio/mpeg" data="#{url}"/>');
    } else {
        Sound.play = function() {};
    }
}
var swfobject = function() {
    var aq = "undefined", aD = "object", ab = "Shockwave Flash", X = "ShockwaveFlash.ShockwaveFlash", aE = "application/x-shockwave-flash", ac = "SWFObjectExprInst", ax = "onreadystatechange", af = window, aL = document, aB = navigator, aa = false, Z = [aN], aG = [], ag = [], al = [], aJ, ad, ap, at, ak = false, aU = false, aH, an, aI = true, ah = function() {
        var a = typeof aL.getElementById != aq && typeof aL.getElementsByTagName != aq && typeof aL.createElement != aq, e = aB.userAgent.toLowerCase(), c = aB.platform.toLowerCase(), h = c ? /win/.test(c): /win/.test(e), l = c ? /mac/.test(c): /mac/.test(e), g = /webkit/.test(e) ? parseFloat(e.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")): false, d=!+"\v1", f = [0, 0, 0], m = null;
        if (typeof aB.plugins != aq && typeof aB.plugins[ab] == aD) {
            m = aB.plugins[ab].description;
            if (m&&!(typeof aB.mimeTypes != aq && aB.mimeTypes[aE]&&!aB.mimeTypes[aE].enabledPlugin)) {
                aa = true;
                d = false;
                m = m.replace(/^.*\s+(\S+\s+\S+$)/, "$1");
                f[0] = parseInt(m.replace(/^(.*)\..*$/, "$1"), 10);
                f[1] = parseInt(m.replace(/^.*\.(.*)\s.*$/, "$1"), 10);
                f[2] = /[a-zA-Z]/.test(m) ? parseInt(m.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0;
            }
        } else {
            if (typeof af.ActiveXObject != aq) {
                try {
                    var k = new ActiveXObject(X);
                    if (k) {
                        m = k.GetVariable("$version");
                        if (m) {
                            d = true;
                            m = m.split(" ")[1].split(",");
                            f = [parseInt(m[0], 10), parseInt(m[1], 10), parseInt(m[2], 10)];
                        }
                    }
                } catch (b) {}
            }
        }
        return {
            w3: a,
            pv: f,
            wk: g,
            ie: d,
            win: h,
            mac: l
        };
    }(), aK = function() {
        if (!ah.w3) {
            return;
        }
        if ((typeof aL.readyState != aq && aL.readyState == "complete") || (typeof aL.readyState == aq && (aL.getElementsByTagName("body")[0] || aL.body))) {
            aP();
        }
        if (!ak) {
            if (typeof aL.addEventListener != aq) {
                aL.addEventListener("DOMContentLoaded", aP, false);
            }
            if (ah.ie && ah.win) {
                aL.attachEvent(ax, function() {
                    if (aL.readyState == "complete") {
                        aL.detachEvent(ax, arguments.callee);
                        aP();
                    }
                });
                if (af == top) {
                    (function() {
                        if (ak) {
                            return;
                        }
                        try {
                            aL.documentElement.doScroll("left");
                        } catch (a) {
                            setTimeout(arguments.callee, 0);
                            return;
                        }
                        aP();
                    })();
                }
            }
            if (ah.wk) {
                (function() {
                    if (ak) {
                        return;
                    }
                    if (!/loaded|complete/.test(aL.readyState)) {
                        setTimeout(arguments.callee, 0);
                        return;
                    }
                    aP();
                })();
            }
            aC(aP);
        }
    }();
    function aP() {
        if (ak) {
            return;
        }
        try {
            var b = aL.getElementsByTagName("body")[0].appendChild(ar("span"));
            b.parentNode.removeChild(b);
        } catch (a) {
            return;
        }
        ak = true;
        var d = Z.length;
        for (var c = 0; c < d; c++) {
            Z[c]();
        }
    }
    function aj(a) {
        if (ak) {
            a();
        } else {
            Z[Z.length] = a;
        }
    }
    function aC(a) {
        if (typeof af.addEventListener != aq) {
            af.addEventListener("load", a, false);
        } else {
            if (typeof aL.addEventListener != aq) {
                aL.addEventListener("load", a, false);
            } else {
                if (typeof af.attachEvent != aq) {
                    aM(af, "onload", a);
                } else {
                    if (typeof af.onload == "function") {
                        var b = af.onload;
                        af.onload = function() {
                            b();
                            a();
                        };
                    } else {
                        af.onload = a;
                    }
                }
            }
        }
    }
    function aN() {
        if (aa) {
            Y();
        } else {
            am();
        }
    }
    function Y() {
        var d = aL.getElementsByTagName("body")[0];
        var b = ar(aD);
        b.setAttribute("type", aE);
        var a = d.appendChild(b);
        if (a) {
            var c = 0;
            (function() {
                if (typeof a.GetVariable != aq) {
                    var e = a.GetVariable("$version");
                    if (e) {
                        e = e.split(" ")[1].split(",");
                        ah.pv = [parseInt(e[0], 10), parseInt(e[1], 10), parseInt(e[2], 10)];
                    }
                } else {
                    if (c < 10) {
                        c++;
                        setTimeout(arguments.callee, 10);
                        return;
                    }
                }
                d.removeChild(b);
                a = null;
                am();
            })();
        } else {
            am();
        }
    }
    function am() {
        var g = aG.length;
        if (g > 0) {
            for (var h = 0; h < g; h++) {
                var c = aG[h].id;
                var n = aG[h].callbackFn;
                var a = {
                    success: false,
                    id: c
                };
                if (ah.pv[0] > 0) {
                    var k = aS(c);
                    if (k) {
                        if (ao(aG[h].swfVersion)&&!(ah.wk && ah.wk < 312)) {
                            ay(c, true);
                            if (n) {
                                a.success = true;
                                a.ref = av(c);
                                n(a);
                            }
                        } else {
                            if (aG[h].expressInstall && au()) {
                                var e = {};
                                e.data = aG[h].expressInstall;
                                e.width = k.getAttribute("width") || "0";
                                e.height = k.getAttribute("height") || "0";
                                if (k.getAttribute("class")) {
                                    e.styleclass = k.getAttribute("class");
                                }
                                if (k.getAttribute("align")) {
                                    e.align = k.getAttribute("align");
                                }
                                var f = {};
                                var d = k.getElementsByTagName("param");
                                var m = d.length;
                                for (var l = 0; l < m; l++) {
                                    if (d[l].getAttribute("name").toLowerCase() != "movie") {
                                        f[d[l].getAttribute("name")] = d[l].getAttribute("value");
                                    }
                                }
                                ae(e, f, c, n);
                            } else {
                                aF(k);
                                if (n) {
                                    n(a);
                                }
                            }
                        }
                    }
                } else {
                    ay(c, true);
                    if (n) {
                        var b = av(c);
                        if (b && typeof b.SetVariable != aq) {
                            a.success = true;
                            a.ref = b;
                        }
                        n(a);
                    }
                }
            }
        }
    }
    function av(b) {
        var d = null;
        var c = aS(b);
        if (c && c.nodeName == "OBJECT") {
            if (typeof c.SetVariable != aq) {
                d = c;
            } else {
                var a = c.getElementsByTagName(aD)[0];
                if (a) {
                    d = a;
                }
            }
        }
        return d;
    }
    function au() {
        return !aU && ao("6.0.65") && (ah.win || ah.mac)&&!(ah.wk && ah.wk < 312);
    }
    function ae(f, d, h, e) {
        aU = true;
        ap = e || null;
        at = {
            success: false,
            id: h
        };
        var a = aS(h);
        if (a) {
            if (a.nodeName == "OBJECT") {
                aJ = aO(a);
                ad = null;
            } else {
                aJ = a;
                ad = h;
            }
            f.id = ac;
            if (typeof f.width == aq || (!/%$/.test(f.width) && parseInt(f.width, 10) < 310)) {
                f.width = "310";
            }
            if (typeof f.height == aq || (!/%$/.test(f.height) && parseInt(f.height, 10) < 137)) {
                f.height = "137";
            }
            aL.title = aL.title.slice(0, 47) + " - Flash Player Installation";
            var b = ah.ie && ah.win ? "ActiveX": "PlugIn", c = "MMredirectURL=" + af.location.toString().replace(/&/g, "%26") + "&MMplayerType=" + b + "&MMdoctitle=" + aL.title;
            if (typeof d.flashvars != aq) {
                d.flashvars += "&" + c;
            } else {
                d.flashvars = c;
            }
            if (ah.ie && ah.win && a.readyState != 4) {
                var g = ar("div");
                h += "SWFObjectNew";
                g.setAttribute("id", h);
                a.parentNode.insertBefore(g, a);
                a.style.display = "none";
                (function() {
                    if (a.readyState == 4) {
                        a.parentNode.removeChild(a);
                    } else {
                        setTimeout(arguments.callee, 10);
                    }
                })();
            }
            aA(f, d, h);
        }
    }
    function aF(a) {
        if (ah.ie && ah.win && a.readyState != 4) {
            var b = ar("div");
            a.parentNode.insertBefore(b, a);
            b.parentNode.replaceChild(aO(a), b);
            a.style.display = "none";
            (function() {
                if (a.readyState == 4) {
                    a.parentNode.removeChild(a);
                } else {
                    setTimeout(arguments.callee, 10);
                }
            })();
        } else {
            a.parentNode.replaceChild(aO(a), a);
        }
    }
    function aO(b) {
        var d = ar("div");
        if (ah.win && ah.ie) {
            d.innerHTML = b.innerHTML;
        } else {
            var e = b.getElementsByTagName(aD)[0];
            if (e) {
                var a = e.childNodes;
                if (a) {
                    var f = a.length;
                    for (var c = 0; c < f; c++) {
                        if (!(a[c].nodeType == 1 && a[c].nodeName == "PARAM")&&!(a[c].nodeType == 8)) {
                            d.appendChild(a[c].cloneNode(true));
                        }
                    }
                }
            }
        }
        return d;
    }
    function aA(e, g, c) {
        var d, a = aS(c);
        if (ah.wk && ah.wk < 312) {
            return d;
        }
        if (a) {
            if (typeof e.id == aq) {
                e.id = c;
            }
            if (ah.ie && ah.win) {
                var f = "";
                for (var k in e) {
                    if (e[k] != Object.prototype[k]) {
                        if (k.toLowerCase() == "data") {
                            g.movie = e[k];
                        } else {
                            if (k.toLowerCase() == "styleclass") {
                                f += ' class="' + e[k] + '"';
                            } else {
                                if (k.toLowerCase() != "classid") {
                                    f += " " + k + '="' + e[k] + '"';
                                }
                            }
                        }
                    }
                }
                var h = "";
                for (var l in g) {
                    if (g[l] != Object.prototype[l]) {
                        h += '<param name="' + l + '" value="' + g[l] + '" />';
                    }
                }
                a.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + f + ">" + h + "</object>";
                ag[ag.length] = e.id;
                d = aS(e.id);
            } else {
                var b = ar(aD);
                b.setAttribute("type", aE);
                for (var m in e) {
                    if (e[m] != Object.prototype[m]) {
                        if (m.toLowerCase() == "styleclass") {
                            b.setAttribute("class", e[m]);
                        } else {
                            if (m.toLowerCase() != "classid") {
                                b.setAttribute(m, e[m]);
                            }
                        }
                    }
                }
                for (var n in g) {
                    if (g[n] != Object.prototype[n] && n.toLowerCase() != "movie") {
                        aQ(b, n, g[n]);
                    }
                }
                a.parentNode.replaceChild(b, a);
                d = b;
            }
        }
        return d;
    }
    function aQ(b, d, c) {
        var a = ar("param");
        a.setAttribute("name", d);
        a.setAttribute("value", c);
        b.appendChild(a);
    }
    function aw(a) {
        var b = aS(a);
        if (b && b.nodeName == "OBJECT") {
            if (ah.ie && ah.win) {
                b.style.display = "none";
                (function() {
                    if (b.readyState == 4) {
                        aT(a);
                    } else {
                        setTimeout(arguments.callee, 10);
                    }
                })();
            } else {
                b.parentNode.removeChild(b);
            }
        }
    }
    function aT(a) {
        var b = aS(a);
        if (b) {
            for (var c in b) {
                if (typeof b[c] == "function") {
                    b[c] = null;
                }
            }
            b.parentNode.removeChild(b);
        }
    }
    function aS(a) {
        var c = null;
        try {
            c = aL.getElementById(a);
        } catch (b) {}
        return c;
    }
    function ar(a) {
        return aL.createElement(a);
    }
    function aM(a, c, b) {
        a.attachEvent(c, b);
        al[al.length] = [a, c, b];
    }
    function ao(a) {
        var b = ah.pv, c = a.split(".");
        c[0] = parseInt(c[0], 10);
        c[1] = parseInt(c[1], 10) || 0;
        c[2] = parseInt(c[2], 10) || 0;
        return (b[0] > c[0] || (b[0] == c[0] && b[1] > c[1]) || (b[0] == c[0] && b[1] == c[1] && b[2] >= c[2])) ? true : false;
    }
    function az(b, f, a, c) {
        if (ah.ie && ah.mac) {
            return;
        }
        var e = aL.getElementsByTagName("head")[0];
        if (!e) {
            return;
        }
        var g = (a && typeof a == "string") ? a: "screen";
        if (c) {
            aH = null;
            an = null;
        }
        if (!aH || an != g) {
            var d = ar("style");
            d.setAttribute("type", "text/css");
            d.setAttribute("media", g);
            aH = e.appendChild(d);
            if (ah.ie && ah.win && typeof aL.styleSheets != aq && aL.styleSheets.length > 0) {
                aH = aL.styleSheets[aL.styleSheets.length - 1];
            }
            an = g;
        }
        if (ah.ie && ah.win) {
            if (aH && typeof aH.addRule == aD) {
                aH.addRule(b, f);
            }
        } else {
            if (aH && typeof aL.createTextNode != aq) {
                aH.appendChild(aL.createTextNode(b + " {" + f + "}"));
            }
        }
    }
    function ay(a, c) {
        if (!aI) {
            return;
        }
        var b = c ? "visible": "hidden";
        if (ak && aS(a)) {
            aS(a).style.visibility = b;
        } else {
            az("#" + a, "visibility:" + b);
        }
    }
    function ai(b) {
        var a = /[\\\"<>\.;]/;
        var c = a.exec(b) != null;
        return c && typeof encodeURIComponent != aq ? encodeURIComponent(b) : b;
    }
    var aR = function() {
        if (ah.ie && ah.win) {
            window.attachEvent("onunload", function() {
                var a = al.length;
                for (var b = 0; b < a; b++) {
                    al[b][0].detachEvent(al[b][1], al[b][2]);
                }
                var d = ag.length;
                for (var c = 0; c < d; c++) {
                    aw(ag[c]);
                }
                for (var e in ah) {
                    ah[e] = null;
                }
                ah = null;
                for (var f in swfobject) {
                    swfobject[f] = null;
                }
                swfobject = null;
            });
        }
    }();
    return {
        registerObject: function(a, e, c, b) {
            if (ah.w3 && a && e) {
                var d = {};
                d.id = a;
                d.swfVersion = e;
                d.expressInstall = c;
                d.callbackFn = b;
                aG[aG.length] = d;
                ay(a, false);
            } else {
                if (b) {
                    b({
                        success: false,
                        id: a
                    });
                }
            }
        },
        getObjectById: function(a) {
            if (ah.w3) {
                return av(a);
            }
        },
        embedSWF: function(m, e, h, f, c, a, b, k, g, l) {
            if (typeof(cnn_adbpswf) === "function") {
                cnn_adbpswf(m);
            }
            var d = {
                success: false,
                id: e
            };
            if (ah.w3&&!(ah.wk && ah.wk < 312) && m && e && h && f && c) {
                ay(e, false);
                aj(function() {
                    h += "";
                    f += "";
                    var s = {};
                    if (g && typeof g === aD) {
                        for (var q in g) {
                            s[q] = g[q];
                        }
                    }
                    s.data = m;
                    s.width = h;
                    s.height = f;
                    var p = {};
                    if (k && typeof k === aD) {
                        for (var r in k) {
                            p[r] = k[r];
                        }
                    }
                    if (b && typeof b === aD) {
                        for (var n in b) {
                            if (typeof p.flashvars != aq) {
                                p.flashvars += "&" + n + "=" + b[n];
                            } else {
                                p.flashvars = n + "=" + b[n];
                            }
                        }
                    }
                    if (ao(c)) {
                        var o = aA(s, p, e);
                        if (s.id == e) {
                            ay(e, true);
                        }
                        d.success = true;
                        d.ref = o;
                    } else {
                        if (a && au()) {
                            s.data = a;
                            ae(s, p, e, l);
                            return;
                        } else {
                            ay(e, true);
                        }
                    }
                    if (l) {
                        l(d);
                    }
                });
            } else {
                if (l) {
                    l(d);
                }
            }
        },
        switchOffAutoHideShow: function() {
            aI = false;
        },
        ua: ah,
        getFlashPlayerVersion: function() {
            return {
                major: ah.pv[0],
                minor: ah.pv[1],
                release: ah.pv[2]
            };
        },
        hasFlashPlayerVersion: ao,
        createSWF: function(a, b, c) {
            if (ah.w3) {
                return aA(a, b, c);
            } else {
                return undefined;
            }
        },
        showExpressInstall: function(b, a, d, c) {
            if (ah.w3 && au()) {
                ae(b, a, d, c);
            }
        },
        removeSWF: function(a) {
            if (ah.w3) {
                aw(a);
            }
        },
        createCSS: function(b, a, c, d) {
            if (ah.w3) {
                az(b, a, c, d);
            }
        },
        addDomLoadEvent: aj,
        addLoadEvent: aC,
        getQueryParamValue: function(b) {
            var a = aL.location.search || aL.location.hash;
            if (a) {
                if (/\?/.test(a)) {
                    a = a.split("?")[1];
                }
                if (b == null) {
                    return ai(a);
                }
                var c = a.split("&");
                for (var d = 0; d < c.length; d++) {
                    if (c[d].substring(0, c[d].indexOf("=")) == b) {
                        return ai(c[d].substring((c[d].indexOf("=") + 1)));
                    }
                }
            }
            return "";
        },
        expressInstallCallback: function() {
            if (aU) {
                var a = aS(ac);
                if (a && aJ) {
                    a.parentNode.replaceChild(aJ, a);
                    if (ad) {
                        ay(ad, true);
                        if (ah.ie && ah.win) {
                            aJ.style.display = "block";
                        }
                    }
                    if (ap) {
                        ap(at);
                    }
                }
                aU = false;
            }
        }
    };
}();
var cnnLockToggle = false;
function CNN_getCookies() {
    var d = [];
    if (document.cookie) {
        var c = document.cookie.split("; ");
        for (var b = 0; b < c.length; b++) {
            var a = c[b].split("=");
            d[a[0]] = unescape(a[1]) || null;
        }
    }
    return d;
}
function CNN_parseCookieData(a) {
    var d = {};
    var e = a.split("&");
    for (var b = 0; b < e.length; b++) {
        var c = e[b].split(":");
        d[c[0]] = c[1] || null;
    }
    return d;
}
function CNN_setCookie(c, e, a, g, d, f) {
    var b = 0;
    if (a) {
        if ((typeof(a) == "string") && Date.parse(a)) {
            b = a;
        } else {
            if (typeof(a) == "number") {
                b = (new Date((new Date()).getTime() + a * 3600000)).toGMTString();
            }
        }
    }
    document.cookie = c + "=" + escape(e) + ((b) ? (";expires=" + b) : "") + ((g) ? ";path=" + g : "") + ((d) ? ";domain=" + d : "") + ((f && (f === true)) ? "; secure" : "");
}
function CNN_removeCookie(b, d, c) {
    var a = CNN_getCookies();
    var e = a[b] || null;
    if (e) {
        document.cookie = b + "=" + escape(e) + "; expires=Fri, 13-Apr-1970 00:00:00 GMT" + ((d) ? ";path=" + d : "") + ((c) ? ";domain=" + c : "");
    }
}
var allCookies = CNN_getCookies();
var cnnDomainArray = location.hostname.split(".");
var cnnCurrDomain = (cnnDomainArray.length > 1) ? "." + cnnDomainArray[cnnDomainArray.length - 2] + "." + cnnDomainArray[cnnDomainArray.length - 1]: "";
function cnnLiveVideo(a) {
    if (!a) {
        a = "1";
    }
    var b = "/video/live/live.html?stream=stream" + a;
    if (html5Check) {
        b = "/video/flashLive/live.ipad_nf.html";
    }
    CNN_openPopup(b, "liveplayer", "scrollbars=yes,resizable=yes,width=672,height=540");
}
function CNN_openPopup(c, b, e, a) {
    var f = location.hostname;
    if (window == top) {
        window.top.name = "opener";
    }
    var d = window.open(c, b, e);
    if (d) {
        cnnHasOpenPopup = 1;
    }
    if (d && d.opener) {
        if (a) {
            d.opener.location = a;
        }
    }
    if (d) {
        d.focus();
    }
}
function cnnToggleUGC(a, c) {
    if (cnnLockToggle) {
        return;
    }
    cnnLockToggle = true;
    var b = (c.parentNode.className.indexOf("Closed")>-1) ? true: false;
    Effect.toggle(a, "blind", {
        beforeStart: function(f) {
            try {
                c.blur();
            } catch (d) {}
            if (b) {
                switch (c.parentNode.className) {
                case"cnnOpinionClosed":
                    c.parentNode.className = "cnnOpinion";
                    break;
                case"cnnIReportClosed":
                    c.parentNode.className = "cnnIReport";
                    break;
                case"cnnBlogsClosed":
                    c.parentNode.className = "cnnBlogs";
                    Sphere.Widget.search();
                    break;
                default:
                }
            }
        },
        afterFinish: function(d) {
            if (!b) {
                switch (c.parentNode.className) {
                case"cnnOpinion":
                    c.parentNode.className = "cnnOpinionClosed";
                    break;
                case"cnnIReport":
                    c.parentNode.className = "cnnIReportClosed";
                    break;
                case"cnnBlogs":
                    c.parentNode.className = "cnnBlogsClosed";
                    break;
                default:
                }
            }
            cnnLockToggle = false;
        }
    });
}
var cnnHorizontalSlider = (typeof Class == "object") ? Class.create(): {};
cnnHorizontalSlider.prototype = {
    initialize: function(d, g, b, c, a) {
        try {
            this.locked = false;
            this.objName = d;
            this.elIdentifier = b;
            this.container = g;
            this.navDiv = c;
            this.viewPort = a;
            this.sliderWidth = this.findPanels();
            this.numScreens = Math.round(this.sliderWidth / 2);
            this.negativeOffSetMax = this.setOffSet();
            this.positiveOffSetMax = 0;
            this.currentPanel = 0;
            this.inactiveDot;
            this.activeDot;
            this.setSliderWidth();
            this.buildNav();
            this.getCurrentOffSet();
        } catch (f) {}
    },
    findPanels: function() {
        var a = $(this.container).getElementsByTagName("div");
        var c = 0;
        for (var b = 0; b < a.length; b++) {
            if (a[b].className == this.elIdentifier + " cnnMar9L" || a[b].className == this.elIdentifier) {
                c++;
            }
        }
        return c;
    },
    setCurrentPanel: function(a) {
        this.getCurrentOffSet();
        this.currentPanel = (this.currOffSet / this.viewPort)*-1;
        this.updateNav();
    },
    setOffSet: function() {
        return ((this.numScreens * this.viewPort) - this.viewPort)*-1;
    },
    calculateSliderWidth: function() {
        return this.viewPort * this.numScreens;
    },
    setSliderWidth: function() {
        $(this.container).style.width = this.calculateSliderWidth() + "px";
    },
    buildNav: function() {},
    updateNav: function() {},
    getCurrentOffSet: function(a) {
        this.currOffSet = (!isNaN(parseInt($(this.container).style.left, 10))) ? parseInt($(this.container).style.left, 10) : 0;
    },
    btnSlide: function(a) {
        if (!this.locked) {
            this.locked = true;
            var b = this;
            this.timer = setTimeout(function() {
                b.getCurrentOffSet();
                var c = (a * b.viewPort)*-1;
                var d = (c > b.currOffSet) ? (c - b.currOffSet): (b.currOffSet - c)*-1;
                var e = (d > 0) ? 2 * (d / b.viewPort): (2 * (d / b.viewPort))*-1;
                if (e < 0) {
                    e = e*-1;
                }
                if (b.currOffSet > b.negativeOffSetMax || b.currOffSet < b.positiveOffSetMax) {
                    new Effect.MoveBy($(b.container).id, 0, d, {
                        duration: e,
                        beforeStart: function() {
                            b.showImages();
                        },
                        afterFinish: function() {
                            b.setCurrentPanel();
                        }
                    });
                }
                b.locked = false;
            }, 300);
        }
    }
};
var globalSlideCheck = 0;
var globalTabCheck = 0;
var cnn_GallerySlider = (typeof Class === "object") ? Class.create(): {};
cnn_GallerySlider.prototype = Object.extend(new cnnHorizontalSlider(), {
    initialize: function(a) {
        this.config = a;
        this.defaults = {
            galleryContainerId: "cnn_GallerySliderContainer",
            galleryStripClass: "cnn_fabcaslab",
            galleryTabContainerId: "cnnGalleryTabs",
            nextButtonContainerId: "cnn_fabcnext",
            prevButtonContainerId: "cnn_fabcprev",
            galleryAdPrefix: "gallery_",
            displayWidth: 906
        };
        this.settings = Object.extend(this.defaults, this.config);
        try {
            this.elIdentifier = this.settings.galleryStripClass;
            this.container = this.settings.galleryContainerId;
            this.navDiv = this.settings.navContainer;
            this.viewPort = this.settings.displayWidth;
            this.currentTab = this.settings.currentTab || 0;
        } catch (b) {}
        try {
            this.locked = false;
            this.sliderWidth = this.findPanels();
            this.numScreens = this.sliderWidth;
            this.negativeOffSetMax = this.setOffSet();
            this.positiveOffSetMax = 0;
            this.currentPanel = 0;
            this.inactiveDot = "";
            this.activeDot = "";
            this.setSliderWidth();
            this.buildNav();
            this.getCurrentOffSet();
            this.tabLnks;
            this.numTabs;
            this.requestPanelAd(this.currentTab, this.currentPanel);
            this.numImgsPerPanel = 7;
            this.showImages("init");
        } catch (b) {}
    },
    callOmniture: function(a) {},
    showImages: function(a) {
        var b = a ? $(this.settings.galleryContainerId).down(): $(this.settings.galleryContainerId);
        b.select(".cnn_fabcatz img").each(function(d, c) {
            if (d.className == "cnnContentImg" && d.style.display != "block") {
                d.style.display = "block";
            }
        });
    },
    buildTabs: function(c) {
        tabBtnContainer = $(this.settings.galleryTabContainerId);
        this.tabLnks = tabBtnContainer.getElementsByTagName("a");
        this.numTabs = this.tabLnks.length;
        var a = false;
        var d = this;
        var b = 0;
        if (typeof(c) != "undefined") {
            this.callOmniture("HP mid button " + (c + 1));
        }
        if (typeof c === "undefined") {
            for (b = 0, len = this.numTabs; b < len; b++) {
                if (this.tabLnks[b].className == "cnn_fabtabbtn cnn_fabtabbtnon") {
                    c = b;
                    a = true;
                }
            }
            if (!a) {
                c = 0;
                this.currentTab = 0;
            }
            this.currentTab = c;
        } else {
            this.currentTab = c;
        }
        for (b = 0, len = this.numTabs; b < len; b++) {
            if (b != c) {
                this.tabLnks[b].className = "cnn_fabtabbtn";
                this.tabLnks[b].onclick = function() {
                    d.changeTab(this.href);
                    return false;
                };
            } else {
                this.tabLnks[b].className = "cnn_fabtabbtn cnn_fabtabbtnon";
                this.tabLnks[b].onclick = function() {
                    return false;
                };
            }
        }
    },
    buildNav: function() {
        this.buildTabs();
        prevBtnContainer = $(this.settings.prevButtonContainerId);
        nextBtnContainer = $(this.settings.nextButtonContainerId);
        prevBtnContainer.className = "cnn_fabcprv_off";
        nextBtnContainer.className = this.sliderWidth > 1 ? "cnn_fabcnxt" : "cnn_fabcnxt_off";
        if (this.sliderWidth > 1) {
            prevBtnContainer.observe("click", this.slidePrev.bind(this));
            nextBtnContainer.observe("click", this.slideNext.bind(this));
        }
    },
    slideNext: function() {
        if ((this.currentPanel + 1) < this.numScreens) {
            this.btnSlide(this.currentPanel + 1);
        }
        if (globalSlideCheck != this.currentPanel + 1 || globalTabCheck != 0) {
            globalSlideCheck = this.currentPanel + 1;
            globalTabCheck = 0;
            this.callOmniture("HP mid right arrow");
        }
    },
    slidePrev: function() {
        if (this.currentPanel > 0) {
            this.btnSlide(this.currentPanel - 1);
        }
        if (globalSlideCheck != this.currentPanel - 1 || globalTabCheck != 0) {
            globalSlideCheck = this.currentPanel - 1;
            globalTabCheck = 0;
            this.callOmniture("HP mid left arrow");
        }
    },
    updateNav: function() {
        this.requestPanelAd(this.currentTab, this.currentPanel);
        if ((this.currentPanel + 1) < this.numScreens) {
            $(this.settings.nextButtonContainerId).className = "cnn_fabcnxt";
        } else {
            $(this.settings.nextButtonContainerId).className = "cnn_fabcnxt_off";
        }
        if (this.currentPanel > 0) {
            $(this.settings.prevButtonContainerId).className = "cnn_fabcprv";
        } else {
            $(this.settings.prevButtonContainerId).className = "cnn_fabcprv_off";
        }
    },
    changeTab: function(a, b) {
        var c = this;
        new Ajax.Request(a, {
            method: "get",
            onSuccess: function(f) {
                c.resetSlider(f.responseText);
                for (var e = 0, d = c.numTabs; e < d; e++) {
                    if (a == c.tabLnks[e].href) {
                        c.buildTabs(e);
                    }
                }
            }
        });
        globalTabCheck = 1;
    },
    resetSlider: function(b) {
        var c = this, a = $(c.settings.galleryContainerId).up();
        Effect.Fade(this.container, {
            duration: 0.5,
            afterFinish: function() {
                $(c.container).remove();
                var d = document.createElement("div");
                d.setAttribute("style", "display:none");
                d.setAttribute("id", c.settings.galleryContainerId);
                a.appendChild(d);
                $(c.container).update(b);
                c.initialize(Object.extend(c.settings, {
                    currentTab: c.currentTab
                }));
                Effect.Appear(c.container, {
                    duration: 0.5
                });
            }
        });
    },
    requestPanelAd: function(c, b) {
        var d = this;
        if ($(this.settings.galleryAdPrefix + c + "_ad_" + b)&&!$(this.settings.galleryAdPrefix + c + "_ad_" + b + "Container")) {
            if (this.varDefined("CNN_" + this.settings.galleryAdPrefix + c + "_ad_" + b)) {
                var a = document.createElement("div");
                a.setAttribute("id", this.settings.galleryAdPrefix + c + "_ad_" + b + "Container");
                $(this.settings.galleryAdPrefix + c + "_ad_" + b).appendChild(a);
                new Ajax.Updater({
                    success: $(this.settings.galleryAdPrefix + c + "_ad_" + b + "Container")
                }, this.returnVarValue("CNN_" + this.settings.galleryAdPrefix + c + "_ad_" + b), {
                    method: "get",
                    evalScripts: true,
                    asynchronous: true,
                    onSuccess: function() {
                        if ($(d.settings.galleryAdPrefix + c + "_ad_" + b + "_adgif")) {
                            $(d.settings.galleryAdPrefix + c + "_ad_" + b + "_adgif").innerHTML = '<img src="http://i.cdn.turner.com/cnn/.element/img/3.0/global/misc/advertisement.gif" width="58" height="5" alt="" border="0">';
                        }
                    }
                });
            }
        }
    },
    varDefined: function(val) {
        var t;
        var expression = "t = (typeof(" + val + ') !== "undefined");';
        eval(expression);
        return t;
    },
    returnVarValue: function(val) {
        return eval(val);
    }
});
var cnn_SectionGallery, cnn_SectionGallery2;
Event.observe(window, "load", function() {
    if ($("cnn_GallerySliderContainer") && typeof cnn_SectionGallery !== "object") {
        cnn_SectionGallery = new cnn_GallerySlider();
    }
    if ($("cnn_Gallery2SliderContainer") && typeof cnn_SectionGallery2 !== "object") {
        cnn_SectionGallery2 = new cnn_GallerySlider({
            galleryContainerId: "cnn_Gallery2SliderContainer",
            galleryTabContainerId: "cnnGallery2Tabs",
            nextButtonContainerId: "cnn_fabcnext2",
            prevButtonContainerId: "cnn_fabcprev2",
            galleryAdPrefix: "gallery2_"
        });
    }
    cnnInitOverlay();
});
function limitBinList(a, b) {
    a.each(function(e, g) {
        var l = 82;
        var f = b;
        var h = $j("ul");
        var k = $j(".cnn_relpostn .cnn_mtt1img div a img");
        var d = $j(g).find(k).height();
        if (!d) {
            f = b + l;
        }
        function c(m) {
            if ($j(g).find(h).height() > f) {
                $j(g).find(h).children().last().remove();
                c();
            }
            return false;
        }
        if (c(d)) {
            c(d);
        }
    });
}
var CNN_T1Flipper = {
    prev: function() {},
    next: function() {},
    play: function() {},
    stop: function() {},
    imgClick: function() {}
};
var cnnT1Flipper = CNN_T1Flipper;
if (typeof Class === "object") {
    CNN_T1Flipper = Class.create();
    CNN_T1Flipper.prototype = {
        initialize: function() {
            this.locked = false;
            this.panels = $$("#cnn_maint1lftf .cnn_flpprt1pnl");
            this.navboxes = $$("#cnn_maint1lftf .cnn_flpprt1nvbx");
            this.iterator = 0;
            this.timer;
            this.autoPlay = false;
            for (var b = 1, a = this.panels.length; b < a; ++b) {
                this.panels[b].hide();
            }
        },
        navigatePanel: function(b) {
            var a = this.iterator;
            if (b === "prev") {
                if (a <= 0) {
                    a = this.panels.size() - 1;
                } else {
                    a -= 1;
                }
            } else {
                if (a >= this.panels.size() - 1) {
                    a = 0;
                } else {
                    a += 1;
                }
            }
            this.showPanel(a);
        },
        showPanel: function(b) {
            var a = this;
            if (a.panels.size() > 0 && a.navboxes.size() > 0 && typeof b === "number" && b !== a.iterator && 0 <= b && b <= a.panels.size()) {
                a.locked = true;
                Effect.Fade(a.panels[a.iterator], {
                    duration: 0.25,
                    afterFinish: function() {
                        a.panels[a.iterator].removeClassName("cnn_flpprt1pnl_active");
                        a.navboxes[a.iterator].removeClassName("cnn_flpprt1nvbx_active");
                        a.iterator = b;
                        a.panels[a.iterator].addClassName("cnn_flpprt1pnl_active");
                        a.navboxes[a.iterator].addClassName("cnn_flpprt1nvbx_active");
                        Effect.Appear(a.panels[a.iterator], {
                            duration: 0.25,
                            afterFinish: function() {
                                a.locked = false;
                                if (a.autoPlay) {
                                    a.play();
                                }
                            }
                        });
                    }
                });
            }
        },
        prev: function() {
            this.stop();
            this.navigatePanel("prev");
        },
        next: function() {
            this.stop();
            this.navigatePanel("next");
        },
        play: function() {
            var a = this;
            if (a.panels.size() > 0 && a.navboxes.size() > 0) {
                a.autoPlay = true;
                a.timer = window.setTimeout(function() {
                    a.navigatePanel("next");
                }, 8000);
            }
        },
        stop: function() {
            this.autoPlay = false;
            window.clearTimeout(this.timer);
        },
        imgClick: function(a) {
            if (a) {
                window.location.href = a;
            }
        }
    };
}
var cnn_stryichgcrr = 1;
var cnn_stryichgmax = 0;
function cnn_stryichgS(a) {
    if (a != cnn_stryichgcrr) {
        $("cnn_stryichgnm" + cnn_stryichgcrr).className = "cnn_stryichgn" + cnn_stryichgcrr;
        $("cnn_stryichgnm" + a).className = "cnn_stryichgn" + a + " cnn_stryichgn" + a + "on";
        $("cnnImageChangerImg").src = CNN_storyImageGallery[a - 1].image;
        if ($("cnnImageChangerCap")) {
            $("cnnImageChangerCap").update(CNN_storyImageGallery[a - 1].caption);
            $("cnnImageChangerImg").setAttribute("alt", CNN_storyImageGallery[a - 1].caption);
        } else {
            $("cnnImageChangerImg").setAttribute("alt", CNN_storyImageGallery[a - 1].image);
        }
        cnn_stryichgcrr = a;
    }
}
function cnn_stryichgP() {
    var a = cnn_stryichgcrr;
    if (a == 1) {
        a = cnn_stryichgmax;
    } else {
        a--;
    }
    cnn_stryichgS(a);
}
function cnn_stryichgN() {
    var a = cnn_stryichgcrr;
    if (a == cnn_stryichgmax) {
        a = 1;
    } else {
        a++;
    }
    cnn_stryichgS(a);
}
function cnn_stryichgInit() {
    temp_s = "";
    cnn_stryichgmax = CNN_storyImageGallery.length;
    for (i = 1; i <= cnn_stryichgmax; i++) {
        temp_s += '<a id="cnn_stryichgnm' + i + '" href="javascript:cnn_stryichgS(' + i + ');" class="cnn_stryichgn' + i;
        if (i == 1) {
            temp_s += " cnn_stryichgn" + i + "on";
        }
        temp_s += '"><img src="http://i.cdn.turner.com/cnn/.element/img/3.0/1px.gif" border="0"></a>';
    }
    Element.update("cnn_stryichgnm", temp_s);
}
function cnn_stryichgS_New(a) {
    if (a != cnn_stryichgcrr) {
        $("cnn_stryichgnmL" + cnn_stryichgcrr).className = "cnn_stryichgn" + cnn_stryichgcrr;
        $("cnn_stryichgnmL" + a).className = "cnn_stryichgn" + a + " cnn_stryichgn" + a + "on";
        $("cnnImageChangerImg").src = CNN_storyImageGallery[a - 1].image;
        if ($("cnnImageChangerCap")) {
            $("cnnImageChangerCap").update(CNN_storyImageGallery[a - 1].caption);
            $("cnnMediaTitleCap").update(CNN_storyImageGallery[a - 1].head);
            $("cnnImageChangerImg").setAttribute("alt", CNN_storyImageGallery[a - 1].caption);
        } else {
            $("cnnImageChangerImg").setAttribute("alt", CNN_storyImageGallery[a - 1].image);
        }
        cnn_stryichgcrr = a;
        if (typeof(cnn_adbptrackpgalimg) == "function" && typeof(CNN_storyImageGallery) != "undefined") {
            cnn_adbptrackpgalimg(CNN_storyImageGallery[a - 1].image, photo_gallery);
        }
    }
}
function cnn_storyChanger() {
    var a = "";
    var b = CNN_storyImageGallery.length;
    for (i = 1; i <= b; i++) {
        a += '<a title="cnn_galleryhvr' + i + '" id="cnn_stryichgnmL' + i + '" href="javascript:cnn_stryichgS_New(' + i + ');" class="cnn_stryichgn' + i;
        if (i == 1) {
            a += " cnn_stryichgn" + i + "on";
        }
        a += '"><img src="http://i.cdn.turner.com/cnn/.element/img/3.0/1px.gif" border="0"></a>';
    }
    Element.update("cnn_stryichgnmL", a);
}
function cnn_stryichgP_New() {
    var a = cnn_stryichgcrr;
    if (a == 1) {
        a = cnn_stryichgmax;
    } else {
        a--;
    }
    cnn_stryichgS_New(a);
}
function cnn_stryichgN_New() {
    var a = cnn_stryichgcrr;
    if (a == cnn_stryichgmax) {
        a = 1;
    } else {
        a++;
    }
    cnn_stryichgS_New(a);
}
function CNN_renderRecommend(e) {
    var a = e.assets.length;
    var d = 0;
    var c = '<h4>We recommend</h4><ul class="cnn_bulletbin">';
    for (var b = 0; b < a; b++) {
        var f = "";
        if (e.assets[b].site.toLowerCase() !== "cnn" && e.assets[b]["site-url"] !== "" && e.assets[b].siteId.indexOf("http://")===-1) {
            f += e.assets[b]["site-url"];
        }
        f += e.assets[b].siteId;
        c += '<li><a href="' + f + '">' + e.assets[b].headline + "</a>";
        if (e.assets[b].wool != "") {
            c += " <span>" + e.assets[b].wool.replace(": ", "") + "</span>";
        }
        c += "</li>";
        d++;
        if (d > 2) {
            break;
        }
    }
    c += "</ul>";
    return c;
}
function cnnMouseDown(a) {
    if (cnnDropdownOpen) {
        cnnDD.mouseDownBody(a);
    }
    if (cnnOverlayMenuOpen) {
        cnnOverlayMouseDownBody(a);
    }
    return true;
}
var cnnOverlayOpenId = "";
var cnnOverlayClickedId = "";
var cnnOverlayMenuOpen = false;
var cnnOverlayClass = [];
function cnnInitOverlay() {
    document.body.onmousedown = cnnMouseDown;
    cnnAddOverlayEvents("cnnOverlayLnk");
}
function cnnShowOverlay(a) {
    if ($(a)) {
        if ($(a).style.display == "block") {
            $(a).style.display = "none";
        } else {
            $(a).style.display = "block";
            cnnOverlayOpenId = a;
            cnnOverlayMenuOpen = true;
            cnnOverlayClickedId = "";
        }
    }
}
function cnnHideOverlay(a) {
    if ($(a)) {
        $(a).style.display = "none";
        cnnOverlayOpenId = "";
        cnnOverlayMenuOpen = false;
    }
}
function cnnGetOverlayMenuId(a) {
    return a.href.substring(a.href.indexOf("'") + 1, a.href.lastIndexOf("'"));
}
function cnnAddOverlayEvents(e) {
    var a = document.getElementsByClassName(e);
    for (var d = 0; d < a.length; d++) {
        var c = a[d];
        c.onmousedown = cnnOverlayMouseDownBtn;
        var f = cnnGetOverlayMenuId(c);
        if ($(f)) {
            $(f).onmousedown = cnnOverlayMouseDownMenu;
        }
        cnnOverlayClass[f] = e;
        if ((navigator.userAgent.indexOf("Safari")!=-1) && (navigator.userAgent.indexOf("Mac")!=-1)) {
            if (c.onmouseout && c.onmouseout.toString().indexOf("cnnImgSwap")!=-1) {
                c.onclick = function b() {
                    this.onmouseout();
                    return true;
                };
            }
        }
    }
}
function cnnOverlayMouseDownBtn(a) {
    var b = cnnGetOverlayMenuId(this);
    cnnOverlayClickedId = b;
    return true;
}
function cnnOverlayMouseDownMenu(a) {
    cnnOverlayClickedId = this.id;
    return true;
}
function cnnOverlayMouseDownBody(a) {
    if (cnnOverlayOpenId != cnnOverlayClickedId) {
        cnnHideOverlay(cnnOverlayOpenId);
    }
    cnnOverlayClickedId = "";
    return true;
}
var cdn_prefix = "http://i.cdn.turner.com/cnn/";
function cnn_EleObjs(a) {
    if (typeof(a) == "string") {
        if (document.getElementById) {
            a = document.getElementById(a);
        } else {
            if (document.all) {
                a = document.all[a];
            } else {
                a = null;
            }
        }
    }
    return a;
}
function cnnRenderTimeStamp(s, g) {
    var a = (location.hostname.indexOf("edition.")>-1) ? true: false;
    var c = (s) ? new Date(s): c;
    var e = new Array("Sun", "Mon", "Tue", "Wed", "Thur", "Fri", "Sat");
    var l = new Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December");
    var f = new Date();
    var r = "";
    var k = f.getTime() - c.getTime();
    var o = Math.floor(k / 1000 / 60 / 60 / 24);
    k -= o * 1000 * 60 * 60 * 24;
    var m = Math.floor(k / 1000 / 60 / 60);
    k -= m * 1000 * 60 * 60;
    var d = Math.floor(k / 1000 / 60);
    k -= d * 1000 * 60;
    var t = (o > 1) ? "days": "day";
    var h = (m > 1) ? "hours": "hour";
    var b = (d > 1) ? "minutes": "minute";
    var p = "min";
    var q = "";
    var n = "";
    if (g) {
        q = (a) ? g[0] : g[1];
    } else {
        q = "updated " + (!a ? e[c.getUTCDay()] : "") + " " + l[c.getUTCMonth()] + " " + c.getUTCDate() + ", " + c.getUTCFullYear();
    }
    if (m > 4 && o >= 0 || o >= 1) {
        return n;
    } else {
        if (m <= 4 && m >= 1) {
            switch (r) {
            case"homepage":
                return n;
                break;
            case"search_07":
                if (d > 0) {
                    return '<span class="cnnContentTimeStampGrey">updated ' + m + " " + h + ", " + d + " " + b + " ago</span>";
                } else {
                    return '<span class="cnnContentTimeStampGrey">updated ' + m + " " + h + " ago</span>";
                }
                break;
            case"sectionSpr10":
                if (d > 0) {
                    return '<span class="cnnContentTimeStampGrey">updated ' + m + " " + h + ", " + d + "mins ago</span>";
                } else {
                    return '<span class="cnnContentTimeStampGrey">updated ' + m + " " + h + " ago</span>";
                }
                break;
            case"mosaic":
            default:
                if (d > 0) {
                    return '<div class="cnnGryTmeStmp">updated ' + m + " " + h + ", " + d + " " + b + " ago</div>";
                } else {
                    return '<div class="cnnGryTmeStmp">updated ' + m + " " + h + " ago</div>";
                }
            }
        } else {
            switch (r) {
            case"homepage":
                if (m < 1 && d > 0) {
                    return "<span>" + d + " min</span>";
                } else {
                    return "<span>1 min</span>";
                }
                break;
            case"sectionSpr10":
                if (m < 1 && d > 0) {
                    return "<span>" + d + " mins ago</span>";
                } else {
                    return "<span>1 min</span>";
                }
                break;
            case"search_07":
                if (m < 1 && d > 0) {
                    return '<span class="cnnContentTimeStamp">updated ' + d + " " + b + " ago</span>";
                } else {
                    return '<span class="cnnContentTimeStamp">updated 1 minute ago</span>';
                }
            case"mosaic":
            default:
                if (m < 1 && d > 0) {
                    return "<span>updated " + d + " " + b + " ago</span>";
                } else {
                    return "<span>updated 1 minute ago</span>";
                }
            }
        }
    }
}
function cnn_clsbnbnnr(a) {
    $("cnnBannerContainer").style.display = "none";
    document.cookie = "bannerLastClosed=" + a + "; path=/; domain=cnn.com";
}
function cnnRenderGenericBanner(c, g, e, f, b, a) {
    if (document.cookie.length > 0) {
        cookieName = "bannerLastClosed";
        cookieStart = document.cookie.indexOf(cookieName + "=");
        if (cookieStart!=-1) {
            cookieStart = cookieStart + cookieName.length + 1;
            cookieEnd = document.cookie.indexOf(";", cookieStart);
            if (cookieEnd==-1) {
                cookieEnd = document.cookie.length;
            }
            bannerLastClosed = unescape(document.cookie.substring(cookieStart, cookieEnd));
            currentBannerTimestamp = c.id;
            if (parseInt(bannerLastClosed, 10) >= parseInt(currentBannerTimestamp, 10)) {
                return "<!-- Breaking news banner not updated since " + c.id + " -->";
            }
        }
    }
    var d = '<div class="cnn_maincntnr';
    if (c.size == "xlarge") {
        d += " cnn_xlrg_banner";
    }
    d += '" style="margin-top:6px;"><div class="cnn_contentarea"><div class="cnn_sdbx"><div class="cnn_sdbx1"><div class="cnn_sdbx2"><div class="cnn_sdbx3"><div class="cnn_sdbx4"><div class="cnn_sdbx5"><div class="cnn_sdbxcntnt"><div id="cnn_bnbcntr"><div id="cnn_bnblft">';
    if (b.length > 0) {
        if (a.length > 0) {
            d += '<a href="' + a + '">';
        }
        d += '<img border="0" height="70" width="120" src="' + cdn_prefix + "/.element/img/3.0/main/" + b + '">';
        if (a.length > 0) {
            d += "</a>";
        }
    } else {
        if (swfobject.hasFlashPlayerVersion("8.0.0")) {
            d += '<object id="cnnAnimatedBannerTitle" height="52" width="156" data="' + g + '" pluginspage="http://www.macromedia.com/go/getflashplayer" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" type="application/x-shockwave-flash">';
            d += '<param value="' + g + '" name="movie"/>';
            d += '<param value="false" name="menu"/>';
            d += '<param value="high" name="quality"/>';
            d += '<param value="always" name="allowScriptAccess"/>';
            d += '<param value="transparent" name="wmode"/>';
            d += '<embed height="52" width="156" wmode="transparent" allowscriptaccess="always" quality="high" menu="false" src="' + g + '" name="cnnAnimatedBannerTitle" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash"/></object>';
        } else {
            d += '<img height="52" width="156" src="' + cdn_prefix + '/.element/img/3.0/main/breakingnews.gif">';
        }
    }
    d += '</div><div id="cnn_bnbrgt0"></div><div id="cnn_bnbrgt1"><div>';
    if (a.length > 0) {
        d += '<a style="color: rgb(255, 255, 255)" href="' + a + '">';
    }
    d += c.content + "&nbsp;";
    if (a.length > 0) {
        d += "</a>";
    }
    if (typeof(c.linkTitle) != "undefined") {
        d += '<a id="cnn_bnbrgt3" style="opacity: 1; filter: alpha(opacity = 100);" href="' + c.linkURL + '">' + c.linkTitle + "</a>";
    }
    d += "</div></div>";
    d += '<div id="cnn_bnbrgt2" style="opacity: 1; filter: alpha(opacity = 100);"><a href="javascript:cnn_clsbnbnnr(' + c.id + ');"><div id="cnn_bnbrgt4">';
    d += "</div></a></div></div>";
    return d;
}
function cnnRenderDomesticBanner(c) {
    var f = cdn_prefix + "/.element/swf/3.0/breaking.news/yellowBanner2.swf";
    var d = "";
    var e = "";
    var b = "";
    var a = "";
    switch (c.type) {
    case"Live Breaking News":
        d = "cnnYellow";
        e = "cnnBlack";
        break;
    case"Breaking News":
        d = "cnnBlack";
        e = "cnnYellow";
        b = "breaking-120x70.png";
        break;
    case"Live Developing Story":
        d = "cnnRed";
        e = "cnnBlack";
        f = "http://i2.cdn.turner.com/cnn/.element/swf/2.0/breaking_news/bn_dev_domestic.swf";
        break;
    case"Developing Story":
        d = "cnnBlack";
        e = "cnnRed";
        break;
    case"Watch Now":
        d = "cnnBlue";
        e = "cnnBlue";
        break;
    case"Live Election Coverage":
        d = "cnnBlackElex";
        e = "cnnDrkBlue";
        break;
    case"Live Inauguration Coverage":
        d = "cnnBlackElex";
        e = "cnnDrkGry";
        break;
    case"Connect with CNN":
        d = "cnnBlue";
        e = "cnnBlack";
        f = "http://i2.cdn.turner.com/cnn/.element/swf/2.0/breaking_news/bn_connectWithCNN.swf";
        break;
    case"Live Now (sponsored)":
        d = "cnnBlue";
        e = "cnnBlack";
        f = "http://i2.cdn.turner.com/cnn/.element/swf/2.0/breaking_news/bn_liveNow.swf";
        break;
    case"Live Now":
        d = "cnnBlue";
        e = "cnnBlack";
        f = "http://i2.cdn.turner.com/cnn/.element/swf/2.0/breaking_news/bn_liveNow.swf";
        break;
    case"Royal Wedding":
        b = "RW_live_banner.jpg";
        a = "http://www.cnn.com/SPECIALS/2011/royal.wedding/live/";
        if (document.location.pathname == "/" || document.location.pathname == "/index.html" || document.location.pathname == "/SPECIALS/2011/royal.wedding/live/") {
            return "";
        }
        break;
    default:
        return "";
    }
    return cnnRenderGenericBanner(c, f, d, e, b, a);
}
function cnnRenderInternationalBanner(c) {
    var f = cdn_prefix + "/.element/swf/3.0/breaking.news/yellowBanner2.swf";
    var d = "";
    var e = "";
    var b = "";
    var a = "";
    switch (c.type) {
    case"Live Breaking News":
        d = "cnnYellow";
        e = "cnnBlack";
        break;
    case"Breaking News":
        d = "cnnBlack";
        e = "cnnYellow";
        b = "breaking-120x70.png";
        break;
    case"Live Developing Story":
        d = "cnnYellow";
        e = "cnnBlack";
        f = cdn_prefix + "/.element/swf/2.0/breaking_news/bn_dev.swf";
        break;
    case"Developing Story":
        d = "cnnBlack";
        e = "cnnYellow";
        break;
    case"Watch Now":
        d = "cnnBlue";
        e = "cnnBlue";
        break;
    case"Connect with CNN":
        d = "cnnBlue";
        e = "cnnBlack";
        f = cdn_prefix + "/.element/swf/2.0/breaking_news/bn_connectWithCNN.swf";
        break;
    case"Live Now (sponsored)":
        d = "cnnBlue";
        e = "cnnBlack";
        f = cdn_prefix + "/.element/swf/2.0/breaking_news/bn_liveNow.swf";
        break;
    case"Live Now":
        d = "cnnBlue";
        e = "cnnBlack";
        f = cdn_prefix + "/.element/swf/2.0/breaking_news/bn_liveNow.swf";
        break;
    case"Royal Wedding":
        b = "RW_live_banner.jpg";
        a = "http://www.cnn.com/SPECIALS/2011/royal.wedding/live/";
        if (document.location.pathname == "/" || document.location.pathname == "/index.html" || document.location.pathname == "/SPECIALS/2011/royal.wedding/live/") {
            return "";
        }
        break;
    default:
        return "";
    }
    return cnnRenderGenericBanner(c, f, d, e, b, a);
}
var VBS_Result = false;
function CNN_FlashDetect() {}
CNN_FlashDetect.prototype.maxVersionToDetect = 10;
CNN_FlashDetect.prototype.minVersionToDetect = 3;
CNN_FlashDetect.prototype.hasPlugin = (navigator.mimeTypes && navigator.mimeTypes.length && navigator.mimeTypes["application/x-shockwave-flash"] && navigator.mimeTypes["application/x-shockwave-flash"].enabledPlugin);
CNN_FlashDetect.prototype.hasActiveX = window.ActiveXObject;
CNN_FlashDetect.prototype.hasWinIE = (navigator.userAgent && (navigator.userAgent.indexOf("MSIE")!=-1) && navigator.appVersion && (navigator.appVersion.indexOf("Win")!=-1));
CNN_FlashDetect.prototype.getVersion = function() {
    var b = 0;
    var d = 0;
    if (this.hasActiveX) {
        var c = false;
        for (d = this.maxVersionToDetect; d >= this.minVersionToDetect&&!c; b = (c ? d : b)
            , d--) {
            try {
                c = new ActiveXObject("ShockwaveFlash.ShockwaveFlash." + d);
            } catch (f) {}
        }
    } else {
        if (this.hasWinIE) {
            VBS_Result = false;
            for (d = this.maxVersionToDetect; d >= this.minVersionToDetect&&!VBS_Result; b = (VBS_Result ? d : b)
                , d--) {
                execScript('on error resume next: VBS_Result = IsObject( CreateObject( "ShockwaveFlash.ShockwaveFlash.' + d + '" ) )', "VBScript");
            }
        } else {
            if (this.hasPlugin) {
                if (navigator.plugins && navigator.plugins.length && navigator.plugins["Shockwave Flash"]) {
                    var g = navigator.plugins["Shockwave Flash"].description.split(" ");
                    for (d = 0; d < g.length; ++d) {
                        var a = parseInt(g[d], 10);
                        if (isNaN(a)) {
                            continue;
                        } else {
                            b = a;
                            break;
                        }
                    }
                }
            }
        }
    }
    return (b);
};
CNN_FlashDetect.prototype.detectVersion = function(b) {
    var a = false;
    if (!isNaN(b)) {
        a = (parseInt(this.getVersion(), 10) >= parseInt(b, 10));
    }
    return (a);
};
function CNN_FlashObject(b, a, e, d, c, f) {
    this.m_name = b;
    this.m_src = a;
    this.m_width = e;
    this.m_height = d;
    this.m_flashVars = f;
    if (c) {
        this.setParams(c);
    }
}
CNN_FlashObject.prototype.m_name = "";
CNN_FlashObject.prototype.m_src = "";
CNN_FlashObject.prototype.m_width = "";
CNN_FlashObject.prototype.m_height = "";
CNN_FlashObject.prototype.m_flashVars = "";
CNN_FlashObject.prototype.m_params = {
    menu: "false",
    quality: "high",
    allowScriptAccess: "always",
    wmode: "transparent"
};
CNN_FlashObject.prototype.setParam = function(a, b) {
    this.m_params[a] = b;
};
CNN_FlashObject.prototype.setParams = function(a) {
    if (typeof a == "object") {
        for (var b in a) {
            if (a[b]) {
                this.setParam(b, a[b]);
            }
        }
    }
};
CNN_FlashObject.prototype.getParam = function(a) {
    return (this.m_params[a]);
};
CNN_FlashObject.prototype.getParams = function() {
    return (this.m_params);
};
CNN_FlashObject.prototype.getFlashVarsString = function() {
    var a = "";
    if (typeof this.m_flashVars == "string") {
        a = this.m_flashVars;
    } else {
        if (typeof this.m_flashVars == "object") {
            for (var b in this.m_flashVars) {
                if (a != "") {
                    a += "&";
                }
                a += b + "=" + escape(this.m_flashVars[b]);
            }
        }
    }
    return (a);
};
CNN_FlashObject.prototype.getAttributeString = function(a, b) {
    return (b ? " " + a + '="' + b + '"' : "");
};
CNN_FlashObject.prototype.getParamTag = function(a, b) {
    return (b ? '<param name="' + a + '" value="' + b + '">' : "");
};
CNN_FlashObject.prototype.getHtml = function() {
    var b = "";
    var a = "";
    var c = "http://www.macromedia.com/go/getflashplayer";
    b += '<object type="application/x-shockwave-flash" 					classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"';
    b += this.getAttributeString("pluginspage", c);
    b += this.getAttributeString("id", this.m_name);
    b += this.getAttributeString("data", this.m_src);
    b += this.getAttributeString("width", this.m_width);
    b += this.getAttributeString("height", this.m_height);
    b += ">";
    b += this.getParamTag("movie", this.m_src);
    for (a in this.getParams()) {
        b += this.getParamTag(a, this.getParam(a));
    }
    b += this.getParamTag("flashVars", this.getFlashVarsString());
    b += '<embed type="application/x-shockwave-flash"';
    b += this.getAttributeString("pluginspage", c);
    b += this.getAttributeString("name", this.m_name);
    b += this.getAttributeString("src", this.m_src);
    b += this.getAttributeString("width", this.m_width);
    b += this.getAttributeString("height", this.m_height);
    for (a in this.getParams()) {
        b += this.getAttributeString(a, this.getParam(a));
    }
    b += this.getAttributeString("flashVars", this.getFlashVarsString());
    b += ">";
    b += "</embed>";
    b += "</object>";
    return (b);
};
CNN_FlashObject.prototype.writeHtml = function() {
    document.write(this.getHtml());
};
CNN_FlashObject.prototype.writeMosaicHtml = function(a) {
    document.getElementById(a).innerHTML = this.getHtml();
};
var cnnDropdownOpen = false;
var cnnDocDomain = "";
if (location.hostname.indexOf("cnn.com") > 0) {
    cnnDocDomain = "cnn.com";
}
if (location.hostname.indexOf("turner.com") > 0) {
    cnnDocDomain = "turner.com";
}
if (cnnDocDomain) {
    document.domain = cnnDocDomain;
}
function validateSearch(b) {
    var d = b.elements["query"];
    var c = d.value;
    if (c != "" || c != null) {
        c = cnnLeftTrim(c);
        var a = new RegExp("[w*|W*]*<[[w*|W*]*|/[w*|W*]]>[w*|W*]*");
        if (a.exec(c) || (c == null) || (c.length == 0) || (c.indexOf(">") >= 0) || (c.indexOf(";") >= 0)) {
            alert("Please enter a valid search term and try again." + "\n" + "HTML, URLs, and Scripts are not allowed.");
        } else {
            d.value = c;
            b.submit();
        }
    }
    return false;
}
function cnnLeftTrim(a) {
    while (a.substring(0, 1) == " ") {
        a = a.substring(1, a.length);
    }
    return a;
}
var cnnPSproducts = "";
var cnnProducts = [];
function cnn_geturlqargs() {
    var b = {};
    var f = location.search.substring(1);
    var e = f.split("&");
    for (var c = 0; c < e.length; c++) {
        var g = e[c].indexOf("=");
        if (g==-1) {
            continue;
        }
        var a = e[c].substring(0, g);
        var d = e[c].substring(g + 1);
        b[a] = unescape(d);
    }
    return b;
}
var html5Check = /\b(iPad|iPod|iPhone)\b/.test(window.navigator.userAgent);
var CNN_GalleryManager = function() {
    this.id = settings.id;
    var a;
    a = new Element("div", {
        "class": "cnn_gallery_test"
    }).update("" + "</div>");
    return a;
};
var CNN_SlideShowManager = (function() {
    var a = function(l) {
        this.index =- 1;
        this.id = l.id;
        this.xmlurl = l.xmlurl;
        this.width = l.width || 640;
        this.height = l.height || 360;
        this.xmldoc = l.xmldoc;
        this.imageUrlRoot = l.imageUrlRoot || this.xmldoc.querySelector("gallery:root > dir").firstChild.nodeValue || "";
        this.images = [];
        this.inited = false;
        this.wrapper = null;
        this.media = null;
        this.title = null;
        this.caption = null;
        this.pager = null;
        this.pages = null;
        var o = function(r, s) {
            var q = "";
            try {
                q = r.querySelector(s).firstChild.nodeValue;
            } catch (t) {}
            return q;
        };
        for (var k = 0, m = this.xmldoc.querySelectorAll("gallery:root > imgs > img"), h = m.length, p = null, n = {}; k < h; k++) {
            p = m.item(k);
            n = {};
            n["caption"] = o(p, "caption");
            n["title"] = o(p, "title");
            n["lgUrl"] = "" + this.imageUrlRoot + o(p, "lgUrl");
            n["source"] = o(p, "source");
            if (n["lgUrl"]) {
                this.images.push(n);
            }
        }
    };
    a.prototype = {
        slideshowTemplate: (function() {
            var h;
            h = new Element("div", {
                "class": "cnn_html_slideshow"
            }).update("" + '<div class="cnn_html_slideshow_media">' + '<div class="cnn_html_media">' + "</div>" + '<div class="cnn_html_slideshow_media_overlay">' + '<div class="cnn_html_slideshow_media_caption"></div>' + "</div>" + "</div>" + '<div class="cnn_html_slideshow_metadata">' + '<div class="cnn_html_media_title"></div>' + "</div>");
            return h;
        })(),
        pagerTemplate: (function() {
            var h;
            h = new Element("div", {
                "class": "cnn_html_slideshow_controls"
            }).update("" + '<span class="prev_slide">&lt;</span>' + '<span class="next_slide">&gt;</span>' + '<div class="cnn_html_slideshow_pager_container">' + '<ul class="cnn_html_slideshow_pager">' + "</ul>" + "</div>");
            return h;
        })(),
        init: function() {
            if (this.inited) {
                console.log('already inited slideshow "' + this.id + '"');
            } else {
                this.inited = true;
                if (this.images.length === 0) {
                    $(this.id).update('<img src="http://i.cdn.turner.com/cnn/.element/img/3.0/global/misc/640x360_ns_ipad.gif" width="' + this.width + '" height="' + this.height + '" alt="" border="0">');
                } else {
                    this.wrapper = this.slideshowTemplate.cloneNode(true);
                    this.media = this.wrapper.select(".cnn_html_media")[0];
                    this.media.setStyle({
                        width: this.width,
                        height: this.height
                    });
                    this.title = this.wrapper.select(".cnn_html_media_title")[0];
                    this.caption = this.wrapper.select(".cnn_html_slideshow_media_caption")[0];
                    if (this.images.length > 1) {
                        this.pager = this.pagerTemplate.cloneNode(true);
                        this.pages = this.pager.select(".cnn_html_slideshow_pager")[0];
                        this.pager.select(".prev_slide")[0].observe("click", this.showPrev.bind(this));
                        this.pager.select(".next_slide")[0].observe("click", this.showNext.bind(this));
                        for (var k = 0, h = this.images.length; k < h; k++) {
                            this.pages.insert(new Element("li").update("" + (k + 1)).observe("click", this.show.bind(this, k)));
                        }
                        this.wrapper.insert(this.pager);
                    }
                    $(this.id).update(this.wrapper);
                    this.show(0);
                }
            }
        },
        showPrev: function() {
            var h = this.index;
            if (h <= 0) {
                h = this.images.length - 1;
            } else {
                h -= 1;
            }
            this.show(h);
        },
        showNext: function() {
            var h = this.index;
            if (h >= this.images.length - 1) {
                h = 0;
            } else {
                h += 1;
            }
            this.show(h);
        },
        show: function(k) {
            var p;
            if (this.media !== null && k !== this.index) {
                p = this.images[k];
                this.media.setStyle({
                    backgroundImage: "url('" + p["lgUrl"] + "')",
                    backgroundRepeat: "no-repeat",
                    backgroundPosition: "center center",
                    backgroundSize: "auto auto"
                });
                this.title.update(p["title"]);
                this.caption.update(p["caption"]);
                if (this.index!==-1) {
                    this.pages.childElements()[this.index].removeClassName("selected");
                }
                if (k!==-1) {
                    this.pages.childElements()[k].addClassName("selected");
                }
                if (k!==-1 && this.index!==-1) {
                    var h = this.pages.parentElement, o = h.offsetWidth, l = this.pages.offsetWidth, n = l / this.images.length, m =- 1 * k * n + ((o - n) / 2);
                    if (l > o) {
                        if (m > 0) {
                            m = 0;
                        }
                        if (m < o - l) {
                            m = o - l;
                        }
                        this.pages.style.left = "" + m + "px";
                    }
                }
                this.index = k;
            }
        }
    };
    var c = [], g = {}, e = function(m, k, l) {
        var h = l ? l: {};
        if (typeof h.width !== "undefined" && h.width === 416) {
            h.height = 234;
        }
        if (c.indexOf(m)!==-1) {
            console.log('slideshow id "' + m + '" was already registered');
        } else {
            h.id = m;
            h.xmlurl = k;
            new Ajax.Request(k, {
                onSuccess: function(n) {
                    h.xmldoc = n.responseXML;
                    c.push(m);
                    g[m] = new a(h);
                    g[m].init();
                },
                onFailure: function(n) {
                    $(m).update('<img src="http://i.cdn.turner.com/cnn/.element/img/3.0/global/misc/640x360_ns_ipad.gif" width="' + this.width + '" height="' + this.height + '" alt="" border="0">');
                }
            });
        }
    }, d = function() {
        return c;
    }, b = function() {
        var h = [];
        c.each(function(k) {
            h.push(g[k]);
        });
        return h;
    }, f = function(h) {
        if (c.indexOf(h)===-1) {
            console.log('There is no slideshow with id "' + h + '"');
        } else {
            return g[h];
        }
    };
    return ({
        register: e,
        getIds: d,
        getSlideShows: b,
        getSlideShow: f
    });
})();
function cnn_onMemFBinit() {}
var CNN_SlideShowManagerAlt = (function() {
    var a = function(l) {
        this.index =- 1;
        this.id = l.id;
        this.xmlurl = l.xmlurl;
        this.width = l.width || 640;
        this.height = l.height || 360;
        this.xmldoc = l.xmldoc;
        this.explainer = (this.xmlurl.indexOf("explainer.")>-1) ? 1 : 0;
        if (this.explainer === 1) {
            this.imageUrlRoot = this.xmlurl.split("data.xml")[0] + "media/";
        } else {
            this.imageUrlRoot = l.imageUrlRoot || this.xmldoc.querySelector("gallery:root > dir").firstChild.nodeValue || "";
        }
        this.images = [];
        this.inited = false;
        this.wrapper = null;
        this.media = null;
        this.title = null;
        this.caption = null;
        this.pager = null;
        this.pages = null;
        var n = function(t, u) {
            var s = "";
            try {
                s = t.querySelector(u).firstChild.nodeValue;
            } catch (v) {}
            return s;
        };
        var h = this.explainer ? "data:root > tabs > tab": "gallery:root > imgs > img";
        for (var o = 0, p = this.xmldoc.querySelectorAll(h), m = p.length, r = null, k = {}; o < m; o++) {
            r = p.item(o);
            k = {};
            k["caption"] = n(r, "caption");
            if (this.explainer) {
                k["headline"] = n(r, "headline");
                var q = this.xmldoc.getElementsByTagName("headline")[0].firstChild.nodeValue;
                console.log("title = " + q);
                k["label"] = n(r, "label");
                k["file"] = "" + this.imageUrlRoot + r.querySelector("content").getAttribute("file");
                k["caption"] = "<h4>" + n(r, "headline") + "</h4>" + k["caption"];
                k["lgUrl"] = k["file"];
            } else {
                k["title"] = n(r, "title");
                k["lgUrl"] = "" + this.imageUrlRoot + n(r, "lgUrl");
                k["source"] = n(r, "source");
            }
            if (k["lgUrl"]) {
                this.images.push(k);
            }
        }
    };
    a.prototype = {
        slideshowTemplate: (function() {
            var h;
            h = new Element("div", {
                "class": "cnnExplainer cnn_html_slideshow"
            }).update("" + '<div class="cnn_html_slideshow_media">' + '<div class="cnn_html_media">' + "</div>" + '<div class="cnn_html_slideshow_media_overlay">' + '<div class="cnn_html_slideshow_media_caption"></div>' + "</div>" + "</div>" + '<div class="cnn_html_slideshow_metadata">' + '<div class="cnn_html_media_title"></div>' + "</div>");
            return h;
        }()),
        pagerTemplate: (function() {
            var h;
            h = new Element("div", {
                "class": "cnn_html_slideshow_controls"
            }).update("" + '<span class="prev_slide">&lt;</span>' + '<span class="next_slide">&gt;</span>' + '<div class="cnn_html_slideshow_pager_container">' + '<ul class="cnn_html_slideshow_pager">' + "</ul>" + "</div>");
            return h;
        }()),
        init: function() {
            if (this.inited) {
                console.log('already inited slideshow "' + this.id + '"');
            } else {
                this.inited = true;
                if (this.images.length === 0) {
                    $(this.id).update('<img src="http://i.cdn.turner.com/cnn/.element/img/3.0/global/misc/640x360_ns_ipad.gif" width="' + this.width + '" height="' + this.height + '" alt="" border="0">');
                } else {
                    this.wrapper = this.slideshowTemplate.cloneNode(true);
                    this.media = this.wrapper.select(".cnn_html_media")[0];
                    this.media.setStyle({
                        width: this.width,
                        height: this.height
                    });
                    this.title = this.wrapper.select(".cnn_html_media_title")[0];
                    console.log("this.title = " + this.title);
                    this.caption = this.wrapper.select(".cnn_html_slideshow_media_caption")[0];
                    if (this.images.length > 1) {
                        this.pager = this.pagerTemplate.cloneNode(true);
                        this.pages = this.pager.select(".cnn_html_slideshow_pager")[0];
                        this.pager.select(".prev_slide")[0].observe("click", this.showPrev.bind(this));
                        this.pager.select(".next_slide")[0].observe("click", this.showNext.bind(this));
                        for (var l = 0, k = this.images.length; l < k; l++) {
                            var h = (this.explainer === 1) ? this.images[l]["label"]: ("" + (l + 1));
                            this.pages.insert(new Element("li").update(h).observe("click", this.show.bind(this, l)));
                        }
                        this.wrapper.insert(this.pager);
                    }
                    $(this.id).update(this.wrapper);
                    this.show(0);
                }
            }
        },
        showPrev: function() {
            var h = this.index;
            if (h <= 0) {
                h = this.images.length - 1;
            } else {
                h -= 1;
            }
            this.show(h);
        },
        showNext: function() {
            var h = this.index;
            if (h >= this.images.length - 1) {
                h = 0;
            } else {
                h += 1;
            }
            this.show(h);
        },
        show: function(k) {
            var p;
            if (this.media !== null && k !== this.index) {
                p = this.images[k];
                this.media.setStyle({
                    backgroundImage: "url('" + p["lgUrl"] + "')",
                    backgroundRepeat: "no-repeat",
                    backgroundPosition: "center center",
                    backgroundSize: "auto auto"
                });
                this.title.update(p["title"]);
                this.caption.update(p["caption"]);
                if (this.index!==-1) {
                    this.pages.childElements()[this.index].removeClassName("selected");
                }
                if (k!==-1) {
                    this.pages.childElements()[k].addClassName("selected");
                }
                if (k!==-1 && this.index!==-1) {
                    var h = this.pages.parentNode, o = h.offsetWidth, l = this.pages.offsetWidth, n = l / this.images.length, m =- 1 * k * n + ((o - n) / 2);
                    if (l > o) {
                        if (m > 0) {
                            m = 0;
                        }
                        if (m < o - l) {
                            m = o - l;
                        }
                        this.pages.style.left = "" + m + "px";
                    }
                }
                this.index = k;
            }
        }
    };
    var c = [], g = {}, e = function(m, k, l) {
        var h = l ? l: {};
        if (typeof h.width !== "undefined" && h.width === 416) {
            h.height = 234;
        }
        if (c.indexOf(m)!==-1) {
            console.log('slideshow id "' + m + '" was already registered');
        } else {
            h.id = m;
            h.xmlurl = k;
            new Ajax.Request(k, {
                onSuccess: function(n) {
                    h.xmldoc = n.responseXML;
                    c.push(m);
                    g[m] = new a(h);
                    g[m].init();
                },
                onFailure: function(n) {
                    $(m).update('<img src="http://i.cdn.turner.com/cnn/.element/img/3.0/global/misc/640x360_ns_ipad.gif" width="' + this.width + '" height="' + this.height + '" alt="" border="0">');
                }
            });
        }
    }, d = function() {
        return c;
    }, b = function() {
        var h = [];
        c.each(function(k) {
            h.push(g[k]);
        });
        return h;
    }, f = function(h) {
        if (c.indexOf(h)===-1) {
            console.log('There is no slideshow with id "' + h + '"');
        } else {
            return g[h];
        }
    };
    return ({
        register: e,
        getIds: d,
        getSlideShows: b,
        getSlideShow: f
    });
}());
if (Object.isUndefined(cnn_metadata)) {
    var cnn_metadata = {
        "section": [],
        "friendly_name": "",
        "template_type": "",
        "template_type_content": "",
        "business": {
            "cnn": {
                "page": {
                    "broadcast_franchise": ""
                },
                "video": {}
            }
        },
        "user": {
            "authenticated": "",
            "segment": {
                "age": "",
                "zip": "",
                "gender": ""
            }
        }
    };
}
if (allCookies["CNN_memberID"]) {
    cnn_metadata.user.authenticated = 1;
}
function CSIManager() {
    if ((CSIManager.caller && CSIManager.getInstance) && (CSIManager.caller != CSIManager.getInstance)) {
        if ((navigator.userAgent.indexOf("Safari")==-1) && (navigator.userAgent.indexOf("Opera")==-1)) {
            throw new Error("There is no public constructor for CSIManager.");
        }
    }
    this.CSIObjects = new Array();
    this.delayedCSIList = new Array();
    this.domIDConfig = new Array();
    this.domOnLoad = new Array();
    this.domOnBeforeLoad = new Array();
    this.useDelayedCSI = false;
    this.numberofRequests = 0;
    var a = new Date();
    this.iframeOffset = 0;
    this.queueAllCalls = false;
    this.queuedCallArray = new Array();
    this.eventTypes = new Array();
    this.currentEventType = "";
    this.eventTypeFunctions = new Array();
    this.watchEventTypeNodes = new Array();
    this.isPolling = false;
    this.pollingInterval = 10000;
    this.minimumInterval = 9999;
    this.domRefreshHook = false;
    this.pollingUrl = false;
    var d = navigator.userAgent.toLowerCase();
    if ((d.indexOf("msie")>-1) && (d.indexOf("mac")>-1)) {
        this.useDelayedCSI = true;
    }
    this.dojoSupport = (typeof dojo == "undefined") ? false : true;
    this.prototypeSupport = (typeof Prototype == "undefined") ? false : true;
    this.noFramework = (!this.dojoSupport&&!this.prototypeSupport) ? true : false;
    var e = this;
    var c = function() {
        e.initialize();
    };
    var b = function(g) {
        if (g.persisted) {
            window.setTimeout("CSIManager.getInstance().delayedProcessing();", 2000);
        }
    };
    if (this.prototypeSupport) {
        Event.observe(window, "load", c);
        Event.observe(window, "pageshow", b);
    } else {
        if (this.dojoSupport) {
            dojo.addOnLoad(c);
        } else {
            if (this.noFramework) {
                if (window.addEventListener) {
                    window.addEventListener("load", c, false);
                    window.addEventListener("pageshow", b, false);
                } else {
                    if (window.attachEvent) {
                        window.attachEvent("onload", c);
                    } else {
                        var f = null;
                        if (window.onload) {
                            f = window.onload;
                        }
                        window.onload = function() {
                            c();
                            if (f != null) {
                                f();
                            }
                        };
                    }
                }
            }
        }
    }
}
CSIManager.prototype.initialize = function() {
    if (!this.useDelayedCSI) {
        this.queueAllCalls = true;
        var a = document.createElement("div");
        a.setAttribute("id", "csimanagerdiv");
        document.body.appendChild(a);
        var a = document.createElement("div");
        a.setAttribute("id", "csimanagerdivdelayed");
        document.body.appendChild(a);
        this.useDelayedCSI = true;
        this.queueAllCalls = false;
        this.processAnyQueuedCalls();
        this.queuedCallArray = null;
    }
};
CSIManager.prototype.processAnyQueuedCalls = function() {
    if (this.queuedCallArray && this.queuedCallArray != null) {
        for (var b = 0; b < this.queuedCallArray.length; b++) {
            var a = this.queuedCallArray[b];
            this.queuedCallArray[b] = "";
            if (a) {
                this.call(a.url, a.args, a.domId, a.funcObj, a.breakCache, a.overrideID);
            }
        }
    }
};
CSIManager.__instance__ = null;
CSIManager.getInstance = function() {
    if (this.__instance__ == null) {
        this.__instance__ = new CSIManager();
    }
    return this.__instance__;
};
CSIManager.prototype.addOnLoadById = function(c, b) {
    var a = this.domOnLoad[c];
    if (!a) {
        a = new Array();
    }
    a.push(b);
    this.domOnLoad[c] = a;
};
CSIManager.prototype.addOnBeforeLoadById = function(c, b) {
    var a = this.domOnBeforeLoad[c];
    if (!a) {
        a = new Array();
    }
    a.push(b);
    this.domOnBeforeLoad[c] = a;
};
CSIManager.prototype.setConfigForId = function(b, a) {
    this.domIDConfig[b] = a;
};
CSIManager.prototype.getConfigForId = function(b) {
    var a = this.domIDConfig[b];
    if (!a) {
        a = new Object();
    }
    return a;
};
CSIManager.prototype.registerEventType = function(b, a) {
    if (b && a) {
        this.eventTypes[b] = a;
    }
};
CSIManager.prototype.callObject = function(callObj, eventType) {
    var resultObj;
    var url;
    var args;
    var domId;
    var decoratingFunction;
    var breakCache;
    var overrideID;
    var callEventType = eventType;
    var forcediframe;
    this.currentEventType = eventType;
    if (callObj) {
        resultObj = callObj;
        url = resultObj.url;
        args = resultObj.args;
        domId = resultObj.domId;
        funcObj = resultObj.funcObj;
        breakCache = resultObj.breakCache;
        overrideID = resultObj.overrideID;
        forcediframe = resultObj.isIframeForced;
        if (this.queueAllCalls) {
            var queuedObj = new Object();
            queuedObj.url = url;
            queuedObj.args = args;
            queuedObj.domId = domId;
            queuedObj.funcObj = funcObj;
            queuedObj.breakCache = breakCache;
            queuedObj.overrideId = overrideId;
            this.queuedCallArray.push(queuedObj);
        } else {
            if ((!this.useDelayedCSI) && (document && document.readyState && (document.readyState == "complete"))) {
                this.initialize();
            }
            if (forcediframe === undefined || forcediframe === false) {
                forcediframe = false;
                if (url.indexOf("http") == 0) {
                    forcediframe = true;
                    if (url.indexOf(window.location.hostname)>-1) {
                        forcediframe = false;
                    }
                }
            }
            this.numberofRequests++;
            var internalDomId = "csi" + (this.iframeOffset + this.numberofRequests);
            if (overrideID) {
                internalDomId = overrideID;
            }
            var domList = new Array();
            var functionList = new Array();
            if (url.indexOf(document.domain)==-1 && url.indexOf("http")>-1) {
                return false;
            }
            if (domId.join) {
                domList = domId;
            } else {
                domList.push(domId);
            }
            if (funcObj) {
                if (funcObj.join) {
                    functionList = funcObj;
                } else {
                    functionList.push(funcObj);
                }
            }
            this.CSIObjects[internalDomId] = {
                functionList: functionList,
                dom: domList,
                url: url,
                args: args,
                csiRequestNum: this.numberofRequests,
                disableCache: breakCache
            };
            var newCSI = new Object();
            newCSI.src = url;
            newCSI.id = internalDomId;
            newCSI.domId = domList;
            newCSI.args = args;
            newCSI.breakCache = breakCache;
            newCSI.csiRequestNum = this.numberofRequests;
            this.delayedCSIList[this.delayedCSIList.length] = newCSI;
            var today = new Date();
            var currTime = today.getTime()%60;
            var iframeArgs = (breakCache) ? "time=" + currTime: "";
            if (args) {
                iframeArgs = (iframeArgs) ? iframeArgs + "&" : "";
                iframeArgs += args;
            }
            if (forcediframe === false) {
                try {
                    if (funcObj) {
                        var xhrObject = null;
                        if (this.dojoSupport) {
                            try {
                                if (navigator.userAgent.toLowerCase().indexOf("msie 7.0")!=-1) {
                                    throw new Error("NoDojoSupport");
                                }
                                var bindArgs = {
                                    url: url + "?" + iframeArgs + "&csiID=" + internalDomId,
                                    mimetype: "text/html",
                                    transport: "IframeTransport"
                                };
                                xhrObject = dojo.io.bind(bindArgs);
                            } catch (err) {
                                throw new Error("DojoFailure");
                            }
                        } else {
                            if (this.prototypeSupport) {
                                try {
                                    if (navigator.userAgent.toLowerCase().indexOf("safari")!=-1) {
                                        throw new Error("SafariCrossDomainFailure");
                                    }
                                    var csiMgr = this;
                                    xhrObject = new Ajax.Request(url, {
                                        method: "get",
                                        parameters: iframeArgs + "&csiID=" + internalDomId,
                                        onComplete: function(response) {
                                            if (response && response.responseText && response.responseText.indexOf('id="jsCode"')!=-1) {
                                                var startStr = 'id="jsCode"';
                                                var startPos = response.responseText.indexOf(startStr) + startStr.length;
                                                var firstSlice = response.responseText.slice(startPos, response.responseText.indexOf("</textarea>"));
                                                var beginningNode = firstSlice.indexOf(">") + 1;
                                                var myCode = firstSlice.substring(beginningNode);
                                                var obj = eval("(" + myCode + ")");
                                                csiMgr.callBackJS(obj, internalDomId);
                                            }
                                            if (response && (!response.responseText)) {
                                                callObj.isIframeForced = true;
                                                CSIManager.getInstance().callObject(callObj, eventType);
                                            }
                                        },
                                        onException: function(x, o) {
                                            throw new Error("PrototypeException for url [" + url + "]: " + o.messageText);
                                        },
                                        onFailure: function(x, o) {
                                            throw new Error("PrototypeFailure");
                                        }
                                    });
                                } catch (err) {
                                    throw new Error("PrototypeFailure");
                                }
                            } else {
                                throw new Error("NoXHRFramework");
                            }
                        }
                    } else {
                        throw new Error("NoCallBackFunction");
                    }
                } catch (err) {
                    forcediframe = true;
                }
            }
            if (forcediframe) {
                if (this.useDelayedCSI) {
                    var realIframeUrl = url + "?" + iframeArgs + "&csiID=" + internalDomId;
                    var iframeObj = document.createElement("iframe");
                    iframeObj.setAttribute("src", realIframeUrl);
                    iframeObj.setAttribute("id", "csiDataIframe" + internalDomId);
                    iframeObj.setAttribute("name", "csiDataIframe" + internalDomId);
                    iframeObj.setAttribute("width", "10");
                    iframeObj.setAttribute("height", "10");
                    iframeObj.setAttribute("style", "visibility:hidden;position:absolute;top:0px;left:-100px;");
                    iframeObj.style.top = "0px";
                    iframeObj.style.left = "-100px";
                    iframeObj.style.position = "absolute";
                    var containerDiv = document.createElement("div");
                    containerDiv.setAttribute("id", "csiIframeObjs" + internalDomId);
                    containerDiv.appendChild(iframeObj);
                    if (document.getElementById("csimanagerdiv")) {
                        document.getElementById("csimanagerdiv").appendChild(containerDiv);
                        if (navigator.userAgent.indexOf("MSIE")!=-1) {
                            window.setTimeout("var tmpIframObj=document.getElementById('csiDataIframe" + internalDomId + "');if(tmpIframObj.readyState=='uninitialized'){tmpIframObj.src=tmpIframObj.getAttribute('src');tmpIframObj.position='absolute';tmpIframObj.style.left='-100px';}", 500);
                        }
                    }
                } else {
                    var iframeHtmlSrc = '<div id="csiIframeObjs' + internalDomId + '"><iframe src="' + url + "?" + iframeArgs + "&csiID=" + internalDomId + '" name="csiDataIframe' + internalDomId + '" id="csiDataIframe' + internalDomId + '" width="10" height="10" style="visibility:hidden;position:absolute;top:0px;left:-100px;"></iframe></div>';
                    document.write(iframeHtmlSrc);
                }
            }
        }
    }
};
CSIManager.prototype.call = function(a, g, c, b, h, d, k, e) {
    var f = new Object();
    f.url = a;
    f.args = g;
    f.domId = c;
    f.funcObj = b;
    f.breakCache = h;
    f.overrideID = d;
    f.isIframeForced = e;
    revertToCallObject(f, k);
};
CSIManager.prototype.callBackHtml = function(b, e) {
    var a = false;
    if (document.getElementById) {
        a = document.getElementById(e);
        if (!a) {
            if (this.CSIObjects[e] && this.CSIObjects[e].dom) {
                e = this.CSIObjects[e].dom;
                a = document.getElementById(e);
            }
        }
    } else {
        if (document.all) {
            a = document.all[e];
            if (!a) {
                if (this.CSIObjects[e] && this.CSIObjects[e].dom) {
                    e = this.CSIObjects[e].dom;
                    a = document.all[e];
                }
            }
        }
    }
    if (a) {
        a.innerHTML = b;
    }
    var c = 0;
    if (c) {
        var d = c.style.top || "0px";
        c.style.top = "1px";
        c.style.top = d;
    }
};
CSIManager.prototype.callBackJS = function(p, n) {
    if (this.CSIObjects[n]) {
        var b = this.CSIObjects[n].functionList;
        var m = this.CSIObjects[n].dom;
        if (b) {
            var q = b.length;
            var c = m.length;
            if (q != c) {
                if (c < q) {
                    var l = m[c - 1];
                    for (var g = c; g < q; g++) {
                        m.push(l);
                    }
                    c = m.length;
                } else {
                    var a = b[q - 1];
                    for (var g = q; g < c; g++) {
                        b.push(a);
                    }
                    q = b.length;
                }
            }
            for (var h = 0; h < b.length; h++) {
                var k = b[h];
                if (k) {
                    var e = this.getConfigForId(m[h]);
                    var o = this.domOnBeforeLoad[m[h]];
                    if (o) {
                        for (var g = 0; g < o.length; g++) {
                            var d = o[g];
                            d(p, m[h], e);
                        }
                    }
                    this.callBackHtml(k(p, m[h], e, this.currentEventType), m[h]);
                    var f = this.domOnLoad[m[h]];
                    if (f) {
                        for (var g = 0; g < f.length; g++) {
                            var d = f[g];
                            d(p, m[h], e);
                        }
                    }
                }
            }
            this.CSIObjects[n] = "";
        }
    }
};
CSIManager.prototype.delayedProcessing = function() {
    if (document.body && document.body.innerHTML && this.useDelayedCSI) {
        var d = document.getElementById("csimanagerdivdelayed") || document.all["csimanagerdivdelayed"];
        var k = "";
        for (var f = 0; f < this.delayedCSIList.length; f++) {
            var a = this.delayedCSIList[f].src;
            var b = this.delayedCSIList[f].id;
            var h = new Date();
            var g = this.delayedCSIList[f].breakCache;
            var c = h.getTime()%60;
            var e = (g) ? "&time=" + c: "";
            if (this.delayedCSIList[f].args) {
                e = e + "&" + this.delayedCSIList[f].args;
            }
            k += '<iframe src="' + a + "?csiID=" + b + e + '" name="csiDataIframe' + b + '" id="csiDataIframe' + b + '" width="10" height="10" style="visibility:hidden;position:absolute;top:0px;left:-100px;"></iframe>';
        }
        if (d) {
            d.innerHTML = k;
        }
    }
};
CSIManager.prototype.handleClientData = function(cliWinbj, cliDoc) {
    var targetWindow = top;
    try {
        if (parent.CSIManager) {
            targetWindow = parent;
        }
    } catch (err) {}
    var docId = "";
    var paramStr = cliWinbj.location.hash;
    if (!paramStr) {
        paramStr = cliWinbj.location.search.substring(1);
    }
    var queryId = "";
    var keyValPairs = paramStr.split("&");
    if (!keyValPairs) {
        keyValPairs = new Array();
        keyValPairs[keyValPairs.length] = query;
    }
    for (var counter = 0; counter < keyValPairs.length; counter++) {
        var keyVal = keyValPairs[counter].split("=");
        if (keyVal[0] == "csiID") {
            queryId = keyVal[1];
            counter = keyValPairs.length + 1;
        }
    }
    var wId = "";
    if (cliWinbj.name && (cliWinbj.name.indexOf("csiDataIframe") == 0)) {
        wId = cliWinbj.name.substring(13);
    }
    if (wId == "" && cliWinbj.frameElement && cliWinbj.frameElement.id && (cliWinbj.frameElement.id.indexOf("csiDataIframe") == 0)) {
        wId = cliWinbj.frameElement.id.substring(13);
    }
    docId = wId;
    if (cliDoc.mainForm.htmlArea && cliDoc.mainForm.htmlArea.value) {
        var rawHtml = cliDoc.mainForm.htmlArea.value;
        if (rawHtml) {
            targetWindow.CSIManager.getInstance().callBackHtml(rawHtml, docId);
        }
    } else {
        if (cliDoc.mainForm.jsCode.value) {
            var rawJS = cliDoc.mainForm.jsCode.value;
            if (rawJS) {
                targetWindow.CSIManager.getInstance().callBackJS(eval("(" + rawJS + ")"), docId);
            }
        }
    }
};
CSIManager.prototype.registerEventTypeNode = function(b, a) {
    if (this.eventTypes[a]) {
        this.watchEventTypeNodes[b] = a;
    }
    if (!this.isPolling) {
        this.startPoll();
    }
};
CSIManager.prototype.setPollingUrl = function(b, a) {
    this.pollingUrl = b;
    if (a && a > this.minimumInterval) {
        this.pollingInterval = a;
    }
};
CSIManager.prototype.startPoll = function() {
    if (!this.isPolling && (this.pollingUrl)) {
        this.pollingId = window.setTimeout("CSIManager.getInstance().poll()", this.pollingInterval);
        this.isPolling = true;
    }
};
CSIManager.prototype.poll = function() {
    if (!this.domRefreshHook) {
        var a = document.createElement("iframe");
        this.domRefreshHook = document.body.appendChild(a);
    }
    this.domRefreshHook.setAttribute("src", this.pollingUrl);
};
CSIManager.prototype.handleData = function(d) {
    this.isPolling = false;
    if (d.intervalTime) {
        if (d.intervalTime > this.minimumInterval) {
            this.pollingInterval = d.intervalTime;
        }
    }
    if (d.entries) {
        for (var a = 0; a < d.entries.length; a++) {
            var e = d.entries[a];
            var c = this.watchEventTypeNodes[e];
            if (c) {
                var b = this.eventTypes[c];
                b(c, e);
            }
        }
    }
    this.startPoll();
};
CSIManager.prototype.reset = function() {
    this.eventTypes = new Array();
    this.currentEventType = "";
    this.eventTypeFunctions = new Array();
    this.watchEventTypeNodes = new Array();
};
CSIManager.getInstance();
function revertToCallObject(b, a) {
    CSIManager.getInstance().callObject(b, a);
}
function StorageManager() {
    if (StorageManager.caller != StorageManager.getInstance) {
        if ((navigator.userAgent.indexOf("Safari")==-1) && (navigator.userAgent.indexOf("Opera")==-1)) {
            throw new Error("There is no public constructor for StorageManager.");
        }
    }
    this.ondownloadFunctionArray = new Array();
    this.onloadFunctionArray = new Array();
    this.failedStorageOptions = new Array();
    this.loadComplete = function() {
        var f = true;
        try {
            this.getStorage().put("validationTest", "test");
            var e = this.getStorage().get("validationTest");
            if (e != "test") {
                f = false;
            }
            this.getStorage().remove("validationTest");
        } catch (c) {
            f = false;
        }
        if (f) {
            var d = this.onloadFunctionArray;
            for (var b = 0; b < d.length; b++) {
                var a = d[b];
                a(StorageManager.getInstance().getStorage());
            }
        } else {
            this.reselectStorage();
        }
    };
    this.downloadComplete = function() {
        this.loadComplete();
        var c = this.ondownloadFunctionArray;
        for (var b = 0; b < c.length; b++) {
            var a = c[b];
            a(StorageManager.getInstance().getStorage());
        }
    };
    this.addOnLoad = function(a) {
        this.onloadFunctionArray.push(a);
    };
    this.addOnDownLoad = function(a) {
        this.ondownloadFunctionArray.push(a);
    };
    this.availableStores = new Array();
    this.addStorageType = function(a) {
        this.availableStores.push(a);
    };
    this.currentStorageMechanism = false;
    this.getStorage = function() {
        if (this.currentStorageMechanism) {
            return this.currentStorageMechanism;
        }
        for (var b = 0; b < this.availableStores.length; b++) {
            var a = this.availableStores[b];
            if ((a.isSupported()) && (!this.failedStorageOptions[a.name])) {
                this.currentStorageMechanism = a;
                this.currentStorageMechanism.initialize();
                return this.currentStorageMechanism;
            }
        }
        return false;
    };
    this.reselectStorage = function() {
        this.failedStorageOptions[this.getStorage().name] = 1;
        this.currentStorageMechanism = false;
        this.getStorage();
    };
    this.currentSync = false;
    this.setSyncMechanism = function(a) {
        this.currentSync = a;
    };
    this.download = function() {
        this.getStorage().load();
        if (this.currentSync) {
            if (this.currentSync.hasUpdatedContent(this.currentStorageMechanism)) {
                this.currentSync.getUpdatedContent(this.currentStorageMechanism);
            } else {
                this.downloadComplete();
            }
        }
    };
    this.mergeNewData = function(c) {
        var e = this.getStorage();
        var d = this.currentSync.getBaseManagedKey();
        for (var b = 0; b < c.length; b++) {
            var a = c[b];
            e.put(a.key, a.value);
        }
        e.save();
        this.downloadComplete();
    };
    this.upload = function() {
        if (this.currentSync) {
            var g = this.getStorage();
            if (g) {
                var f = g.getAllKeys();
                var b = new Array();
                var d = this.currentSync.getBaseManagedKey();
                for (var a = 0; a < f.length; a++) {
                    var e = f[a].indexOf(d);
                    if (e == 0) {
                        var c = new Object();
                        c.key = f[a].substring(e);
                        c.value = g.get(f[a]);
                        b.push(c);
                    }
                }
                this.currentSync.send(b);
            }
        }
    };
}
StorageManager.__instance__ = null;
StorageManager.getInstance = function() {
    if (this.__instance__ == null) {
        this.__instance__ = new StorageManager();
    }
    return this.__instance__;
};
function AbstractStorageMechanism() {
    this.name = "AbstractStorage";
    this.dataObjects;
    this.keysExpireDates;
    this.maxCapacity = Number.MAX_VALUE;
    this.singleEntrymaxCapacity = Number.MAX_VALUE;
    this.allKeys;
    this.isSupported = function() {
        return false;
    };
    this.initialize = function() {
        this.dataObjects = new Array();
        this.allKeys = new Array();
        this.keysExpireDates = new Array();
    };
    this.setOnload = function(a) {
        StorageManager.getInstance().addOnLoad(a);
    };
    this.put = function(b, d, a) {
        try {
            if (this.dataObjects[b] === undefined || this.dataObjects[b] === false) {
                if (!a) {
                    a = new Date(new Date().getTime() + 7 * 24 * 3600000);
                }
                this.keysExpireDates[b] = a;
                this.allKeys.push(b);
            }
            this.dataObjects[b] = d;
            return true;
        } catch (c) {
            return false;
        }
    };
    this.get = function(a) {
        return this.dataObjects[a];
    };
    this.remove = function(c) {
        if (this.contains(c)) {
            var a = new Array();
            for (var b = 0; b < this.allKeys.length; b++) {
                if (this.allKeys[b] != c) {
                    a.push(this.allKeys[b]);
                }
            }
            this.allKeys = a;
            this.dataObjects[c] = false;
        }
    };
    this.contains = function(a) {
        if (this.dataObjects[a]) {
            return true;
        } else {
            return false;
        }
    };
    this.getAllKeys = function(a) {
        return this.allKeys;
    };
    this.save = function() {};
    this.load = function() {
        StorageManager.getInstance().loadComplete();
    };
    this.clear = function() {};
}
function CookieStorageMechanism() {
    this.name = "CookieStorage";
    this.maxCapacity = 20480;
    this.path = "/";
    this.domain = "";
    this.secure = false;
    this.createCookie = function(key, value, expiration) {
        document.cookie = key + "=" + value + ((expiration) ? (";expires=" + expiration) : "") + ((this.path) ? ";path=" + this.path : "") + ((this.domain) ? ";domain=" + this.domain : "") + ((this.secure && (this.secure == true)) ? "; secure" : "");
    };
    this.isSupported = function() {
        return (document.cookie || document.cookie == "");
    };
    this.save = function() {
        this.clear();
        var allKeys = this.getAllKeys();
        var lengthCount = 0;
        for (var i = 0; i < allKeys.length; i++) {
            var currentKey = allKeys[i];
            var value = this.get(currentKey);
            var newObject = new Object();
            newObject.value = value;
            newObject.expireDate = (this.keysExpireDates[currentKey]).getTime();
            dataString = escape(JSON.stringify(newObject));
            if ((lengthCount + dataString.length) > this.maxCapacity) {
                return false;
            } else {
                lengthCount += dataString.length;
                this.createCookie("js_" + currentKey, dataString, (this.keysExpireDates[currentKey]).toGMTString());
            }
        }
        return true;
    };
    this.load = function() {
        if (document.cookie != "") {
            var cookieArr = document.cookie.split("; ");
            for (var i = 0; i < cookieArr.length; i++) {
                var key = cookieArr[i].substring(0, cookieArr[i].indexOf("="));
                if (key.indexOf("js_") == 0) {
                    storedObject = eval("(" + (unescape(cookieArr[i].substring(cookieArr[i].indexOf("=") + 1))) + ")");
                    key = key.substring(3);
                    this.put(key, storedObject.value, new Date(storedObject.expireDate));
                }
            }
        }
        StorageManager.getInstance().loadComplete();
    };
    this.clear = function() {
        if (document.cookie != "") {
            var cookieArr = document.cookie.split("; ");
            for (var i = 0; i < cookieArr.length; i++) {
                var key = cookieArr[i].substring(0, cookieArr[i].indexOf("="));
                if (key.indexOf("js_") == 0) {
                    toExpireDateString = (new Date((new Date()).getTime() - (24 * 60 * 60 * 60 * 1000))).toGMTString();
                    this.createCookie(key, "clear this", toExpireDateString);
                }
            }
        }
    };
}
function DOMStorageMechanism() {
    this.name = "DOMStorage";
    this.maxCapacity = 3145728;
    this.isSupported = function() {
        return (window.globalStorage && (window.globalStorage != null));
    };
    this.save = function() {
        var allKeys = this.getAllKeys();
        var storedObject = new Array();
        for (var i = 0; i < allKeys.length; i++) {
            var currentKey = allKeys[i];
            var value = this.get(currentKey);
            var newObject = new Object();
            newObject.key = currentKey;
            newObject.value = value;
            newObject.expireDate = (this.keysExpireDates[currentKey]).toGMTString();
            storedObject.push(newObject);
        }
        dataString = JSON.stringify(storedObject);
        if (dataString.length > this.maxCapacity) {
            return false;
        } else {
            window.globalStorage[document.domain].storage = dataString;
        }
        return true;
    };
    this.load = function() {
        var storedDataObjectsStr = window.globalStorage[document.domain].storage + "";
        if (storedDataObjectsStr) {
            storedDataObjects = eval("(" + storedDataObjectsStr + ")");
            if (storedDataObjects && storedDataObjects != "") {
                for (var i = 0; i < storedDataObjects.length; i++) {
                    var storedObject = storedDataObjects[i];
                    if ((new Date(storedObject.expireDate)).getTime() > (new Date().getTime())) {
                        this.put(storedObject.key, storedObject.value, new Date(storedObject.expireDate));
                    }
                }
            }
        }
        StorageManager.getInstance().loadComplete();
    };
    this.clear = function() {
        window.globalStorage[document.domain].storage = JSON.stringify(new Object());
    };
}
function LocalStorageMechanism() {
    this.name = "localStorage";
    this.maxCapacity = 5000000;
    this.key = "undefined";
    this.isSupported = function() {
        return (window.localStorage && (window.localStorage != null));
    };
    this.save = function() {
        var allKeys = this.getAllKeys();
        var currentSize = 0;
        for (var i = 0; i < allKeys.length; i++) {
            var currentKey = allKeys[i];
            var value = this.get(currentKey);
            var newObject = new Object();
            newObject.key = currentKey;
            newObject.value = value;
            newObject.expireDate = (this.keysExpireDates[currentKey]).toGMTString();
            dataString = JSON.stringify(newObject);
            currentSize += dataString.length;
            if (currentSize > this.maxCapacity) {
                return false;
            } else {
                window.localStorage.setItem(currentKey, dataString);
            }
        }
        return true;
    };
    this.load = function() {
        if (window.localStorage) {
            var localStorage = window.localStorage;
            for (j = 0; j <= localStorage.length - 1; j++) {
                var key = localStorage.key(j);
                var storedDataString = localStorage.getItem(key);
                var storedDataObject;
                try {
                    storedDataObject = eval("(" + storedDataString + ")");
                } catch (e) {}
                if (storedDataObject && storedDataObject != "") {
                    if ((new Date(storedDataObject.expireDate)).getTime() > (new Date().getTime())) {
                        this.put(storedDataObject.key, storedDataObject.value, new Date(storedDataObject.expireDate));
                    }
                }
            }
        }
        StorageManager.getInstance().loadComplete();
    };
    this.clear = function() {
        window.localStorage.clear();
    };
}
function IEStorageMechanism() {
    this.name = "IEStorage";
    this.maxCapacity = 65536;
    this.isSupported = function() {
        return (navigator.userAgent.indexOf("MSIE")!=-1);
    };
    this.initialize = function() {
        this.dataObjects = new Array();
        this.allKeys = new Array();
        this.keysExpireDates = new Array();
        this.dataHook = false;
        var a = document.createElement("iframe");
        a.setAttribute("src", "/.element/js/3.0/scripts/IEPersistence.html");
        a.setAttribute("name", "IEPersistence");
        a.setAttribute("width", "10");
        a.setAttribute("height", "10");
        a.setAttribute("style", "visibility:hidden;position:absolute;top:0px;left:-100px;");
        a.style.top = "0px";
        a.style.left = "-100px";
        a.style.position = "absolute";
        document.documentElement.appendChild(a);
    };
    this.load = function() {};
    this.save = function() {
        var c = this.getAllKeys();
        var e = new Array();
        for (var b = 0; b < c.length; b++) {
            var f = c[b];
            var d = this.get(f);
            var a = new Object();
            a.key = f;
            a.value = d;
            a.expireDate = (this.keysExpireDates[f]).toGMTString();
            e.push(a);
        }
        dataString = JSON.stringify(e);
        if (dataString.length > this.maxCapacity) {
            return false;
        } else {
            if (this.dataHook && this.dataHook.saveData) {
                this.dataHook.saveData(JSON.stringify(e));
            }
        }
        return true;
    };
    this.clear = function() {
        this.dataHook.saveData("");
    };
}
CookieStorageMechanism.prototype = new AbstractStorageMechanism;
DOMStorageMechanism.prototype = new AbstractStorageMechanism;
LocalStorageMechanism.prototype = new AbstractStorageMechanism;
IEStorageMechanism.prototype = new AbstractStorageMechanism;
StorageManager.getInstance().addStorageType(new LocalStorageMechanism());
StorageManager.getInstance().addStorageType(new DOMStorageMechanism());
StorageManager.getInstance().addStorageType(new IEStorageMechanism());
StorageManager.getInstance().addStorageType(new CookieStorageMechanism());
Array.prototype.______array = "______array";
var JSON = {
    org: "http://www.JSON.org",
    copyright: "(c)2005 JSON.org",
    license: "http://www.crockford.com/JSON/license.html",
    stringify: function(a, g) {
        var h, e, b, f = "", d;
        switch (typeof a) {
        case"object":
            if (a) {
                if (a.______array == "______array") {
                    for (e = 0; e < a.length; ++e) {
                        d = this.stringify(a[e]);
                        if (f) {
                            f += ",";
                        }
                        f += d;
                    }
                    return "[" + f + "]";
                } else {
                    if (typeof a.toString != "undefined") {
                        for (e in a) {
                            d = a[e];
                            if (typeof d != "undefined" && typeof d != "function") {
                                d = this.stringify(d);
                                if (f) {
                                    f += ",";
                                }
                                f += this.stringify(e, true) + ":" + d;
                            }
                        }
                        return "{" + f + "}";
                    }
                }
            }
            return "null";
        case"number":
            return isFinite(a) ? String(a) : "null";
        case"string":
            b = a.length;
            if (!g) {
                f = '"';
            }
            for (e = 0; e < b; e += 1) {
                h = a.charAt(e);
                if (h >= " ") {
                    if (h == "\\" || h == '"') {
                        f += "\\";
                    }
                    f += h;
                } else {
                    switch (h) {
                    case"\b":
                        f += "\\b";
                        break;
                    case"\f":
                        f += "\\f";
                        break;
                    case"\n":
                        f += "\\n";
                        break;
                    case"\r":
                        f += "\\r";
                        break;
                    case"\t":
                        f += "\\t";
                        break;
                    default:
                        h = h.charCodeAt();
                        f += "\\u00" + Math.floor(h / 16).toString(16) + (h%16).toString(16);
                    }
                }
            }
            if (!g) {
                return f + '"';
            } else {
                return f;
            }
        case"boolean":
            return String(a);
        default:
            return "null";
        }
    },
    parse: function(n) {
        var d = 0;
        var a = " ";
        function m(o) {
            throw {
                name: "JSONError",
                message: o,
                at: d - 1,
                text: n
            };
        }
        function g() {
            a = n.charAt(d);
            d += 1;
            return a;
        }
        function k() {
            while (a != "" && a <= " ") {
                g();
            }
        }
        function l() {
            var q, r = "", p, o;
            if (a == '"') {
                outer:
                while (g()) {
                    if (a == '"') {
                        g();
                        return r;
                    } else {
                        if (a == "\\") {
                            switch (g()) {
                            case"b":
                                r += "\b";
                                break;
                            case"f":
                                r += "\f";
                                break;
                            case"n":
                                r += "\n";
                                break;
                            case"r":
                                r += "\r";
                                break;
                            case"t":
                                r += "\t";
                                break;
                            case"u":
                                o = 0;
                                for (q = 0; q < 4; q += 1) {
                                    p = parseInt(g(), 16);
                                    if (!isFinite(p)) {
                                        break outer;
                                    }
                                    o = o * 16 + p;
                                }
                                r += String.fromCharCode(o);
                                break;
                            default:
                                r += a;
                            }
                        } else {
                            r += a;
                        }
                    }
                }
            }
            m("Bad string");
        }
        function h() {
            var o = [];
            if (a == "[") {
                g();
                k();
                if (a == "]") {
                    g();
                    return o;
                }
                while (a) {
                    o.push(c());
                    k();
                    if (a == "]") {
                        g();
                        return o;
                    } else {
                        if (a != ",") {
                            break;
                        }
                    }
                    g();
                    k();
                }
            }
            m("Bad array");
        }
        function e() {
            var p, q = {};
            if (a == "{") {
                g();
                k();
                if (a == "}") {
                    g();
                    return q;
                }
                while (a) {
                    p = l();
                    k();
                    if (a != ":") {
                        break;
                    }
                    g();
                    q[p] = c();
                    k();
                    if (a == "}") {
                        g();
                        return q;
                    } else {
                        if (a != ",") {
                            break;
                        }
                    }
                    g();
                    k();
                }
            }
            m("Bad object");
        }
        function f() {
            var p = "", o;
            if (a == "-") {
                p = "-";
                g();
            }
            while (a >= "0" && a <= "9") {
                p += a;
                g();
            }
            if (a == ".") {
                p += ".";
                while (g() && a >= "0" && a <= "9") {
                    p += a;
                }
            }
            if (a == "e" || a == "E") {
                p += "e";
                g();
                if (a == "-" || a == "+") {
                    p += a;
                    g();
                }
                while (a >= "0" && a <= "9") {
                    p += a;
                    g();
                }
            }
            o =+ p;
            if (!isFinite(o)) {
                m("Bad number");
            } else {
                return o;
            }
        }
        function b() {
            switch (a) {
            case"t":
                if (g() == "r" && g() == "u" && g() == "e") {
                    g();
                    return true;
                }
                break;
            case"f":
                if (g() == "a" && g() == "l" && g() == "s" && g() == "e") {
                    g();
                    return false;
                }
                break;
            case"n":
                if (g() == "u" && g() == "l" && g() == "l") {
                    g();
                    return null;
                }
                break;
            }
            m("Syntax error");
        }
        function c() {
            k();
            switch (a) {
            case"{":
                return e();
            case"[":
                return h();
            case'"':
                return l();
            case"-":
                return f();
            default:
                return a >= "0" && a <= "9" ? f() : b();
            }
        }
        return c();
    }
};
var is_loadedOvly = 0;
(function(f, e, g) {
    var c = {
        validate: {
            hasUsernameValue: true,
            hasEmailValue: true,
            hasPasswordValue: true,
            hasKaptchaValue: true,
            hasResetCode: true
        },
        confirm: {
            isHTML5Browser: true,
            pass: true
        },
        config: {
            context: "",
            errorBlock: "#cnnConnectRegisterErrors",
            hasEmail: false,
            hasKaptcha: false,
            hasPassword: false,
            hasPrefix: false,
            hasReset: false,
            hasUsername: false,
            required: "required"
        },
        init: function(k, l) {
            var h = this;
            l = l || [];
            h.config = $j.extend({}, h.config, k);
            h.msib = l;
            h.context = $j(h.config.context);
            h.email = h.config.hasEmail;
            h.errorBlock = h.config.errorBlock;
            h.fields = h.context.find("input");
            h.requiredFields = [];
            h.hasErrors = [];
            h.kaptcha = h.config.hasKaptcha;
            h.errorMsgs = [];
            h.password = h.config.hasPassword;
            h.errorSnippets = [];
            h.resetCode = h.config.hasReset;
            h.username = h.config.hasUsername;
            h.filterFields(h.fields);
        },
        getJQuery: function(l, n) {
            var k, m, h;
            k = e.createElement("script");
            k.src = l;
            m = e.getElementsByTagName("head")[0];
            if (n) {
                h = false;
                k.onload = k.onreadystatechange = function() {
                    if (!h && (!this.readyState || "loaded" === this.readyState || "complete" === this.readyState)) {
                        h = true;
                        n();
                        k.onload = k.onreadystatechange = null;
                        m.removeChild(k);
                    }
                };
            }
            m.appendChild(k);
        },
        hasCheckVal: function() {
            var k = e.createElement("input"), h = this.confirm.isHTML5Browser;
            return (typeof k.checkValidity == "function") ? true : h = false;
        },
        resetUI: function(l) {
            var h = this, k = l.find(".redinput_error");
            h.isErrorBlockEmpty();
            if (k) {
                k.each(function(m, n) {
                    $j(n).removeClass("redinput_error");
                    $j(n.previousElementSibling).removeClass("redtexterror");
                });
            }
        },
        resetIsEmptyValidator: function() {
            var k = this, l = k.validate, h;
            for (h in l) {
                if (l.hasOwnProperty(h)) {
                    l[h] = true;
                }
            }
        },
        filterFields: function(h) {
            var k = this;
            h.each(function(l, o) {
                var n = this.type, m = $j(this).attr(k.config.required);
                if (n !== "hidden" && m) {
                    k.requiredFields.push(o);
                }
            });
            if (k.requiredFields.length) {
                k.getInputValue(k.requiredFields);
            }
            if (k.msib.length && k.requiredFields.length) {
                k.evaluateMSIBerrors(k.requiredFields);
            }
        },
        evaluateMSIBerrors: function(h) {
            var k = this, l = "<a href=\"javascript: void(0);\" onclick=\"closeOverlay('profile_forgotpass2_overlay');showOverlay('profile_forgotpass_overlay');\">Send another e-mail</a> with an updated link and reset code to reset your password.<br/>";
            k.msiberrors = [];
            k.resetUI(k.context);
            k.getFieldID(h);
            if (k.msib.indexOf("Screen name not permitted")>-1) {
                k.msiberrors.push(k.requiredFields[k.fieldID.indexOf("displayname")]);
                k.errorMsgs.push(k.getErrorText.msib.notpermitted);
            }
            if (k.msib.indexOf("Screen name not available")>-1) {
                k.msiberrors.push(k.requiredFields[k.fieldID.indexOf("displayname")]);
                k.errorMsgs.push(k.getErrorText.msib.user);
            }
            if (k.msib.indexOf("email address not available")>-1) {
                k.msiberrors.push(k.requiredFields[k.fieldID.indexOf("email")]);
                k.errorMsgs.push(k.getErrorText.msib.email);
            }
            if (k.msib.indexOf("invalid.user.displayName")>-1) {
                k.msiberrors.push(k.requiredFields[k.fieldID.indexOf("email")]);
                k.errorMsgs.push(k.getErrorText.msib.invalidaddress);
            }
            if (k.msib.indexOf("Please enter a matching captcha.")>-1) {
                k.msiberrors.push(k.requiredFields[k.fieldID.indexOf("kaptcha")]);
                k.errorMsgs.push(k.getErrorText.msib.captcha);
            }
            if (k.msib.indexOf("User not found")>-1) {
                k.msiberrors.push(k.requiredFields[k.fieldID.indexOf("email")]);
                k.errorMsgs.push(k.getErrorText.msib.usernotfound + " " + l);
            }
            if (k.msib.indexOf("The reset code does not match our records")>-1) {
                k.msiberrors.push(k.requiredFields[k.fieldID.indexOf("resetCode")]);
                k.errorMsgs.push(k.getErrorText.msib.resetcode + " " + l);
            }
            if (k.msib.indexOf("The reset code you provided has expired")>-1) {
                k.msiberrors.push(k.requiredFields[k.fieldID.indexOf("resetCode")]);
                k.errorMsgs.push(k.getErrorText.msib.expired + " " + l);
            }
            k.highlightErrors(k.msiberrors);
            k.showErrorMsgs(k.errorMsgs, []);
        },
        getInputValue: function(h) {
            var k = this;
            k.inputValues = [];
            if (h.length > 0) {
                h.each(function(l, m) {
                    k.inputValues.push($j.trim(h[m].value));
                });
                k.isEmpty(k.inputValues);
            }
        },
        getFieldID: function(h) {
            var k = this, l = 0;
            k.fieldID = [];
            for (l; l < h.length; l++) {
                var m = h[l].name;
                k.fieldID.push(m);
            }
        },
        getErrorText: {
            invalidEmail: "You entered an invalid e-mail address.",
            invalidUsername: "Your screen name includes invalid characters.",
            shortPassword: "Passwords must be 6-15 characters in length.",
            shortUsername: "Your screen name must be 3-12 characters.",
            snip: {
                blank: ["A required field is missing! ", "Registration isn't complete without your "].join(""),
                base: "Please enter a ",
                email: "email address",
                hasSpaces: "new password without spaces",
                kaptcha: "security word",
                password: "password",
                reset: "reset code",
                username: "screen name"
            },
            msib: {
                user: "That screen name is already taken. Please choose another.",
                notpermitted: "That screen name is not permitted.",
                invalidaddress: "That email address is not permitted.",
                email: "That e-mail address is already taken.",
                captcha: "Enter the security word in the grey box correctly.",
                usernotfound: "User not found.",
                resetcode: "Your reset code does not match our records.",
                expired: "Your reset code has expired."
            }
        },
        highlightErrors: function(h) {
            var k;
            if (Array.isArray(h)) {
                $j(h[0]).focus();
                for (k = 0; k < h.length; k++) {
                    $j(h[k]).addClass("redinput_error");
                    $j(h[k].previousElementSibling).addClass("redtexterror");
                }
            }
        },
        isEmpty: function(h) {
            var k = this, l = [];
            if (Array.isArray(h)) {
                k.resetIsEmptyValidator();
                $j(h).each(function(m, n) {
                    if (n === "" || n === g) {
                        l.push(m);
                    }
                });
                if (l.length) {
                    l.each(function(m, n) {
                        k.hasErrors.push(k.requiredFields[m]);
                    });
                    k.getFieldID(k.hasErrors);
                    if (k.username) {
                        if (k.fieldID.indexOf("displayname")>-1) {
                            k.validate.hasUsernameValue = false;
                            k.errorSnippets.push(k.getErrorText.snip.username);
                        }
                    }
                    if (k.email) {
                        if (k.fieldID.indexOf("email")>-1) {
                            k.validate.hasEmailValue = false;
                            k.errorSnippets.push(k.getErrorText.snip.email);
                        }
                    }
                    if (k.resetCode) {
                        if (k.fieldID.indexOf("resetCode")>-1) {
                            k.validate.hasResetCode = false;
                            k.errorSnippets.push(k.getErrorText.snip.reset);
                        }
                    }
                    if (k.password) {
                        if (k.fieldID.indexOf("password")>-1) {
                            k.validate.hasPasswordValue = false;
                            k.errorSnippets.push(k.getErrorText.snip.password);
                        }
                    }
                    if (k.kaptcha) {
                        if (k.fieldID.indexOf("kaptcha")>-1) {
                            k.validate.hasKaptchaValue = false;
                            k.errorSnippets.push(k.getErrorText.snip.kaptcha);
                        }
                    }
                    k.resetUI(k.context);
                    k.highlightErrors(k.hasErrors);
                    k.showErrorMsgs([], k.errorSnippets);
                } else {
                    k.resetUI(k.context);
                    k.getFieldID(k.requiredFields);
                    k.evaluateForm();
                }
            }
        },
        evaluateForm: function() {
            var k = this, l, h;
            if (k.username) {
                k.validateUsername(k.fieldID.indexOf("displayname"));
            }
            if (k.email) {
                k.validateEmail(k.fieldID.indexOf("email"));
            }
            if (k.password) {
                k.validatePassword(k.fieldID.indexOf("password"));
            }
            if (k.hasErrors.length) {
                k.highlightErrors(k.hasErrors);
                k.showErrorMsgs(k.errorMsgs, k.errorSnippets);
            } else {
                if (k.resetCode) {
                    h = {
                        params: {
                            email: k.inputValues[k.fieldID.indexOf("email")],
                            resetCode: k.inputValues[k.fieldID.indexOf("resetCode")],
                            password: k.inputValues[k.fieldID.indexOf("password")],
                            confirmPassword: k.inputValues[k.fieldID.indexOf("password")]
                        },
                        onSuccess: function(m) {
                            l = m.responseJSON;
                            if (l && l.errors) {
                                k.msib = l.errors;
                                k.evaluateMSIBerrors(k.requiredFields);
                            }
                            if (l && l.status === "success") {
                                cnnConnectOverlayUpdate("reset2loginsuccess");
                            }
                        }
                    };
                    Member.changePassword(h);
                } else {
                    k.context.submit();
                    k.context.unbind();
                }
            }
        },
        isErrorBlockEmpty: function() {
            var h = $j(this.errorBlock);
            if (h) {
                if (h.is(":empty") === false) {
                    h.empty();
                }
                h.css({
                    "display": "inline-block"
                }).addClass("redtexterror");
            }
        },
        determineSnipPrefix: function() {
            var h = this;
            for (var k in h.validate) {
                if (h.validate.hasOwnProperty(k)) {
                    if (h.validate[k] === false) {
                        return false;
                    }
                }
            }
            return true;
        },
        showErrorMsgs: function(p, l) {
            var k = this, q = p.join(" "), m = k.getErrorText, o, h, n;
            if (k.determineSnipPrefix()) {
                o = m.snip.base;
            } else {
                o = m.snip.blank;
            }
            if (l.length) {
                if (l.length === 2) {
                    q += o + " " + l.join(" and ");
                } else {
                    if (l.length > 2) {
                        h = l.pop(), n = l.join(", ");
                        q += o + " " + n + " and " + h + ".";
                    } else {
                        h = " " + o + " " + l[0] + ".";
                        if (q.length) {
                            q += h;
                        } else {
                            q += $j.trim(h);
                        }
                    }
                }
            }
            $j(k.errorBlock).append(q);
        },
        validateEmail: function(m) {
            var k = this, h = /^([a-zA-Z0-9_\.\'\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/, l = $j.trim(k.requiredFields[m].value);
            if (h.test(l) === false) {
                k.hasErrors.push(k.requiredFields[m]);
                k.errorMsgs.push(k.getErrorText.invalidEmail);
            }
        },
        validatePassword: function(l) {
            var h = this, k = h.requiredFields[l].value;
            if (k.length < 6 || k.indexOf(" ")>-1) {
                h.hasErrors.push(h.requiredFields[l]);
                if (k.length < 6) {
                    h.errorMsgs.push(h.getErrorText.shortPassword);
                }
                if (k.indexOf(" ")>-1) {
                    h.errorSnippets.push(h.getErrorText.snip.hasSpaces);
                }
            }
        },
        validateUsername: function(l) {
            var k = this, h = /^\w+$/, m = $j.trim(k.requiredFields[l].value);
            if (h.test(m) === false || m.length < 3) {
                k.hasErrors.push(k.requiredFields[l]);
                if (h.test(m) === false) {
                    k.errorMsgs.push(k.getErrorText.invalidUsername);
                }
                if (m.length < 3) {
                    k.errorMsgs.push(k.getErrorText.shortUsername);
                }
            }
        }
    };
    function a() {
        c.getJQuery("http://z.cdn.turner.com/cnn/.e/js/libs/jquery-1.7.2.min.js", function() {
            d();
        });
    }
    function d() {
        window.$j = window.jQuery;
        b();
        $j.fn.CNNformValidator = function(h, k) {
            return this.each(function() {
                var l = Object.create(c);
                l.init(h, k, this);
            });
        };
    }
    function b() {
        var h = $j("#cnn_mOvrlycntr");
        if (h.length === 0) {
            $j("<div />", {
                id: "cnn_mOvrlycntr"
            }).prependTo("body");
        }
    }
    return (f.jQuery ? d() : a());
})(window, document);
function ms_QueueManager() {
    var queue = [];
    var queueCurrentItem = null;
    var iframeDivId = "";
    var iframeId = "";
    var iframeBlankUrl = "";
    var isIframeReady = false;
    var isQueueRunning = false;
    var requestMade = false;
    var waitingForResponse = false;
    var blankIframeTimer = null;
    var requestTimer = null;
    var queuePosition =- 1;
    var iframeTimeoutCounter = 0;
    var requestTimeoutCounter = 0;
    var TIMEOUT = 50;
    var REQUEST_TIMEOUT = 10;
    this.init = function(divId, blankUrl) {
        document.write('<div id="' + divId + '" style="position:absolute; bottom:0; left: -700px;"></div>');
        iframeDivId = divId;
        iframeId = divId + "_iframe";
        iframeBlankUrl = blankUrl;
        REQUEST_TIMEOUT = REQUEST_TIMEOUT * 1000;
    };
    this.addRequest = function(queueItem) {
        queue[queue.length] = queueItem;
        if (isQueueRunning == false) {
            isQueueRunning = true;
            processQueue();
        }
    };
    this.requestReceived = function() {
        waitingForResponse = false;
        clearWaitForRequest();
        destroyIframe();
        processQueue();
    };
    var processQueue = function() {
        queuePosition++;
        if (queuePosition >= queue.length) {
            resetQueue();
        } else {
            queueCurrentItem = queue[queuePosition];
            createIframe();
        }
    };
    var createIframe = function() {
        isIframeReady = false;
        var thebody = document.getElementsByTagName("body")[0];
        var tempIFrame = document.createElement("iframe");
        tempIFrame.setAttribute("id", iframeId);
        tempIFrame.setAttribute("name", iframeId);
        tempIFrame.style.position = "absolute";
        tempIFrame.style.bottom = "0";
        tempIFrame.style.left = "-600px";
        thebody.appendChild(tempIFrame);
        if (location.pathname.indexOf("profile")>-1) {
            frames[iframeId].location.replace(iframeBlankUrl);
        }
        waitForRequest("iframe");
    };
    var destroyIframe = function() {
        if (location.pathname.indexOf("profile")>-1) {
            $(iframeDivId).innerHTML = "";
        }
        x = window.frames[iframeId];
    };
    var resetQueue = function() {
        isQueueRunning = false;
        destroyIframe();
        queue = [];
        queuePosition =- 1;
        queueItem = null;
    };
    var doGet = function() {
        waitingForResponse = true;
        var url = makeQueryString(queueCurrentItem);
        frames[iframeId].location.replace(url);
        waitForRequest("get");
    };
    var doPost = function() {
        var html = drawForm(queueCurrentItem, "msHiddenIframeForm");
        var iframeWin = getIframeWindow();
        waitingForResponse = true;
        iframeWin.document.body.innerHTML = html;
        iframeWin.document.getElementById("msHiddenIframeForm").submit();
        waitForRequest("post");
    };
    var waitForRequest = function(type) {
        switch (type) {
        case"post":
            if (waitingForResponse == false) {
                clearWaitForRequest();
                processQueue();
                return;
            }
            break;
        case"get":
            if (waitingForResponse == false) {
                clearWaitForRequest();
                processQueue();
                return;
            }
            break;
        case"blankForPost":
            if (isIframeReady == true) {
                clearWaitForRequest();
                doPost();
                return;
            }
            break;
        case"iframe":
            if (isIframeReady == true) {
                clearWaitForRequest();
                if (queueCurrentItem.method == "post") {
                    doPost();
                } else {
                    doGet();
                }
                return;
            }
            break;
        }
        if ((requestTimeoutCounter * TIMEOUT) >= REQUEST_TIMEOUT) {
            clearWaitForRequest();
            requestFailed(type);
            return;
        } else {
            requestTimeoutCounter++;
            requestTimer = setTimeout(function timeoutWaitForRequest() {
                waitForRequest(type);
            }, TIMEOUT);
        }
    };
    var clearWaitForRequest = function() {
        clearTimeout(requestTimer);
        requestTimeoutCounter = 0;
    };
    var requestFailed = function(type) {
        destroyIframe();
        var response = {};
        response["errors"] = ["request timed out"];
        eval(queueCurrentItem.params.callback + "(response);");
        processQueue();
    };
    var makeQueryString = function(queueItem) {
        var queryString = "";
        queryString += queueItem.url;
        if (queueItem.params.len > 0) {
            queryString += "?";
            var i = 0;
            for (key in queueItem.params) {
                if (key != "len") {
                    queryString += key + "=" + escapeParam(queueItem.params[key]);
                    if (i < (queueItem.params.len - 1)) {
                        queryString += "&";
                    }
                }
                i++;
            }
        }
        return queryString;
    };
    var escapeParam = function(param) {
        return escape(param).replace(/\+/g, "%2b");
    };
    var drawForm = function(queueItem, formId) {
        var html = "";
        for (key in queueItem.params) {
            html += '<input type="hidden" name="' + key + '" value="' + queueItem.params[key] + '"/>';
        }
        html = '<form id="' + formId + '" method="' + queueItem.method + '" action="' + queueItem.url + '">' + html + "</form>";
        return html;
    };
    var getIframeWindow = function() {
        var r = $(iframeId).contentWindow || $(iframeId).contentDocument;
        return r;
    };
    this.setIframeReady = function() {
        isIframeReady = true;
    };
}
function ms_QueueItem(a, c) {
    var b = a;
    var e = c;
    var d = {};
    this.addParam = function(f, g) {
        d[f] = g;
    };
    this.getQueueItem = function() {
        var f = 0;
        for (key in d) {
            f++;
        }
        d["len"] = f;
        return {
            "url": b,
            "method": e,
            "params": d
        };
    };
}
var ms_documentDomain = "cnn.com";
var ms_baseStandard = "http://audience.cnn.com/services/cnn/";
var ms_baseSecure = "http://audience.cnn.com/services/cnn/";
var ms_echoURL = "http://audience.cnn.com/services/cnn/echo.api";
var ms_blankURL = "http://audience.cnn.com/services/cnn/blank.api?callback=msQueueManager.setIframeReady";
var msIframeDiv = "cnnConnectMsIframe";
var msQueueManager = null;
var msStorage = {};
document.domain = ms_documentDomain;
msQueueManager = new ms_QueueManager();
function ms_isLoggedIn() {
    if (allCookies === undefined) {
        allCookies = window.CNN_getCookies();
    }
    var a = allCookies["authid"] || null;
    if (a == null) {
        return false;
    } else {
        return true;
    }
}
function ms_isNull(a) {
    return (a != "undefined" && a != null) ? false : true;
}
function ms_getEmails(a) {
    var c = new ms_QueueItem(ms_baseStandard + "user.api", "get");
    c.addParam("action", "getEmails");
    c.addParam("callback", a);
    var b = c.getQueueItem();
    msQueueManager.addRequest(b);
}
function ms_uiGetEmails(d) {
    msQueueManager.requestReceived();
    var c = (typeof d.errors == "undefined") ? false: true;
    if (c == false) {
        msStorage.emails = d.emails;
        var b = true;
        for (var f = 0; f < d.emails.length; f++) {
            if (d.emails[f].isPrimary == "true" && d.emails[f].status != "confirmed") {
                b = false;
            }
        }
        if (b == false) {
            var e = $("cnnConnectWelcomeNotConfirmed");
            var a = $("cnnConnectBreakNewsEmails");
            if (e && a) {
                $("cnnConnectWelcomeNotConfirmed").style.display = "block";
                $("cnnConnectBreakNewsEmails").style.display = "none";
            }
        }
    } else {}
}
window.msReload = function() {
    if (window.location.href.indexOf("?")>-1) {
        window.location.href = window.location.href.substr(0, window.location.href.indexOf("?"));
    } else {
        window.location.href = window.location.href;
    }
};
function utilSelectOption(c, b) {
    for (var a = 0; a < c.options.length; a++) {
        if (c.options[a].value == b) {
            c.selectedIndex = a;
            return;
        }
    }
}
function utilGetSelectValue(a) {
    return a.options[a.selectedIndex].value;
}
function validateEmail(b) {
    var a = /^([a-zA-Z0-9_\.\'\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
    return a.test(b);
}
function ms_init() {
    ms_getEmails("ms_uiGetEmails");
}
function ms_initProfile() {
    if (ms_isLoggedIn() == true) {} else {}
}
Event.observe(window, "load", function() {
    ms_init();
});
String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, "");
};
function ms_initOverlay() {
    checkUrlForParams();
    generateCaptchaImage();
    if (ms_isLoggedIn() == true) {} else {}
}
function cnn_formConnectLogin(f) {
    var d = $(f).email.value;
    var c = $(f).password.value;
    var g = $(f).rememberme.checked;
    var e = true;
    var a = "Registration isn't complete without your ";
    var b = [];
    if (validateEmail(d) == false) {
        e = false;
        b[b.length] = "e-mail address";
        $("psigninp2_email").addClassName("redtexterror");
        $(f).email.className = "redinput_error";
    }
    if (c == "") {
        e = false;
        $("psigninp2_password").addClassName("redtexterror");
        b[b.length] = "password";
        $(f).password.className = "redinput_error";
    }
    if (e) {
        ms_doLogin(d, c, g, "ms_uiDoLogin");
    } else {
        cnnConnectOverlayLoginValidationError("clear");
        if (b.length == 2) {
            cnnConnectOverlayLoginValidationError("add", "We need your " + b[0] + " and " + b[1] + " to log in.");
        } else {
            if (b[0] == "e-mail address" && validateEmail(d) == false && d != "") {
                cnnConnectOverlayLoginValidationError("add", "You entered an invalid e-mail address.");
            } else {
                if (b[0] == "e-mail address" && d == "") {
                    cnnConnectOverlayLoginValidationError("add", "We need your " + b[0] + " to log in.");
                } else {
                    cnnConnectOverlayLoginValidationError("add", "We need your " + b[0] + " to log in.");
                }
            }
        }
        cnnConnectOverlayLoginValidationError("show");
    }
}
var cnn_screenname = "";
function ms_formEnterScreenname(b) {
    cnn_screenname = $("cnnscreenname").value;
    var c = /^\w+$/;
    var a = true;
    $("cnnConnectScreennameErrors").innerHTML = "";
    if (cnn_screenname == "") {
        a = false;
        $("cnnConnectScreennameErrors").innerHTML = "You need to enter a screen name.";
        $("cnnscreenname").addClassName("redinput_error");
        $("cnnConnectScreennameErrors").addClassName("redtexterror");
        $("screenname_label").addClassName("redtexterror");
        return;
    } else {
        if (cnn_screenname.length < 3) {
            a = false;
            $("cnnConnectScreennameErrors").innerHTML = "The screen name that you entered is too short.";
            $("cnnscreenname").addClassName("redinput_error");
            $("cnnConnectScreennameErrors").addClassName("redtexterror");
            $("screenname_label").addClassName("redtexterror");
            return;
        } else {
            if (cnn_screenname.length > 12) {
                a = false;
                $("cnnConnectScreennameErrors").innerHTML = "Your screen name must be 3-12 characters; numbers and letters only.";
                $("cnnscreenname").addClassName("redinput_error");
                $("cnnConnectScreennameErrors").addClassName("redtexterror");
                $("screenname_label").addClassName("redtexterror");
                return;
            } else {
                if (c.test(cnn_screenname) == false) {
                    a = false;
                    $("cnnConnectScreennameErrors").innerHTML = "Your screen name includes invalid characters";
                    $("cnnscreenname").addClassName("redinput_error");
                    $("cnnConnectScreennameErrors").addClassName("redtexterror");
                    $("screenname_label").addClassName("redtexterror");
                    return;
                } else {
                    $("cnnscreenname").removeClassName("redinput_error");
                    $("cnnConnectScreennameErrors").removeClassName("redtexterror");
                    $("screenname_label").removeClassName("redtexterror");
                }
            }
        }
    }
    if (a == true) {
        ms_getProfile("ms_addScreenName");
    } else {}
}
function ms_addScreenName(d) {
    msQueueManager.requestReceived();
    var c = (typeof d.errors == "undefined") ? false: true;
    var b = (typeof d.warnings == "undefined") ? false: true;
    if (c == false && b == false) {
        var f = d.profile;
        f["screenName"] = cnn_screenname;
        var a = f["monthOfBirth"];
        var e = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        f["monthOfBirth"] = e.indexOf(a) + 1;
        ms_updateProfile(f, "ms_uiAddScreenName");
    } else {
        $("cnnConnectScreennameErrors").innerHTML = "There was an error registering your screen name.  Please try again.";
        $("cnnscreenname").addClassName("redinput_error");
        $("cnnConnectScreennameErrors").addClassName("redtexterror");
        $("screenname_label").addClassName("redtexterror");
    }
}
function ms_uiAddScreenName(c) {
    msQueueManager.requestReceived();
    var b = (typeof c.errors == "undefined") ? false: true;
    var a = (typeof c.warnings == "undefined") ? false: true;
    if (b == false && a == false) {
        ms_doGetUser("ms_uiDoGetUser");
    } else {
        $("cnnConnectScreennameErrors").innerHTML = "There was an error registering your screen name.  Please try again.";
        $("cnnscreenname").addClassName("redinput_error");
        $("cnnConnectScreennameErrors").addClassName("redtexterror");
        $("screenname_label").addClassName("redtexterror");
    }
}
function ms_getProfile(a) {
    var c = new ms_QueueItem(ms_baseStandard + "user.api", "get");
    c.addParam("action", "getProfile");
    c.addParam("callback", a);
    var b = c.getQueueItem();
    msQueueManager.addRequest(b);
}
function ms_updateProfile(c, a) {
    var d = new ms_QueueItem(ms_baseStandard + "user.api", "post");
    d.addParam("action", "updateProfile");
    for (key in c) {
        d.addParam(key, c[key]);
    }
    d.addParam("callback", a);
    var b = d.getQueueItem();
    msQueueManager.addRequest(b);
}
function ms_doGetUser(a) {
    var c = new ms_QueueItem(ms_baseStandard + "user.api", "get");
    c.addParam("action", "getUser");
    c.addParam("echourl", ms_echoURL);
    c.addParam("callback", a);
    var b = c.getQueueItem();
    msQueueManager.addRequest(b);
}
function ms_uiDoGetUser(b) {
    msQueueManager.requestReceived();
    var a = (typeof b.warnings == "undefined") ? false: true;
    var c = (typeof b.user.screenName == null) ? false: true;
    if (a == false && c == true) {
        CNN_setCookie("displayname", b.user.screenName, 854400, "/", document.domain);
        closeOverlay("profile_enter_screenname");
        window.msReload();
    } else {
        $("cnnConnectScreennameErrors").innerHTML = "There was an error registering your screen name.  Please try again.";
        $("cnnConnectFormScreenname").screenname.addClassName("redinput_error");
        $("cnnConnectScreennameErrors").addClassName("redtexterror");
        $("screenname_label").addClassName("redtexterror");
    }
}
function clearInputErrors() {
    $("cnnOverlayEmail1l").removeClassName("redinput_error");
    $("cnnOverlayEmail1l").value = "";
    $("cnnOverlayPwd").removeClassName("redinput_error");
    $("cnnOverlayPwd").value = "";
    $("psigninp2_email").removeClassName("redtexterror");
    $("psigninp2_password").removeClassName("redtexterror");
    $("cnnConnectLoginErrors").update("");
    $("cnnConnectLoginErrors").hide();
}
var newuser = false;
function ms_formRegister(l) {
    newuser = true;
    var f = $(l).email.value.trim();
    var m = $(l).password.value;
    var h = $(l).screenName.value.trim();
    var c = $(l).facebookID.value;
    $(l).screenName.value = h;
    var g = $(l).captcha.value;
    var b = "domestic_version";
    var o = "";
    if ($(l).specialOffers.checked == true) {
        o = "member_services";
    }
    var k = true;
    var e = "A required field is missing! Registration isn't complete without your ";
    var n = [];
    if (f == "" || validateEmail(f) == false) {
        k = false;
        n[n.length] = "e-mail address";
        cnnConnectOverlayRegisterError("email");
    } else {
        $("cnnConnectFormRegister").email.className = "cnnConnectFormbg1 cnn_connectoverlay_email2";
        $("signup_email").previous("p").removeClassName("redtexterror");
    }
    if (m == "") {
        k = false;
        n[n.length] = "password";
        cnnConnectOverlayRegisterError("password");
    } else {
        if (m.length < 6 || m.indexOf(" ")!=-1 || m.length > 15) {
            k = false;
            cnnConnectOverlayRegisterError("password");
            cnnConnectOverlayError("errorText", "You entered an invalid password.");
            return;
        } else {
            $("cnnConnectFormRegister").password.className = "cnnConnectFormbg2 cnn_connectoverlay_password2";
            $("signup_password").previous("p").removeClassName("redtexterror");
        }
    }
    var a = /^\w+$/;
    if (h == "") {
        k = false;
        n[n.length] = "screen name";
        cnnConnectOverlayRegisterError("screenName");
    } else {
        if (h.length < 3) {
            k = false;
            cnnConnectOverlayRegisterError("screenName");
            cnnConnectOverlayError("errorText", "The screen name that you entered is too short.");
            return;
        } else {
            if (h.length > 12) {
                k = false;
                cnnConnectOverlayRegisterError("screenName");
                cnnConnectOverlayError("errorText", "Your screen name must be 3-12 characters; numbers and letters only.");
                return;
            } else {
                if (a.test(h) == false) {
                    k = false;
                    cnnConnectOverlayRegisterError("screenName");
                    cnnConnectOverlayError("errorText", "Your screen name includes invalid characters.");
                    return;
                } else {
                    $("cnnConnectFormRegister").screenName.className = "cnnConnectFormbg3 cnn_connectoverlay_screenname";
                    $("signup_screenname").previous("p").removeClassName("redtexterror");
                }
            }
        }
    }
    if (g == "") {
        k = false;
        generateCaptchaImage();
        n[n.length] = "security word";
        cnnConnectOverlayRegisterError("captcha");
        cnnConnectOverlayError("errorText", "You must enter a security word.");
    } else {
        $("cnnConnectFormRegister").captcha.className = "cnnConnectFormbg4 cnn_connectoverlay_enterit";
        $("signup_kaptcha_p1").removeClassName("redtexterror");
    }
    if (k == true) {
        ms_doRegister(f, m, h, g, b, o, c, "ms_uiDoRegister");
    } else {
        switch (n.length) {
        case 1:
            if (n[0] == "e-mail address" && validateEmail(f) == false && f != "") {
                e = "You entered an invalid e-mail address.";
            } else {
                if (n[0] == "e-mail address" && f == "") {
                    e += n[0];
                } else {
                    e += n[0];
                }
            }
            break;
        case 2:
            e += n[0] + " and " + n[1];
            break;
        default:
            for (var d = 0; d < n.length; d++) {
                e += (d == (n.length - 1)) ? "and " + n[d] + "." : n[d] + ", ";
            }
            break;
        }
        cnnConnectOverlayError("errorText", e);
    }
}
function ms_formResetUserPassword(b) {
    var a = $(b).email.value;
    if (validateEmail(a) == false) {
        cnnConnectOverlayForgotValidationError("clear");
        cnnConnectOverlayForgotValidationError("add", "You must enter your e-mail address to reset your password.");
        cnnConnectOverlayForgotValidationError("show");
    } else {
        ms_resetUserPassword(a, "ms_uiResetUserPassword");
    }
}
function ms_formSetUserPassword(f) {
    var d = $(f).email.value;
    var e = $(f).resetCode.value;
    var h = $(f).newPassword.value;
    var a = h;
    var g = true;
    var c = "Reset Password isn't complete without your ";
    var k = [];
    if (validateEmail(d) == false || d == "Email Address") {
        g = false;
        k[k.length] = "e-mail address";
        cnnConnectOverlayResetError("email");
    } else {
        $("new_password_email").previous("p").removeClassName("redtexterror");
        $("cnnConnectFormReset").email.className = "cnn_connectoverlay_email3 cnnredtxt";
    }
    if (e == "" || e == "Reset Code") {
        g = false;
        k[k.length] = "reset code";
        cnnConnectOverlayResetError("resetCode");
    } else {
        $("reset_code").previous("p").removeClassName("redtexterror");
        $("cnnConnectFormReset").resetCode.className = "cnn_connectoverlay_password3 cnnredtxt";
    }
    if (h == "" || h == "New Password") {
        g = false;
        k[k.length] = "new password";
        cnnConnectOverlayResetError("newPassword");
    } else {
        $("new_password").previous("p").removeClassName("redtexterror");
        $("cnnConnectFormReset").newPassword.className = "cnn_connectoverlay_password4 cnnredtxt";
    }
    if (g == true) {
        ms_setUserPassword(e, d, h, a, "ms_uiSetUserPassword");
    } else {
        cnnConnectOverlayResetValidationError("clear");
        switch (k.length) {
        case 1:
            c += k[0] + ".";
            break;
        case 2:
            c += k[0] + " and " + k[1] + ".";
            break;
        default:
            for (var b = 0; b < k.length; b++) {
                c += (b == (k.length - 1)) ? "and " + k[b] + "." : k[b] + ", ";
            }
            break;
        }
        cnnConnectOverlayResetValidationError("add", c);
        cnnConnectOverlayResetValidationError("show");
    }
}
function ms_doLogout() {
    CNN_removeCookie("the_forum", "/", "cnn.com");
    CNN_removeCookie("authid", "/", "cnn.com");
    CNN_removeCookie("authpass", "/", "cnn.com");
    CNN_removeCookie("displayname", "/", "cnn.com");
    CNN_removeCookie("firstName", "/", "cnn.com");
    var b = new ms_QueueItem(ms_baseStandard + "logout.api", "post");
    b.addParam("callback", "ms_uiDoLogout");
    var a = b.getQueueItem();
    msQueueManager.addRequest(a);
    document.location = "http://www.disqus.com/saml/cnn/logout/?target=" + document.location;
}
function ms_doLogin(c, b, f, a) {
    var e = new ms_QueueItem(ms_baseStandard + "login.api", "post");
    e.addParam("email", c);
    e.addParam("password", b);
    e.addParam("keepMeLoggedIn", f);
    e.addParam("echourl", ms_echoURL);
    e.addParam("callback", a);
    var d = e.getQueueItem();
    msQueueManager.addRequest(d);
}
function createLoginIframe() {
    var a = "disqus_login";
    iframeDivId = a;
    iframeId = a + "_iframe";
    var c = location.href;
    c = c.split("/");
    c = "http://" + c[2] + "/.element/ssi/www/misc/3.0/connect/connect-disqus-target.html";
    iframeBlankUrl = ms_baseStandard + "gsso?assertionConsumerUrl=http://www.disqus.com/saml/cnn/postback/&target=" + c;
    var d = document.getElementsByTagName("body")[0];
    var b = document.createElement("iframe");
    b.setAttribute("id", iframeId);
    b.setAttribute("name", iframeId);
    b.style.position = "absolute";
    b.style.bottom = "0";
    b.style.left = "-600px";
    d.appendChild(b);
    frames[iframeId].location.replace(iframeBlankUrl);
}
function createLogoutIframe() {
    var a = "disqus_logout";
    iframeDivId = a;
    iframeId = a + "_iframe";
    var c = location.href;
    c = c.split("/");
    c = "http://" + c[2] + "/.element/ssi/www/misc/3.0/connect/connect-disqus-target.html";
    iframeBlankUrl = "http://www.disqus.com/saml/cnn/logout/?target=" + c;
    var d = document.getElementsByTagName("body")[0];
    var b = document.createElement("iframe");
    b.setAttribute("id", iframeId);
    b.setAttribute("name", iframeId);
    b.style.position = "absolute";
    b.style.bottom = "0";
    b.style.left = "-600px";
    d.appendChild(b);
    frames[iframeId].location.replace(iframeBlankUrl);
}
function ms_doRegister(d, k, h, e, a, l, c, g) {
    var b = new ms_QueueItem(ms_baseStandard + "register.api", "post");
    b.addParam("email", d);
    b.addParam("password", k);
    b.addParam("displayname", h);
    b.addParam("kaptcha", e);
    b.addParam("privacy", a);
    b.addParam("newsletters", l);
    b.addParam("echourl", ms_echoURL);
    b.addParam("facebookUserID", c);
    b.addParam("callback", g);
    if (location.hostname.indexOf("edition")!=-1) {
        b.addParam("pid", "intl.default");
    }
    var f = b.getQueueItem();
    msQueueManager.addRequest(f);
}
function ms_resetUserPassword(b, a) {
    var d = new ms_QueueItem(ms_baseStandard + "passwordRecovery.api", "post");
    d.addParam("action", "sendResetPasswordCode");
    d.addParam("email", b);
    d.addParam("callback", a);
    var c = d.getQueueItem();
    msQueueManager.addRequest(c);
}
function ms_setUserPassword(e, d, c, b, a) {
    var g = new ms_QueueItem(ms_baseStandard + "passwordRecovery.api", "post");
    g.addParam("action", "changePassword");
    g.addParam("email", d);
    g.addParam("resetCode", e);
    g.addParam("password", c);
    g.addParam("confirmPassword", b);
    g.addParam("callback", a);
    var f = g.getQueueItem();
    msQueueManager.addRequest(f);
}
function ms_sendConfirmEmailAgain(b, a) {
    var d = new ms_QueueItem(ms_baseStandard + "emailConfirm.api", "post");
    d.addParam("action", "resendEmailConfirmation");
    d.addParam("email", b);
    d.addParam("callback", a);
    var c = d.getQueueItem();
    msQueueManager.addRequest(c);
}
function ms_uiDoLogout(b) {
    msQueueManager.requestReceived();
    var a = (typeof b.errors == "undefined") ? false: true;
    if (a == false) {
        window.msReload();
    } else {
        window.msReload();
    }
}
function ms_uiDoLogin(c) {
    msQueueManager.requestReceived();
    var b = (typeof c.errors == "undefined") ? false: true;
    if (b == false) {
        $("profile_overlaybg").hide();
        $("profile_signin_overlay").hide();
        var a = true;
    } else {
        cnnConnectOverlayLoginValidationError("clear");
        cnnConnectOverlayLoginValidationError("add", "Your email address or password doesn't match our records. Please try again.");
        cnnConnectOverlayLoginValidationError("show");
    }
}
function ms_uiDoRegister(b) {
    msQueueManager.requestReceived();
    var a = (typeof b.errors == "undefined") ? false: true;
    if (a == false) {
        closeOverlay("profile_signup_overlay");
        showOverlay("profile_followtopic11_overlay");
    } else {
        cnnConnectOverlayError("clearErrorText");
        generateCaptchaImage();
        for (var c = 0; c < b.errors.length; c++) {
            switch (b.errors[c]) {
            case"email address not available":
                cnnConnectOverlayRegisterError("email");
                cnnConnectOverlayError("addErrorText", "That e-mail address is already taken.<br/>");
                break;
            case"missing email address":
                cnnConnectOverlayRegisterError("email");
                cnnConnectOverlayError("addErrorText", "You forgot to enter your e-mail address.<br/>");
                break;
            case"bad email address":
                cnnConnectOverlayRegisterError("email");
                cnnConnectOverlayError("addErrorText", "You entered an invalid e-mail address.<br/>");
                break;
            case"missing password":
                cnnConnectOverlayRegisterError("password");
                cnnConnectOverlayError("addErrorText", "You forgot to enter your password.<br/>");
                break;
            case"bad password":
                cnnConnectOverlayRegisterError("password");
                cnnConnectOverlayError("addErrorText", "You entered an invalid password.<br/>");
                break;
            case"missing screen name":
                cnnConnectOverlayRegisterError("screenName");
                cnnConnectOverlayError("addErrorText", "You forgot to enter your screen name.<br/>");
                break;
            case"screen name not available":
                cnnConnectOverlayRegisterError("screenName");
                cnnConnectOverlayError("addErrorText", "That screen name is already taken. Please choose another.<br/>");
                break;
            case"missing captcha":
                cnnConnectOverlayRegisterError("captcha");
                cnnConnectOverlayError("addErrorText", "You forgot to type in the security word in the grey box.<br/>");
                break;
            case"bad captcha":
                cnnConnectOverlayRegisterError("captcha");
                cnnConnectOverlayError("addErrorText", "You entered the security word in the grey box incorrectly.<br/>");
                break;
            case"missing privacy policy":
                cnnConnectOverlayError("addErrorText", "You must agree to the privacy policy.<br/>");
                break;
            default:
                break;
            }
        }
        cnnConnectOverlayError("showErrorText");
    }
}
function ms_uiResetUserPassword(b) {
    msQueueManager.requestReceived();
    var d = "cnnConnectFormForgot";
    var e = "cnnConnectFormReset";
    var a = (typeof b.errors == "undefined") ? false: true;
    var c = "";
    if (a == false) {
        cnnConnectOverlayUpdate("forgot2reset");
    } else {
        cnnConnectOverlayForgotValidationError("clear");
        cnnConnectOverlayForgotValidationError("add", "Your e-mail address doesn't match our records. Please try again.");
        cnnConnectOverlayForgotValidationError("show");
    }
}
function ms_uiSetUserPassword(b) {
    msQueueManager.requestReceived();
    var a = (typeof b.errors == "undefined") ? false: true;
    if (a == false) {
        cnnConnectOverlayUpdate("reset2loginsuccess");
    } else {
        cnnConnectOverlayResetValidationError("clear");
        for (var c = 0; c < b.errors.length; c++) {
            switch (b.errors[c]) {
            case"missing email address":
                cnnConnectOverlayResetError("email");
                cnnConnectOverlayResetValidationError("add", "You forgot to enter your e-mail address.<br/>");
                break;
            case"profile not found":
                cnnConnectOverlayResetError("email");
                cnnConnectOverlayResetValidationError("add", "Your e-mail address or reset code doesn't match our records. Please try again.<br/>");
                break;
            case"missing new password":
                cnnConnectOverlayResetError("newPassword");
                cnnConnectOverlayResetValidationError("add", "You forgot to enter your new password.<br/>");
                break;
            case"missing confirm new password":
                cnnConnectOverlayResetError("confirmNewPassword");
                cnnConnectOverlayResetValidationError("add", "You forgot to confirm your new password.<br/>");
                break;
            case"confirm password did not match":
                cnnConnectOverlayResetError("newPassword");
                cnnConnectOverlayResetError("confirmNewPassword");
                cnnConnectOverlayResetValidationError("add", "Your passwords do not match.<br/>");
                break;
            case"reset code has expired":
                cnnConnectOverlayResetError("resetCode");
                cnnConnectOverlayResetValidationError("add", "Your reset code has expired. <a href=\"javascript: void(0);\" onclick=\"closeOverlay('profile_forgotpass2_overlay');showOverlay('profile_forgotpass_overlay');\">Send another e-mail</a> with an updated link and reset code to reset your password.<br/>");
                break;
            case"The reset code you provided has expired":
                cnnConnectOverlayResetError("resetCode");
                cnnConnectOverlayResetValidationError("add", "Your reset code has expired. <a href=\"javascript: void(0);\" onclick=\"closeOverlay('profile_forgotpass2_overlay');showOverlay('profile_forgotpass_overlay');\">Send another e-mail</a> with an updated link and reset code to reset your password.<br/>");
                break;
            default:
                cnnConnectOverlayResetError("default");
                cnnConnectOverlayResetValidationError("add", "We're sorry! This service is temporarily unavailable. Please try again soon.");
                break;
            }
        }
        cnnConnectOverlayResetValidationError("show");
    }
}
function ms_uiSendConfirmEmailAgain(b) {
    msQueueManager.requestReceived();
    var a = (typeof b.errors == "undefined") ? false: true;
    if (a == false) {} else {}
}
function cnnConnectOverlayUpdate(a) {
    switch (a) {
    case"login2forgot":
        cnnConnectOverlayResetGetEmailFromLogin();
        cnnConnectOverlayHideLogin();
        cnnConnectOverlayShowForgot();
        cnnConnectOverlayClearLogin();
        break;
    case"forgot2reset":
        cnnConnectOverlayHideForgot();
        cnnConnectOverlayGetEmailFromForgot();
        cnnConnectOverlayClearForgot();
        cnnConnectOverlayShowReset();
        break;
    case"all2login":
        cnnConnectOverlayHideForgot();
        cnnConnectOverlayHideReset();
        cnnConnectOverlayClearRegister();
        cnnConnectOverlayShowLogin();
        break;
    case"forgot2login":
        cnnConnectOverlayHideForgot();
        cnnConnectOverlayShowLogin();
        cnnConnectOverlayClearForgot();
        break;
    case"reset2login":
        cnnConnectOverlayHideReset();
        cnnConnectOverlayLoginShowText1();
        cnnConnectOverlayShowLogin();
        cnnConnectOverlayClearReset();
        break;
    case"2resetWithCode":
        cnnConnectOverlayShowResetWithPasscode("test1@test.com", "asdf");
        cnnConnectOverlayHideLogin();
        cnnConnectOverlayShowReset();
        break;
    case"forgot2resetWithoutCode":
        cnnConnectOverlayShowMsg2();
        cnnConnectOverlayHideForgot();
        cnnConnectOverlayShowReset();
        break;
    case"reset2loginsuccess":
        cnnConnectOverlayHideReset();
        cnnConnectOverlayLoginShowText2();
        cnnConnectOverlayShowLogin();
        cnnConnectOverlayClearReset();
        break;
    }
}
function cnnConnectOverlayShowOverlay() {
    $("cnnConnectOverlayBox").show();
}
function cnnConnectOverlayHideOverlay() {
    cnnConnectOverlayUpdate("all2login");
    $("cnnConnectOverlayBox").hide();
}
function cnnConnectOverlayShowLogin() {
    showOverlay("profile_signin_overlay");
}
function cnnConnectOverlayHideLogin() {
    closeOverlay("profile_signin_overlay");
}
function cnnConnectOverlayClearLogin() {
    var a = $("cnnConnectLoginErrors");
    cnnConnectOverlayLoginShowText1();
    if (a) {
        a.hide();
    }
    $("cnnConnectFormLogin").email.value = "";
    $("cnnConnectFormLogin").password.value = "";
    $("cnnConnectFormLogin").email.className = "cnnConnectFormbg5 cnn_connectoverlay_email";
    $("cnnConnectFormLogin").password.className = "cnnConnectFormbg6 cnn_connectoverlay_password";
    $("psigninp2_email").removeClassName("redtexterror");
    $("psigninp2_password").removeClassName("redtexterror");
}
function cnnConnectOverlayLoginShowText1() {}
function cnnConnectOverlayLoginShowText2() {}
function cnnConnectOverlayLoginValidationError(a, b) {
    switch (a) {
    case"clear":
        $("cnnConnectLoginErrors").hide();
        $("cnnConnectLoginErrors").innerHTML = "<br/>";
        $("cnnConnectFormLogin").email.removeClassName("redinput_error");
        $("cnnConnectFormLogin").password.removeClassName("redinput_error");
        $("psigninp2_email").removeClassName("redtexterror");
        $("psigninp2_password").removeClassName("redtexterror");
        break;
    case"add":
        $("psigninp2_email").addClassName("redtexterror");
        $("psigninp2_password").addClassName("redtexterror");
        $("cnnConnectLoginErrors").innerHTML += b;
        break;
    case"show":
        $("cnnConnectFormLogin").email.className = "redinput_error";
        $("cnnConnectFormLogin").password.className = "redinput_error";
        $("cnnConnectLoginErrors").className = "redtexterror";
        $("cnnConnectLoginErrors").show();
        break;
    }
}
function cnnConnectOverlayShowForgot() {
    showOverlay("profile_forgotpass_overlay");
}
function cnnConnectOverlayHideForgot() {
    closeOverlay("profile_forgotpass_overlay");
}
function cnnConnectOverlayClearForgot() {
    $("cnnConnectForgotErrors").hide();
    $("cnnConnectFormForgot").email.value = "";
    $("cnnConnectFormForgot").email.className = "cnnConnectFormbg5 cnn_connectoverlay_email";
}
function cnnConnectOverlayForgotShowErrors() {
    $("cnnConnectFormForgot").email.className = "cnn_connectoverlay_email cnnredtxt redinput_error";
    $("cnnConnectForgotErrors").className = "redtexterror";
    $("forgotpass_email").addClassName("redtexterror");
    $("cnnConnectForgotErrors").show();
}
function cnnConnectOverlayResetGetEmailFromLogin() {
    if ($("cnnConnectFormLogin").email.value != "") {
        $("cnnConnectFormForgot").email.value = $("cnnConnectFormLogin").email.value;
        $("cnnConnectFormForgot").email.className = "cnnConnectFormbgnone cnn_connectoverlay_email";
    }
}
function cnnConnectOverlayForgotValidationError(a, b) {
    switch (a) {
    case"clear":
        $("forgotpass_email").removeClassName("redtexterror");
        $("cnnConnectForgotErrors").hide();
        $("cnnConnectForgotErrors").innerHTML = "<br/>";
        break;
    case"add":
        $("forgotpass_email").addClassName("redtexterror");
        $("cnnConnectForgotErrors").innerHTML += b;
        break;
    case"show":
        $("cnnConnectFormForgot").email.className = "cnn_connectoverlay_email cnnredtxt redinput_error";
        $("cnnConnectForgotErrors").className = "redtexterror";
        $("forgotpass_email").addClassName("redtexterror");
        $("cnnConnectForgotErrors").show();
        break;
    }
}
function cnnConnectOverlayShowReset() {
    showOverlay("profile_forgotpass2_overlay");
}
function cnnConnectOverlayHideReset() {
    closeOverlay("profile_forgotpass2_overlay");
}
function cnnConnectOverlayClearReset() {
    cnnConnectOverlayResetValidationError("clear");
}
function cnnConnectOverlayGetEmailFromForgot() {
    var a = $("cnnConnectFormForgot").email.value;
    if ($("cnnConnectFormReset")) {
        $("cnnConnectFormReset").email.value = a;
        $("cnnConnectFormReset").email.className = "cnnblacktxt cnn_connectoverlay_email3";
    }
    showOverlay("profile_forgotpass2_overlay");
    cnnConnectOverlayShowMsg1();
}
function cnnConnectOverlayShowResetWithPasscode(a, b) {}
function cnnConnectOverlayShowMsg1() {
    showOverlay("profile_forgotpass2_overlay");
}
function cnnConnectOverlayShowMsg2() {
    showOverlay("profile_forgotpass2_overlay");
}
function cnnConnectOverlayResetValidationError(b, d) {
    var c = window.jQuery, a = c("#cnnConnectResetErrors");
    switch (b) {
    case"clear":
        (a.is(":empty")) ? "" : a.empty();
        break;
    case"add":
        $("cnnConnectResetErrors").innerHTML += d;
        break;
    case"show":
        $("cnnConnectResetErrors").className = "redtexterror";
        $("cnnConnectResetErrors").show();
        break;
    }
}
function cnnConnectOverlayResetError(a) {
    switch (a) {
    case"email":
        $("cnnConnectFormReset").email.className = "cnn_connectoverlay_email3 cnnredtxt redinput_error";
        $("new_password_email").previous("p").addClassName("redtexterror");
        break;
    case"resetCode":
        $("cnnConnectFormReset").resetCode.className = "cnn_connectoverlay_password3 cnnredtxt redinput_error";
        $("reset_code").previous("p").addClassName("redtexterror");
        break;
    case"newPassword":
        $("cnnConnectFormReset").newPassword.className = "cnn_connectoverlay_password4 cnnredtxt redinput_error";
        $("new_password").previous("p").addClassName("redtexterror");
        break;
    case"confirmNewPassword":
        $("cnnConnectFormReset").confirmNewPassword.className = "cnn_connectoverlay_password5 cnnredtxt redinput_error";
        break;
    default:
        $("new_password_email").previous("p").addClassName("redtexterror");
        $("cnnConnectFormReset").email.className = "cnn_connectoverlay_email3 cnnredtxt redinput_error";
        $("reset_code").previous("p").addClassName("redtexterror");
        $("cnnConnectFormReset").resetCode.className = "cnn_connectoverlay_password3 cnnredtxt redinput_error";
        $("new_password").previous("p").addClassName("redtexterror");
        $("cnnConnectFormReset").newPassword.className = "cnn_connectoverlay_password4 cnnredtxt redinput_error";
        break;
    }
}
function cnnConnectOverlayShowRegister() {
    $("cnnConnectResetContainer").show();
}
function cnnConnectOverlayHideRegister() {
    $("cnnConnectResetContainer").hide();
}
function cnnConnectOverlayClearRegister() {
    if ($("signup_email")) {
        $("signup_email").previous("p").removeClassName("redtexterror");
    }
    if ($("signup_password")) {
        $("signup_password").previous("p").removeClassName("redtexterror");
    }
    if ($("signup_screenname")) {
        $("signup_screenname").previous("p").removeClassName("redtexterror");
    }
    if ($("signup_kaptcha_p1")) {
        $("signup_kaptcha_p1").removeClassName("redtexterror");
    }
    generateCaptchaImage();
}
function cnnConnectOverlayError(b, a) {
    switch (b) {
    case"email":
        if ($("cnnConnectFormRegister").email.value != "") {
            $("cnnConnectFormRegister").email.className = "cnnConnectFormbgnone cnn_connectoverlay_email2 cnnredtxt redinput_error";
        }
        break;
    case"password":
        if ($("cnnConnectFormRegister").password.value != "") {
            $("cnnConnectFormRegister").password.className = "cnnConnectFormbgnone cnn_connectoverlay_password2 cnnredtxt redinput_error";
        }
        break;
    case"errorText":
        $("cnnConnectRegisterErrors").hide();
        $("cnnConnectRegisterErrors").innerHTML = a;
        $("cnnConnectRegisterErrors").className = "redtexterror";
        $("cnnConnectRegisterErrors").show();
        break;
    case"clearErrorText":
        $("cnnConnectRegisterErrors").hide();
        $("cnnConnectRegisterErrors").className = "";
        $("cnnConnectRegisterErrors").innerHTML = "";
        break;
    case"addErrorText":
        $("cnnConnectRegisterErrors").innerHTML += a;
        $("cnnConnectRegisterErrors").className = "redtexterror";
        break;
    case"showErrorText":
        $("cnnConnectRegisterErrors").className = "redtexterror";
        $("cnnConnectRegisterErrors").show();
        break;
    }
}
function cnnConnectOverlayRegisterError(a) {
    switch (a) {
    case"email":
        $("cnnConnectFormRegister").email.className = "cnnConnectFormbgnone cnn_connectoverlay_email2 cnnredtxt redinput_error";
        $("signup_email").previous("p").addClassName("redtexterror");
        break;
    case"password":
        $("cnnConnectFormRegister").password.className = "cnnConnectFormbgnone cnn_connectoverlay_password2 cnnredtxt redinput_error";
        $("signup_password").previous("p").addClassName("redtexterror");
        break;
    case"screenName":
        $("cnnConnectFormRegister").displayname.className = "cnnConnectFormbgnone cnn_connectoverlay_screenname cnnredtxt redinput_error";
        $("signup_displayname").previous("p").addClassName("redtexterror");
        break;
    case"captcha":
        if ($("cnnConnectFormRegister").captcha) {
            $("cnnConnectFormRegister").captcha.className = "cnnConnectFormbgnone cnn_connectoverlay_enterit cnnredtxt redinput_error";
        }
        $("signup_kaptcha_p1").addClassName("redtexterror");
        $("cnnConnectRegisterErrors").className = "redtexterror";
        break;
    }
}
function getRandomId() {
    var a = Math.round(Math.random() * 9999999999);
    return a;
}
function generateCaptchaImage() {
    var a = getRandomId();
    $("cnnConnectCaptchaImage");
    $("cnnConnectCaptchaImage").src = ms_baseStandard + "kaptcha?challenge_id=" + a;
    $("cnnConnectCaptchaImage").width = "200";
    $("cnnConnectCaptchaImage").height = "50";
}
function showToggleOverlay() {
    var a = "cnnConnectOverlayBox";
    if ($(a).style.display == "none") {
        $(a).style.display = "block";
        centerDivOfPage("cnnConnectOverlayBox");
        cnnConnectOverlayClearLogin();
    } else {
        $(a).style.display = "none";
    }
}
function checkUrlForParams() {
    if (location.href.indexOf("code=")!=-1) {
        var a = location.href.toQueryParams();
        CNN_handleOverlay("profile_forgotpass2_overlay");
    } else {
        if (location.href.indexOf("emailConfirmed=success")>-1) {
            showOverlayMessage(1);
        } else {
            if (location.href.indexOf("emailConfirmed=error")>-1) {
                showOverlayMessage(2);
            }
        }
    }
}
function showOverlayMessage(a) {
    if (a == "hide") {
        $("cnnConnectMessageContent").innerHTML = "";
        $("cnnConnectMessageContainer").style.display = "none";
    } else {
        var b = [];
        if (typeof(msStorage.profile) == "undefined") {
            b[0] = "<h1>Thanks! You are a CNN.com member</h1>";
        } else {
            if (msStorage.profile.firstName != "") {
                b[0] = '<h1>Thanks, <span id="cnnConnectThankYouName">' + msStorage.profile.firstName + "</span>! You are a CNN.com member</h1>";
            } else {
                if (msStorage.profile.screenName != "") {
                    b[0] = '<h1>Thanks, <span id="cnnConnectThankYouName">' + msStorage.profile.screenName + "</span>! You are a CNN.com member</h1>";
                } else {
                    b[0] = "<h1>Thanks! You are a CNN.com member</h1>";
                }
            }
        }
        b[0] += '<p class="connectptxt3">You are ready to participate in all activities and conversations on this site. Enjoy!</p>';
        b[0] += '<p class="connectptxt4"><div class="cnnConnectReturnLink" onclick="window.msReload();">Go to Your Profile Page</div></p>';
        b[1] = "<h1>Thank you for confirming your email address.</h1>";
        b[1] += '<p class="connectptxt3">You are ready to participate in all activities and conversations on this site. Enjoy!</p>';
        if (ms_isLoggedIn() == true) {
            b[1] += '<p class="connectptxt4"><div class="cnnConnectReturnLink" onclick="window.msReload();">Go to Your Profile Page</div></p>';
        }
        b[2] = "<h1>There was an error confirming your e-mail address.</h1>";
        if (ms_isLoggedIn() == true) {
            b[2] += '<p class="connectptxt3">In order to correct this problem, please resend your confirmation e-mail by <a href="javascript:void(0);" onclick="showOverlayMessage(\'hide\');showToggleProfile();">going to Your Profile Page</a>.';
        } else {
            b[2] += '<p class="connectptxt3">In order to correct this problem, please resend your confirmation e-mail by logging in and then going to edit my details.';
        }
        $("cnnConnectMessageContainer").style.display = "block";
        $("cnnConnectMessageContent").innerHTML = b[a];
        centerDivOfPage("cnnConnectMessageContainer");
    }
}
function disqusConnectStatus(e) {
    var d = window.location.href;
    var c = window.location.hash.length;
    var a = d.length - c;
    if (c > 0) {
        var b = d.substr(0, a);
        window.location.href = b;
    }
    if (e === false) {
        window.msReload();
    } else {
        window.msReload();
    }
}
function closeOverlay(a) {
    $("profile_overlaybg").hide();
    $(a).hide();
}
function showOverlay(g) {
    var b = document.viewport.getHeight();
    var d = document.viewport.getWidth();
    var f = Math.max(document.documentElement["clientHeight"], document.body["scrollHeight"], document.documentElement["scrollHeight"], document.body["offsetHeight"], document.documentElement["offsetHeight"]);
    var c = Math.max(document.documentElement["clientWidth"], document.body["scrollWidth"], document.documentElement["scrollWidth"], document.body["offsetWidth"], document.documentElement["offsetWidth"]);
    var e = (f > b) ? f: b;
    var a = (c > d) ? c: d;
    switch (g) {
    case"profile_signup_overlay":
        generateCaptchaImage();
        break;
    default:
    }
    if (g == "profile_signin_overlay") {
        clearInputErrors();
    }
    $("profile_overlaybg").setStyle({
        width: a + "px",
        height: e + "px"
    });
    $("profile_overlaybg").show();
    $(g).show();
    centerDivOfPage(g);
    globalDiv = g;
    Event.observe(window, "resize", function() {
        centerDivOfPage(globalDiv);
    });
}
function showOrHide(a) {
    $(a).toggleClassName("displayon");
}
function hideDiv(a) {
    $(a).hide();
}
function getScrollOffset() {
    var b = 0, a = 0;
    if (typeof(window.pageYOffset) == "number") {
        a = window.pageYOffset;
        b = window.pageXOffset;
    } else {
        if (document.body && (document.body.scrollLeft || document.body.scrollTop)) {
            a = document.body.scrollTop;
            b = document.body.scrollLeft;
        } else {
            if (document.documentElement && (document.documentElement.scrollLeft || document.documentElement.scrollTop)) {
                a = document.documentElement.scrollTop;
                b = document.documentElement.scrollLeft;
            }
        }
    }
    return [b, a];
}
function centerDivOfPage(k) {
    var e = getScrollOffset();
    var a = $(k).getWidth();
    var c = $(k).getHeight();
    var m = document.viewport.getHeight();
    var b = document.viewport.getWidth();
    var n = Math.max(document.documentElement["clientHeight"], document.body["scrollHeight"], document.documentElement["scrollHeight"], document.body["offsetHeight"], document.documentElement["offsetHeight"]);
    var d = Math.max(document.documentElement["clientWidth"], document.body["scrollWidth"], document.documentElement["scrollWidth"], document.body["offsetWidth"], document.documentElement["offsetWidth"]);
    var o = (n > m) ? n: m;
    var g = (d > b) ? d: b;
    $("profile_overlaybg").setStyle({
        width: g + "px",
        height: o + "px"
    });
    var h = e[1];
    var l = Math.floor((b / 2) - (a / 2));
    var f = Math.floor((h + (m / 2)) - (c / 2));
    if ((f + c) > n) {
        f = ((n - c) - 100);
    }
    f = (f <= 110) ? 110 : f;
    l = (f <= 9) ? 10 : l;
    $(k).style.top = f + "px";
    $(k).style.left = l + "px";
}
function stringTrim(a) {
    return (a.replace(/^\s+|\s+$/g, ""));
}
function submitenter(c, b) {
    var a;
    if (window.event) {
        a = window.event.keyCode;
    } else {
        if (b) {
            a = b.which;
        } else {
            return true;
        }
    }
    if (a == 13) {
        $("cnnConnectFormLogin").email.value = stringTrim($("cnnConnectFormLogin").email.value);
        cnn_formConnectLogin("cnnConnectFormLogin");
        return false;
    } else {
        return true;
    }
}
function cnnUpdateFBLogin() {
    var a = " ";
    if (Member.isLoggedIn("facebook")&&!Member.isConnected()&&!Member.isLoggedIn("cnn")) {
        a = '<a href="javascript:FB.login();" title="Connect your Facebook account to CNN">Connect your Facebook account to CNN</a>';
    } else {
        if (!Member.isConnected()) {
            a = '<a href="javascript:CNN_handleOverlay(\'fb_profile_signin_init_overlay\');" title="Connect your CNN &amp; Facebook accounts">Connect your CNN &amp; Facebook accounts</a>';
        } else {
            if ((Member.isLoggedIn("cnn")&&!Member.isLoggedIn("facebook")) || (Member.isLoggedIn("facebook")&&!Member.isLoggedIn("cnn"))&&!Member.isConnected()) {
                a = '<a href="javascript:CNN_handleOverlay(\'fb_profile_signin_init_overlay\');" title="Log in with Facebook">Log in with Facebook</a>';
            }
        }
    }
    $("fbLoginOptions").update(a);
}
var allCookies = CNN_getCookies();
function CNN_updateHeaderOptions() {
    var d = document.location.host;
    if (d.indexOf("ireport")>-1) {
        d = "www.cnn.com";
    }
    var c = d.split(".");
    if (c[0] == "newspulse") {
        c.splice(0, 1);
    }
    d = c.join(".");
    var e = $("hdr-auth");
    if (e) {
        if (Member.isLoggedIn("cnn") || (Member.isLoggedIn("facebook") && Member.isConnected())) {
            if ($("user_avatar")) {
                if ((Member.isConnected() && CNN_FB_user.avatar === "fb") || (Member.isConnected()&&!Member.isLoggedIn("cnn"))) {
                    if (!$("fbAvatar")) {
                        var g = new Element("div", {
                            id: "fbAvatar"
                        });
                        $("user_avatar").appendChild(g);
                    }
                }
            }
            var a = (Member.isLoggedIn("facebook") && Member.isConnected()) ? CNN_FB_user.accounts[CNN_FB_user.namePref].displayName: CNN_FB_user.accounts.cnn.displayName;
            if (Member.isLoggedIn("facebook") && Member.isConnected() && Member.isLoggedIn("cnn")) {
                a = CNN_FB_user.accounts[CNN_FB_user.namePref].displayName;
            } else {
                if (Member.isLoggedIn("facebook") && Member.isConnected()&&!Member.isLoggedIn("cnn")) {
                    a = CNN_FB_user.accounts.fb.displayName;
                } else {
                    a = (CNN_FB_user.accounts[CNN_FB_user.namePref].displayName != "") ? CNN_FB_user.accounts[CNN_FB_user.namePref].displayName : CNN_FB_user.accounts.cnn.displayName;
                }
            }
            if (a == "") {
                return;
            }
            var b = "<ul>";
            var f = "";
            b += '<li><a href="http://' + d + '/profile/" title="">' + a + "'s profile</a></li>";
            b += '<li class="no-border no-pad-right"><a href="javascript:Member.fullLogout();" title="">Log out</a></li>';
            b += "</ul>";
            $("hdr-auth").innerHTML = b;
        } else {
            var b = "<ul>";
            b += '<li><a href="javascript:CNN_handleOverlay(\'profile_signup_overlay\');" title="">Sign up</a></li>';
            b += '<li class="no-border no-pad-right"><a href="javascript:CNN_handleOverlay(\'profile_signin_overlay\');" title="">Log in</a></li>';
            b += "</ul>";
            $("hdr-auth").innerHTML = b;
        }
        if ($("displayname")) {
            if (Member.isLoggedIn("facebook")&&!Member.isLoggedIn("cnn")) {
                if (Member.isConnected()) {
                    $("displayname").update(a);
                } else {
                    $("displayname").update("Hi!");
                }
                $("cnnLoginOptions").update('<a href="javascript:CNN_handleOverlay(\'profile_signin_overlay\');" title="Log in">Log in</a>&nbsp;or&nbsp;<a href="javascript:CNN_handleOverlay(\'profile_signup_overlay\');" title="sign up">sign up</a> with CNN to get personalized features such as breaking news alerts and newsletters.');
                $("user_profile").select(".welcome_details")[0].hide();
                $("user_profile").select(".user_details_box")[0].style.display = "block";
            }
            cnnUpdateFBLogin();
        }
    } else {}
}
function onUserInfoLoadComplete(a) {}
Event.observe(window, "load", function() {
    if ($("cnnConnectFormForgot")) {
        $("cnnConnectFormForgot").observe("keyup", function(a) {
            if (a.keyCode == Event.KEY_RETURN) {
                ms_formResetUserPassword("cnnConnectFormForgot");
                Event.stop(a);
            }
        });
    }
    if ($("cnnConnectFormReset")) {
        $("cnnConnectFormReset").observe("keyup", function(a) {
            if (a.keyCode == Event.KEY_RETURN) {
                ms_formSetUserPassword("cnnConnectFormReset");
                Event.stop(a);
            }
        });
    }
    if ($("cnnConnectFormRegister")) {
        $("cnnConnectFormRegister").observe("keyup", function(a) {
            if (a.keyCode == Event.KEY_RETURN) {
                ms_formRegister("cnnConnectFormRegister");
                Event.stop(a);
            }
        });
    }
    if ($("cnnConnectFormLogin")) {
        $("cnnConnectFormLogin").observe("keyup", function(a) {
            if (a.keyCode == Event.KEY_RETURN) {
                $("cnnConnectFormLogin").email.value = stringTrim($("cnnConnectFormLogin").email.value);
                cnn_formConnectLogin("cnnConnectFormLogin");
                Event.stop(a);
            }
        });
    }
    if ($("cnnConnectFormScreenname")) {
        $("cnnConnectFormScreenname").observe("keyup", function(a) {
            if (a.keyCode == Event.KEY_RETURN) {
                ms_formEnterScreenname("cnnConnectFormScreenname");
                Event.stop(a);
            }
        });
    }
});
Ajax.JSONRequest = Class.create(Ajax.Base, (function() {
    var b = 0, a = document.getElementsByTagName("head")[0];
    return {
        initialize: function($super, d, c) {
            $super(c);
            this.options.url = d;
            this.options.callbackParamName = this.options.callbackParamName || "callback";
            this.options.timeout = this.options.timeout || 3;
            this.options.invokeImmediately = (!Object.isUndefined(this.options.invokeImmediately)) ? this.options.invokeImmediately : true;
            if (this.options.invokeImmediately) {
                this.request();
            }
        },
        _cleanup: function() {
            if (this.timeout) {
                clearTimeout(this.timeout);
                this.timeout = null;
            }
            if (this.transport && Object.isElement(this.transport)) {
                this.transport.remove();
            }
        },
        request: function() {
            var d = new Ajax.JSONResponse(this);
            var g = this.options.callbackParamName, f = "_prototypeJSONPCallback_" + (b++), c = function() {
                if (Object.isFunction(this.options.onComplete)) {
                    this.options.onComplete.call(this, d);
                }
            }.bind(this);
            this.options.params[g] = f;
            var e = this.options.url + ((this.options.url.include("?") ? "&" : "?") + Object.toQueryString(this.options.params));
            window[f] = function(h) {
                this._cleanup();
                window[f] = undefined;
                if (h.status == "error" && Object.isFunction(this.options.onError)) {
                    d.status = 200;
                    d.statusText = "ERROR";
                    d.setResponseContent(h);
                    this.options.onError.call(this, d);
                } else {
                    if (Object.isFunction(this.options.onSuccess)) {
                        d.status = 200;
                        d.statusText = "OK";
                        d.setResponseContent(h);
                        this.options.onSuccess.call(this, d);
                    }
                }
                c();
            }.bind(this);
            this.transport = new Element("script", {
                type: "text/javascript",
                src: e
            });
            if (Object.isFunction(this.options.onCreate)) {
                this.options.onCreate.call(this, d);
            }
            a.appendChild(this.transport);
            this.timeout = setTimeout(function() {
                this._cleanup();
                window[f] = Prototype.emptyFunction;
                if (Object.isFunction(this.options.onFailure)) {
                    d.status = 504;
                    d.statusText = "Gateway Timeout";
                    this.options.onFailure.call(this, d);
                }
                c();
            }.bind(this), this.options.timeout * 1000);
        },
        toString: function() {
            return "[object Ajax.JSONRequest]";
        }
    };
})());
Ajax.JSONResponse = Class.create({
    initialize: function(a) {
        this.request = a;
    },
    request: undefined,
    status: 0,
    statusText: "",
    responseJSON: undefined,
    responseText: undefined,
    setResponseContent: function(a) {
        this.responseJSON = a;
        this.responseText = Object.toJSON(a);
    },
    getTransport: function() {
        if (this.request) {
            return this.request.transport;
        }
    },
    toString: function() {
        return "[object Ajax.JSONResponse]";
    }
});
var ms_isLoggedIn = function() {
    var a = allCookies["authid"] || null;
    if (a == null) {
        return false;
    } else {
        return true;
    }
};
if (!ms_isLoggedIn && allCookies["CNN_memberID"]) {
    CNN_removeCookie("CNN_memberID", "/", document.domain);
}
var CNN_FB_user = (ms_isLoggedIn && allCookies["CNN_memberID"]) ? allCookies["CNN_memberID"].evalJSON(true): {
    accounts: {
        cnn: {
            displayName: allCookies["displayname"] || ""
        },
        fb: {
            displayName: ""
        }
    },
    namePref: "cnn",
    avatar: "cnn",
    prefs: false
};
var CNN_FB_data = {
    cnn: {
        "loginStatus": false
    },
    fb: {
        "loginStatus": false,
        "connectedStatus": false
    }
};
var CNN_IsFBInit = false;
var CNN_IsMemInit = false;
var CNN_memberInit = true;
var $j = window.jQuery;
$j(window).load(function() {
    if (navigator.userAgent.toLowerCase().indexOf("msie 6")==-1) {
        Member.init();
        CNN_updateHeaderOptions();
        if ($j("#loading_overlay")) {
            if (is_loadedOvly === 0) {
                $j("#profile_overlaybg").hide();
                $j("#loading_overlay").hide();
                is_loadedOvly = 1;
                checkUrlForParams();
            }
        } else {
            if ($("hdr-auth")) {
                $("hdr-auth").hide();
            }
            if ($("pmUserPanel")) {
                $("pmUserPanel").hide();
            }
            if ($("pmFacebookTab")) {
                var a = CSIManager.getInstance();
                var b = {
                    url: "/.element/ssi/auto/3.0/sect/MAIN/facebook_rec.wrapper.html",
                    args: "",
                    domId: "pmFacebookTab",
                    funcObj: false,
                    breakCache: false
                };
                CSIManager.getInstance().callObject(b);
            }
        }
    }
});
var Member = function() {
    var b;
    var n = "CNN_memberAccnts_dev";
    var q = "CNN_member_dev";
    var k = "CNN_memberExpires_dev";
    var o = false;
    var d = "http://audience.cnn.com/services/cnn/flow/";
    var p = "http://audience.cnn.com/services/cnn/";
    var g = (window.location.href.indexOf("?")>-1) ? window.location.href.substr(0, window.location.href.indexOf("?")): window.location.href;
    var a = false;
    var l = function() {
        var u = new Array;
        if (document.cookie) {
            var t = document.cookie.split("; ");
            for (var s = 0; s < t.length; s++) {
                var r = t[s].split("=");
                u[r[0]] = unescape(r[1]) || null;
            }
        }
        return u;
    };
    var f = function(t) {
        var s = l();
        t.params.format = t.format || "jsonp";
        t.params = t.params || {};
        var r = d;
        if (t.legacy) {
            r = p + t.legacy;
        } else {
            r += t.flow;
        }
        new Ajax.JSONRequest(r, t);
    };
    var e = function(v, w) {
        var r = {};
        r.params = {};
        var v = typeof(v) != "undefined" ? v: r;
        var s = w.requiredParams || [];
        var t = 0;
        for (i = 0; i < s.length; i++) {
            if (!v.params[s[i]] && (v.params[s[i]] != "")) {
                var u = "The api call is missing the required parameter: " + s[i];
                throw u;
            } else {
                t++;
            }
        }
        if (t == s.length) {
            if (w.legacy) {
                v.legacy = w.legacy;
            } else {
                v.flow = w.flow;
            }
            v.params.action = w.action;
            return v;
        } else {
            return false;
        }
    };
    var c = "Error in api method: ";
    var m = function(r) {
        throw r;
    };
    var h = {
        init: function() {
            if (!CNN_memberInit) {}
            CNN_memberInit = false;
            CNN_IsMemInit = true;
            if (CNN_IsMemInit && CNN_IsFBInit) {
                if (typeof(cnn_memfbini) === "function") {
                    cnn_memfbini();
                }
            }
            window.fbAsyncInit = function() {
                FB.init({
                    appId: "80401312489",
                    status: true,
                    cookie: true,
                    xfbml: false,
                    oauth: true
                });
                var y = true;
                if (($("cnnStryRcmndBtn") || $("cnnStryRcmndBtnBtm")) && y) {
                    var v = "";
                    var t = $("cnnStryRcmndBtn");
                    var w = $("cnnStryRcmndBtnBtm");
                    var z = document.getElementsByTagName("link");
                    for (var u = 0; u < z.length; u++) {
                        if (z[u].rel == "canonical") {
                            v = z[u].href;
                        }
                    }
                    if (v == "") {
                        v = "http://www.cnn.com" + location.pathname;
                    }
                    if (t && t.innerHTML == "") {
                        if (Member.hasDisconnected()) {
                            $("cnnStryRcmndBtn").update('<fb:like action="recommend" show_faces="false" layout="button_count" href="' + v + '" width="336"></fb:like>');
                            $("cnnStryRcmndBtn").style.width = "260px";
                        } else {
                            $("cnnStryRcmndBtn").update('<fb:like action="recommend" show_faces="true" layout="standard" href="' + v + '" width="336"></fb:like>');
                        }
                        FB.XFBML.parse(t);
                    }
                    if (w && w.innerHTML == "") {
                        if (Member.hasDisconnected()) {
                            $("cnnStryRcmndBtnBtm").update('<fb:like action="recommend" width="420" show_faces="false" layout="button_count" href="' + v + '"></fb:like>');
                        } else {
                            $("cnnStryRcmndBtnBtm").update('<fb:like action="recommend" width="420" show_faces="true" layout="standard" href="' + v + '"></fb:like>');
                        }
                        FB.XFBML.parse(w);
                    }
                    FB.Event.subscribe("edge.create", function(A, B) {});
                    y = false;
                }
                var s = null;
                FB.getLoginStatus(function(A) {
                    s = 1;
                    Member.setFBStatus(A);
                    CNN_IsFBInit = true;
                    if (Member.isLoggedIn("cnn") && allCookies["CNN_memberID"]) {
                        CNN_FB_user = allCookies["CNN_memberID"].evalJSON(true);
                    } else {
                        if (allCookies["CNN_memberID"]&&!Member.isLoggedIn("cnn")) {
                            Member.removeIDCookie();
                        }
                    }
                    if (Member.isConnected()&&!(Member.isLoggedIn("cnn"))) {
                        FB.api({
                            method: "fql.query",
                            query: "SELECT name, pic_square FROM user WHERE uid=" + FB.getAuthResponse().userID
                        }, function(C) {
                            var B = C[0];
                            Member.setUserDataFB(B, FB.getAuthResponse().userID);
                        });
                    }
                    if (CNN_IsMemInit && CNN_IsFBInit) {
                        if (typeof(cnn_memfbini) === "function") {
                            cnn_memfbini();
                        }
                    }
                }, true);
                FB.Event.subscribe("auth.login", Member.setFBStatus);
                FB.Event.subscribe("auth.logout", Member.setFBStatus);
            };
            if (typeof FB !== "undefined") {
                try {
                    fbAsyncInit();
                } catch (r) {}
            }(function() {
                var v = document.getElementsByTagName("body")[0];
                var t = document.createElement("div");
                t.setAttribute("id", "fb-root");
                var u = document.createElement("div");
                u.setAttribute("id", "cnn_mOvrlycntr");
                v.insertBefore(t, v.firstChild);
                v.insertBefore(u, v.firstChild);
                var s = document.createElement("script");
                s.setAttribute("type", "text/javascript");
                s.setAttribute("src", "http://connect.facebook.net/en_US/all.js");
                s.setAttribute("async", "true");
                document.getElementsByTagName("head")[0].appendChild(s);
                $j(document).ready(function() {
                    if (typeof FB !== "undefined") {
                        try {
                            window.fbAsyncInit();
                        } catch (w) {}
                    }
                });
            }());
        },
        setRememberMe: function(r) {
            a = r;
        },
        getRememberMe: function() {
            return a;
        },
        setFBStatus: function(r) {
            switch (r.status) {
            case"connected":
                CNN_FB_data.fb.loginStatus = true;
                CNN_FB_data.fb.connectedStatus = true;
                break;
            case"notConnected":
                CNN_FB_data.fb.loginStatus = true;
                CNN_FB_data.fb.connectedStatus = false;
                break;
            default:
                CNN_FB_data.fb.loginStatus = false;
                CNN_FB_data.fb.connectedStatus = false;
            }
            if (ms_isLoggedIn() === true) {
                CNN_FB_data.cnn.loginStatus = true;
            }
            if (typeof MainLocalObj !== "undefined" && typeof MainLocalObj.showIdentity === "function") {
                MainLocalObj.showIdentity();
            } else {
                CNN_updateHeaderOptions();
            }
        },
        clearStoredDataAll: function() {
            Member.removeIDCookie();
        },
        clearStoredDataIdentities: function() {
            Member.removeIDCookie();
        },
        clearStoredPrefs: function() {
            Member.removeIDCookie();
        },
        removeIDCookie: function() {
            CNN_removeCookie("CNN_memberID", "/", document.domain);
        },
        getReturnURL: function() {
            return g;
        },
        setReturnURL: function(r) {
            g = r;
        },
        setUserDataFB: function(s, t, r) {
            CNN_FB_user.accounts.fb.displayName = s.name;
            CNN_updateHeaderOptions();
            CNN_setCookie("CNN_memberID", Object.toJSON(CNN_FB_user), 854400, "/", document.domain);
            if (r) {
                if (!CNN_FB_user.prefs) {
                    CNN_handleOverlay("fb_choose_identity_overlay");
                } else {
                    location.reload();
                }
            }
        },
        setUserDataCNN: function(s, r) {
            CNN_setCookie("displayname", s.profile.screenName, 854400, "/", document.domain);
            CNN_FB_user.accounts.cnn.displayName = s.profile.screenName;
            CNN_FB_user.accounts.fb.displayName = s.profile.fb_userName;
            CNN_FB_user.prefs = s.profile.prefChosen;
            CNN_FB_user.namePref = s.profile.id_pref;
            CNN_FB_user.avatar = s.profile.avatar_pref;
            CNN_setCookie("CNN_memberID", Object.toJSON(CNN_FB_user), 854400, "/", document.domain);
            if (r || (Member.isConnected() && Member.isLoggedIn("cnn") && CNN_FB_user.prefs == "false")) {
                CNN_handleOverlay("fb_choose_identity_overlay");
            } else {
                Member.executeCookieCopy();
            }
        },
        setUserAvatarPref: function(r) {
            CNN_FB_user.avatar = r;
            CNN_setCookie("CNN_memberID", Object.toJSON(CNN_FB_user), 854400, "/", document.domain);
        },
        setUserNamePref: function(r) {
            CNN_FB_user.prefs = true;
            CNN_FB_user.namePref = r;
            CNN_setCookie("CNN_memberID", Object.toJSON(CNN_FB_user), 854400, "/", document.domain);
        },
        setDisconnectPrefs: function() {
            CNN_FB_user.prefs = false;
            CNN_FB_user.namePref = "cnn";
            for (var r in CNN_FB_user.accounts.fb) {
                CNN_FB_user.accounts.fb[r] = "";
            }
            CNN_setCookie("profile.lastNewsID", "fbfriends", 24 * 30 * 12, "/", document.domain);
            CNN_setCookie("CNN_memberID", Object.toJSON(CNN_FB_user), 854400, "/", document.domain);
            if (Member.isLoggedIn("cnn")) {
                Member.cnnDisconnectFB();
            } else {
                CNN_setCookie("cnnfb.hasDisconnected", 1, 24 * 30 * 12, "/", document.domain);
                window.location.reload();
            }
        },
        setActivityFlag: function() {
            if (Member.hasDisconnected()) {
                CNN_setCookie("cnnfb.hasDisconnected", 0, 24 * 30 * 12, "/", document.domain);
                window.location.reload();
            } else {
                CNN_handleOverlay("fb_turn_off_overlay");
                CNN_setCookie("cnnfb.hasDisconnected", 1, 24 * 30 * 12, "/", document.domain);
            }
        },
        getProfile: function(t) {
            var s = (t) ? true: false;
            var r = {
                params: {
                    "format": "jsonp"
                },
                onSuccess: function(u) {
                    var v = u.responseJSON;
                    if (v && v.errors) {} else {
                        if (v && v.status == "success") {
                            Member.setUserDataCNN(u.responseJSON, s);
                        }
                    }
                }
            };
            Member.getID(r);
        },
        getProfileJSON: function(s) {
            var t = {
                flow: "cnn-user-api",
                action: "getProfileJSON",
                requiredParams: []
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in getProfileJSON method");
        },
        updateProfile: function(s) {
            var t = {
                flow: "cnn-user-api",
                action: "updateProfile",
                requiredParams: []
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in updateProfile method");
        },
        getID: function(s) {
            var t = {
                flow: "cnn-user-api",
                action: "getID",
                requiredParams: []
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in updateProfile method");
        },
        getData: function(s) {
            var t = {
                flow: "cnn-user-api",
                action: "getData",
                requiredParams: ["name"]
            };
            var r = e(s, t);
            (r) ? f(r) : m(c + arguments.callee);
            return r;
        },
        setData: function(s) {
            var t = {
                flow: "cnn-user-api",
                action: "setData",
                requiredParams: ["name", "data"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in setData method");
        },
        appendData: function(s) {
            var t = {
                flow: "cnn-user-api",
                action: "appendData",
                requiredParams: ["name", "data"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in appendData method");
        },
        prependData: function(s) {
            var t = {
                flow: "cnn-user-api",
                action: "prependData",
                requiredParams: ["name", "data"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in prependData method");
        },
        getEmails: function(s) {
            var t = {
                flow: "cnn-user-api",
                action: "getEmails",
                requiredParams: []
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in getEmails method");
        },
        deleteEmail: function(s) {
            var t = {
                flow: "cnn-user-api",
                action: "setData",
                requiredParams: ["email"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in deleteEmail method");
        },
        changePrimaryEmail: function(s) {
            var t = {
                flow: "cnn-user-api",
                action: "changePrimaryEmail",
                requiredParams: ["email"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in changePrimaryEmail method");
        },
        addEmail: function(s) {
            var t = {
                flow: "cnn-user-api",
                action: "addEmail",
                requiredParams: ["email"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in api method");
        },
        sendResetPasswordCode: function(s) {
            var t = {
                flow: "cnn-passwordRecovery-api",
                action: "sendResetPasswordCode",
                requiredParams: ["email"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in api method");
        },
        changePassword: function(s) {
            var t = {
                flow: "cnn-passwordRecovery-api",
                action: "changePassword",
                requiredParams: ["email", "resetCode", "password"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in api method");
        },
        getNewsletter: function(s) {
            var t = {
                flow: "cnn-newsletter-api",
                action: "getNewsletter",
                requiredParams: ["name"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in api method");
        },
        getNewsletters: function(s) {
            var t = {
                flow: "cnn-newsletter-api",
                action: "getNewsletters",
                requiredParams: []
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in api method");
        },
        removeNewsletter: function(s) {
            var t = {
                flow: "cnn-newsletter-api",
                action: "removeNewsletter",
                requiredParams: ["email", "newsletter"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in api method");
        },
        addNewsletter: function(s) {
            var t = {
                flow: "cnn-newsletter-api",
                action: "addNewsletter",
                requiredParams: ["email", "newsletter"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in api method");
        },
        getActiveAndPendingNewsletters: function(s) {
            var t = {
                flow: "cnn-newsletter-api",
                action: "getActiveAndPendingNewsletters",
                requiredParams: []
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in api method");
        },
        getAlerts: function(s) {
            var t = {
                flow: "cnn-alert-api",
                action: "getAlerts",
                requiredParams: []
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in method");
        },
        removeAlerts: function(s) {
            var t = {
                flow: "cnn-alert-api",
                action: "removeAlerts",
                requiredParams: ["alertId"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in method");
        },
        getAlert: function(s) {
            var t = {
                flow: "cnn-alert-api",
                action: "getAlert",
                requiredParams: ["alertId"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in method");
        },
        addAlert: function(s) {
            var t = {
                flow: "cnn-alert-api",
                action: "addAlert",
                requiredParams: ["email", "name", "include", "exclude", "format", "frequency"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in method");
        },
        suspendAlerts: function(s) {
            var t = {
                flow: "cnn-alert-api",
                action: "suspendAlerts",
                requiredParams: ["alertId"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in method");
        },
        updateAlert: function(s) {
            var t = {
                flow: "cnn-alert-api",
                action: "updateAlert",
                requiredParams: ["email", "name", "include", "exclude", "format", "frequency"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in method");
        },
        activateAlerts: function(s) {
            var t = {
                flow: "cnn-alert-api",
                action: "activateAlerts",
                requiredParams: ["alertId"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in method");
        },
        fb_login: function(u) {
            var s = CSIManager.getInstance();
            var r = Object.toQueryString(u) + "&callback=Member.loginCallbackFB";
            var t = {
                url: d + "facebook-link-external-account-on-login",
                args: r,
                domId: false,
                breakCache: true
            };
            s.callObject(t);
        },
        register: function(t) {
            var r = CSIManager.getInstance();
            var s = {
                url: p + "register.api",
                args: t,
                domId: false,
                breakCache: true
            };
            r.callObject(s);
        },
        fb_register: function(t) {
            var r = CSIManager.getInstance();
            var s = {
                url: d + "fb-register-api",
                args: t,
                domId: false,
                breakCache: true
            };
            r.callObject(s);
        },
        fullLogout: function() {
            if (Member.isLoggedIn("facebook") && Member.isConnected()) {
                CNN_handleOverlay("fb_signedout_overlay");
            } else {
                Member.executeFullLogout();
            }
        },
        executeFullLogout: function() {
            if (Member.isLoggedIn("facebook") && Member.isConnected()) {
                FB.logout(function(r) {
                    Member.clearStoredDataIdentities("all");
                    if (Member.isLoggedIn("cnn")) {
                        Member.logout();
                    }
                });
            } else {
                if (Member.isLoggedIn("cnn")) {
                    Member.logout();
                }
            }
        },
        isConnected: function() {
            return CNN_FB_data.fb.connectedStatus;
        },
        logout: function() {
            var r = CSIManager.getInstance();
            var s = {
                url: d + "cnn-logout-api",
                args: "callback=Member.logoutCallback&doSso=false",
                domId: false,
                breakCache: true
            };
            r.callObject(s);
        },
        logoutCallback: function(r) {
            Member.clearStoredDataIdentities("all");
            Member.executeCookieCopy(true);
        },
        facebookLinkExternalAccountOnLogin: function(s) {
            var t = {
                flow: "facebook-link-external-account-on-login",
                action: "",
                requiredParams: ["facebookUserId", "principalType"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in method");
        },
        facebookLinkExternalAccountLoggedIn: function(s) {
            var t = {
                flow: "facebook-link-external-account-loggedin",
                action: "",
                requiredParams: ["facebookUserId", "principalType"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in method");
        },
        facebookLinkExternalAccount: function(s) {
            var t = {
                flow: "facebook-link-external-account",
                action: "",
                requiredParams: ["facebookUserId", "principalType"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in method");
        },
        fbConnect: function(s) {
            var t = {
                flow: "fb-connect",
                action: "",
                requiredParams: ["facebookUserId"]
            };
            var r = e(s, t);
            (r) ? f(r) : m("error in method");
        },
        connectAppOnly: function(r) {
            location.reload();
        },
        facebookDiscAccount: function(r) {
            FB.api({
                method: "auth.revokeAuthorization",
                uid: FB.getAuthResponse().userID
            }, function(s) {
                Member.setDisconnectPrefs("cnn");
            });
        },
        cnnDisconnectFB: function() {
            var t = CSIManager.getInstance();
            if (CNN_FB_user.avatar === "fb") {
                function s(v) {
                    var w = v;
                    if (w.contentWindow) {
                        w = w.contentWindow;
                    }
                    if (w.contentDocument) {
                        w = w.contentDocument;
                    }
                    if (w.document) {
                        w = w.document;
                    }
                    return w;
                }
                var u = s($("avatarRemoveFrame")).getElementById("uploadForm");
                u.submit();
            }
            var r = {
                params: {
                    "avatarPref": "cnn",
                    "idPref": "cnn",
                    "fbName": "",
                    "prefChosen": false
                },
                onSuccess: function(v) {
                    var w = v.responseJSON;
                    if (w && w.errors) {} else {
                        if (w && w.status == "success") {
                            var y = {
                                url: d + "ma-remove",
                                args: "authorityTypeToRemove=3",
                                domId: false,
                                breakCache: false
                            };
                            t.callObject(y);
                            CNN_setCookie("cnnfb.hasDisconnected", 1, 24 * 30 * 12, "/", document.domain);
                            window.location.reload();
                        }
                    }
                }
            };
            Member.updateProfile(r);
        },
        reloadPage: function() {
            if (window.location.href.indexOf("?")>-1) {
                window.location.href = window.location.href.substr(0, window.location.href.indexOf("?"));
            } else {
                window.location.href = window.location.href;
            }
        },
        executeCookieCopy: function(r) {
            window.location.href = CNN.Page.getRefURL({
                "is_LR": "1"
            });
        },
        login: function(t) {
            var s = CSIManager.getInstance();
            var r = Object.toQueryString(t) + "&callback=Member.loginCallback";
            var u = {
                url: d + "cnn-login-api",
                args: r,
                domId: false,
                breakCache: true
            };
            s.callObject(u);
        },
        loginCallbackFB: function(r) {
            CNN_setCookie("profile.lastNewsID", "fbfriends", 24 * 30 * 12, "/", document.domain);
            CNN_setCookie("cnnfb.hasDisconnected", 0, 24 * 30 * 12, "/", document.domain);
            Member.loginCallback(r, true);
        },
        loginCallback: function(s, t) {
            var r = (t) ? true: false;
            if (s && s.status) {
                if (s.status == "error") {
                    for (i in s.errors) {
                        switch (s.errors[i]) {
                        case"invalid password":
                            cnnConnectOverlayLoginValidationError("clear");
                            cnnConnectOverlayLoginValidationError("add", "Your email address or password doesn't match our records. Please try again.");
                            cnnConnectOverlayLoginValidationError("show");
                            break;
                        }
                    }
                    return;
                }
            }
            Member.getProfile(r);
        },
        loginCallbackFbCnctRec: function() {
            Member.getProfile(true);
        },
        loginCallbackFBCnct: function(s, r) {
            CNN_setCookie("cnnfb.hasDisconnected", 0, 24 * 30 * 12, "/", document.domain);
            Member.setRememberMe(true);
            Member.loginCallback(s, r);
        },
        hasDisconnected: function() {
            allCookies = CNN_getCookies();
            return (allCookies["cnnfb.hasDisconnected"] == 1) ? true : false;
        },
        isLoggedIn: function(r) {
            allCookies = CNN_getCookies();
            switch (r) {
            case"facebook":
                return CNN_FB_data.fb.loginStatus;
                break;
            case"cnn":
                var s = allCookies["authid"] || null;
                if (s == null) {
                    return false;
                } else {
                    return true;
                }
                break;
            }
        }
    };
    return h;
}();
function fbSessionHandler(a) {
    if (!a.authResponse.accessToken) {
        return;
    }
    if (a.status == "connected") {
        if (typeof Dsq !== "undefined") {
            if (Dsq.CNN !== undefined && Dsq.CNN.authenticateFacebookUser !== undefined) {
                Dsq.CNN.authenticateFacebookUser(FB.getAuthResponse().userID);
            }
        }
    }
    var b = {
        params: {
            facebookUserId: FB.getAuthResponse().userID,
            principalType: "FACEBOOK"
        },
        onSuccess: function(f) {
            var e = f.responseJSON.status;
            if (e == "need register") {
                if (allCookies["CNN_member"]) {
                    var h = new Overlay("fb_profile_signin_overlay");
                    h.load();
                } else {
                    var g = new Overlay("fb_profile_signup_overlay");
                    g.load();
                }
            } else {
                if (e == "existing user") {
                    Member.loginCallbackFBCnct(f.responseJSON, true);
                } else {
                    if (e == "unavailable") {
                        var d = new Overlay("fb_merge_error1_overlay");
                        d.load();
                    } else {
                        if (e == "external authorization failed") {
                            var c = new Overlay("fb_error_external");
                            c.load();
                        } else {
                            var c = new Overlay("fb_error_general");
                            c.load();
                        }
                    }
                }
            }
        }
    };
    if (Member.isLoggedIn("cnn")) {
        Member.facebookLinkExternalAccountLoggedIn(b);
    } else {
        Member.fbConnect(b);
    }
}
function CNN_handleOverlay(b, e) {
    if (Member.isLoggedIn("facebook")) {
        switch (b) {
        case"profile_signin_overlay":
            var d = new Overlay("fb_profile_signin_init_overlay");
            d.load();
            break;
        case"profile_signup_overlay":
            var a = new Overlay("fb_profile_signup_init_overlay");
            a.load();
            break;
        default:
            var c = new Overlay(b);
            c.load();
        }
    } else {
        switch (b) {
        case"profile_signin_overlay":
            var d = new Overlay("profile_signin_overlay_videxp");
            d.load();
            break;
        case"profile_signup_overlay":
            var a = new Overlay("profile_signup_overlay");
            a.load();
            break;
        default:
            var c = new Overlay(b);
            c.load();
        }
    }
}
function Overlay(s) {
    var p = s, r = [], t = false;
    var f = "/.element/js/3.0/overlay/data/2.0-migration/";
    f = (f !== undefined && f.length > 0 && f.replace(/@/g, "") != "msib_overlay_ssi_root_dir") ? f : "http://www.cnn.com/.element/js/3.0/overlay/data/2.0-migration/";
    var k = f + p + ".html";
    var o;
    var b = "cnnDimmer";
    var q = $(b);
    if (!q) {
        var l = new Element("div", {
            "id": "cnnDimmer"
        });
        l.setStyle({
            "backgroundColor": "#000000",
            "position": "absolute",
            "z-index": 2146483646,
            "top": "0px",
            "left": "0px",
            "opacity": "0.5",
            "display": "none",
            "z-index": "11"
        });
        document.body.appendChild(l);
    }
    var e = function() {
        return Math.max(document.documentElement["clientHeight"], document.body["scrollHeight"], document.documentElement["scrollHeight"], document.body["offsetHeight"], document.documentElement["offsetHeight"]);
    };
    var a = function() {
        return Math.max(document.documentElement["clientWidth"], document.body["scrollWidth"], document.documentElement["scrollWidth"], document.body["offsetWidth"], document.documentElement["offsetWidth"]);
    };
    var m = function() {
        return Math.max(document.viewport.getHeight(), e());
    };
    var u = function() {
        return Math.max(document.viewport.getWidth(), a());
    };
    var h = function() {
        var w = 0, v = 0;
        if (typeof(window.pageYOffset) == "number") {
            v = window.pageYOffset;
            w = window.pageXOffset;
        } else {
            if (document.body && (document.body.scrollLeft || document.body.scrollTop)) {
                v = document.body.scrollTop;
                w = document.body.scrollLeft;
            } else {
                if (document.documentElement && (document.documentElement.scrollLeft || document.documentElement.scrollTop)) {
                    v = document.documentElement.scrollTop;
                    w = document.documentElement.scrollLeft;
                }
            }
        }
        return [w, v];
    };
    var g = function() {
        var v = m() + "px";
        var w = u() + "px";
        $(b).setStyle({
            "width": w,
            "height": v
        });
    };
    var n = function() {
        if ($(p)) {
            var z = h();
            var w = $(p).getWidth();
            var y = $(p).getHeight();
            var D = document.viewport.getHeight();
            var B = document.viewport.getWidth();
            var A = z[1];
            var v = Math.floor((B / 2) - (w / 2));
            var C = Math.floor((A + (D / 2)) - (y / 2));
            if ((C + y) > e()) {
                C = ((e() - y) - 100);
            }
            C = (C <= 110) ? 110 : C;
            v = (C <= 9) ? 10 : v;
            $(p).style.top = C + "px";
            $(p).style.left = v + "px";
        }
    };
    var d = function(w, v) {
        var y = "";
        cnn_mOverlayObj = w;
        cnn_mOverlayObj.init_overlay(o);
        y = cnn_mOverlayObj.overlay_html;
        $("cnn_mOvrlycntr").update(y);
        n();
        $(p).show();
        cnn_mOverlayObj.init_events(o);
    };
    var c = function() {
        g();
        $(b).show();
        var v = "";
        v += '<div style="top: 312px; left: 356px;" class="overlay_content" id="' + p + '"><div class="cnnConnBox"><div onclick="closeOverlay(\'' + p + '\');return false;" class="overlay_close"></div><div class="signup_cont"><div class="profileoverlay_bdy p_signup"><h1>Loading...</h1><div id="facebookInfo"><p class="psigninp2" id=""></p></div></div></div></div><div class="clear"></div></div>';
        $("cnn_mOvrlycntr").update(v);
        CSIManager.getInstance().call(k, "", false, d);
    };
    return {
        load: function(v) {
            $("cnn_mOvrlycntr").update("");
            Event.observe(window, "resize", function() {
                g();
                n();
            });
            o = v || {
                "msibServer": "http://audience.cnn.com/services/cnn/"
            };
            c();
        },
        close: function() {
            $("cnn_mOvrlycntr").update("");
            $(b).hide();
        },
        loadHLDR: function(v) {
            $("cnn_mOvrlycntr").update("");
            Event.observe(window, "resize", function() {
                g();
                n();
            });
            g();
            $(b).show();
            var w = "";
            w += '<div class="overlay_content cnn_fbcntorly cnn_fbcntstryorly" id="' + p + '"><div class="cnnConnBox"><div onclick="closeOverlay(\'' + p + '\');return false;" class="overlay_close"></div><div class="signup_cont"><div id="' + v + '"><div class="profileoverlay_bdy p_signup"><h1>Loading...</h1><div id="facebookInfo"><p class="psigninp2" id=""></p></div></div></div></div></div><div class="clear"></div></div>';
            $("cnn_mOvrlycntr").update(w);
            n();
        },
        addToQueue: function() {
            if (storage) {
                storage.dataObjects.overlayQueue.unshift(p);
                storage.put("overlayQueue", storage.dataObjects.overlayQueue);
                storage.save();
            } else {}
        },
        removeFromQueue: function(v) {}
    };
}
var cnn_OvrlyIEvents = {};
function CNN_FBpsnlzdOO() {
    allCookies = CNN_getCookies();
    var a = Member.hasDisconnected();
    var b = "";
    if (Member.isLoggedIn("facebook")&&!a) {
        b += 'Using Facebook, you can now see what your friends are recommending and sharing on CNN. To learn more, or to disable this feature, go to <a href="/profile/?setTab=mysettings">settings</a>.';
    } else {
        b += "Using Facebook, you can now see the most recommended CNN stories. Facebook user? If so, <a href=\"javascript:CNN_handleOverlay('profile_signin_overlay');\">log in</a> to see your friends' activity on CNN.";
    }
    $("cnn_FBawOLYM").update(b);
    $("cnn_FBawDIM").removeClassName("cnn_dynone");
    $("cnn_FBawOLY").removeClassName("cnn_dynone");
}
function CNN_FBpsnlzdOC() {
    $("cnn_FBawOLY").addClassName("cnn_dynone");
    $("cnn_FBawDIM").addClassName("cnn_dynone");
}
function closeOverlay(a) {
    $("cnn_mOvrlycntr").update("");
    $("cnnDimmer").hide();
}
function showOverlay(b) {
    $("cnn_mOvrlycntr").update("");
    var a = new Overlay(b);
    a.load();
}
function closeCSIOverlay(a) {
    $("cnn_mOvrlycntr").update("");
    $("cnnDimmer").hide();
}
function showCSIOverlay(b) {
    $("cnn_mOvrlycntr").update("");
    var a = new Overlay(b);
    a.load();
}
function validateEmail(b) {
    var a = /^([a-zA-Z0-9_\.\'\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
    return a.test(b);
}
function validate_signin() {
    var c = $("cnnConnectFormLogin").serialize(true);
    var h = "cnnConnectFormLogin";
    var e = $(h).email.value;
    var d = $(h).password.value;
    var g = $(h).cnnRememberMe.checked;
    var f = true;
    var a = "Registration isn't complete without your ";
    var b = [];
    if (validateEmail(e) == false) {
        f = false;
        b[b.length] = "e-mail address";
        $("psigninp2_email").addClassName("redtexterror");
        $(h).email.className = "redinput_error";
    }
    if (d == "") {
        f = false;
        $("psigninp2_password").addClassName("redtexterror");
        b[b.length] = "password";
        $(h).password.className = "redinput_error";
    }
    if (f) {
        if (c.cnnRememberMe === "on") {
            document.cnnConnectFormLogin.keepMeLoggedIn.value = true;
            Member.setRememberMe(true);
        } else {
            document.cnnConnectFormLogin.keepMeLoggedIn.value = false;
            Member.setRememberMe(false);
        }
        c.doSso = false;
        document.cnnConnectFormLogin.submit();
    } else {
        cnnConnectOverlayLoginValidationError("clear");
        if (b.length == 2) {
            cnnConnectOverlayLoginValidationError("add", "We need your " + b[0] + " and " + b[1] + " to log in.");
        } else {
            if (b[0] == "e-mail address" && validateEmail(e) == false && e != "") {
                cnnConnectOverlayLoginValidationError("add", "You entered an invalid e-mail address.");
            } else {
                if (b[0] == "e-mail address" && e == "") {
                    cnnConnectOverlayLoginValidationError("add", "We need your " + b[0] + " to log in.");
                } else {
                    cnnConnectOverlayLoginValidationError("add", "We need your " + b[0] + " to log in.");
                }
            }
        }
        cnnConnectOverlayLoginValidationError("show");
    }
}
function validate_signinFB() {
    var c = $("cnnConnectFormLogin").serialize(true);
    var h = "cnnConnectFormLogin";
    var e = $(h).email.value;
    var d = $(h).password.value;
    var g = $(h).cnnRememberMe.checked;
    var f = true;
    var a = "Registration isn't complete without your ";
    var b = [];
    if (validateEmail(e) == false) {
        f = false;
        b[b.length] = "e-mail address";
        $("psigninp2_email").addClassName("redtexterror");
        $(h).email.className = "redinput_error";
    }
    if (d == "") {
        f = false;
        $("psigninp2_password").addClassName("redtexterror");
        b[b.length] = "password";
        $(h).password.className = "redinput_error";
    }
    if (f) {
        if (c.cnnRememberMe === "on") {
            document.cnnConnectFormLogin.keepMeLoggedIn.value = true;
            Member.setRememberMe(true);
        } else {
            document.cnnConnectFormLogin.keepMeLoggedIn.value = false;
            Member.setRememberMe(false);
        }
        c.doSso = false;
        document.cnnConnectFormLogin.submit();
    } else {
        cnnConnectOverlayLoginValidationError("clear");
        if (b.length == 2) {
            cnnConnectOverlayLoginValidationError("add", "We need your " + b[0] + " and " + b[1] + " to log in.");
        } else {
            if (b[0] == "e-mail address" && validateEmail(e) == false && e != "") {
                cnnConnectOverlayLoginValidationError("add", "You entered an invalid e-mail address.");
            } else {
                if (b[0] == "e-mail address" && e == "") {
                    cnnConnectOverlayLoginValidationError("add", "We need your " + b[0] + " to log in.");
                } else {
                    cnnConnectOverlayLoginValidationError("add", "We need your " + b[0] + " to log in.");
                }
            }
        }
        cnnConnectOverlayLoginValidationError("show");
    }
}
function registerHandler(a) {
    if (a.status == "success") {
        if (Member.isConnected()) {
            FB.api({
                method: "fql.query",
                query: "SELECT name, pic_square FROM profile WHERE id=" + FB.getAuthResponse().userID
            }, function(c) {
                var b = c[0];
                var d = {
                    params: {
                        facebookUserId: FB.getAuthResponse().userID,
                        principalType: "FACEBOOK"
                    },
                    onSuccess: function(f) {
                        if (f.responseJSON.status == "existing user") {
                            Member.loginCallbackFBCnct(f.responseJSON, true);
                        }
                        if (f.responseJSON.status == "unavailable") {
                            var e = new Overlay("fb_merge_error1_overlay");
                            e.load();
                        }
                        if (f.responseJSON.status == "need register") {
                            if (allCookies["CNN_member"]) {
                                var h = new Overlay("fb_profile_signin_overlay");
                                h.load();
                            } else {
                                var g = new Overlay("fb_profile_signup_overlay");
                                g.load();
                            }
                        }
                    }
                };
                Member.facebookLinkExternalAccountLoggedIn(d);
            });
        } else {
            Member.getProfile();
        }
    } else {
        if (a.errors) {
            if ($j("#cnnConnectFormRegister")) {
                validate_register(a.errors);
            }
            if ($("cnnConnectKaptchaImage")) {
                generateKaptchaImage();
            }
        }
    }
}
function validate_register(c) {
    var d = "cnnConnectFormRegister", a = "domestic_version", b = "#cnnConnectFormRegister";
    if (newuser) {
        newuser = true;
    }
    if ($(d).specialOffers.checked === true) {
        newsletters = "member_services";
    }
    if (c === undefined) {
        $j(document.forms.cnnConnectFormRegister).CNNformValidator({
            context: b,
            hasEmail: true,
            hasUsername: true,
            hasPassword: true,
            hasKaptcha: true
        });
    } else {
        $j(document.forms.cnnConnectFormRegister).CNNformValidator({
            context: b
        }, c);
    }
}
function validateResetEmail() {
    var c = "cnnConnectFormForgot";
    var b = $(c).email.value;
    if (validateEmail(b) == false) {
        cnnConnectOverlayForgotValidationError("clear");
        cnnConnectOverlayForgotValidationError("add", "You must enter your e-mail address to reset your password.");
        cnnConnectOverlayForgotValidationError("show");
    } else {
        var a = {
            params: {
                "email": b
            },
            onSuccess: function(d) {
                var f = d.responseJSON;
                if (f && f.errors) {
                    cnnConnectOverlayForgotValidationError("clear");
                    for (var e = 0; e < f.errors.length; e++) {
                        switch (f.errors[e]) {
                        case"User not found":
                            cnnConnectOverlayForgotValidationError("add", "Your e-mail address doesn't match our records. Please try again.");
                            break;
                        case"You have recently requested to reset your password.  You must wait before requesting another reset.":
                            cnnConnectOverlayForgotValidationError("add", "You have recently requested to reset your password.  You must wait before requesting another reset.");
                            break;
                        default:
                            cnnConnectOverlayForgotValidationError("add", f.errors[e]);
                            break;
                        }
                    }
                    cnnConnectOverlayForgotValidationError("show");
                } else {
                    if (f && f.status == "success") {
                        cnnConnectOverlayUpdate("forgot2reset");
                    }
                }
            }
        };
        Member.sendResetPasswordCode(a);
    }
}
function validateSetUserPassword() {
    var d = "cnnConnectFormReset", b = "#cnnConnectFormReset", c = $(d).password.value, a = c;
    $j(document.forms.cnnConnectFormReset).CNNformValidator({
        context: b,
        errorBlock: "#cnnConnectResetErrors",
        hasEmail: true,
        hasReset: true,
        hasPassword: true
    });
}
function generateKaptchaImage() {
    var a = getRandomId();
    $("cnnConnectKaptchaImage").src = ms_baseStandard + "kaptcha?challenge_id=" + a;
    $("cnnConnectKaptchaImage").width = "200";
    $("cnnConnectKaptchaImage").height = "50";
    $("cnnConnectFormRegister").kaptcha.value = "";
}
if (Object.isUndefined(CNNO)) {
    var CNNO = Class.create({
        "chars": "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz",
        "randomStr": function(a) {
            var d = "";
            for (var c = 0; c < a; c++) {
                var b = Math.floor(Math.random() * this.chars.length);
                d += this.chars.substring(b, b + 1);
            }
            return d;
        },
        "Page": {
            "cleanURL": (window.location.href.indexOf("?")>-1) ? window.location.href.substr(0, window.location.href.indexOf("?")): window.location.href,
            "urlArgs": "",
            "refresh": function(b, a) {
                location.href = this.getRefURL(b, a);
            },
            "getRefURL": function(h, b) {
                if (Object.isUndefined(h)) {
                    h = {};
                }
                if (Object.isUndefined(b)) {
                    b = {};
                }
                b.cnncb = 1;
                b.cnnqueue = 1;
                var a = this.urlNameVals();
                var g = "";
                var e = [];
                for (var d in a) {
                    if (!b[d]&&!h[d] && a[d]) {
                        e.push(d + "=" + a[d]);
                    }
                }
                for (var d in h) {
                    if (h[d]) {
                        e.push(d + "=" + h[d]);
                    }
                }
                g = e.join("&");
                var c = this.cleanURL + "?";
                if (g) {
                    c += g;
                }
                var f = CNNO.prototype.Overlay.queue.join("_");
                if (f) {
                    if (g) {
                        c += "&";
                    }
                    c += "cnnqueue=" + f;
                }
                return c;
            },
            "urlNameVals": function() {
                var b = new Object();
                var f = location.search.substring(1);
                var e = f.split("&");
                for (var c = 0; c < e.length; c++) {
                    var g = e[c].indexOf("=");
                    if (g==-1) {
                        continue;
                    }
                    var a = e[c].substring(0, g);
                    var d = e[c].substring(g + 1);
                    b[a] = unescape(d);
                }
                this.urlArgs = b;
                return b;
            }
        }
    });
}
CNNO.addMethods({
    "Profile": {
        "is_loaded": 0,
        "emails": null,
        "init": function() {},
        "loadFrames": function(b) {
            if (b == "l") {
                var a;
                try {
                    a = document.createElement('<iframe name="loginFrame">');
                } catch (c) {
                    a = document.createElement("iframe");
                }
                a.setAttribute("name", "loginFrame");
                a.setAttribute("height", "1");
                a.setAttribute("width", "1");
                a.setAttribute("id", "loginFrame");
                a.setAttribute("style", "height:1px;width:1px;");
                $$("body")[0].appendChild(a);
            } else {
                var d;
                try {
                    d = document.createElement('<iframe name="registerFrame">');
                } catch (c) {
                    d = document.createElement("iframe");
                }
                d.setAttribute("name", "registerFrame");
                d.setAttribute("height", "1");
                d.setAttribute("width", "1");
                d.setAttribute("id", "registerFrame");
                d.setAttribute("style", "height:1px;width:1px;");
                $$("body")[0].appendChild(d);
            }
        }
    }
});
CNNO.addMethods({
    "Overlay": {
        "app_dim": 0,
        "queue": [],
        "active": null,
        "t_q": null,
        "setDim": function(b) {
            if (!this.app_dim) {
                var a = document.createElement("div");
                a.id = "cnn_overlaydim";
                a.className = "cnn_overlaydim";
                $$("body")[0].appendChild(a);
                $("cnn_overlaydim").setStyle({
                    "display": "none"
                });
                Event.observe(window, "resize", function() {
                    CNNO.prototype.Overlay.sizeDim();
                });
                this.app_dim = 1;
            }
            CNNO.prototype.Overlay.sizeDim();
            if (b) {
                $("cnn_overlaydim").show();
            } else {
                $("cnn_overlaydim").hide();
            }
        },
        "sizeDim": function() {
            var b = document.viewport.getHeight();
            var d = document.viewport.getWidth();
            var f = Math.max(document.documentElement["clientHeight"], document.body["scrollHeight"], document.documentElement["scrollHeight"], document.body["offsetHeight"], document.documentElement["offsetHeight"]);
            var c = Math.max(document.documentElement["clientWidth"], document.body["scrollWidth"], document.documentElement["scrollWidth"], document.body["offsetWidth"], document.documentElement["offsetWidth"]);
            var e = (f > b) ? f: b;
            var a = (c > d) ? c: d;
            $("cnn_overlaydim").setStyle({
                "width": a + "px",
                "height": e + "px"
            });
        },
        "center": function(h) {
            var e = this.getsoffset();
            var a = $(h).getWidth();
            var c = $(h).getHeight();
            var l = document.viewport.getHeight();
            var b = document.viewport.getWidth();
            var m = Math.max(document.documentElement["clientHeight"], document.body["scrollHeight"], document.documentElement["scrollHeight"], document.body["offsetHeight"], document.documentElement["offsetHeight"]);
            var d = Math.max(document.documentElement["clientWidth"], document.body["scrollWidth"], document.documentElement["scrollWidth"], document.body["offsetWidth"], document.documentElement["offsetWidth"]);
            var g = e[1];
            var k = Math.floor((b / 2) - (a / 2));
            var f = Math.floor((g + (l / 2)) - (c / 2));
            if ((f + c) > m) {
                f = ((m - c) - 100);
            }
            f = (f <= 110) ? 110 : f;
            k = (f <= 9) ? 10 : k;
            $(h).style.top = f + "px";
            $(h).style.left = k + "px";
        },
        "getsoffset": function() {
            var b = 0, a = 0;
            if (typeof(window.pageYOffset) == "number") {
                a = window.pageYOffset;
                b = window.pageXOffset;
            } else {
                if (document.body && (document.body.scrollLeft || document.body.scrollTop)) {
                    a = document.body.scrollTop;
                    b = document.body.scrollLeft;
                } else {
                    if (document.documentElement && (document.documentElement.scrollLeft || document.documentElement.scrollTop)) {
                        a = document.documentElement.scrollTop;
                        b = document.documentElement.scrollLeft;
                    }
                }
            }
            return [b, a];
        },
        "close": function(a) {
            $("cnn_overlaycntnt").update();
            this.setDim(0);
        },
        "checkQ": function() {
            var a = CNNO.prototype.Page.urlNameVals();
            if (a.cnnqueue) {
                var b = a.cnnqueue.split("_");
                var c = b.shift();
                this.load(c, "auto");
            }
        },
        "data": {
            "newsletters": {
                "j_loaded": 0,
                "h_loaded": 0,
                "js": null,
                "html": null
            }
        },
        "keys": {
            "news-am": {
                "ref_name": "American Morning",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-prime": {
                "ref_name": "Prime News",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-pol": {
                "ref_name": "Politics Alerts",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-breaking": {
                "ref_name": "Breaking News Alert",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-intl-amanpour": {
                "ref_name:": "Amanpour",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-member_services": {
                "ref_name": "Marketing",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-cnn-bia": {
                "ref_name": "Black in America",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-intl-htmlasiaheadlines": {
                "ref_name": "CNN Asia editorial note",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-intl-htmleuheadlines": {
                "ref_name": "CNN Europe editorial note",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-cnn-heroes": {
                "ref_name": "CNN Heroes",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-intl-htmltravel": {
                "ref_name": "CNN Partner Hotel specials",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-cnn-health": {
                "ref_name": "Health News",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-intl-insideafrica": {
                "ref_name": "Inside Africa",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-cnn-larryking": {
                "ref_name": "Larry King Live",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-cnn-loudobbs": {
                "ref_name": "Lou Dobbs Tonight",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-cnn-rcshow": {
                "ref_name": "Morning Express",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-cnn-morninggrind": {
                "ref_name": "Political Ticker - weekday edition",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-cnn-sundaysotu": {
                "ref_name": "Political Ticker - Sunday, State of the Union edition",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-cnn-showbiz": {
                "ref_name": "Showbiz Tonight",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-cnn-situationroom": {
                "ref_name": "Situation Room",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-cnn-computing": {
                "ref_name": "Tech News",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-cnn-dailytop10": {
                "ref_name": "Todays Top Video",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-cnn-primetime": {
                "ref_name": "Tonight on CNN",
                "j_file": "newsletters",
                "h_file": "newsletters"
            },
            "news-intl-vitalsigns": {
                "ref_name": "Vital Signs",
                "j_file": "newsletters",
                "h_file": "newsletters"
            }
        },
        "qOverlay": function(a) {
            this.queue.push(a);
        },
        "clearQ": function() {
            this.queue = [];
        },
        "qRefresh": function() {
            var a = this.queue.join("_");
            CNNO.prototype.Page.refresh({
                "cnnqueue": a
            });
        },
        "callback": function(a, b) {
            if (a == "json") {
                this.data[this.keys[b].j_file].j_loaded = 1;
            }
            if (a == "html") {
                this.data[this.keys[b].h_file].h_loaded = 1;
            }
            if (this.data[this.keys[b].j_file].j_loaded && this.data[this.keys[b].h_file].h_loaded) {
                this.data[this.keys[b].j_file].js.init();
            }
        },
        "callbackCSI": function(a) {
            CNNO.prototype.Overlay.data[a.key].html = a;
            CNNO.prototype.Overlay.callback("html", CNNO.prototype.Overlay.active);
        },
        "callbackJSON": function(a) {
            this.data[a.key].js = a;
            this.callback("json", CNNO.prototype.Overlay.active);
        },
        "init": function() {
            Event.observe(document, "dom:loaded", function() {
                var a = document.createElement("div");
                a.id = "cnn_overlaycntnt";
                $$("body")[0].appendChild(a);
            });
            CNNO.prototype.Overlay.checkQ();
        },
        "load": function(a, b) {
            if (typeof(b) == "undefined") {
                b = "manual";
            }
            this.active = a;
            if (b == "auto") {
                this.t_q = a;
            } else {
                this.setDim(1);
                $("cnn_overlaycntnt").update('<div id="cnn_overlay_load" class="cnn_overlaybox cnn_overlayloading"><p align="center"><img src="http://i.cdn.turner.com/cnn/.e/img/3.0/global/misc/loading.gif">loading</p></div>');
                CNNO.prototype.Overlay.center("cnn_overlay_load");
                CNNO.prototype.Overlay.loadJSONP(a);
                CNNO.prototype.Overlay.loadHCSI(a);
            }
        },
        "triggerQ": function() {
            if (CNNO.prototype.Overlay.t_q) {
                CNNO.prototype.Overlay.setDim(1);
                $("cnn_overlaycntnt").update('<div id="cnn_overlay_load" class="cnn_overlaybox cnn_overlayloading"><p align="center"><img src="http://i.cdn.turner.com/cnn/.e/img/3.0/global/misc/loading.gif">loading</p></div>');
                CNNO.prototype.Overlay.center("cnn_overlay_load");
                CNNO.prototype.Overlay.loadJSONP(CNNO.prototype.Overlay.t_q);
                CNNO.prototype.Overlay.loadHCSI(CNNO.prototype.Overlay.t_q);
            }
        },
        "loadJSONP": function(c) {
            if (!this.data[this.keys[c].j_file].j_loaded) {
                var a = $$("head")[0];
                var b = document.createElement("script");
                b.setAttribute("src", "http://www.cnn.com/.element/js/3.0/overlay/data/js/" + this.keys[c].j_file + ".js");
                b.setAttribute("type", "text/javascript");
                a.appendChild(b);
            } else {
                this.callback("json", c);
            }
        },
        "loadHCSI": function(a) {
            if (!this.data[this.keys[a].h_file].h_loaded) {
                CSIManager.getInstance().call("http://www.cnn.com/.element/js/3.0/overlay/data/html/" + this.keys[a].j_file + ".html", "", "", CNNO.prototype.Overlay.callbackCSI);
            } else {
                this.callback("html", a);
            }
        },
        "update": function(a, b) {
            $("cnn_overlaycntnt").update(CNNO.prototype.Overlay.data[CNNO.prototype.Overlay.keys[a].j_file].html.data[b]);
            CNNO.prototype.Overlay.center("cnn_overlay_" + CNNO.prototype.Overlay.keys[a].j_file);
            CNNO.prototype.Overlay.data[CNNO.prototype.Overlay.keys[a].j_file].js.html_prep(b);
        }
    }
});
if ("undefined" === typeof(window.CNN)) {
    var CNN = {};
}
function init_CNNO() {
    var a = new CNNO();
    window["CNN"] = Object.extend(a, window["CNN"] || {});
}
init_CNNO();
function cnn_memfbini() {
    if (!CNN.Profile.is_loaded) {
        if (typeof(cnn_onMemFBinit) === "function") {
            cnn_onMemFBinit();
        }
        CNN.Profile.is_loaded = 1;
        CNN.Overlay.triggerQ();
    }
}
CNN.Overlay.init();
var MainLocalObj = {
    data: {
        weatherLoc: {
            locCode: "",
            zip: "",
            name: "",
            city: "",
            state: ""
        },
        sports: {},
        stockSymbols: [],
        prevStockSymbols: [],
        maxSymbols: 3
    },
    init: function(e) {
        this.internationalUser = (location.hostname.indexOf("edition.")>-1) ? true : false;
        this.isProfilePage = false;
        this.isUSPage = false;
        this.isPoliticsPage = false;
        this.useAccordions = false;
        this.allCookies = allCookies;
        if (typeof e !== "undefined") {
            this.disableSymbolLookup = e;
        } else {
            this.disableSymbolLookup = false;
        }
        if (this.allCookies["last5stocks"] != null) {
            var a = {};
            var b = this.allCookies["last5stocks"].split("+");
            for (var f = 0; f < b.length; f++) {
                a[b[f]] = b[f];
            }
            var d = 0;
            for (var c in a) {
                this.data.stockSymbols.push(a[c]);
                if ((++d) >= this.data.maxSymbols) {
                    break;
                }
            }
            this.data.stockSymbols.reverse();
        }
        MainLocalObj.expDate = new Date(1640926800000);
        this.msUrl = "http://audience.cnn.com/services/cnn/user.api";
        this.StorageManagerInstance = StorageManager.getInstance();
        this.localDataKey = this.allCookies.CNNid + "localData2010";
        var g = [];
        var h = this.StorageManagerInstance.availableStores;
        h.each(function(k) {
            if (k.name !== "IEStorage") {
                g.push(k);
            }
        });
        this.StorageManagerInstance.availableStores = g;
        this.StorageManager = this.StorageManagerInstance.getStorage();
        this.StorageManager.load();
        if (location.hostname.indexOf("cnn.com") > 0) {
            document.domain = "cnn.com";
        }
        if (location.hostname.indexOf("turner.com") > 0) {
            document.domain = "turner.com";
        }
        this.CSIManager = CSIManager.getInstance();
        this.loadDefaultData();
    },
    initMod: function() {
        MainLocalObj.Markets.init();
        MainLocalObj.Weather.init();
    },
    setUserSpecificData: function(a) {
        this.data.userSpecificData = a;
    },
    setInternationalUser: function(a) {
        this.internationalUser = a;
    },
    setLocationZip: function(b, a) {
        this.data.weatherLoc.zip = a;
    },
    setLocationName: function(b, a) {
        this.data.weatherLoc.name = a;
    },
    setLocationLocCode: function(a, b) {
        if (a == "weather") {
            this.data.weatherLoc.locCode = b;
        }
    },
    setLocationCity: function(a, b) {
        this.data.weatherLoc.city = b;
    },
    setLocationState: function(a, b) {
        this.data.weatherLoc.state = b;
    },
    parseMSData: function(a) {
        if (typeof a.status !== "undefined" && a.status === "success" && a.data !== "") {
            this.data = a.data.evalJSON(true);
            this.data.lastMemberServicesFetch = new Date().getTime();
            this.StorageManager.put(this.localDataKey, this.data, MainLocalObj.expDate);
            this.StorageManager.save();
        } else {
            if (a.data == "") {
                this.loadDefaultData(true);
            } else {
                this.data = this.storedData;
            }
        }
        this.saveWeatherCookie();
        this.initMod();
    },
    parseWeatherCookie: function() {
        var c = this.allCookies["lwp.weather"] || null;
        var d = false;
        var e = false;
        if (c) {
            var b = unescape(c).split("|");
            var f = b[0];
            if (c.indexOf("~")==-1) {
                f = c.replace("|", "~");
            }
            var a = b[0].split("~");
            return a;
        } else {
            return [false, false];
        }
    },
    loadDefaultData: function(h) {
        if (typeof h === "undefined") {
            h = false;
        }
        this.storedData = false;
        var a = this.parseWeatherCookie();
        var f = a[0];
        var e = a[1];
        if (ms_isLoggedIn()&&!h) {
            if (this.StorageManager.contains(this.localDataKey)) {
                this.storedData = this.StorageManager.get(this.localDataKey);
            }
            function g(l) {
                if (l === null || typeof l === "undefined" || (new Date().getTime() - l) > 1800000) {
                    return true;
                } else {
                    return false;
                }
            }
            if (g(this.storedData.lastMemberServicesFetch)) {
                var b = {
                    params: {
                        name: "teams"
                    },
                    onSuccess: function(l) {
                        MainLocalObj.parseMSData(l.responseJSON);
                    }
                };
                Member.getData(b);
            } else {
                if (this.storedData) {
                    this.data = this.storedData;
                    this.initMod();
                    this.saveWeatherCookie();
                }
            }
            this.data.userSpecificData = true;
        } else {
            if (e) {
                if (this.checkZip(e)) {
                    this.data.userSpecificData = true;
                    this.setLocationZip("all", e);
                    this.setLocationLocCode("all", f);
                } else {
                    this.Weather.requestInternationalCityLookup(e, f, "all");
                }
                this.initMod();
            } else {
                if (!this.internationalUser) {
                    var k = [{
                        name: "Atlanta, GA",
                        zip: "30303"
                    }
                    ];
                    var c = Math.floor(Math.random() * k.length);
                    var d = k[c];
                    this.setLocationZip("all", d.zip);
                    this.setLocationName("all", d.name);
                    this.initMod();
                } else {
                    if (this.internationalUser) {
                        this.setLocationZip("all", "336736767676");
                        this.setLocationName("all", "London, England");
                        this.initMod();
                    } else {
                        this.initMod();
                    }
                }
            }
        }
    },
    saveWeatherCookie: function() {
        var c = this.allCookies["lwp.weather"] || null;
        var d = "";
        if (this.data) {
            d = this.data.weatherLoc.locCode + "~" + this.data.weatherLoc.zip;
        }
        var f;
        var b = "";
        if (c) {
            var a = unescape(c).split("|");
            a.unshift(d);
            for (var e = 0; e < a.length; e++) {
                if (a[e] !== d && (b.indexOf(a[e])===-1) || e === 0) {
                    b += a[e];
                    if (e < (a.length - 1)) {
                        b += "|";
                    }
                }
            }
        } else {
            b = d;
        }
        CNN_setCookie("lwp.weather", b, 24 * 30 * 12, "/", document.domain);
    },
    saveData: function(a) {
        var d;
        var b;
        if (typeof a === "undefined") {
            a = false;
        }
        this.saveWeatherCookie();
        if (typeof cnnWeather === "object" && a !== true) {
            cnnWeather.init();
        }
        if (ms_isLoggedIn()) {
            this.StorageManager.put(this.localDataKey, this.data, MainLocalObj.expDate);
            this.StorageManager.save();
            var c = {
                params: {
                    "action": "setData",
                    "name": "teams",
                    "data": Object.toJSON(this.data)
                },
                onSuccess: function(e) {}
            };
            Member.setData(c);
        }
    },
    monitorMSSave: function(a) {
        if (typeof a.status !== "undefined" && a.status === "success") {
            msQueueManager.requestReceived();
        }
    },
    trimWS: function(a) {
        a = a.replace(/,/g, " ");
        a = a.replace(/^\s*(\S+)*\s*$/, "$1");
        a = a.replace(/(\s{1})\s*/g, "$1");
        return a;
    },
    urlEncode: function(a) {
        a = this.trimWS(a);
        a = a.replace(/st\./i, "saint");
        a = a.replace(/mt\./i, "mount");
        a = escape(a);
        return a;
    },
    ucwords: function(a) {
        return (a + "").replace(/^(.)|\s(.)/g, function(b) {
            return b.toUpperCase();
        });
    },
    truncateString: function(b, a) {
        if (b.length >= a) {
            b = b.substring(0, a);
            b = b.replace(/\s+$/, "");
            b = b + "&hellip;";
        }
        return b;
    },
    daysInMonth: function(c, b) {
        var a = new Date(b, c, 0);
        return a.getDate();
    },
    urlDecode: function(a) {
        return unescape(a);
    },
    checkZip: function(b) {
        b = this.trimWS(b.toString());
        var a = ((b.match(/^\d{5}$/) !== null || b.match(/^\d{12}$/) !== null) && b != "00000" ? true : false);
        return a;
    }
};
MainLocalObj.Weather = {
    omnitureStr: "jsmd.trackMetrics('dynamic-impressions',cnn_outsideindata,'cnn-impressions');",
    weatherURL: (location.hostname.indexOf("ref") > 0) ? "http://teg8fref1.cnn.com/weather/getForecast": "http://svcs.cnn.com/weather/getForecast",
    init: function() {
        this.defaultMsg = "Enter a U.S. Zip or Intl city";
        if (typeof MainLocalObj.Weather.isInitialized === "undefined") {
            MainLocalObj.Weather.requestLocalAll();
        }
        MainLocalObj.Weather.isInitialized = true;
    },
    inputFocus: function(a) {
        if (a.value === MainLocalObj.Weather.defaultMsg) {
            a.value = "";
        }
        a.removeClassName("pmWeatherHollow");
    },
    inputBlur: function(a) {
        if (a.value === "") {
            a.value = MainLocalObj.Weather.defaultMsg;
            a.addClassName("pmWeatherHollow");
        }
    },
    requestLocalAll: function() {
        var a = MainLocalObj.data;
        MainLocalObj.Weather.displayElements();
        MainLocalObj.Weather.requestLocalWeather(a);
        if (!MainLocalObj.internationalUser) {
            MainLocalObj.Weather.requestLocalNews(a);
        }
    },
    localUpdateData: function(a, c, d, b) {
        MainLocalObj.setLocationZip(b, c);
        MainLocalObj.setLocationName(b, a);
        MainLocalObj.setLocationLocCode(b, d);
        MainLocalObj.setUserSpecificData(true);
        MainLocalObj.saveData();
        MainLocalObj.Weather.requestLocalAll();
    },
    requestLocalWeather: function(c) {
        var a = "mode=json_html&zipCode=" + c.weatherLoc.zip;
        if (c.weatherLoc.locCode) {
            a += "&locCode=" + c.weatherLoc.locCode;
        }
        if (MainLocalObj.internationalUser && MainLocalObj.allCookies["default.temp.units"] === "true") {
            a += "&celcius=true";
        }
        var b = {
            url: MainLocalObj.Weather.weatherURL,
            args: a,
            domId: false,
            funcObj: MainLocalObj.Weather.updateLocalWeather,
            breakCache: false
        };
        MainLocalObj.CSIManager.callObject(b, "requestLocalWeather_");
    },
    requestLocalNews: function(e) {
        if (MainLocalObj.checkZip(e.weatherLoc.zip)) {
            var d;
            var f;
            if (MainLocalObj.isProfilePage || MainLocalObj.isUSPage) {
                d = 4;
                f = 2;
            } else {
                d = 3;
                f = 1;
            }
            var c = (!MainLocalObj.isPoliticsPage) ? "http://local.cnn.com/oi/v1.0/publications/1094/zipcodes/" + e.weatherLoc.zip + "/stories.cnnhtml": "http://local.cnn.com/oi/v1.1/zipcodes/" + e.weatherLoc.zip + "/publications/1094/stories.cnnhtml";
            var a = (!MainLocalObj.isPoliticsPage) ? "limit=" + d + "&min=" + d + "&min_pref=" + f + "&max_age=3d&max_pref_age=3d&dev_key=wxctrr8nme2pjzpt2dpf89p5": "limit=" + d + "&min=" + d + "&max_age=2d&dev_key=wxctrr8nme2pjzpt2dpf89p5&keyword=Democrat&keyword=Republican&keyword=Governor&keyword=Senate&keyword=Congress&keyword=Rep&keyword=Dem&keyword=politics";
            var b = {
                url: c,
                args: a,
                domId: false,
                funcObj: MainLocalObj.Weather.updateLocalNews,
                breakCache: false
            };
            MainLocalObj.CSIManager.callObject(b, "requestLocalNews");
        }
    },
    displayElements: function(a) {
        if (typeof a === "undefined") {
            a = false;
        }
        switch (a) {
        case"changeLoc":
            if ($("cnnGetLocalBox")) {
                $("cnnGetLocalBox").show();
            }
            if ($("changeLocLink")) {
                $("changeLocLink").hide();
            }
            if ($("pmLocResultsContainer")) {
                $("pmLocResultsContainer").hide();
            }
            if (!MainLocalObj.internationalUser) {}
            if ($("weatherLoc")) {
                MainLocalObj.Weather.inputBlur($("weatherLoc"));
            }
            break;
        case"intlChangeLoc":
            if ($("cnnGetLocalBox")) {
                $("cnnGetLocalBox").show();
            }
            if ($("changeLocLink")) {
                $("changeLocLink").hide();
            }
            if ($("pmLocResultsContainer")) {
                $("pmLocResultsContainer").hide();
            }
            if ($("pmWeatherTom")) {
                $("pmWeatherTom").hide();
            }
            if ($("weatherLoc")) {
                MainLocalObj.Weather.inputBlur($("weatherLoc"));
            }
            break;
        case"displayResults":
            if ($("cnnGetLocalBox")) {
                $("cnnGetLocalBox").show();
            }
            if ($("changeLocLink")) {
                $("changeLocLink").hide();
            }
            if ($("pmLocResultsContainer")) {
                $("pmLocResultsContainer").show();
            }
            break;
        default:
            if (!MainLocalObj.data.userSpecificData) {
                MainLocalObj.Weather.displayElements("changeLoc");
            } else {
                if (MainLocalObj.data.userSpecificData) {
                    if ($("cnnGetLocalBox")) {
                        $("cnnGetLocalBox").hide();
                    }
                    if ($("pmLocResultsContainer")) {
                        $("pmLocResultsContainer").hide();
                    }
                    if ($("changeLocLink")) {
                        $("changeLocLink").show();
                    }
                    if ($("pmWeatherTom")) {
                        $("pmWeatherTom").show();
                    }
                    if (!MainLocalObj.internationalUser) {} else {
                        if ($("curConditionsWeatherDay")) {
                            $("curConditionsWeatherDay").show();
                        }
                    }
                }
            }
            break;
        }
    },
    updateLocalWeather: function(l) {
        if (!l[0].invalid) {
            var e = "http://weather.cnn.com/weather/";
            if (MainLocalObj.internationalUser) {
                e = "http://weather.edition.cnn.com/weather/intl/";
            }
            e += "forecast.jsp?zipCode=" + MainLocalObj.data.weatherLoc.zip;
            if (MainLocalObj.data.weatherLoc.locCode) {
                e += "&locCode=" + MainLocalObj.data.weatherLoc.locCode;
            }
            var h = MainLocalObj.data.weatherLoc.name;
            var f = "";
            var o = "";
            var c = "";
            if (MainLocalObj.internationalUser) {
                var b = "intlChangeLoc";
            } else {
                var b = "changeLoc";
            }
            var n = (MainLocalObj.internationalUser || MainLocalObj.allCookies["default.temp.units"] == "true" ? "C" : "F");
            if (l.length>-1) {
                h = l[0].location.city;
                if (l[0].location.stateOrCountry) {
                    h += ", " + l[0].location.stateOrCountry;
                }
            }
            for (var a = 0; a < l.length; a++) {
                if (l[a] && l[a].forecast && l[a].forecast.days) {
                    if (l[a].forecast.days.length>-1) {
                        var p = l[a].forecast.days[0];
                        var d = l[a].currentConditions;
                        if (d.valid == false) {
                            d.temperature = "--";
                        }
                        var h = l[0].location.city;
                        if (l[0].location.stateOrCountry) {
                            h += ", " + l[0].location.stateOrCountry;
                        }
                        f += '<p id="pmSelectedWeather">' + "	<span>" + h + '</span><span id="changeLocLink">';
                        if (MainLocalObj.data.userSpecificData) {
                            f += ' <span style="color: #999;">&nbsp;(</span><a id="pmEditWeatherLoc" href="javascript:MainLocalObj.Weather.displayElements(\'' + b + '\')">Edit location</a><span style="color: #999;">)</span>';
                        }
                        f += "</span></p>";
                        var m = "";
                        if (d.temperature.length > 2) {
                            m = ' style="font-size: 24px;"';
                        }
                        var g = "";
                        if (d.feelsLikeTemperature.length > 2) {
                            g = ' style="font-size: 9px;"';
                        }
                        var s = '			<span id="pmCurrTempNum">' + d.temperature + "</span>&deg;";
                        if (d.temperature_S == "N/A") {
                            s = '			<span id="pmCurrTempNum"><span style="font-size: 50%;">N/A</span></span>';
                        }
                        var r = '			Feels like&nbsp;<span id="pmFeelTemp">' + d.feelsLikeTemperature + "</span>&deg;";
                        if (d.feelsLikeTemperature_S == "N/A" || d.feelsLikeTemperature_S == "") {
                            r = "";
                        }
                        if (!MainLocalObj.isProfilePage || MainLocalObj.internationalUser) {
                            var q = (typeof(d.shortDescription) == "undefined") ? d.description: d.shortDescription;
                            f += '<div class="pmWrapper">' + '	<p id="curConditionsWeatherDay" class="weatherDay">Current conditions</p>' + '	<div id="pmWeatherIcon">' + '		<a href="' + e + '"><img class="cnn_ie6png" src="http://i.cdn.turner.com/cnn/.e/img/3.0/weather/03/' + d.icon + ".png" + '" alt="your weather"></a>' + "	</div>" + '	<div id="pmCurrentWeather">' + '		<div id="pmCurrTemp"' + m + ">" + s + "		</div>" + "	</div>" + '	<div id="pmWeatherDetails">' + '		<p id="pmWeatherDesc">' + q + "		</p>" + '		<p id="pmWeatherHiLo">' + '			Hi&nbsp;<span id="pmHiTemp">' + p.high + '</span>&deg;&nbsp;&nbsp;<span style="color: #999; font-size: 10px;">|</span>&nbsp;&nbsp;Lo&nbsp;<span id="pmLoTemp">' + p.low + "</span>&deg;" + "		</p>" + "	</div>" + '	<div id="pmMoreWeather">' + '		<a id="pm10DayBtn" href="' + e + '">&nbsp;</a>' + "		<p" + g + ">";
                            if (d.valid != false) {
                                f += r;
                            }
                            f += "		</p>" + "	</div>" + "</div>";
                            c += '<div class="cnn_ftrwthr1"><a href="' + e + '">' + '<img class="cnn_ie6png" src="http://i.cdn.turner.com/cnn/.e/img/3.0/weather/03/' + d.icon + '.png" alt="your weather" width="54" height="47" border="0"></a></div>';
                            c += '<div class="cnn_ftrwthr2"><div class="cnn_ftrwthr3">' + s + '</div><div class="cnn_ftrwthr4">' + "<div>HI " + p.high + '&deg;<span style="padding-left:7px">LO ' + p.low + "&deg;</span></div>" + '<div style="clear:left; line-height: 13px"><span style="padding-right:6px"><strong>' + h + '</strong></span><a href="' + e + '">Weather forecast</a></div></div></div></div>';
                        }
                    }
                    if (l[a].forecast.days.length > 0 && MainLocalObj.internationalUser && MainLocalObj.data.userSpecificData) {
                        var k = l[a].forecast.days[1];
                        o += '<p class="weatherDay">Tomorrow</p>' + '<div class="pmWrapper">' + '	<div id="pmWeatherIcon">' + '		<img class="cnn_ie6png" src="http://i.cdn.turner.com/cnn/.e/img/3.0/weather/03/' + k.icon.replace(/gif/, "png") + '" alt="your weather">' + "	</div>" + '	<div id="pmCurrentWeather">' + "	</div>" + '	<div id="pmWeatherDetails">' + '		<p id="pmWeatherDesc">' + k.description + "</p>" + '		<p id="pmWeatherHiLo">' + '			Hi&nbsp;<span id="pmHiTemp">' + k.high + '</span>&deg;&nbsp;&nbsp;<span style="color: #999; font-size: 10px;">|</span>&nbsp;&nbsp;Lo&nbsp;<span id="pmLoTemp">' + k.low + "</span>&deg;" + "		</p>" + "	</div>" + "</div>";
                        $("pmWeatherTom").update(o);
                        $("pmWeatherTom").show();
                    }
                }
            }
            if ($("cnn_hppsnlhdrwthr") !== null) {
                $("cnn_hppsnlhdrwthr").show();
            }
            if ($("pmWeatherTab") !== null) {
                $("pmWeatherTab").update(f);
                $("pmWeatherTab").show();
            }
            if ($("pmWeatherFooter") !== null) {
                $("pmWeatherFooter").update(c);
                $("pmWeatherFooter").show();
            }
        } else {
            MainLocalObj.Weather.displayElements("changeLoc");
        }
        return f;
    },
    updateLocalNews: function(a) {
        MainLocalObj.Weather.displayElements();
        return "";
    },
    requestInternationalCityLookup: function(c, e, b) {
        var a = "mode=json_html&zipCode=" + c;
        if (e) {
            a += "&locCode=" + e;
        }
        if (MainLocalObj.internationalUser) {
            a += "&celcius=true";
        }
        var d = {
            url: MainLocalObj.Weather.weatherURL,
            args: a,
            domId: false,
            funcObj: MainLocalObj.Weather.updateInternationalCityData,
            breakCache: false
        };
        MainLocalObj.CSIManager.callObject(d, "requestInternationalCityLookup");
    },
    updateInternationalCityData: function(e, d) {
        var a = "";
        var c = "";
        var b = "";
        if (e && (e.length>-1) && e[0].location && e[0].location.city) {
            a = e[0].location.locCode;
            b = e[0].location.city;
            if (e[0].location.stateOrCountry) {
                b += ", " + e[0].location.stateOrCountry;
            }
            c = e[0].location.zip;
        }
        if (c && b) {
            MainLocalObj.setLocationZip(d, c);
            MainLocalObj.setLocationName(d, b);
            MainLocalObj.setLocationLocCode(d, a);
            MainLocalObj.setUserSpecificData(true);
            MainLocalObj.Weather.requestLocalAll();
        }
    },
    checkInput: function(f, d) {
        d = d.replace(/\W+/g, " ");
        var e = d.toUpperCase();
        var b = "http://weather.cnn.com/weather/citySearch";
        var a = "search_term=" + MainLocalObj.urlEncode(e) + "&mode=json_html&filter=true";
        var c = {
            url: b,
            args: a,
            domId: MainLocalObj.urlEncode(f + "|" + d),
            funcObj: MainLocalObj.Weather.updateValidationData,
            breakCache: false
        };
        MainLocalObj.CSIManager.callObject(c, "checkInput");
    },
    updateValidationData: function(m, c) {
        var b = MainLocalObj.urlDecode(c).split("|");
        var g = MainLocalObj.trimWS(b[1]);
        var q = " " + g.toUpperCase() + " ";
        var d = "";
        if (m.length > 1) {
            var k = m.length;
            var n = false;
            var s = true;
            var p = [];
            if (k > 50) {
                k = 50;
            }
            for (var l = 0; l < k; l++) {
                var o = m[l].city + ", " + m[l].stateOrCountry;
                var a = m[l].zip.toString();
                var e = m[l].locCode;
                var r = {};
                var f = " " + MainLocalObj.trimWS(o.toUpperCase()) + " ";
                if ((MainLocalObj.checkZip(g) && g == a) || (q == f)) {
                    r.zip = a;
                    r.locCode = e;
                    r.name = o;
                    p.push(r);
                    s = false;
                    n = r;
                    l = k;
                } else {
                    if (f.indexOf(q)!=-1) {
                        r.zip = a;
                        r.locCode = e;
                        r.name = o;
                        p.push(r);
                        s = false;
                    }
                }
            }
            if (s) {
                MainLocalObj.Weather.displayNoMatch(b[0], g);
            } else {
                if (p.length == 1 || n) {
                    if (!n) {
                        n = p[0];
                    }
                    d = {};
                    d.name = n.city + ", " + n.stateOrCountry;
                    d.zip = n.zip.toString();
                    d.locCode = n.locCode;
                    MainLocalObj.Weather.localUpdateData(d.name, d.zip, d.locCode, b[0]);
                    MainLocalObj.Weather.displayElements(b[0]);
                } else {
                    MainLocalObj.Weather.displayMultipleMatches(p, MainLocalObj.urlDecode(b[1]), b[0]);
                }
            }
        } else {
            if ((m.length == 1) && (m[0] && m[0].locCode && m[0].locCode != "")) {
                var h = m[0];
                d = {};
                d.name = h.city + ", " + h.stateOrCountry;
                d.zip = h.zip.toString();
                d.locCode = h.locCode;
                MainLocalObj.Weather.localUpdateData(d.name, d.zip, d.locCode, b[0]);
                MainLocalObj.Weather.displayElements(b[0]);
            } else {
                MainLocalObj.Weather.displayNoMatch(b[0], g);
            }
        }
        return "";
    },
    displayMultipleMatches: function(e, g, l) {
        g = g.replace(/\W+/g, " ");
        var f = [];
        var k = [];
        var h = [];
        e.each(function(m) {
            if (m.zip.length > 5) {
                h.push(m);
            } else {
                k.push(m);
            }
        });
        f = h.concat(k);
        var c = $F("weatherLoc");
        var b = "pmLocResultsContainer";
        var a = '<p id="pmWeatherResultMeta">We Found ' + f.length + ' Results for &quot;<span id="resultLoc">' + g + "</span>&quot;</p>";
        a += '<ul id="pmWeatherResult">';
        for (var d = 0; d < f.length; d++) {
            a += '<li><a href="javascript:void(0)" onclick="MainLocalObj.Weather.resetSearch(\'' + l + "');" + "MainLocalObj.Weather.localUpdateData('" + f[d].name + "','" + f[d].zip + "','" + f[d].locCode + "','" + l + '\');"><span class="pmHLBullet">&bull;</span>' + f[d].name + "</a></li>";
        }
        a += "</ul>";
        MainLocalObj.Weather.displayElements("displayResults");
        Element.update(b, a);
    },
    displayNoMatch: function(b, d) {
        d = d.replace(/\W+/g, " ");
        var a = "pmLocResultsContainer";
        var c = '<p id="pmWeatherResultMeta">We didn\'t find results  for &quot;<span id="resultLoc">' + d + "</span>&quot;</p>" + '<ul id="pmWeatherResult">' + '	<li><span class="pmHLBullet">&bull;</span><span>Check the spelling of your city name</span></li>' + '	<li><span class="pmHLBullet">&bull;</span><span>Make sure the U.S. ZIP code is accurate</span></li>' + '	<li><span class="pmHLBullet">&bull;</span><span>Use USPS for U.S. ZIP codes / city name</span></li>' + "</ul>";
        MainLocalObj.Weather.displayElements("displayResults");
        Element.update(a, c);
    },
    resetSearch: function(b) {
        var c = "weatherLoc";
        var a = "pmLocResultsContainer";
        Element.update(a, "");
        $(c).value = MainLocalObj.Weather.defaultMsg;
    }
};
MainLocalObj.Markets = {
    redirectSymbol: false,
    init: function() {
        var b;
        this.defaultMsg = "Enter Symbol";
        this.errorMsg = "No match. Please enter a new symbol.";
        if (MainLocalObj.internationalUser) {
            b = "/cnnintl_adspaces/3.0/homepage/spon.88x31_worldbiz.ad";
        }
        if (b) {
            new Ajax.Updater("moneySponsor", b, {
                method: "get",
                evalScripts: true
            });
        }
        var c = null;
        if ($("pmMarkets") !== null) {
            MainLocalObj.Markets.togBtns = $("pmMarkets").select("a.toggle");
            c = MainLocalObj.allCookies["pm.markets.lastIndex"] || null;
            if (c !== null && $(c)) {
                if (c === "myQuotesBtn"&&!ms_isLoggedIn()) {
                    var c = "defIndexBtn";
                }
                MainLocalObj.Markets.setActiveIndex($(c), MainLocalObj.Markets.togBtns);
            }
            MainLocalObj.Markets.togBtns.each(function(d) {
                d.observe("click", function() {
                    MainLocalObj.Markets.setActiveIndex(d, MainLocalObj.Markets.togBtns);
                });
            });
        }
        if (!MainLocalObj.internationalUser && $("searchQuote") !== null) {
            var a = $("searchQuote");
            a.addClassName("pmWeatherHollow");
            a.value = "Enter Symbol";
            if (!MainLocalObj.disableSymbolLookup) {
                MainLocalObj.Markets.symbLookup = new AutoComplete("searchQuote", "http://markets.money.cnn.com/services/cnndotcom/lookup.asp");
            }
        }
        if ($("pmMarkets") !== null) {
            $("pmMarkets").show();
        }
        if ($("cnn_personalloading") !== null) {
            $("cnn_personalloading").hide();
        }
        MainLocalObj.Markets.isInitialized = true;
    },
    setActiveIndex: function(b, a) {
        if (b.id == "myQuotesBtn") {
            MainLocalObj.Markets.fetchStockQuotes();
        }
        a.each(function(c) {
            var d;
            if (c.id === "myQuotesBtn") {
                d = "pmMyQuotes";
            } else {
                if (c.id === "defIndexBtn") {
                    d = "pmDefaultIndecies";
                } else {
                    d = c.id.replace("Btn", "");
                }
            }
            if (c.id === b.id) {
                c.removeClassName("togOff").addClassName("togOn");
                $(d).removeClassName("pmOff").addClassName("pmOn");
                CNN_setCookie("pm.markets.lastIndex", b.id, 24 * 30 * 12, "/", document.domain);
            } else {
                c.removeClassName("togOn").addClassName("togOff");
                $(d).removeClassName("pmOn").addClassName("pmOff");
            }
        });
        MainLocalObj.data.prevStockSymbols = MainLocalObj.data.stockSymbols.slice();
        if ($("searchQuote")) {
            if ($("searchQuote").hasClassName("errorColor")) {
                $("searchQuote").removeClassName("errorColor");
            }
            $("searchQuote").value = "";
        }
        if (!MainLocalObj.internationalUser) {
            MainLocalObj.Markets.inputBlur($("searchQuote"));
        }
    },
    lookupStockSymbol: function() {
        var b = $F("searchQuote");
        if (b === MainLocalObj.Markets.defaultMsg) {
            MainLocalObj.Markets.inputBlur($("searchQuote"));
        } else {
            if (b !== "") {
                this.redirectSymbol = true;
                var a = [];
                MainLocalObj.Markets.setActiveIndex($("myQuotesBtn"), MainLocalObj.Markets.togBtns);
                b = b.replace(/[^a-zA-Z 0-9]+/g, "");
                b = b.toUpperCase();
                if (MainLocalObj.data.stockSymbols.indexOf(b) != "-1") {
                    a = MainLocalObj.data.stockSymbols.without(b);
                } else {
                    a = MainLocalObj.data.stockSymbols.slice();
                }
                a.push(b);
                a.reverse();
                a = a.slice(0, 3);
                a.reverse();
                MainLocalObj.Markets.fetchStockQuotes(a);
            }
        }
    },
    fetchStockQuotes: function(a) {
        var c;
        if (typeof a === "undefined") {
            a = false;
        }
        if (!MainLocalObj.Markets.redirectSymbol && $("pmMyQuotes") !== null) {
            $("pmMyQuotes").update("");
        }
        if ($("searchQuote")) {
            $("searchQuote").blur();
        }
        if (a) {
            c = a.join();
        } else {
            if (typeof MainLocalObj.data.stockSymbols === "object" && MainLocalObj.data.stockSymbols.length > 0) {
                c = MainLocalObj.data.stockSymbols.join();
            } else {
                MainLocalObj.data.stockSymbols = [];
                c = "";
            }
        }
        if (c.length > 0) {
            var b = {
                url: "http://markets.money.cnn.com/services/cnndotcom/quote.asp",
                args: "symbols=" + c.replace(/,/g, "|") + "&domains=cnn.com|turner.com",
                domId: false,
                funcObj: MainLocalObj.Markets.parseQuotes,
                breakCache: true
            };
            MainLocalObj.CSIManager.callObject(b, "requestMyQuotes");
        } else {
            MainLocalObj.Markets.inputBlur($("searchQuote"));
        }
    },
    parseQuotes: function(e) {
        var l, g;
        var d = [];
        var a = false;
        var m = $("searchQuote");
        var h = e.quotes.quote;
        if (!MainLocalObj.Markets.redirectSymbol) {
            $("pmMyQuotes").update("<ul></ul>");
        }
        var o = $("pmMyQuotes").select("ul")[0];
        var f = new Template(' 			<li class="market-#{index}"> 			    <div class="marketInfo-left"> <!-- left side --> 			        <span class="marketName"><a href="http://money.cnn.com/quote/quote.html?symb=#{symbol}">#{symbol}</a></span>&nbsp;&nbsp; 			        <span class="marketIndex">#{last}</span> 			        <a class="removeSymbLookup" href="javascript:MainLocalObj.Markets.removeQuote(#{index})" title="Remove">Remove</a> 			    </div> 			    <div class="marketNums-right #{plusMinClass}"> 			        <div class="percentDiff"> 			            <span>(<span class="plusMinus">#{plusMin}</span>#{changePct} &#37;)</span> 			        </div> 			        <div class="numDiff"> 			            <span><span class="plusMinus">#{plusMin}</span>#{change}</span> 			        </div> 			    </div> 			</li> 		');
        function c(t, s) {
            var q = t.toString();
            var u = q.indexOf(".");
            if (u==-1) {
                decimalPartLength = 0;
                q += s > 0 ? "." : "";
            } else {
                decimalPartLength = q.length - u - 1;
            }
            var p = s - decimalPartLength;
            if (p > 0) {
                for (var r = 1; r <= p; r++) {
                    q += "0";
                }
            }
            return q;
        }
        function k(p) {
            var q = Math.round(p * 100) / 100;
            q = c(q, 2);
            q = q.replace("-", "");
            return q;
        }
        function b(p) {
            var q = {};
            if (p.change.indexOf("-")>-1) {
                q.plusMin = "-";
                q.plusMinClass = "down";
            } else {
                if (parseInt(p.last) === 0) {
                    q.plusMin = "";
                    q.plusMinClass = "";
                } else {
                    q.plusMin = "+";
                    q.plusMinClass = "up";
                }
            }
            return q;
        }
        if (MainLocalObj.Markets.redirectSymbol) {
            if (h[h.length - 1].status !== "-1") {
                location.href = "http://money.cnn.com/quote/quote.html?symb=" + h[h.length - 1].cnnSymbol;
                return;
            }
        }
        for (var n in h) {
            if (typeof(h[n].change) == "undefined") {
                continue;
            }
            if (h[n].status === "-1" || h[n].cnnSymbol === "undefined") {
                a = true;
            } else {
                if (!MainLocalObj.Markets.redirectSymbol) {
                    g = b(h[n]);
                    l = f.evaluate({
                        index: (parseInt(n) + 1),
                        symbol: h[n].cnnSymbol,
                        last: k(h[n].last),
                        changePct: k(h[n].changePct),
                        change: k(h[n].change),
                        plusMin: g.plusMin,
                        plusMinClass: g.plusMinClass
                    });
                    o.insert({
                        top: l
                    });
                    d.push(h[n].cnnSymbol);
                }
            }
        }
        if (a) {
            m.addClassName("errorColor");
            m.value = MainLocalObj.Markets.errorMsg;
            MainLocalObj.Markets.redirectSymbol = false;
            MainLocalObj.Markets.fetchStockQuotes(MainLocalObj.data.prevStockSymbols);
        } else {
            MainLocalObj.data.stockSymbols = d;
            MainLocalObj.saveData(true);
        }
        MainLocalObj.Markets.symbLookup.hide();
        MainLocalObj.Markets.symbLookup.stopLookup = true;
        MainLocalObj.Markets.fixBorders();
    },
    inputFocus: function(a) {
        if (a.value === MainLocalObj.Markets.defaultMsg || a.value === MainLocalObj.Markets.errorMsg) {
            if (a.hasClassName("errorColor")) {
                a.removeClassName("errorColor");
            }
            a.value = "";
        }
        a.removeClassName("pmWeatherHollow");
    },
    inputBlur: function(a) {
        if (a !== null && a.value === "") {
            a.value = MainLocalObj.Markets.defaultMsg;
            a.addClassName("pmWeatherHollow");
        }
    },
    fixBorders: function() {
        var a = $("pmMyQuotes").select("li");
        if (a.length) {
            a[a.length - 1].addClassName("last");
        }
    },
    removeQuote: function(a) {
        var b = $("pmMyQuotes").select("li.market-" + a)[0];
        b.remove();
        MainLocalObj.Markets.fixBorders();
        MainLocalObj.data.stockSymbols = MainLocalObj.data.stockSymbols.without(MainLocalObj.data.stockSymbols[a - 1]);
        MainLocalObj.saveData();
    }
};
var AutoComplete = Class.create({
    selector: null,
    input: null,
    _timeout: null,
    visible: false,
    drawn: false,
    _hideTimeout: null,
    options: null,
    stopLookup: false,
    initialize: function(a, c, b) {
        this.action = c;
        this.input = $(a);
        this.input.autocomplete = "off";
        this.options = new AutoComplete.Options(b || {});
        this.selector = document.createElement("select");
        Event.observe(this.input, "focus", this._onInputFocus.bindAsEventListener(this));
        Event.observe(this.input, "keydown", this._onInputKeyDown.bindAsEventListener(this));
        Event.observe(this.input, "blur", this._onInputBlur.bindAsEventListener(this));
        Event.observe(this.selector, "blur", this._onSelectorBlur.bindAsEventListener(this));
        Event.observe(this.selector, "focus", this._onSelectorFocus.bindAsEventListener(this));
        Event.observe(this.selector, "change", this._onSelectorChange.bindAsEventListener(this));
        Event.observe(window, "resize", this._reposition.bind(this));
        Event.observe(window, "scroll", this._reposition.bind(this));
    },
    _onInputFocus: function(a) {
        this._onSelectorFocus(a);
        MainLocalObj.Markets.inputFocus(this.input);
    },
    _onSelectorBlur: function(a) {
        this._onInputBlur(a);
    },
    _onInputBlur: function(a) {
        this._hideTimeout = setTimeout(this._checkOnBlur.bind(this), 100);
    },
    _checkOnBlur: function() {
        this._hideTimeout = null;
        this.hide();
    },
    _onInputKeyUp: function(a) {
        this._suggest(a) && Event.stop(a);
    },
    _onInputKeyDown: function(a) {
        this._suggest(a) && Event.stop(a);
    },
    _onSelectorFocus: function(a) {
        if (this._hideTimeout) {
            clearTimeout(this._hideTimeout);
            this._hideTimeout = null;
        }
    },
    _onSelectorChange: function(a) {
        this.select();
    },
    draw: function() {
        if (this.drawn) {
            return;
        }
        if (this.options.cssClass) {
            this.selector.className = this.options.cssClass;
        }
        Element.setStyle(this.selector, {
            display: "none",
            position: "absolute"
        });
        this.selector.size = this.options.size;
        document.body.appendChild(this.selector);
        this.input.autocomplete = "off";
        this.drawn = true;
    },
    hide: function() {
        if (!this.drawn ||!this.visible) {
            return;
        }
        this.visible = false;
        if (window.Scriptaculous) {
            new Effect.BlindUp(this.selector, {
                duration: this.options.delay,
                queue: "end",
                afterFinish: function(a) {
                    Element.setStyle(this.selector, {
                        display: "none"
                    });
                    this.selector.options.length = 0;
                    setTimeout(this._restoreFocus.bind(this), 50);
                }.bind(this)
            });
        } else {
            Element.setStyle(this.selector, {
                display: "none"
            });
            this.selector.options.length = 0;
            setTimeout(this._restoreFocus.bind(this), 50);
        }
    },
    _restoreFocus: function() {
        this.input.focus();
    },
    show: function() {
        if (!this.drawn) {
            this.draw();
        }
        var a = null;
        if (this.selector.options.length) {
            if (window.Scriptaculous) {
                new Effect.BlindDown(this.selector, {
                    duration: this.options.delay,
                    queue: "end"
                });
            } else {
                Element.setStyle(this.selector, {
                    display: "inline"
                });
            }
            this._reposition();
            this.visible = true;
        }
    },
    _cancelTimeout: function() {
        if (this._timeout) {
            clearTimeout(this._timeout);
            this._timeout = null;
        }
    },
    _suggest: function(c) {
        this._cancelTimeout();
        var b = Event.keyPressed(c);
        var a = [20, 16, 17, 91, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 45, 36, 35, 33, 34, 144, 145, 44, 19, 93, ];
        if (a.indexOf(b)>-1) {
            return false;
        }
        switch (b) {
        case Event.KEY_LEFT: case Event.KEY_RIGHT: return false;
            break;
        case Event.KEY_TAB: case Event.KEY_BACKSPACE: case 46: this.cancel();
            return false;
            break;
        case Event.KEY_RETURN: if (this.visible && this.selector.selectedIndex != "-1") {
                this.select();
                return true;
            } else {
                return false;
            }
            break;
        case Event.KEY_ESC: this.cancel();
            return true;
            break;
        case Event.KEY_UP: case Event.KEY_DOWN: this._interact(c);
            return true;
            break;
        default: break;
        }
        if (this.input.value.length >= this.options.threshold - 1) {
            this._timeout = setTimeout(this._sendRequest.bind(this), 1000 * this.options.delay);
        }
        return false;
    }, _sendRequest: function() {
        var a = {
            url: this.action, args: "symbol=" + this.input.value + "&domains=cnn.com|turner.com", domId: false, funcObj: this._process.bind(this), breakCache: true
        };
        MainLocalObj.CSIManager.callObject(a);
    }, _reposition: function() {
        if (!this.drawn) {
            return;
        }
        var a = Position.cumulativeOffset(this.input);
        a.push(a[0] + this.input.offsetWidth);
        a.push(a[1] + this.input.offsetHeight);
        Element.setStyle(this.selector, {
            left: a[0] + "px",
            top: a[3] + "px"
        });
    },
    _getPadding: function(a) {
        var c = "";
        var d = 8 - a;
        for (var b = 0; b < d; b++) {
            c += "\xa0";
        }
        return c;
    },
    _process: function(d) {
        if (this.stopLookup) {
            this.hide();
            this.cancel();
            this.stopLookup = false;
            return;
        }
        this.selector.options.length = 0;
        var c;
        var b;
        for (var a in d.data) {
            for (var e in d.data[a]) {
                if (typeof(d.data[a][e].s) != "undefined") {
                    c = d.data[a][e].s;
                    b = c + this._getPadding(c.length) + d.data[a][e].n;
                    this._addOption(b, c);
                }
            }
        }
        if (this.selector.options.length > (this.options.size)) {
            this.selector.size = this.options.size;
        } else {
            this.selector.size = this.selector.options.length > 1 ? this.selector.options.length : 2;
        }
        if (this.selector.options.length) {
            this.selector.selectedIndex =- 1;
            this.show();
        } else {
            this.cancel();
        }
    },
    _addOption: function(a, c) {
        var b = new Option(a, c);
        Prototype.Browser.IE ? this.selector.add(b) : this.selector.add(b, null);
    },
    cancel: function() {
        this.hide();
    },
    select: function() {
        if (this.selector.options.length) {
            this.input.value = this.selector.options[this.selector.selectedIndex].value;
            MainLocalObj.Markets.lookupStockSymbol();
        }
        this.cancel();
        if (typeof this.options.onSelect == "function") {
            this.options["onSelect"](this.input);
        }
    },
    _interact: function(b) {
        if (!this.visible) {
            return;
        }
        var a = Event.keyPressed(b);
        if (a != Event.KEY_UP && a != Event.KEY_DOWN) {
            return;
        }
        var c = this.selector.options.length;
        if (a == Event.KEY_UP) {
            if (this.selector.selectedIndex == 0) {
                this.selector.selectedIndex = this.selector.options.length - 1;
            } else {
                this.selector.selectedIndex--;
            }
        } else {
            if (this.selector.selectedIndex == this.selector.options.length - 1) {
                this.selector.selectedIndex = 0;
            } else {
                this.selector.selectedIndex++;
            }
        }
    }
});
AutoComplete.Options = Class.create({
    size: 3,
    cssClass: "symbolLookup",
    onSelect: null,
    threshold: 1,
    delay: 0.15,
    requestMethod: "GET",
    initialize: function(a) {
        Object.extend(this, a || {});
    }
});
Object.extend(Event, {
    KEY_BACKSPACE: 8,
    KEY_TAB: 9,
    KEY_RETURN: 13,
    KEY_ESC: 27,
    KEY_LEFT: 37,
    KEY_UP: 38,
    KEY_RIGHT: 39,
    KEY_DOWN: 40,
    KEY_DELETE: 46,
    KEY_SHIFT: 16,
    KEY_CONTROL: 17,
    KEY_CAPSLOCK: 20,
    KEY_SPACE: 32,
    keyPressed: function(a) {
        return Prototype.Browser.IE ? window.event.keyCode : a.which;
    }
});
var fwLib = {
    version: 1,
    loadComplete: false,
    currentSwapIndex: 0,
    fwJSLibsLoaded: function() {
        return true;
    },
    flIntegration: {
        testFn: function() {
            alert("FL Integration");
        },
        getElementsByClass: function(a, m, e) {
            var b = (m == "*" && a.all) ? a.all: a.getElementsByTagName(m);
            var l = new Array();
            var n = new Array();
            if (typeof e == "object") {
                for (var f = 0; f < e.length; f++) {
                    n.push(new RegExp("(^|\\s)" + e[f].replace(/\-/g, "\\-") + "(\\s|$)"));
                }
            } else {
                n.push(new RegExp("(^|\\s)" + e.replace(/\-/g, "\\-") + "(\\s|$)"));
            }
            var g;
            var h;
            for (var d = 0; d < b.length; d++) {
                g = b[d];
                h = true;
                for (var c = 0; c < n.length; c++) {
                    if (!n[c].test(g.className)) {
                        h = false;
                        break;
                    }
                }
                if (h) {
                    l.push(g);
                }
            }
            return l;
        },
        findPageSlots: function() {
            var c = new Array();
            var e = "";
            var a = this.getElementsByClass(document, "span", "_fwph");
            for (var d = 0; d < a.length; ++d) {
                e = a[d].getAttribute("id");
                c.push(e);
                var b = document.getElementById("_fw_input_" + e);
                c.push(b.getAttribute("value"));
            }
            return c;
        },
        savedSlots: [],
        replacePageSlotInnerHtml: function(innerHTML, safeId, saveOrigin) {
            var parentContainer = document.getElementById(safeId);
            var originalContainer = document.getElementById("_fw_container_" + safeId);
            var adContainer = document.createElement("span");
            var isIE = navigator.appVersion.match(/\bMSIE\b/);
            if (document.getElementById("_fw_container_" + safeId + "_new_" + fwLib.currentSwapIndex)) {
                this.restorePageSlot(safeId);
            }
            var newSpanId = "_fw_container_" + safeId;
            if (saveOrigin) {
                newSpanId += "_new_" + fwLib.currentSwapIndex;
            }
            var attrs = originalContainer.attributes;
            for (var i = 0; i < attrs.length; i++) {
                var name = attrs[i].name || attrs[i].nodeName;
                var value = attrs[i].value || attrs[i].nodeValue;
                if (isIE && (!name || value === "null" || value === "false" ||!value)) {
                    continue;
                }
                if (name == "id") {
                    value = newSpanId;
                }
                adContainer.setAttribute(name, value);
            }
            if (isIE) {
                for (var i in originalContainer.style) {
                    try {
                        if (i == "content") {
                            continue;
                        }
                        adContainer.style[i] = originalContainer.style[i];
                    } catch (e) {}
                }
            }
            if (saveOrigin) {
                originalContainer.style.display = "none";
                parentContainer.appendChild(adContainer);
            } else {
                originalContainer.parentNode.replaceChild(adContainer, originalContainer);
            }
            adContainer.innerHTML = innerHTML;
            var fw_js = document.getElementById("_fw_container_js_" + safeId);
            if (fw_js) {
                eval(fw_js.innerHTML);
            }
        },
        restorePageSlot: function(a) {
            if (!a ||!document.getElementById("_fw_container_" + a + "_new_" + fwLib.currentSwapIndex)) {
                return;
            }
            var c = document.getElementById("_fw_container_" + a + "_new_" + fwLib.currentSwapIndex++);
            document.getElementById(a).removeChild(c);
            var b = document.getElementById("_fw_container_" + a);
            b.style.display = "inline";
        },
        clearSavedPageSlots: function() {
            for (var a in fwLib.flIntegration.savedSlots) {
                fwLib.flIntegration.savedSlots[a] = null;
            }
        },
        isPageLoaded: function() {
            return fwLib.loadComplete;
        },
        onLoadComplete: function() {
            fwLib.loadComplete = true;
        },
        addLoadEvent: function(a) {
            var b = window.onload;
            if (typeof window.onload != "function") {
                window.onload = a;
            } else {
                window.onload = function() {
                    if (b) {
                        b();
                    }
                    a();
                };
            }
        }
    }
};
fwLib.flIntegration.addLoadEvent(fwLib.flIntegration.onLoadComplete);
function CNN_extractHost(a) {
    var b = /^(?:[^:\/?#]+):\/\/([^\/?#]+)(?::\d+)?(?:[^?#]*)\//i.exec(a);
    if (b && typeof b === "object") {
        return b[1];
    } else {
        return "";
    }
}
function CNN_bustFrame() {
    var a = ["digg.com"];
    if (top.location != window.location) {
        var c = CNN_extractHost(document.referrer);
        if (c) {
            for (var b = 0; b < a.length; b++) {
                if (c.indexOf(a[b])!=-1) {
                    top.location.replace(window.location);
                    return;
                }
            }
        }
    }
}
CNN_bustFrame();
var adHeadOffset, adHeadClass, allCookies, adHeadCookie, isClassAndOffsetValid, alreadySwappedTargetImage, alreadySwappedCookieCrumb, adHeadHash, validClassesAndOffsets, i, alreadySwappedDETargetImage, cnnDEadDEonCookie, cnnU_Country, cnnAdDE_UVal;
function CNN_getCookies() {
    var d, c, b, a;
    d = [];
    if (document.cookie) {
        c = document.cookie.split("; ");
        for (b = 0; b < c.length; b += 1) {
            a = c[b].split("=");
            d[a[0]] = unescape(a[1]) || null;
        }
    }
    return d;
}
function CNN_parseCookieData(a) {
    var d, e, b, c;
    d = {};
    e = a.split("&");
    for (b = 0; b < e.length; b += 1) {
        c = e[b].split(":");
        d[c[0]] = c[1] || null;
    }
    return d;
}
adHeadOffset = 0;
adHeadClass = "us.low";
allCookies = new CNN_getCookies();
adHeadCookie = allCookies.hasOwnProperty("Target") ? allCookies.Target : null;
isClassAndOffsetValid = false;
alreadySwappedTargetImage = false;
alreadySwappedCookieCrumb = false;
if (adHeadCookie) {
    adHeadHash = new CNN_parseCookieData(adHeadCookie);
    if (adHeadHash.o && adHeadHash["class"]) {
        validClassesAndOffsets = ["us.low", 0, "us.high", 1, "intl", 2, "intl", 3, "us.edu", 0, "us.gov", 0, "us.mil", 0, "us.org", 0];
        for (i = 0; i < validClassesAndOffsets.length; i += 2) {
            if (validClassesAndOffsets[i] === adHeadHash["class"] && validClassesAndOffsets[i + 1] === adHeadHash.o) {
                isClassAndOffsetValid = true;
                break;
            }
        }
    }
    if (isClassAndOffsetValid) {
        adHeadOffset = adHeadHash.o;
        adHeadClass = adHeadHash["class"];
    }
}
function getCookieCrumb(b) {
    var a;
    a = allCookies.CNNid;
    if (!alreadySwappedCookieCrumb&&!("G" === a && a.charAt(0))) {
        b.src = "http://cnn.dyn.cnn.com/cookie.crumb";
        alreadySwappedCookieCrumb = true;
    }
}
document.adoffset = adHeadOffset;
function getAdHeadCookie(b) {
    var a;
    a = "http://cnn.dyn.cnn.com/1.gif?" + new Date().getTime();
    if (!alreadySwappedTargetImage&&!isClassAndOffsetValid && ("undefined" !== typeof WM_browserAcceptsCookies) && (new WM_browserAcceptsCookies())) {
        b.src = a;
        alreadySwappedTargetImage = true;
    }
}
alreadySwappedDETargetImage = false;
cnnDEadDEonCookie = false;
cnnU_Country = "";
cnnAdDE_UVal = "R00";
function WM_readCookie(b) {
    var d, c, a, e;
    if ("" === document.cookie) {
        return false;
    } else {
        a = document.cookie;
        d = a.indexOf(b);
        e = d + b.length;
        if (( - 1 !== d) && "=" === (a.charAt(e))) {
            d += b.length + 1;
            c = a.indexOf(";", d);
            if ( - 1 === c) {
                c = a.length;
            }
            return unescape(a.substring(d, c));
        } else {
            return false;
        }
    }
}
function getDEAdHeadCookie(b) {
    var a;
    cnnDEadDEonCookie = allCookies.adDEon;
    a = "http://gdyn.cnn.com/1.1/1.gif?" + new Date().getTime();
    if (!alreadySwappedDETargetImage&&!cnnDEadDEonCookie) {
        b.src = a;
        alreadySwappedDETargetImage = true;
    }
}
var AIS_VERSION = "ais.cnnintl.5";
var cnnad_transactionID = null;
function cnnad_getTransactionID() {
    if (cnnad_transactionID == null) {
        cnnad_transactionID = "";
        cnnad_transactionID = Math.round((new Date).getTime() / 1000) + "" + Math.floor(Math.random() * 9007199254740992);
    }
    return cnnad_transactionID;
}
cnnad_getTransactionID();
function cnnad_readCookie(b) {
    if (document.cookie == "") {
        return null;
    } else {
        var a = document.cookie.split(";");
        var e = b + "=";
        for (var d = 0; d < a.length; d++) {
            var f = a[d];
            while (f.charAt(0) == " ") {
                f = f.substring(1, f.length);
            }
            if (f.indexOf(e) == 0) {
                return f.substring(e.length, f.length);
            }
        }
        return null;
    }
}
function cnnad_haveCookie(b) {
    return document.cookie && ( - 1 < document.cookie.indexOf("; " + b + "=") || document.cookie.indexOf(b + "=") == 0);
}
function cnnad_ugsync() {
    if (!cnnad_haveCookie("ugs")) {
        document.write("<scr" + 'ipt src="http://www.ugdt' + 'urner.com/xd.sjs"></scr' + "ipt>");
    }
}
cnnad_ugsync();
window.Krux || ((Krux = function() {
    Krux.q.push(arguments);
}).q = []);
(function() {
    var b = document.createElement("script");
    b.type = "text/javascript";
    b.async = true;
    var a, d = (a = location.href.match(/\bkxsrc=([^&]+)/)) && decodeURIComponent(a[1]);
    b.src = /^https?:\/\/([^\/]+\.)?krxd\.net(:\d{1,5})?\//i.test(d) ? d : d === "disable" ? "" : (location.protocol === "https:" ? "https:" : "http:") + "//cdn.krxd.net/controltag?confid=ITb_9Zup";
    var c = document.getElementsByTagName("script")[0];
    c.parentNode.insertBefore(b, c);
})();
window.Krux || ((Krux = function() {
    Krux.q.push(arguments);
}).q = []);
window.kvs = [];
(function getKruxData() {
    function b(e) {
        var c, d = "kx" + e;
        if (window.localStorage) {
            return window.localStorage[d] || "";
        } else {
            if (navigator.cookieEnabled) {
                c = document.cookie.match(d + "=([^;]*)");
                return c && unescape(c[1]) || "";
            } else {
                return "";
            }
        }
    }
    Krux.user = b("user");
    Krux.segments = b("segs") && b("segs").split(",") || [];
    for (var a = 0; a < Krux.segments.length; a++) {
        if (kvs.length < 20) {
            kvs.push(Krux.segments[a]);
        }
    }
})();
function krux_getDESegments() {
    var a = "&kxid=";
    if (Krux.user) {
        a += Krux.user;
    }
    a += "&kxseg=" + kvs.join(",");
    return a;
}
function krux_getFWSegments() {
    return "kxseg=" + kvs.join(",kxseg=");
}
var cnnad_tileID = cnnad_getID();
var cnnad_enabled = true;
var cnnad_adIframes = new Array();
var cnnad_adVault = new Array();
var cnnad_adCache = new Array();
var cnnad_interstitialPID = null;
var cnnad_interstitialPlaying = false;
var alreadySwappedDETargetImage = false;
var cnnDEadDEonCookie = false;
var cnnDocDomain = cnnad_getTld(location.hostname);
if (cnnDocDomain) {
    document.domain = cnnDocDomain;
}
var cnnad_pageMode = 1;
var cnnad_calledURLs = new Array();
var cnnad_successfulSend = 0;
var cnnad_resultArray = new Array();
var cnnad_ADMSizes = new Array();
cnnad_ADMSizes = ["728x90", "300x250", "336x280", "160x600", "336x850", "300x600"];
function cnnad_setADMSizes(a) {
    cnnad_ADMSizes = a;
}
function cnnad_parseReferrer(b) {
    if (!b) {
        return null;
    }
    var c = b.substring(0, b.indexOf("/", 7));
    if (c.indexOf(":", 5) > 0) {
        c = c.substring(0, b.indexOf(":", 5));
    }
    c = c.substring(c.lastIndexOf("/") + 1);
    var a = c.split(".");
    return (a[a.length - 2] + "." + a[a.length - 1]);
}
function cnnad_sendADMData() {
    var g = "";
    for (as = 0; as < cnnad_ADMSizes.length; as++) {
        var c = cnnad_calledURLs[cnnad_ADMSizes[as]];
        if (c && cnnad_successfulSend == 0) {
            if (cnnad_pageMode != 3) {
                g += "<scr" + "ipt> \n ";
                if (cnnad_pageMode == 1) {
                    g += '	A09801.DM_cat("';
                    var b = cnnad_getParamValue(c, "site=", "&");
                    var d = cnnad_getParamValue(c, "_rollup=", "&");
                    var f = cnnad_getParamValue(c, "_section=", "&");
                    var e = cnnad_getParamValue(c, "_subsection=", "&");
                    var a = cnnad_parseReferrer(document.referrer);
                    g += b;
                    if ((b != "") && ((d != "") || (f != "") || (e != ""))) {
                        g += " > ";
                    }
                    g += d;
                    if ((d != "") && ((f != "") || (e != ""))) {
                        g += " > ";
                    }
                    g += f;
                    if ((f != "") && (e != "")) {
                        g += " > ";
                    }
                    g += e;
                    g += '"); \n ';
                    if (a) {
                        g += ' A09801.DM_addEncToLoc("refer", "' + a + '"); \n ';
                    } else {
                        g += " A09801.DM_addEncToLoc(); \n ";
                    }
                }
                g += "	A09801.DM_tag(); \n ";
                g += "</scr" + "ipt> \n ";
                document.write(g);
            }
            cnnad_successfulSend = 1;
            break;
        }
    }
}
function cnnad_getParamValue(e, f, c) {
    if (e.match(f)) {
        var a = e.indexOf(f) + f.length;
        var b = e.indexOf(c, a);
        var d = e.substring(a, b);
        return d;
    } else {
        return "";
    }
}
var cnnad_adTileIDGroup = new Array();
var cnnad_newTileIDIteration = 0;
var cnnad_tileExemptions = new Array();
function cnnad_addExemptCriteria() {
    var a = cnnad_tileExemptions.length;
    if (arguments.length%2 != 0) {
        return;
    }
    cnnad_tileExemptions[a] = new Array();
    for (var b = 0; b < arguments.length; b += 2) {
        cnnad_tileExemptions[a][arguments[b]] = arguments[b + 1];
    }
}
function cnnad_checkTileExempt(c) {
    var a;
    for (var b = 0; b < cnnad_tileExemptions.length; b++) {
        a = true;
        for (adKey in cnnad_tileExemptions[b]) {
            adValue = cnnad_getParamValue(c, adKey + "=", "&");
            if (cnnad_tileExemptions[b][adKey] != adValue) {
                a = false;
                break;
            }
        }
        if (a) {
            return true;
        }
    }
    return false;
}
function cnnad_newTileIDGroup(c) {
    var b = (cnnad_tileID * 1 + 4 * (++cnnad_newTileIDIteration));
    for (var a = 0; a < c.length; a++) {
        cnnad_adTileIDGroup[cnnad_adTileIDGroup.length] = {
            tileID: b,
            adName: c[a]
        };
    }
}
function cnnad_getDynamicTileID(c) {
    var b = cnnad_tileID;
    if (cnnad_checkTileExempt(c)) {
        return b;
    }
    if (cnnad_adTileIDGroup.length > 0) {
        var e;
        if (c.match("_position=")) {
            e = cnnad_getParamValue(c, "_position=", "&");
        } else {
            if (c.match("_pos=")) {
                e = cnnad_getParamValue(c, "_pos=", "&");
            } else {
                e = "";
            }
        }
        for (var a = 0; a < cnnad_adTileIDGroup.length; a++) {
            var d = cnnad_adTileIDGroup[a].adName;
            if (e == d) {
                b = cnnad_adTileIDGroup[a].tileID;
                break;
            }
        }
    }
    return b;
}
function cnnad_debug(a) {
    if (typeof(console) != "undefined" && typeof(console.debug) != "undefined") {
        console.debug(a);
    }
}
function cnnad_error(a) {
    if (typeof(console) != "undefined" && typeof(console.error) != "undefined") {
        console.error(a);
    }
}
function cnnad_reverseString(b) {
    b = "" + b;
    var a = "";
    if (b.length) {
        var c;
        for (c = b.length; c > 0; c--) {
            a += b.charAt(c - 1);
        }
    }
    return (a);
}
function cnnad_getID() {
    return (cnnad_reverseString(new Date().getTime()));
}
function cnnad_renderAd(b, c) {
    b = cnnad_preview(b);
    b = cnnad_statusCodeQA(b);
    try {
        b += krux_getDESegments();
    } catch (a) {
        b += "&kxid=&kxseg=";
    }
    b = b + "&tile=" + cnnad_getDynamicTileID(b) + "&transactionID=" + cnnad_getTransactionID();
    if (typeof c !== "undefined") {
        b = b + "&domId=" + c;
    }
    if (cnnad_enabled == true) {
        document.write('<script type="text/javascript" src="' + b + '"></scr' + "ipt>");
    }
}
function cnnad_preview(b) {
    if (location.host.indexOf("turner.com")>-1) {
        b = b.replace(new RegExp("ads..*?.com", "gi"), "ads.turner.com");
        b = b.replace(new RegExp("ads..*?.tv", "gi"), "ads.turner.com");
    }
    var a = cnnad_readCookie("ug");
    if (a) {
        b = b + "&Params.User.UserID=" + a;
    } else {
        b = b + "&Params.User.UserID=";
    }
    return b;
}
function cnnad_getTransactionID() {
    if (typeof cnnad_transactionID === "undefined" || cnnad_transactionID == null) {
        cnnad_transactionID = Math.round((new Date()).getTime() / 1000) + "" + Math.floor(Math.random() * 9007199254740992);
    }
    return cnnad_transactionID;
}
function cnnad_isBlocking(b) {
    var a = false;
    if (document.getElementById("ad-" + b) != null && document.getElementById("ad-" + b).style.display === "none") {
        a = true;
    } else {
        if (cnnad_interstitialPlaying === true) {
            a = true;
        }
    }
    return a;
}
function cnnad_createIframe(c, b) {
    var a = document.createElement("iframe");
    a.id = c;
    a.name = c;
    a.width = 0;
    a.height = 0;
    a.style.position = "absolute";
    a.style.top = "-20px";
    a.style.left = "-20px";
    a.marginWidth = 0;
    a.marginHeight = 0;
    a.frameBorder = 0;
    a.scrolling = "no";
    a.allowTransparency = "true";
    a.src = b;
    return a;
}
function cnnad_createAdHelper(a, e, c, b, f) {
    if (cnnad_isBlocking(a)) {
        window.setTimeout(function() {
            cnnad_createAdHelper(a, e, c, b, f);
        }, 1000);
    } else {
        var g = document.getElementById("ad-" + a);
        if (g) {
            g.appendChild(cnnad_createIframe(a, e));
        } else {
            if (!f) {
                document.write('<iframe ALLOWTRANSPARENCY="true" hspace="0" vspace="0" marginHeight="0" marginWidth="0" src="' + e + '" border="0" frameBorder="0" height="0" width="0" scrolling="no"  id="' + a + '" style="position: absolute; top: -20px; left: -20px;" ></iframe>');
            } else {
                document.getElementById(f).innerHTML = '<iframe ALLOWTRANSPARENCY="true" hspace="0" vspace="0" marginHeight="0" marginWidth="0" src="' + e + '" border="0" frameBorder="0" height="0" width="0" scrolling="no"  id="' + a + '" style="position: absolute; top: -20px; left: -20px;" ></iframe>';
            }
        }
    }
}
function cnnad_createAdNoTileId(a, d, c, b, e) {
    d = cnnad_preview(d);
    d = cnnad_statusCodeQA(d);
    d += "&transactionID=" + cnnad_getTransactionID();
    d += "&domId=" + a;
    cnnad_createAdHelper(a, d, c, b, e, false);
}
var ads_register = [];
function cnnad_createAd(b, f, e, d, g) {
    try {
        if (SKIP_AD_CREATION !== "undefined" && SKIP_AD_CREATION == true) {
            return;
        }
    } catch (c) {}
    f = cnnad_preview(f);
    f = cnnad_statusCodeQA(f);
    f += "&transactionID=" + cnnad_getTransactionID();
    f += "&tile=" + cnnad_getDynamicTileID(f) + "&domId=" + b;
    try {
        f += krux_getDESegments();
    } catch (c) {
        f += "&kxid=&kxseg=";
    }
    cnnad_createAdHelper(b, f, e, d, g, false);
    var a = new String();
    if (f.match("_position=")) {
        a = cnnad_getParamValue(f, "_position=", "_");
    } else {
        if (f.match("_pos=")) {
            a = cnnad_getParamValue(f, "_pos=", "_");
        } else {
            a = "";
        }
    }
    cnnad_calledURLs[a] = f;
    var h = "ad-" + b;
    ads_register.push(h);
}
function repaint_ads() {
    var a = navigator.userAgent.match(/Firefox\/(.*)$/);
    if (a && a.length > 1) {
        var b = a[1] * 1;
        if (b >= 17) {
            console.log("repainting...");
            for (ea in ads_register) {
                el = document.getElementById(ads_register[ea]);
                if (el) {
                    console.log(ads_register[ea]);
                    el.style.display = "none";
                    el.offsetHeight;
                    el.style.display = "block";
                }
            }
        }
    }
}
if (window.addEventListener) {
    window.addEventListener("load", repaint_ads, false);
}
function cnnad_writeAd(b, a) {
    if (cnnad_enabled == true) {
        document.write('<script id="' + b + '" type="text/javascript" onload="cnnSendData();"');
        document.write(' src="' + a + "&tile=" + cnnad_getDynamicTileID(a) + '"></scr');
        document.write("ipt>");
    }
}
function cnnad_showAd(a) {
    var b = document.getElementById(a);
    if (b) {
        b.style.position = "relative";
        b.style.left = "0px";
        b.style.top = "0px";
        if (b.style.visibility === "hidden") {
            b.style.visibility = "visible";
        }
        if (b.style.display === "none") {
            b.style.display = "block";
        }
    } else {
        cnnad_error("Could not find element by id: " + a);
    }
}
function cnnad_setAdSize(c, a, d) {
    var b = document.getElementById(c);
    if (b) {
        b.height = a;
        b.width = d;
        b.className += " adunit_" + d + "x" + a;
    } else {
        cnnad_error("Could not find element by id: " + cnnad_id);
    }
}
function cnnad_readCookie(b) {
    if (document.cookie == "") {
        return null;
    } else {
        var a = document.cookie.split(";");
        var e = b + "=";
        for (var d = 0; d < a.length; d++) {
            var f = a[d];
            while (f.charAt(0) == " ") {
                f = f.substring(1, f.length);
            }
            if (f.indexOf(e) == 0) {
                return f.substring(e.length, f.length);
            }
        }
        return null;
    }
}
function cnnad_getTld(a) {
    var b = a.split(".");
    if (b.length >= 2) {
        return (b[b.length - 2] + "." + b[b.length - 1]);
    }
    return (null);
}
function cnnad_refreshAds() {
    if (!cnnad_adIframes) {
        return;
    }
    for (var b = 0; b < cnnad_adIframes.length; b++) {
        var a = cnnad_adIframes[b];
        if (document.getElementById(a)) {
            var e = document.getElementById(a);
            var d = "&pageload=ref";
            if (e.width > 0 && e.height > 0) {
                var c = e.contentWindow.document.location.href;
                if (c.indexOf(d) >= 0) {
                    e.contentWindow.location.reload();
                } else {
                    e.contentWindow.location.href = c + d;
                }
            }
        }
    }
    setTimeout("cnnad_refreshAds();", 60 * 1000 * 8);
}
function cnnad_swapAd(g, b) {
    var d = document.getElementById(g);
    if (d) {
        d.width = 0;
        d.height = 0;
        d.style.display = "none";
        if (cnnad_adCache[b]) {
            for (var c = 0; c < window.frames.length; c++) {
                try {
                    if (window.frames[c].location.href.indexOf("domId=" + g)>-1) {
                        window.frames[c].location.replace(cnnad_adCache[b]);
                    }
                } catch (f) {}
            }
            return;
        }
        if ((typeof Ajax != "undefined") && (typeof Ajax.Request != "undefined")) {
            var a = new Ajax.Request(b, {
                method: "get",
                onSuccess: function(l) {
                    var k = cnnad_parseResponse(l.responseText, g);
                    k = cnnad_preview(k);
                    k = cnnad_statusCodeQA(k);
                    k += "&transactionID=" + cnnad_getTransactionID();
                    if (k) {
                        cnnad_adCache[b] = k;
                        for (var h = 0; h < window.frames.length; h++) {
                            try {
                                if (window.frames[h].location.href.indexOf("domId=" + g)>-1) {
                                    window.frames[h].location.replace(k);
                                }
                            } catch (m) {}
                        }
                        return;
                    }
                }
            });
        } else {
            if (typeof dojo != "undefined") {
                if (typeof dojo.io == "undefined") {
                    dojo.require("dojo.io.*");
                }
                dojo.io.bind({
                    url: b,
                    load: function(k, l, e) {
                        var h = cnnad_parseResponse(l, g);
                        h = cnnad_preview(h);
                        h = cnnad_statusCodeQA(h);
                        h += "&transactionID=" + cnnad_getTransactionID();
                        if (h) {
                            cnnad_adCache[b] = h;
                            d.src = h;
                        }
                    }
                });
            } else {}
        }
    }
}
function cnnad_parseResponse(e, g) {
    var b = "<!-- CALLOUT|";
    var c = "|CALLOUT -->";
    var f = e.indexOf(b);
    var a = e.indexOf(c);
    var d = null;
    if (f >= 0 && a > f) {
        d = e.substring(f + b.length, a);
    }
    if (d) {
        return (d + "&tile=" + cnnad_getDynamicTileID(d) + "&domId=" + g);
    } else {
        return null;
    }
}
function cnnad_findAd(f, e, a) {
    var b = null;
    for (var c = 0; c < cnnad_adVault.length; c++) {
        var d = cnnad_adVault[c];
        if (d.getType() == f && d.getHeight() == a && d.getWidth() == e) {
            b = d.getUrl();
            break;
        }
    }
    return b;
}
function cnnad_getDEAdHeadCookie(b) {
    if (typeof(cnnad_readCookie) != "undefined") {
        cnnDEadDEonCookie = cnnad_readCookie("adDEon");
    }
    var a = "http://gdyn." + cnnad_getTld(location.hostname) + "/1.1/1.gif?" + new Date().getTime();
    if (!alreadySwappedDETargetImage&&!cnnDEadDEonCookie) {
        b.src = a;
        alreadySwappedDETargetImage = true;
    }
}
function cnnad_registerAd(e, d, a, b) {
    var c = new cnnad_AdObject(null, d, a, e, b);
    cnnad_adVault[cnnad_adVault.length] = c;
}
function cnnad_registerSpace(d, c, a) {
    var b = new cnnad_AdObject(d, c, a, null, null);
    cnnad_adIframes[cnnad_adIframes.length] = b;
}
function cnnad_endInterstitial(c) {
    var b = document.getElementById("interstitial" + c);
    if (b && b.parentNode) {
        b.parentNode.removeChild(b);
    }
    var d = document.getElementById("interstitialcss" + c);
    if (d && d.parentNode) {
        d.parentNode.removeChild(d);
    }
    if (typeof(document.createStyleSheet) != "undefined") {
        var a = document.createStyleSheet();
        a.addRule("table", "{display:inline}");
    }
    cnnad_interstitialPlaying = false;
}
function cnnad_startInterstitial(a, d, e) {
    cnnad_interstitialPlaying = true;
    var c = d + "&tile=" + cnnad_getDynamicTileID(d) + "&transactionId=" + cnnad_getTransactionID();
    try {
        c += krux_getDESegments();
    } catch (b) {
        c += "&kxid=&kxseg=";
    }
    c += "&domId=" + a;
    document.write('<div id="interstitial' + a + '" class="interstitial" align="center"><iframe ALLOWTRANSPARENCY="true" hspace="0" vspace="0" marginHeight="0" marginWidth="0" src="' + c + '" border="0" frameBorder="0" height="0" width="0" scrolling="no" id="' + a + '"></iframe></div>');
    if (!e) {
        e = 1500;
    }
    cnnad_interstitialPID = window.setTimeout('cnnad_endInterstitial("' + a + '");', e);
}
function cnnad_resetInterstitial(a, c) {
    cnnad_interstitialPlaying = true;
    var b = document.getElementById(a);
    if (null != b && b.height > 20 && b.width > 20) {
        if (cnnad_interstitialPID) {
            window.clearTimeout(cnnad_interstitialPID);
        }
        if (!c) {
            c = 15000;
        }
        cnnad_interstitialPID = window.setTimeout('cnnad_endInterstitial("' + a + '");', c);
    }
}
function cnnad_getUrlParam(b) {
    b = b.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var a = "[\\?&]" + b + "=([^&#]*)";
    var d = new RegExp(a);
    var c = d.exec(window.location.href);
    if (c == null) {
        return "";
    } else {
        return c[1];
    }
}
function cnnad_statusCodeQA(b) {
    var a = cnnad_getUrlParam("adsqa");
    if (a) {
        b = b + "&" + a.replace("%3D", "=");
    }
    return b;
}
function cnnad_updateIframeSource(b, a) {
    a = cnnad_preview(a);
    a = cnnad_statusCodeQA(a);
    a += "&transactionID=" + cnnad_getTransactionID();
    document.getElementById(b).contentWindow.location.replace(a + "&tile=" + cnnad_tileID + "&domId=" + b);
}
function cnnad_showAdByKey(a, b) {
    cnnad_swapAd(b, cnnad_adUrls[a]);
}
function cnnad_haveCookie(a) {
    return document.cookie && ( - 1 < document.cookie.indexOf("; " + a + "=") || document.cookie.indexOf(a + "=") == 0);
}
function cnnad_ugsync() {
    if (!cnnad_haveCookie("ug")) {
        document.write("<scr" + 'ipt src="http://www.ugdt' + 'urner.com/xd.sjs"></scr' + "ipt>");
    } else {
        if (!cnnad_haveCookie("ugs")) {
            document.write("<scr" + 'ipt src="http://www.ugdt' + 'urner.com/xd.sjs"></scr' + "ipt>");
        }
    }
}
function cnnad_AdObject(e, d, a, c, b) {
    this.id = e;
    this.width = d;
    this.height = a;
    this.type = c;
    this.url = b;
    this.getId = function() {
        return this.id;
    };
    this.setId = function(f) {
        this.id = f;
    };
    this.getWidth = function() {
        return this.width;
    };
    this.setWidth = function(f) {
        this.width = f;
    };
    this.getHeight = function() {
        return this.height;
    };
    this.setHeight = function(f) {
        this.height = f;
    };
    this.getType = function() {
        return this.type;
    };
    this.setType = function(f) {
        this.type = f;
    };
    this.getUrl = function() {
        return this.url;
    };
    this.setUrl = function(f) {
        this.url = f;
    };
    this.toString = function() {
        return "[AD|ID=" + this.id + "|WIDTH=" + this.width + "|HEIGHT=" + this.height + "]";
    };
}
function refreshAdsByDivId(n, o) {
    var a = document.getElementsByTagName("div");
    for (var e = 0; e < a.length; e++) {
        var b = a[e].id;
        if (b.indexOf(n) >= 0) {
            if (a[e].parentNode) {
                var m = a[e].parentNode;
                var f = m.innerHTML;
                var h = "&amp;tile=";
                var k = f.indexOf(h);
                if (k > 0) {
                    var l = f.indexOf("&amp;", k + h.length);
                    var g = parseInt(f.substring(k + h.length, l));
                    var d = g + o;
                    var h = "tile=" + g;
                    var c = "tile=" + d;
                    f = f.replace(h, c);
                }
                m.innerHTML = f;
            }
        }
    }
}
String.prototype.format = function() {
    var c = this, a, b;
    for (a = 0; a < arguments.length; (a += 1)
        ) {
        b = new RegExp("\\{" + a + "\\}", "gi");
        c = c.replace(b, arguments[a]);
    }
    return c;
};
var CNNHP = CNNHP || {};
CNNHP.initFlipperTicker = function(a) {
    var d, c = CNNHP, b = document.getElementById("cnnFlipperTicker");
    if (c.hasOwnProperty("FlipperTickerApp") && "undefined" !== typeof b) {
        d = new c.FlipperTickerApp(b, a);
        d.initialize();
    }
};
var CNNHMPAGE = {
    "pmod": {
        "cnntv": {
            "tmo": null,
            "tmintvl": 5000,
            "ready": 0,
            "h_pos": 0,
            "slidecnt": 0,
            "slideintvl": 214,
            "prev": function() {
                if (CNNHMPAGE.pmod.cnntv.tmo) {
                    clearTimeout(CNNHMPAGE.pmod.cnntv.tmo);
                }
                CNNHMPAGE.pmod.cnntv.slide((CNNHMPAGE.pmod.cnntv.h_pos + CNNHMPAGE.pmod.cnntv.slideintvl));
            },
            "next": function() {
                if (CNNHMPAGE.pmod.cnntv.tmo) {
                    clearTimeout(CNNHMPAGE.pmod.cnntv.tmo);
                }
                CNNHMPAGE.pmod.cnntv.slide((CNNHMPAGE.pmod.cnntv.h_pos - CNNHMPAGE.pmod.cnntv.slideintvl));
            },
            "auto": function() {
                if (CNNHMPAGE.pmod.cnntv.h_pos <= ( - 1 * (CNNHMPAGE.pmod.cnntv.slidecnt - 1) * CNNHMPAGE.pmod.cnntv.slideintvl)) {
                    clearTimeout(CNNHMPAGE.pmod.cnntv.tmo);
                } else {
                    CNNHMPAGE.pmod.cnntv.slide((CNNHMPAGE.pmod.cnntv.h_pos - CNNHMPAGE.pmod.cnntv.slideintvl));
                    CNNHMPAGE.pmod.cnntv.tmo = setTimeout(CNNHMPAGE.pmod.cnntv.auto, CNNHMPAGE.pmod.cnntv.tmintvl);
                }
            },
            "slide": function(a) {
                $j("#cnn_pmtvmodslidecntnt").animate({
                    "left": a + "px"
                });
                CNNHMPAGE.pmod.cnntv.h_pos = a;
                CNNHMPAGE.pmod.cnntv.enblbtns();
            },
            "enblbtns": function() {
                if (CNNHMPAGE.pmod.cnntv.slidecnt >= 1) {
                    if (CNNHMPAGE.pmod.cnntv.h_pos === 0) {
                        $j("#cnn_pmtvmodnlft").unbind("click").addClass("cnn_pmtvmodnavoff");
                    } else {
                        $j("#cnn_pmtvmodnlft").unbind("click");
                        $j("#cnn_pmtvmodnlft").click(function() {
                            CNNHMPAGE.pmod.cnntv.prev();
                        });
                        $j("#cnn_pmtvmodnlft").removeClass("cnn_pmtvmodnavoff");
                    }
                    if (CNNHMPAGE.pmod.cnntv.h_pos <= ( - 1 * (CNNHMPAGE.pmod.cnntv.slidecnt - 1) * CNNHMPAGE.pmod.cnntv.slideintvl)) {
                        $j("#cnn_pmtvmodnrgt").unbind("click").addClass("cnn_pmtvmodnavoff");
                    } else {
                        $j("#cnn_pmtvmodnrgt").unbind("click");
                        $j("#cnn_pmtvmodnrgt").click(function() {
                            CNNHMPAGE.pmod.cnntv.next();
                        });
                        $j("#cnn_pmtvmodnrgt").removeClass("cnn_pmtvmodnavoff");
                    }
                }
            },
            "init": function(a) {
                CNNHMPAGE.pmod.cnntv.tmintvl = a;
                $j(".cnn_pmtvmodslide").each(function(b) {
                    CNNHMPAGE.pmod.cnntv.slidecnt += 1;
                });
                $j("#cnn_pmtvmodslidecntnt").css({
                    "width": (CNNHMPAGE.pmod.cnntv.slidecnt * CNNHMPAGE.pmod.cnntv.slideintvl) + "px"
                });
                CNNHMPAGE.pmod.cnntv.enblbtns();
                CNNHMPAGE.pmod.cnntv.ready = 1;
                if (CNNHMPAGE.pmod.cnntv.slidecnt > 1) {
                    CNNHMPAGE.pmod.cnntv.tmo = setTimeout(CNNHMPAGE.pmod.cnntv.auto, CNNHMPAGE.pmod.cnntv.tmintvl);
                }
                $j("#cnn_pmtvmodcntr").removeClass("cnn_pmtvmoddisabled");
            }
        }
    }
};
!function(d, c) {
    "function" == typeof define && define.amd ? define([], c) : d.CVP = c();
}(this, function() {
    var requirejs, require, define;
    return function(a) {
        function b(a, b) {
            return r.call(a, b);
        }
        function c(a, b) {
            var c, d, e, f, g, h, i, j, k, l, m = b && b.split("/"), n = p.map, o = n && n["*"] || {};
            if (a && "." === a.charAt(0)) {
                if (b) {
                    for (m = m.slice(0, m.length - 1), a = m.concat(a.split("/")), j = 0; j < a.length; j += 1) {
                        if (l = a[j], "." === l) {
                            a.splice(j, 1), j -= 1;
                        } else {
                            if (".." === l) {
                                if (1 === j && (".." === a[2] || ".." === a[0])) {
                                    break;
                                }
                                j > 0 && (a.splice(j - 1, 2), j -= 2);
                            }
                        }
                    }
                    a = a.join("/");
                } else {
                    0 === a.indexOf("./") && (a = a.substring(2));
                }
            }
            if ((m || o) && n) {
                for (c = a.split("/"), j = c.length; j > 0; j -= 1) {
                    if (d = c.slice(0, j).join("/"), m) {
                        for (k = m.length; k > 0; k -= 1) {
                            if (e = n[m.slice(0, k).join("/")], e && (e = e[d])) {
                                f = e, g = j;
                                break;
                            }
                        }
                    }
                    if (f) {
                        break;
                    }
                    !h && o && o[d] && (h = o[d], i = j);
                }
                !f && h && (f = h, g = i), f && (c.splice(0, g, f), a = c.join("/"));
            }
            return a;
        }
        function d(b, c) {
            return function() {
                return k.apply(a, s.call(arguments, 0).concat([b, c]));
            };
        }
        function e(a) {
            return function(b) {
                return c(b, a);
            };
        }
        function f(a) {
            return function(b) {
                n[a] = b;
            };
        }
        function g(c) {
            if (b(o, c)) {
                var d = o[c];
                delete o[c], q[c]=!0, j.apply(a, d);
            }
            if (!b(n, c)&&!b(q, c)) {
                throw new Error("No " + c);
            }
            return n[c];
        }
        function h(a) {
            var b, c = a ? a.indexOf("!"): - 1;
            return c>-1 && (b = a.substring(0, c), a = a.substring(c + 1, a.length)), [b, a];
        }
        function i(a) {
            return function() {
                return p && p.config && p.config[a] || {};
            };
        }
        var j, k, l, m, n = {}, o = {}, p = {}, q = {}, r = Object.prototype.hasOwnProperty, s = [].slice;
        l = function(a, b) {
            var d, f = h(a), i = f[0];
            return a = f[1], i && (i = c(i, b), d = g(i)), i ? a = d && d.normalize ? d.normalize(a, e(b)) : c(a, b) : (a = c(a, b), f = h(a), i = f[0], a = f[1], i && (d = g(i))), {
                f: i ? i + "!" + a: a,
                n: a,
                pr: i,
                p: d
            };
        }, m = {
            require: function(a) {
                return d(a);
            },
            exports: function(a) {
                var b = n[a];
                return "undefined" != typeof b ? b : n[a] = {};
            },
            module: function(a) {
                return {
                    id: a,
                    uri: "",
                    exports: n[a],
                    config: i(a)
                };
            }
        }, j = function(c, e, h, i) {
            var j, k, p, r, s, t, u = [];
            if (i = i || c, "function" == typeof h) {
                for (e=!e.length && h.length ? ["require", "exports", "module"] : e, s = 0; s < e.length; s += 1) {
                    if (r = l(e[s], i), k = r.f, "require" === k) {
                        u[s] = m.require(c);
                    } else {
                        if ("exports" === k) {
                            u[s] = m.exports(c), t=!0;
                        } else {
                            if ("module" === k) {
                                j = u[s] = m.module(c);
                            } else {
                                if (b(n, k) || b(o, k) || b(q, k)) {
                                    u[s] = g(k);
                                } else {
                                    if (!r.p) {
                                        throw new Error(c + " missing " + k);
                                    }
                                    r.p.load(r.n, d(i, !0), f(k), {}), u[s] = n[k];
                                }
                            }
                        }
                    }
                }
                p = h.apply(n[c], u), c && (j && j.exports !== a && j.exports !== n[c] ? n[c] = j.exports : p === a && t || (n[c] = p));
            } else {
                c && (n[c] = h);
            }
        }, requirejs = require = k = function(b, c, d, e, f) {
            return "string" == typeof b ? m[b] ? m[b](c) : g(l(b, c).f) : (b.splice || (p = b, c.splice ? (b = c, c = d, d = null) : b = a), c = c || function() {}, "function" == typeof d && (d = e, e = f), e ? j(a, b, c, d) : setTimeout(function() {
                j(a, b, c, d);
            }, 4), k);
        }, k.config = function(a) {
            return p = a, p.deps && k(p.deps, p.callback), k;
        }, requirejs._defined = n, define = function(a, c, d) {
            c.splice || (d = c, c = []), b(n, a) || b(o, a) || (o[a] = [a, c, d]);
        }, define.amd = {
            jQuery: !0
        }; 
    }(), define("almondLib", function() {}), define("core/app", ["require", "exports", "module"], function(a, b, c) {
        var d = /\bdmtdebug=(\w+)/.exec(window.location.href);
        if (!d && window !== window.top) {
            try {
                d = /\bdmtdebug=(\w+)/.exec(window.top.location.href);
            } catch (e) {}
        }
        var f=!!d, g = "https:" === window.location.protocol, h = g ? "https://s.cdn.turner.com" : "http://z.cdn.turner.com", i = {
            VERSION: "2.8.1.0",
            BUILD_DATE: "2014-05-06T13:12:06",
            FLASH_VERSION: "10.1.0.0",
            HTML5: "html5",
            FLASH: "flash",
            CDN_ORIGIN: h,
            DEBUG: f,
            DEBUG_LEVEL: f ? d[1]: null,
            MAPPING_PATH: h + "/xslo/cvp/config/{site}/",
            MAPPING_FILE: "mapping.xml",
            OMNITURE_JS_URL: "",
            AD_MANAGER_URL: h + "/xslo/cvp/ads/freewheel/js/0/AdManager.js",
            AD_DFP_URL: "//www.google.com/uds/api/ima/1.7/9fd415db3bb953707e811e4827fe957b/default.IN.js",
            EXPRESS_INSTALL_URL: h + "/xslo/cvp/assets/flash/expressInstall.swf",
            FLASHXHR_SWF_URL: h + "/xslo/cvp/plugins/cvp/xhr/1.0/cvp_flashXhr.swf",
            LOG4JAVASCRIPT_URL: h + "/xslo/cvp/js/logging/log4javascript.js",
            EASYXDM_JS_URL: h + "/xslo/cvp/easyxdm/js/easyXDM.ugly.js",
            EASYXDM_SWF_URL: h + "/xslo/cvp/easyxdm/swf/easyxdm.swf",
            ASPEN_ORIGIN: "http://aspen-qa.turner.com",
            BLANK_MP4_URL: h + "/xslo/cvp/assets/video/blank.mp4",
            ERROR_CMS_PARSE: "CVP0201",
            ERROR_CMS_IO: "CVP0202",
            ERROR_CMS_LOADER: "CVP0206"
        };
        c.exports = i;
    }), define("Class", ["require", "exports", "module"], function() {
        var a=!1, b = /xyz/.test(function() {}) ? /\b_super\b/ : /.*/, c = function() {};
        return c.extend = function d(c) {
            function e() {
                !a && this.init && this.init.apply(this, arguments);
            }
            var f = this.prototype;
            a=!0;
            var g = new this;
            a=!1;
            for (var h in c) {
                g[h] = "function" == typeof c[h] && "function" == typeof f[h] && b.test(c[h]) ? function(a, b) {
                    return function() {
                        var c = this._super;
                        this._super = f[a];
                        var d = b.apply(this, arguments);
                        return this._super = c, d;
                    };
                }(h, c[h]) : c[h];
            }
            return e.prototype = g, e.prototype.constructor = e, e.extend = d, e;
        }, c;
    }), function(a) {
        define("when", [], function() {
            function b(a, b, c, e) {
                return d(a).then(b, c, e);
            }
            function c(a, b) {
                this.then = a, this.inspect = b;
            }
            function d(a) {
                return g(function(b) {
                    b(a);
                });
            }
            function e(a) {
                return b(a, k);
            }
            function f() {
                function a(a, f, g) {
                    b.resolve = b.resolver.resolve = function(b) {
                        return e ? d(b) : (e=!0, a(b), c);
                    }, b.reject = b.resolver.reject = function(a) {
                        return e ? d(k(a)) : (e=!0, f(a), c);
                    }, b.notify = b.resolver.notify = function(a) {
                        return g(a), a;
                    };
                }
                var b, c, e;
                return b = {
                    promise: M,
                    resolve: M,
                    reject: M,
                    notify: M,
                    resolver: {
                        resolve: M,
                        reject: M,
                        notify: M
                    }
                }, b.promise = c = g(a), b;
            }
            function g(a) {
                return h(a, L.PromiseStatus && L.PromiseStatus());
            }
            function h(a, b) {
                function d(a, c, d) {
                    var e = h(function(b, e, f) {
                        function g(g) {
                            g.then(a, c, d).then(b, e, f);
                        }
                        p ? p.push(g) : z(function() {
                            g(o);
                        });
                    }, b && b.observed());
                    return e;
                }
                function e() {
                    return o ? o.inspect() : y();
                }
                function f(a) {
                    p && (o = i(a), m(p, o), p = M, b && o.then(function() {
                        b.fulfilled();
                    }, function(a) {
                        b.rejected(a);
                    }));
                }
                function g(a) {
                    f(k(a));
                }
                function j(a) {
                    p && m(p, l(a));
                }
                var n, o, p = [];
                n = new c(d, e);
                try {
                    a(f, g, j);
                } catch (q) {
                    g(q);
                }
                return n;
            }
            function i(a) {
                return a instanceof c ? a : a === Object(a) && "then" in a ? g(function(b, c, d) {
                    z(function() {
                        try {
                            var e = a.then;
                            "function" == typeof e ? E(e, a, b, c, d) : b(j(a));
                        } catch (f) {
                            c(f);
                        }
                    });
                }) : j(a);
            }
            function j(a) {
                var b = new c(function(c) {
                    try {
                        return "function" == typeof c ? i(c(a)) : b;
                    } catch (d) {
                        return k(d);
                    }
                }, function() {
                    return w(a);
                });
                return b;
            }
            function k(a) {
                var b = new c(function(c, d) {
                    try {
                        return "function" == typeof d ? i(d(a)) : b;
                    } catch (e) {
                        return k(e);
                    }
                }, function() {
                    return x(a);
                });
                return b;
            }
            function l(a) {
                var b = new c(function(c, d, e) {
                    try {
                        return "function" == typeof e ? l(e(a)) : b;
                    } catch (f) {
                        return l(f);
                    }
                });
                return b;
            }
            function m(a, b) {
                z(function() {
                    for (var c, d = 0; c = a[d++];) {
                        c(b);
                    }
                });
            }
            function n(a) {
                return a && "function" == typeof a.then;
            }
            function o(a, c, d, e, f) {
                return b(a, function(a) {
                    function h(d, e, f) {
                        function g(a) {
                            n(a);
                        }
                        function h(a) {
                            m(a);
                        }
                        var i, j, k, l, m, n, o, p;
                        if (o = a.length>>>0, i = Math.max(0, Math.min(c, o)), k = [], j = o - i + 1, l = [], i) {
                            for (n = function(a) {
                                l.push(a), --j || (m = n = B, e(l));
                            }, m = function(a) {
                                k.push(a), --i || (m = n = B, d(k));
                            }, p = 0; o > p; ++p) {
                                p in a && b(a[p], h, g, f);
                            }
                        } else {
                            d(k);
                        }
                    }
                    return g(h).then(d, e, f);
                });
            }
            function p(a, b, c, d) {
                function e(a) {
                    return b ? b(a[0]) : a[0];
                }
                return o(a, 1, e, c, d);
            }
            function q(a, b, c, d) {
                return u(a, B).then(b, c, d);
            }
            function r() {
                return u(arguments, B);
            }
            function s(a) {
                return u(a, w, x);
            }
            function t(a, b) {
                return u(a, b);
            }
            function u(a, c, d) {
                return b(a, function(a) {
                    function e(e, f, g) {
                        function h(a, h) {
                            b(a, c, d).then(function(a) {
                                i[h] = a, --k || e(i);
                            }, f, g);
                        }
                        var i, j, k, l;
                        if (k = j = a.length>>>0, i = [], !k) {
                            return e(i), void 0;
                        }
                        for (l = 0; j > l; l++) {
                            l in a ? h(a[l], l) : --k;
                        }
                    }
                    return g(e);
                });
            }
            function v(a, c) {
                var d = E(D, arguments, 1);
                return b(a, function(a) {
                    var e;
                    return e = a.length, d[0] = function(a, d, f) {
                        return b(a, function(a) {
                            return b(d, function(b) {
                                return c(a, b, f, e);
                            });
                        });
                    }, C.apply(a, d);
                });
            }
            function w(a) {
                return {
                    state: "fulfilled",
                    value: a
                };
            }
            function x(a) {
                return {
                    state: "rejected",
                    reason: a
                };
            }
            function y() {
                return {
                    state: "pending"
                };
            }
            function z(a) {
                1 === G.push(a) && F(A);
            }
            function A() {
                for (var a, b = 0; a = G[b++];) {
                    a();
                }
                G = [];
            }
            function B(a) {
                return a;
            }
            b.promise = g, b.resolve = d, b.reject = e, b.defer = f, b.join = r, b.all = q, b.map = t, b.reduce = v, b.settle = s, b.any = p, b.some = o, b.isPromise = n, c.prototype = {
                otherwise: function(a) {
                    return this.then(M, a);
                },
                ensure: function(a) {
                    function b() {
                        return d(a());
                    }
                    return this.then(b, b).yield(this);
                },
                yield: function(a) {
                    return this.then(function() {
                        return a;
                    });
                }, spread : function(a) {
                    return this.then(function(b) {
                        return q(b, function(b) {
                            return a.apply(M, b);
                        });
                    });
                }, always: function(a, b) {
                    return this.then(a, a, b);
                }
            };
            var C, D, E, F, G, H, I, J, K, L, M;
            return G = [], L = "undefined" != typeof console ? console : b, H = a.setTimeout, F = "function" == typeof setImmediate ? setImmediate.bind(a) : "object" == typeof process && process.nextTick ? process.nextTick : "object" == typeof vertx ? vertx.runOnLoop : function(a) {
                H(a, 0);
            }, I = Function.prototype, J = I.call, E = I.bind ? J.bind(J) : function(a, b) {
                return a.apply(b, D.call(arguments, 2));
            }, K = [], D = K.slice, C = K.reduce || function(a) {
                var b, c, d, e, f;
                if (f = 0, b = Object(this), e = b.length>>>0, c = arguments, c.length <= 1) {
                    for (; ;) {
                        if (f in b) {
                            d = b[f++];
                            break;
                        }
                        if (++f >= e) {
                            throw new TypeError;
                        }
                    }
                } else {
                    d = c[1];
                }
                for (; e > f; ++f) {
                    f in b && (d = a(d, b[f], f, b));
                }
                return d;
            }, b;
        });
    }(this), function(a) {
        function b(a) {
            if ("bug-string-char-index" == a) {
                return "a" != "a"[0];
            }
            var b, c = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}', d = "json" == a;
            if (d || "json-stringify" == a || "json-parse" == a) {
                if ("json-stringify" == a || d) {
                    var g = h.stringify, j = "function" == typeof g && i;
                    if (j) {
                        (b = function() {
                            return 1;
                        }).toJSON = b;
                        try {
                            j = "0" === g(0) && "0" === g(new Number) && '""' == g(new String) && g(f) === e && g(e) === e && "1" === g(b) && "[1]" == g([b]) && "[null]" == g([e]) && "null" == g(null) && "[null,null,null]" == g([e, f, null]) && g({
                                a: [b, !0, !1, null, "\x00\b\n\f\r	"]
                            }) == c && "1" === g(null, b) && "[\n 1,\n 2\n]" == g([1, 2], null, 1) && '"-271821-04-20T00:00:00.000Z"' == g(new Date( - 8640000000000000)) && '"+275760-09-13T00:00:00.000Z"' == g(new Date(8640000000000000)) && '"-000001-01-01T00:00:00.000Z"' == g(new Date( - 62198755200000)) && '"1969-12-31T23:59:59.999Z"' == g(new Date( - 1));
                        } catch (k) {
                            j=!1;
                        }
                    }
                    if (!d) {
                        return j;
                    }
                }
                if ("json-parse" == a || d) {
                    var l = h.parse;
                    if ("function" == typeof l) {
                        try {
                            if (0 === l("0")&&!l(!1)) {
                                b = l(c);
                                var m = 5 == b.a.length && 1 === b.a[0];
                                if (m) {
                                    try {
                                        m=!l('"	"');
                                    } catch (k) {}
                                    if (m) {
                                        try {
                                            m = 1 !== l("01");
                                        } catch (k) {}
                                    }
                                }
                            }
                        } catch (k) {
                            m=!1;
                        }
                    }
                    if (!d) {
                        return m;
                    }
                }
                return j && m;
            }
        }
        var c, d, e, f = {}.toString, g=!0, h = "object" == typeof exports && exports;
        h || g ? "object" == typeof JSON && JSON ? h ? (h.stringify = JSON.stringify, h.parse = JSON.parse) : h = JSON : g && (h = a.JSON = {}) : h = a.JSON || (a.JSON = {});
        var i = new Date( - 3509827334573292);
        try {
            i =- 109252 == i.getUTCFullYear() && 0 === i.getUTCMonth() && 1 === i.getUTCDate() && 10 == i.getUTCHours() && 37 == i.getUTCMinutes() && 6 == i.getUTCSeconds() && 708 == i.getUTCMilliseconds();
        } catch (j) {}
        if (!b("json")) {
            var k = "[object Function]", l = "[object Date]", m = "[object Number]", n = "[object String]", o = "[object Array]", p = "[object Boolean]", q = b("bug-string-char-index");
            if (!i) {
                var r = Math.floor, s = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], t = function(a, b) {
                    return s[b] + 365 * (a - 1970) + r((a - 1969 + (b =+ (b > 1))) / 4) - r((a - 1901 + b) / 100) + r((a - 1601 + b) / 400);
                };
            }(c = {}.hasOwnProperty) || (c = function(a) {
                var b, d = {};
                return (d.__proto__ = null, d.__proto__ = {
                    toString: 1
                }, d).toString != f ? c = function(a) {
                    var b = this.__proto__, c = a in (this.__proto__ = null, this);
                    return this.__proto__ = b, c;
                } : (b = d.constructor, c = function(a) {
                    var c = (this.constructor || b).prototype;
                    return a in this&&!(a in c && this[a] === c[a]);
                }), d = null, c.call(this, a);
            });
            var u = {
                "boolean": 1,
                number: 1,
                string: 1,
                undefined: 1
            }, v = function(a, b) {
                var c = typeof a[b];
                return "object" == c?!!a[b] : !u[c];
            };
            if (d = function(a, b) {
                var d, e, g, h, i = 0;
                (d = function() {
                    this.valueOf = 0;
                }).prototype.valueOf = 0, e = new d;
                for (g in e) {
                    c.call(e, g) && i++;
                }
                return d = e = null, i ? h = 2 == i ? function(a, b) {
                    var d, e = {}, g = f.call(a) == k;
                    for (d in a) {
                        g && "prototype" == d || c.call(e, d) ||!(e[d] = 1) ||!c.call(a, d) || b(d);
                    }
                } : function(a, b) {
                    var d, e, g = f.call(a) == k;
                    for (d in a) {
                        g && "prototype" == d ||!c.call(a, d) || (e = "constructor" === d) || b(d);
                    }(e || c.call(a, d = "constructor")) && b(d);
                } : (e = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"], h = function(a, b) {
                    var d, g, h = f.call(a) == k, i=!h && "function" != typeof a.constructor && v(a, "hasOwnProperty") ? a.hasOwnProperty : c;
                    for (d in a) {
                        h && "prototype" == d ||!i.call(a, d) || b(d);
                    }
                    for (g = e.length; d = e[--g]; i.call(a, d) 
                        && b(d)) {}
                }), h(a, b);
            }, !b("json-stringify")) {
                var w = {
                    92: "\\\\",
                    34: '\\"',
                    8: "\\b",
                    12: "\\f",
                    10: "\\n",
                    13: "\\r",
                    9: "\\t"
                }, x = "000000", y = function(a, b) {
                    return (x + (b || 0)).slice( - a);
                }, z = "\\u00", A = function(a) {
                    var b, c = '"', d = 0, e = a.length, f = e > 10 && q;
                    for (f && (b = a.split("")); e > d; d++) {
                        var g = a.charCodeAt(d);
                        switch (g) {
                        case 8:
                        case 9:
                        case 10:
                        case 12:
                        case 13:
                        case 34:
                        case 92:
                            c += w[g];
                            break;
                        default:
                            if (32 > g) {
                                c += z + y(2, g.toString(16));
                                break;
                            }
                            c += f ? b[d] : q ? a.charAt(d) : a[d];
                        }
                    }
                    return c + '"';
                }, B = function(a, b, g, h, i, j, k) {
                    var q, s, u, v, w, x, z, C, D, E, F, G, H, I, J, K, L = b[a];
                    try {
                        L = b[a];
                    } catch (M) {}
                    if ("object" == typeof L && L) {
                        if (q = f.call(L), q != l || c.call(L, "toJSON")) {
                            "function" == typeof L.toJSON && (q != m && q != n && q != o || c.call(L, "toJSON")) && (L = L.toJSON(a));
                        } else {
                            if (L>-1 / 0 && 1 / 0 > L) {
                                if (t) {
                                    for (v = r(L / 86400000), s = r(v / 365.2425) + 1970 - 1; t(s + 1, 0) <= v; s++) {}
                                    for (u = r((v - t(s, 0)) / 30.42); t(s, u + 1) <= v; u++) {}
                                    v = 1 + v - t(s, u), w = (L%86400000 + 86400000)%86400000, x = r(w / 3600000)%24, z = r(w / 60000)%60, C = r(w / 1000)%60, D = w%1000;
                                } else {
                                    s = L.getUTCFullYear(), u = L.getUTCMonth(), v = L.getUTCDate(), x = L.getUTCHours(), z = L.getUTCMinutes(), C = L.getUTCSeconds(), D = L.getUTCMilliseconds();
                                }
                                L = (0 >= s || s >= 10000 ? (0 > s ? "-" : "+") + y(6, 0 > s?-s : s) : y(4, s)) + "-" + y(2, u + 1) + "-" + y(2, v) + "T" + y(2, x) + ":" + y(2, z) + ":" + y(2, C) + "." + y(3, D) + "Z";
                            } else {
                                L = null;
                            }
                        }
                    }
                    if (g && (L = g.call(b, a, L)), null === L) {
                        return "null";
                    }
                    if (q = f.call(L), q == p) {
                        return "" + L;
                    }
                    if (q == m) {
                        return L>-1 / 0 && 1 / 0 > L ? "" + L : "null";
                    }
                    if (q == n) {
                        return A("" + L);
                    }
                    if ("object" == typeof L) {
                        for (H = k.length; H--;) {
                            if (k[H] === L) {
                                throw TypeError();
                            }
                        }
                        if (k.push(L), E = [], I = j, j += i, q == o) {
                            for (G = 0, H = L.length; H > G; J || (J=!0)
                                , G++) {
                                F = B(G, L, g, h, i, j, k), E.push(F === e ? "null" : F);
                            }
                            K = J ? i ? "[\n" + j + E.join(",\n" + j) + "\n" + I + "]" : "[" + E.join(",") + "]" : "[]";
                        } else {
                            d(h || L, function(a) {
                                var b = B(a, L, g, h, i, j, k);
                                b !== e && E.push(A(a) + ":" + (i ? " " : "") + b), J || (J=!0);
                            }), K = J ? i ? "{\n" + j + E.join(",\n" + j) + "\n" + I + "}" : "{" + E.join(",") + "}" : "{}";
                        }
                        return k.pop(), K;
                    }
                };
                h.stringify = function(a, b, c) {
                    var d, e, g;
                    if ("function" == typeof b || "object" == typeof b && b) {
                        if (f.call(b) == k) {
                            e = b;
                        } else {
                            if (f.call(b) == o) {
                                g = {};
                                for (var h, i = 0, j = b.length; j > i; h = b[i++], (f.call(h) == n || f.call(h) == m) && (g[h] = 1)) {}
                            }
                        }
                    }
                    if (c) {
                        if (f.call(c) == m) {
                            if ((c -= c%1) > 0) {
                                for (d = "", c > 10 && (c = 10); d.length < c; d += " ") {}
                            }
                        } else {
                            f.call(c) == n && (d = c.length <= 10 ? c : c.slice(0, 10));
                        }
                    }
                    return B("", (h = {}, h[""] = a, h), e, g, d, "", []);
                };
            }
            if (!b("json-parse")) {
                var C, D, E = String.fromCharCode, F = {
                    92: "\\",
                    34: '"',
                    47: "/",
                    98: "\b",
                    116: "	",
                    110: "\n",
                    102: "\f",
                    114: "\r"
                }, G = function() {
                    throw C = D = null, SyntaxError();
                }, H = function() {
                    for (var a, b, c, d, e, f = D, g = f.length; g > C;) {
                        switch (e = f.charCodeAt(C)) {
                        case 9:
                        case 10:
                        case 13:
                        case 32:
                            C++;
                            break;
                        case 123:
                        case 125:
                        case 91:
                        case 93:
                        case 58:
                        case 44:
                            return a = q ? f.charAt(C) : f[C], C++, a;
                        case 34:
                            for (a = "@", C++; g > C;) {
                                if (e = f.charCodeAt(C), 32 > e) {
                                    G();
                                } else {
                                    if (92 == e) {
                                        switch (e = f.charCodeAt(++C)) {
                                        case 92:
                                        case 34:
                                        case 47:
                                        case 98:
                                        case 116:
                                        case 110:
                                        case 102:
                                        case 114:
                                            a += F[e], C++;
                                            break;
                                        case 117:
                                            for (b=++C, c = C + 4; c > C; C++) {
                                                e = f.charCodeAt(C), e >= 48 && 57 >= e || e >= 97 && 102 >= e || e >= 65 && 70 >= e || G();
                                            }
                                            a += E("0x" + f.slice(b, C));
                                            break;
                                        default:
                                            G();
                                        }
                                    } else {
                                        if (34 == e) {
                                            break;
                                        }
                                        for (e = f.charCodeAt(C), b = C; e >= 32 && 92 != e && 34 != e;) {
                                            e = f.charCodeAt(++C);
                                        }
                                        a += f.slice(b, C);
                                    }
                                }
                            }
                            if (34 == f.charCodeAt(C)) {
                                return C++, a;
                            }
                            G();
                        default:
                            if (b = C, 45 == e && (d=!0, e = f.charCodeAt(++C)), e >= 48 && 57 >= e) {
                                for (48 == e && (e = f.charCodeAt(C + 1), e >= 48 && 57 >= e) && G(), d=!1; g > C && (e = f.charCodeAt(C), e >= 48 && 57 >= e); C++) {}
                                if (46 == f.charCodeAt(C)) {
                                    for (c=++C; g > c && (e = f.charCodeAt(c), e >= 48 && 57 >= e); c++) {}
                                    c == C && G(), C = c;
                                }
                                if (e = f.charCodeAt(C), 101 == e || 69 == e) {
                                    for (e = f.charCodeAt(++C), (43 == e || 45 == e) && C++, c = C; g > c && (e = f.charCodeAt(c), e >= 48 && 57 >= e); c++) {}
                                    c == C && G(), C = c;
                                }
                                return + f.slice(b, C);
                            }
                            if (d && G(), "true" == f.slice(C, C + 4)) {
                                return C += 4, !0;
                            }
                            if ("false" == f.slice(C, C + 5)) {
                                return C += 5, !1;
                            }
                            if ("null" == f.slice(C, C + 4)) {
                                return C += 4, null;
                            }
                            G();
                        }
                    }
                    return "$";
                }, I = function(a) {
                    var b, c;
                    if ("$" == a && G(), "string" == typeof a) {
                        if ("@" == (q ? a.charAt(0) : a[0])) {
                            return a.slice(1);
                        }
                        if ("[" == a) {
                            for (b = []; a = H(), "]" != a; c || (c=!0)
                                ) {
                                c && ("," == a ? (a = H(), "]" == a && G()) : G()), "," == a && G(), b.push(I(a));
                            }
                            return b;
                        }
                        if ("{" == a) {
                            for (b = {}; a = H(), "}" != a; c || (c=!0)
                                ) {
                                c && ("," == a ? (a = H(), "}" == a && G()) : G()), ("," == a || "string" != typeof a || "@" != (q ? a.charAt(0) : a[0]) || ":" != H()) && G(), b[a.slice(1)] = I(H());
                            }
                            return b;
                        }
                        G();
                    }
                    return a;
                }, J = function(a, b, c) {
                    var d = K(a, b, c);
                    d === e ? delete a[b] : a[b] = d;
                }, K = function(a, b, c) {
                    var e, g = a[b];
                    if ("object" == typeof g && g) {
                        if (f.call(g) == o) {
                            for (e = g.length; e--;) {
                                J(g, e, c);
                            }
                        } else {
                            d(g, function(a) {
                                J(g, a, c);
                            });
                        }
                    }
                    return c.call(a, b, g);
                };
                h.parse = function(a, b) {
                    var c, d;
                    return C = 0, D = "" + a, c = I(H()), "$" != H() && G(), C = D = null, b && f.call(b) == k ? K((d = {}, d[""] = c, d), "", b) : c;
                };
            }
        }
        g && define("JSON", [], function() {
            return h;
        });
    }(this), define("cvp/version", ["require", "exports", "module"], function(a, b, c) {
        function d(a) {
            if ("string" != typeof a) {
                throw new TypeError("Version() only accepts a string");
            }
            this.raw = a, this.major = 0 / 0, this.minor = 0 / 0, this.revision = 0 / 0;
            var b = e.exec(a);
            if (!b) {
                throw new SyntaxError('Version string "' + this.raw + '" failed to parse as a valid version number');
            }
            var c = b[1], d = b[3], g = b[5];
            this.major = c, d&&!f.test(b[2]) && (this.minor = d, g&&!f.test(b[4]) && (this.revision = g));
        }
        var e = /(\d+)(?:(\D)(\d+))?(?:(\D)(\d+))?/, f = /^[abd]$/;
        d.prototype.toString = function() {
            return this.toArray().join(".");
        }, d.prototype.toArray = function(a) {
            for (var b, c = [this.major, this.minor, this.revision], d = [], e = 0, f = c.length; f > e && (b =+ c[e], a ||!isNaN(b)); ++e) {
                d.push(b);
            }
            return d;
        }, d.prototype.compare = function(a, b) {
            if (!(a instanceof d)) {
                return this.compare(new d(a), b);
            }
            var c, e, f, g = 0, h = 0, i = this.toArray(!0);
            for (c = b ? a.toArray() : a.toArray(!0), h = c.length; h > g; ++g) {
                if (e =+ i[g] || 0, f =+ c[g] || 0, e > f) {
                    return 1;
                }
                if (f > e) {
                    return - 1;
                }
            }
            return 0;
        }, d.prototype.is = function(a) {
            return 0 === this.compare(a, !0);
        }, d.prototype.eq = function(a) {
            return 0 === this.compare(a);
        }, d.prototype.gt = function(a) {
            return this.compare(a) > 0;
        }, d.prototype.lt = function(a) {
            return this.compare(a) < 0;
        }, d.prototype.isnt = function(a) {
            return !this.is(a);
        }, d.prototype.ne = function(a) {
            return !this.eq(a);
        }, d.prototype.lte = function(a) {
            return !this.gt(a);
        }, d.prototype.gte = function(a) {
            return !this.lt(a);
        }, c.exports = d;
    }), define("cvp/browser", ["require", "exports", "module", "cvp/version"], function(a, b, c) {
        function d(a) {
            var b = {};
            for (var c in l) {
                b[c] = l[c].exec(a);
            }
            return b;
        }
        var e = a("cvp/version"), f = window.navigator.userAgent, g = "object" == typeof console && "function" == typeof console.log ? function() {
            console.log.apply(console, arguments);
        }
        : function() {}, h = {
            IOS: "iOS",
            OSX: "OSX",
            ANDROID: "Android",
            SAFARI: "Safari",
            SILK: "Silk",
            CHROME: "Chrome",
            FIREFOX: "Firefox",
            OPERA: "Opera",
            IE: "Internet Explorer",
            IPAD: "iPad",
            IPOD: "iPod",
            IPHONE: "iPhone",
            KINDLE: "Kindle",
            DESKTOP: "desktop",
            MOBILE: "mobile",
            TABLET: "tablet"
        }, i = document.createElement("video"), j = /^(maybe|probably)$/, k = function(a) {
            try {
                return j.test(i.canPlayType(a));
            } catch (b) {
                return !1;
            }
        };
        h.supports = {}, h.supports.video = "function" == typeof i.canPlayType, h.supports.mp4 = h.supports.video && k("video/mp4"), h.supports.m3u8 = h.supports.video && (k("application/x-mpegURL") || k("application/vnd.apple.mpegURL"));
        var l = {
            Safari: / Safari\/\d+(?:\.\d+){0,2}/,
            Version: / Version\/(\d+(?:\.\d+){0,2})/,
            Opera: /^Opera\/\d+(?:\.\d+){0,2}/,
            Silk: / Silk\/(\d+(?:\.\d+){0,2})/,
            InternetExplorer: /; MSIE (\d+(?:\D\d+){0,2})/,
            InternetExplorer11: /; Trident\/[^)]*; rv:(\d+(?:\D\d+){0,2})/,
            Firefox: / Firefox\/(\d+(?:\D\d+){0,2})/,
            Chrome: / Chrome\/(\d+(?:\D\d+){0,2})/,
            RenderingEngine: / (AppleWebKit|Trident|Gecko|Presto)\/(\d+(?:\D\d+){0,2})/,
            AppleDevice: / \((iP(?:[ao]d|hone));/,
            Android: /; Android(?: (\d+(?:\D\d+){0,2}))?[;)]/,
            iOS: / OS (\d+(?:\D\d+){0,2}) like(?: Mac)? OS X/,
            OSX: / OS X (\d+(?:\D\d+){0,2})/,
            MobileSafari: / Mobile(?:\/\S+)? Safari\//,
            MobileFirefox: /; Mobile; .+ Firefox\/| Fennec\//,
            TabletFirefox: /; Tablet; .+ Firefox\//,
            IEMobile: /; IEMobile\/(\d+(?:\.\d+){0,2})/,
            OperaMobile: /; Opera (Mini|Mobi)\//,
            OperaTablet: /; Opera Tablet\//,
            SilkAccelerated: / Silk-Accelerated=(true|false)/
        };
        !function(a) {
            function b(a, b) {
                var c = b || window, d = [].slice.call(arguments, 2);
                return function() {
                    return a.apply(c, d.concat([].slice.call(arguments)));
                };
            }
            a.Firefox ? (h.name = h.FIREFOX, h.version = new e(a.Firefox[1])) : a.InternetExplorer ? (h.name = h.IE, h.version = new e(a.InternetExplorer[1])) : a.InternetExplorer11 ? (h.name = h.IE, h.version = new e(a.InternetExplorer11[1])) : a.Opera && a.Version ? (h.name = h.OPERA, h.version = new e(a.Version[1])) : a.Silk ? (h.name = h.SILK, h.version = new e(a.Silk[1])) : a.Chrome ? (h.name = h.CHROME, h.version = new e(a.Chrome[1])) : a.Safari && a.Version && (h.name = h.SAFARI, h.version = new e(a.Version[1])), h.engine = {}, a.RenderingEngine && (h.engine.name = a.RenderingEngine[1], h.engine.version = new e(a.RenderingEngine[2])), h.os = {}, a.Android ? (h.os.name = h.ANDROID, "undefined" != typeof a.Android[1] && (h.os.version = new e(a.Android[1]))) : a.iOS ? (h.os.name = h.IOS, h.os.version = new e(a.iOS[1])) : a.OSX && (h.os.name = h.OSX, h.os.version = new e(a.OSX[1])), h.device = {}, a.AppleDevice ? h.device.name = a.AppleDevice[1] : a.Silk && (h.device.name = h.KINDLE), h.device.type = h.DESKTOP, (a.MobileSafari || a.MobileFirefox || a.IEMobile || a.OperaMobile) && (h.device.type = h.MOBILE), (a.TabletFirefox || a.OperaTablet || a.Android && h.device.type !== h.MOBILE) && (h.device.type = h.TABLET);
            var c = function(a, b, c) {
                var d, e = /^(!?~|[!=><]=?)?(\d.*)$/, f = function(a, b) {
                    var c, d = e.exec(b), f = a.is;
                    if (!d) {
                        throw new Error("checkVersion: The pattern -- " + b + " -- was not considered valid.");
                    }
                    switch (d[1]) {
                    case"~":
                        f = a.is;
                        break;
                    case"!~":
                        f = a.isnt;
                        break;
                    case"=":
                    case"==":
                        f = a.eq;
                        break;
                    case"!":
                    case"!=":
                        f = a.ne;
                        break;
                    case">":
                        f = a.gt;
                        break;
                    case">=":
                        f = a.gte;
                        break;
                    case"<":
                        f = a.lt;
                        break;
                    case"<=":
                        f = a.lte;
                    }
                    return c = f.call(a, d[2]);
                };
                switch (a) {
                case"browser":
                    d = b === h.name, c && (d = d && f(h.version, c));
                    break;
                case"engine":
                    d = b === h.engine.name, c && (d = d && f(h.engine.version, c));
                    break;
                case"os":
                    d = b === h.os.name, c && (d = d && f(h.os.version, c));
                    break;
                case"device":
                    d = b === h.device.name;
                    break;
                case"platform":
                    d = b === h.device.type;
                    break;
                default:
                    g('Browser.is() did not understand property "' + a + '"');
                }
                return d;
            };
            h.isBrowser = b(c, this, "browser"), h.isEngine = b(c, this, "engine"), h.isOS = b(c, this, "os"), h.isDevice = b(c, this, "device"), h.isPlatform = b(c, this, "platform"), h.isOS(h.ANDROID, "<4") && (h.supports.m3u8=!1), h.device.name === h.KINDLE && (h.device.type = h.MOBILE), h.device.name === h.IPAD && (h.device.type = h.TABLET), h.allowedHtmlPlayer=!h.isPlatform(h.DESKTOP), h.allowedAutoPlay = h.isPlatform(h.DESKTOP), h.forcesFullscreen = h.isPlatform(h.MOBILE);
        }(d(f)), c.exports = h;
    }), define("cvp/log", ["require", "exports", "module", "core/app", "cvp/browser", "JSON"], function(a) {
        for (var b = a("core/app"), c = a("cvp/browser"), d = a("JSON"), e = Object.prototype.hasOwnProperty, f = Array.prototype.slice, g = "function" == typeof Date.now ? Date.now : function() {
            return (new Date).getTime();
        }, h = function() {
            for (var a = ["undefined", "boolean", "function", "number", "string"], b = function(a) {
                return a.charAt(0).toUpperCase() + a.substr(1);
            }, c = {}, d = null, e = 0, f = a.length; f > e; ++e) {
                d = a[e], c[d] = b(d);
            }
            return function(a) {
                var b, d = typeof a;
                return null === a ? "Null" : a !== a ? "NaN" : window === a ? "Global" : "object" === d && (void 0 !== window.Element && a instanceof Element || void 0 !== a.nodeType) ? "Element" : c[d] || c[b = c.toString.call(a)] || (c[b] = b.slice(8, - 1));
            };
        }(), i = function(a, b, c) {
            var g, j, k, l, m, n, o;
            null == b && (b = 0), null == c && (c = 0), k = [];
            try {
                m = d.stringify(a);
            } catch (p) {
                m = "";
            }
            if ("" !== m && "{}" !== m) {
                return m;
            }
            j = function(a) {
                return c >= b ? "\u2026" : i(a, b, ++c);
            };
            for (g in a) {
                if (e.call(a, g)) {
                    try {
                        o = a[g];
                    } catch (p) {
                        continue;
                    }
                    switch (l = [g], n = h(o)) {
                    case"Null":
                        l.push("null");
                        break;
                    case"Element":
                        l.push(o.nodeName ? "<" + o.nodeName + (o.id ? "#" + o.id : "") + (o.className ? "." + o.className.replace(/\s+/, ".") : "") + "/>" : "[Element]");
                        break;
                    case"Number":
                        l.push(String(o));
                        break;
                    case"Boolean":
                        l.push(String(o));
                        break;
                    case"String":
                        l.push('"' + o + '"');
                        break;
                    case"Undefined":
                        l.push("undefined");
                        break;
                    case"Function":
                        l.push("function {\u2026}");
                        break;
                    case"RegExp":
                        l.push(String(o));
                        break;
                    case"Date":
                        l.push(o.toLocaleString());
                        break;
                    case"Array":
                        l.push("[" + j(o) + "]");
                        break;
                    case"Arguments":
                        l.push("[" + j(f.call(o)) + "]");
                        break;
                    case"Object":
                        l.push("{" + j(o) + "}");
                        break;
                    default:
                        l.push("[" + n + "]{" + j(o) + "}");
                    }
                    k.push(l.join(": "));
                }
            }
            return "[" + h(a) + "]{" + (0 !== k.length ? " " + k.join(", ") + " " : "") + "}";
        }, j = g(), k = c.isOS(c.ANDROID)&&!c.isBrowser(c.CHROME, ">=31") || c.isOS(c.IOS, "<6") || c.isBrowser(c.IE, "<10"), l = "CVP", m = window.self === window.top ? "_top" : window.name ? window.name : "", n = ["error", "warn", "info", "debug", "log"], o = [].concat("fatal", n, "trace"), p = [].concat("none", o, "all"), q = {}, r = null, s = 0, t = p.length; t > s; ++s) {
            r = p[s], q[r.toUpperCase()] = s;
        }
        var u = q.WARN, v = /NO|NONE|OFF|SILENT|QUIET/, w = {}, x = Function.prototype, y = "object" == typeof console ? "function" == typeof console.log ? function() {
            console.log.apply(console, arguments);
        }
        : "object" == typeof console.log ? function(a) {
            var b = arguments.length;
            b > 1 ? console.log(f.call(arguments).join(" \u2022 ")) : 1 === b && console.log(a);
        }
        : x: x, z = function(a) {
            return a = a.toUpperCase(), q[a] || (v.test(a) ? q.NONE : q.ALL);
        }, A = function(a) {
            switch (typeof a) {
            case"string":
                return z(a);
            case"number":
                return a;
            default:
                return u;
            }
        };
        b.DEBUG_LEVEL && (u = A(b.DEBUG_LEVEL));
        for (var B = {}, C = 0, D = o.length; D > C; ++C) {
            (function(a) {
                w[a] = function() {
                    if ("object" == typeof console) {
                        switch (typeof console[a]) {
                        case"object":
                            return w[a] = "function" == typeof Function.prototype.bind ? x.call.bind(console[a], console) : y, w[a].apply(null, arguments);
                        case"function":
                            return console[a].apply(console, arguments);
                        default:
                            return y.apply(null, arguments);
                        }
                    }
                }, B[a] = function() {
                    var b = f.call(arguments);
                    if (k) {
                        for (var c, d = 0, e = b.length; e > d; ++d) {
                            c = b[d], "object" == typeof c && (b[d] = i(c));
                        }
                        b = [b.join(" \u2022 ")];
                    }
                    w[a].apply(this, b);
                };
            })(o[C]);
        }
        var E = function() {
            function a(a) {
                var b = this;
                this.id = a || "", this.setLevel(u), this._logger = {};
                for (var c in B) {
                    (function(a, c) {
                        b._logger[a] = function() {
                            var d, e;
                            return e = a.toUpperCase(), b.getLevel() >= q[e] ? (d = f.call(arguments), d.unshift("[" + l + "|" + m + "|" + b.id + "|" + (g() - j) + "]", e), c.apply(b, d)) : void 0;
                        }, b[a] = function() {
                            return b._logger[a].apply(b._logger, arguments);
                        };
                    })(c, B[c]);
                }
            }
            return a.prototype.useLog4JS = function(a) {
                var b = this, c = 0;
                !function(d, e) {
                    var g;
                    return setTimeout(g = function() {
                        if (!(e&&++c > e)) {
                            if ("object" == typeof window.log4javascript && "function" == typeof window.log4javascript.getDefaultLogger) {
                                b.warn("switching '" + l + "|" + m + "|" + b.id + "' logger to send future messages to log4javascript");
                                var h = a ? window.log4javascript.getLogger(a): window.log4javascript.getDefaultLogger();
                                for (var i in B) {
                                    (function(a) {
                                        b._logger[a] = function() {
                                            var c = f.call(arguments);
                                            return c.unshift("[" + l + "|" + m + "|" + b.id + "]"), h[a].apply(h, c);
                                        };
                                    })(i);
                                }
                            } else {
                                setTimeout(g, d);
                            }
                        }
                    }, d);
                }(2000, 10);
            }, a.prototype.setLevel = function(a) {
                return this.loggerLevel = A(a), this.loggerLevel;
            }, a.prototype.getLevel = function() {
                return this.loggerLevel;
            }, a;
        }(), F = [], G = function(a) {
            return null == a && (a = ""), F[a] = F[a] || new E(a);
        };
        return {
            Level: q,
            getDefaultLevel: function() {
                return u;
            },
            setDefaultLevel: function(a) {
                return u = A(a);
            },
            getLogger: G
        };
    }), define("cvp/utils", ["require", "exports", "module", "when", "JSON", "core/app", "cvp/log"], function(a, b) {
        function c() {
            return document.cookie;
        }
        function d(a, b, c) {
            a && (document.cookie = a + "=" + b + "; expires=" + c);
        }
        function e(a) {
            return "undefined" == typeof a;
        }
        function f(a) {
            return e(a) || null === a;
        }
        function g(a) {
            if (f(a)) {
                return !0;
            }
            if (k(a) || gb(a)) {
                return 0 === a.length;
            }
            for (var b in a) {
                if (ib(a, b)) {
                    return !1;
                }
            }
            return !0;
        }
        function h(a) {
            return "function" == typeof a;
        }
        function i(a) {
            return "object" == typeof a;
        }
        function j(a) {
            return "[object Object]" === Object.prototype.toString.call(a);
        }
        function k(a) {
            return "string" == typeof a;
        }
        function l(a) {
            return "boolean" == typeof a;
        }
        function m(a, b) {
            if (l(a)) {
                return a;
            }
            if (g(a)) {
                return b;
            }
            switch (a.toLowerCase()) {
            case"yes":
            case"true":
            case"on":
                return !0;
            default:
                return !1;
            }
        }
        function n(a, b) {
            var c, d, e, f, g = arguments.length > 2 ? C(arguments, 1): b ? [b]: [];
            for (a = a || {}, c = 0, d = g.length; d > c; ++c) {
                if (e = g[c], e && i(e)) {
                    for (f in e) {
                        a[f] = e[f];
                    }
                }
            }
            return a;
        }
        function o(a, b, c) {
            var d, e, f;
            if (gb(a)) {
                for (e = 0, f = a.length; f > e && (d = b.call(c || a[e], a[e], e, a), d!==!1); ++e) {}
            } else {
                for (e in a) {
                    if (ib(a, e) && (d = b.call(c || a[e], e, a[e], a), d===!1)) {
                        break;
                    }
                }
            }
        }
        function p(a) {
            var b = [];
            for (var c in a) {
                ib(a, c) && b.push(c);
            }
            return b;
        }
        function q(a, b, c) {
            var d = [];
            return null == a ? d : (o(a, function(a, e, f) {
                d.push(b.call(c, a, e, f));
            }), d);
        }
        function r(a) {
            var b = [];
            return o(a, function(a) {
                - 1 === hb(b, a) && b.push(a);
            }), b;
        }
        function s(a) {
            return a;
        }
        function t(a, b, c) {
            b = b || s;
            var d=!0;
            return null == a ? d : (o(a, function(a, e, f) {
                return (d = d && b.call(c, a, e, f)) ? void 0 : !1;
            }), !!d);
        }
        function u(a, b, c) {
            b = b || s;
            var d=!1;
            return null == a ? d : (o(a, function(a, e, f) {
                return d || (d = b.call(c, a, e, f))?!1 : void 0;
            }), !!d);
        }
        function v(a, b, c) {
            b = b || s;
            var d = [];
            return null == a ? d : (o(a, function(a, e, f) {
                b.call(c, a, e, f) && d.push(a);
            }), d);
        }
        function w(a, b, c) {
            return b = b || s, v(a, function(a, d, e) {
                return !b.call(c, a, d, e);
            }, c);
        }
        function x(a, b, c) {
            b = b || s;
            var d;
            return u(a, function(a, e, f) {
                return b.call(c, a, e, f) ? (d = a, !0) : void 0;
            }), d;
        }
        function y(a, b, c) {
            b = b || s;
            var d =- 1;
            return u(a, function(a, e, f) {
                return b.call(c, a, e, f) ? (d = e, !0) : void 0;
            }), d;
        }
        function z(a, b, c) {
            var d, e, f, g = null, h = 0;
            c = c || {}, b = b || 250;
            var i = function() {
                h = c.leading===!1 ? 0 : fb(), g = null, f = a.apply(d, e);
            };
            return function() {
                var j = fb();
                h || c.leading!==!1 || (h = j);
                var k = b - (j - h);
                return d = this, e = arguments, 0 >= k ? (window.clearTimeout(g), g = null, h = j, f = a.apply(d, e)) : g || c.trailing===!1 || (g = window.setTimeout(i, k)), f;
            };
        }
        function A(a, b, c) {
            var d, e, f, g, h;
            return b = b || 250, function() {
                f = this, e = arguments, g = fb();
                var i = function() {
                    var j = fb() - g;
                    b > j ? d = window.setTimeout(i, b - j) : (d = null, c || (h = a.apply(f, e)));
                }, j = c&&!d;
                return d || (d = window.setTimeout(i, b)), j && (h = a.apply(f, e)), h;
            };
        }
        function B(a) {
            return document.getElementById(a);
        }
        function C(a, b) {
            return Array.prototype.slice.call(a, b || 0);
        }
        function D(a, b) {
            var c = C(arguments, 2);
            return function() {
                var d = c.concat(C(arguments));
                return a.apply(b, d);
            };
        }
        function E(a) {
            var b = a.match(/\{[^{}]*\}/g), c = 0, d = 0, e = C(arguments, 1), f = e.length;
            if (b) {
                for (c = 0, d = b.length; d > c && f > c; ++c) {
                    a = a.replace(b[c], e[c]);
                }
            } else {
                cb.info("No {placeholders} present in template: ", a);
            }
            return a;
        }
        function F(a, b) {
            var c, d = [];
            f(b) && (b = ",");
            for (c in a) {
                ib(a, c) && d.push(c + "=" + a[c]);
            }
            return d.join(b);
        }
        function G(a) {
            return 0 === a.indexOf("//")||-1 !== a.indexOf("://");
        }
        function H(a) {
            return !G(a);
        }
        function I(a) {
            var b = document.createElement("a");
            b.href = a;
            var c = b.href;
            b = null;
            var d = jb.exec(c);
            return d ? {
                href: d[0] || "",
                origin: d[1] || "",
                protocol: d[2] || "",
                scheme: d[3] || "",
                host: d[4] || "",
                hostname: d[5] || "",
                port: d[6] || "",
                pathname: d[7] || "",
                dir: d[8] || "",
                file: d[9] || "",
                search: d[10] || "",
                query: d[11] || "",
                hash: d[12] || "",
                anchor: d[13] || ""
            } : void 0;
        }
        function J(a) {
            var b = {};
            return f(a) ? b : (a.replace(kb, function(a, c, d) {
                return b[c] = d ? window.decodeURIComponent(d) : "", a;
            }), b);
        }
        function K(a) {
            var b = {}, c = a || window.location.href, d = I(c);
            return d.query && (b = J(d.query)), b;
        }
        function L(a) {
            return K()[a];
        }
        function M(a) {
            var b, c, d = [], e = window.encodeURIComponent;
            for (b in a) {
                ib(a, b) && (c = a[b], d.push(e(b) + ("" !== c ? "=" + e(i(c) ? $.stringify(c) : c) : "")));
            }
            return d.join("&").replace(/%20/g, "+");
        }
        function N(a) {
            var b = M(a), c = b ? "?" + b: "";
            return c;
        }
        function O(a, b) {
            var c = I(a), d = J(c.query);
            d = n(d, b);
            var e = N(d);
            return c.origin + c.pathname + e + c.hash;
        }
        function P(a) {
            var b = {
                "http:": "80",
                "https:": "443"
            };
            return a = I(a), a.hostname.toLowerCase() !== location.hostname.toLowerCase() || (a.port || b[a.protocol]) !== (location.port || b[location.protocol]) || a.protocol.toLowerCase() !== location.protocol.toLowerCase();
        }
        function Q() {
            window.console && window.console.log && ab && window.console.log(C(arguments).join(" | "));
        }
        function R(a, b) {
            var c;
            "nested" !== b && cb.info("Print all values for ", b);
            for (c in a) {
                if (ib(a, c)) {
                    if (!c) {
                        continue;
                    }
                    i(a[c]) ? (cb.info("Printing nested object value", c), R(a[c], "nested")) : cb.info("nested" === b ? "	" : "", "key:", c, "value:", a[c]);
                }
            }
            "nested" !== b && cb.info("End Print all values for ", b);
        }
        function S(a) {
            var b = Z.defer();
            return setTimeout(b.resolve, a), b.promise;
        }
        function T(a, b) {
            var c = Z.defer();
            return a.then(c.resolve, c.reject), setTimeout(function() {
                c.reject(new Error("timed out"));
            }, b), c.promise;
        }
        function U(a, b) {
            return 1 === arguments.length ? Math.floor(Math.random() * a) : Math.floor(Math.random() * (b - a + 1)) + a;
        }
        function V(a) {
            return + a;
        }
        function W(a) {
            return parseInt(a, 10);
        }
        function X(a) {
            var b, c = "", d = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz".split("");
            for (a || (a = U(d.length)), b = 0; a > b; b++) {
                c += d[U(d.length)];
            }
            return c;
        }
        function Y(a, b, c) {
            return g(a) ? a : a.replace(new RegExp(b + "$", "i"), c);
        }
        var Z = a("when"), $ = a("JSON"), _ = a("core/app"), ab = _.DEBUG, bb = a("cvp/log"), cb = bb.getLogger(), db = function() {
            var a = /^[\s\xA0]+|[\s\xA0]+$/g, b = String.prototype.trim;
            return h(b) ? function(a) {
                return f(a) ? "" : b.call(a);
            } : function(b) {
                return f(b) ? "" : String(b).replace(a, "");
            };
        }(), eb = function() {
            function a(a, b, c) {
                return c.toUpperCase();
            }
            if ("getComputedStyle" in window) {
                return function(a, b) {
                    return window.getComputedStyle(a, null).getPropertyValue(b);
                };
            }
            var b = /(-([a-z]))/g;
            return function(c, d) {
                return "currentStyle" in c ? ("float" === d && (d = "styleFloat"), d = d.replace(b, a), c.currentStyle[d] || null) : null;
            };
        }(), fb = "function" == typeof Date.now ? Date.now: function() {
            return (new Date).getTime();
        }, gb = "function" == typeof Array.isArray ? Array.isArray: function(a) {
            return "[object Array]" === Object.prototype.toString.call(a);
        }, hb = function() {
            var a = Array.prototype.indexOf, b = "function" == typeof a ? a: function(a, b, c) {
                if (a) {
                    var d = a.length;
                    for (c = c ? 0 > c ? Math.max(0, d + c) : c : 0; d > c; ++c) {
                        if (c in a && a[c] === b) {
                            return c;
                        }
                    }
                }
                return - 1;
            };
            return function(a, c, d) {
                return k(a) ? a.indexOf(c, d) : gb(a) ? b.call(a, c, d) : void 0;
            };
        }(), ib = "function" == typeof Object.prototype.hasOwnProperty ? function(a, b) {
            return Object.prototype.hasOwnProperty.call(a, b);
        }
        : function(a, b) {
            return a[b] !== Object.prototype[b];
        }, jb = /^((([^:\/?#]+):)?(?:\/\/(([^\/?#]*)(?::(\d+))?))?)(([^?#]*\/)([^\/?#]*)?)(\?([^#]*))?(#(.*))?$/, kb = /[?&]?([^&=]+)(?:=([^&=]+))?/g;
        b.trim = db, b.getStyle = eb, b.now = fb, b.getCookie = c, b.setCookie = d, b.undef = e, b.isUndefined = e, b.nil = f, b.isNull = f, b.empty = g, b.isEmpty = g, b.isFunc = h, b.isFunction = h, b.isObject = i, b.isSimpleObject = j, b.isString = k, b.isBoolean = l, b.isArray = gb, b.indexOf = hb, b.isFlagActive = m, b.extend = n, b.each = o, b.keys = p, b.map = q, b.uniq = r, b.identity = s, b.every = t, b.some = u, b.filter = v, b.reject = w, b.find = x, b.findIndex = y, b.throttle = z, b.debounce = A, b.byId = B, b.slice = C, b.hasOwn = ib, b.bind = D, b.template = E, b.joinKeys = F, b.isAbsolute = G, b.isRelative = H, b.isRelativePath = H, b.parseUrl = I, b.parseQueryString = J, b.getQueryParams = K, b.getQueryParam = L, b.encodeParams = M, b.toQueryString = N, b.augmentQueryString = O, b.isCrossDomain = P, b.log = Q, b.print = R, b.delay = S, b.timeout = T, b.getRandomInt = U, b.toNum = V, b.toInt = W, b.randomString = X, b.replaceExtension = Y;
    }), define("swfobject", ["require", "exports", "module"], function() {
        var a = function() {
            function b() {
                if (!U && document.getElementsByTagName("body")[0]) {
                    try {
                        var a, b = s("span");
                        b.style.display = "none", a = N.getElementsByTagName("body")[0].appendChild(b), a.parentNode.removeChild(a), a = null, b = null;
                    } catch (c) {
                        return;
                    }
                    U=!0;
                    for (var d = Q.length, e = 0; d > e; e++) {
                        Q[e]();
                    }
                }
            }
            function c(a) {
                U ? a() : Q[Q.length] = a;
            }
            function d(a) {
                if (typeof M.addEventListener !== F) {
                    M.addEventListener("load", a, !1);
                } else {
                    if (typeof N.addEventListener !== F) {
                        N.addEventListener("load", a, !1);
                    } else {
                        if (typeof M.attachEvent !== F) {
                            u(M, "onload", a);
                        } else {
                            if ("function" == typeof M.onload) {
                                var b = M.onload;
                                M.onload = function() {
                                    b(), a();
                                };
                            } else {
                                M.onload = a;
                            }
                        }
                    }
                }
            }
            function e() {
                var a = N.getElementsByTagName("body")[0], b = s(G);
                b.setAttribute("style", "visibility: hidden;"), b.setAttribute("type", J);
                var c = a.appendChild(b);
                if (c) {
                    var d = 0;
                    !function e() {
                        if (typeof c.GetVariable !== F) {
                            try {
                                var g = c.GetVariable("$version");
                                g && (g = g.split(" ")[1].split(","), Y.pv = [t(g[0]), t(g[1]), t(g[2])]);
                            } catch (h) {
                                Y.pv = [8, 0, 0];
                            }
                        } else {
                            if (10 > d) {
                                return d++, setTimeout(e, 10), void 0;
                            }
                        }
                        a.removeChild(b), c = null, f();
                    }();
                } else {
                    f();
                }
            }
            function f() {
                var a = R.length;
                if (a > 0) {
                    for (var b = 0; a > b; b++) {
                        var c = R[b].id, d = R[b].callbackFn, e = {
                            success: !1,
                            id: c
                        };
                        if (Y.pv[0] > 0) {
                            var f = r(c);
                            if (f) {
                                if (!v(R[b].swfVersion) || Y.wk && Y.wk < 312) {
                                    if (R[b].expressInstall && h()) {
                                        var k = {};
                                        k.data = R[b].expressInstall, k.width = f.getAttribute("width") || "0", k.height = f.getAttribute("height") || "0", f.getAttribute("class") && (k.styleclass = f.getAttribute("class")), f.getAttribute("align") && (k.align = f.getAttribute("align"));
                                        for (var l = {}, m = f.getElementsByTagName("param"), n = m.length, o = 0; n > o; o++) {
                                            "movie" !== m[o].getAttribute("name").toLowerCase() && (l[m[o].getAttribute("name")] = m[o].getAttribute("value"));
                                        }
                                        i(k, l, c, d);
                                    } else {
                                        j(f), d && d(e);
                                    }
                                } else {
                                    x(c, !0), d && (e.success=!0, e.ref = g(c), e.id = c, d(e));
                                }
                            }
                        } else {
                            if (x(c, !0), d) {
                                var p = g(c);
                                p && typeof p.SetVariable !== F && (e.success=!0, e.ref = p, e.id = p.id), d(e);
                            }
                        }
                    }
                }
            }
            function g(a) {
                var b = null, c = r(a);
                return c && "OBJECT" === c.nodeName.toUpperCase() && (b = typeof c.SetVariable !== F ? c : c.getElementsByTagName(G)[0] || c), b;
            }
            function h() {
                return !V && v("6.0.65") && (Y.win || Y.mac)&&!(Y.wk && Y.wk < 312);
            }
            function i(a, b, c, d) {
                var e = r(c);
                if (c = q(c), V=!0, B = d || null, C = {
                    success: !1,
                    id: c
                }, e) {
                    "OBJECT" === e.nodeName.toUpperCase() ? (z = k(e), A = null) : (z = e, A = c), a.id = K, (typeof a.width === F ||!/%$/.test(a.width) && t(a.width) < 310) && (a.width = "310"), (typeof a.height === F ||!/%$/.test(a.height) && t(a.height) < 137) && (a.height = "137");
                    var f = Y.ie ? "ActiveX": "PlugIn", g = "MMredirectURL=" + encodeURIComponent(M.location.toString().replace(/&/g, "%26")) + "&MMplayerType=" + f + "&MMdoctitle=" + encodeURIComponent(N.title.slice(0, 47) + " - Flash Player Installation");
                    if (typeof b.flashvars !== F ? b.flashvars += "&" + g : b.flashvars = g, Y.ie && 4 !== e.readyState) {
                        var h = s("div");
                        c += "SWFObjectNew", h.setAttribute("id", c), e.parentNode.insertBefore(h, e), e.style.display = "none", o(e);
                    }
                    m(a, b, c);
                }
            }
            function j(a) {
                if (Y.ie && 4 !== a.readyState) {
                    a.style.display = "none";
                    var b = s("div");
                    a.parentNode.insertBefore(b, a), b.parentNode.replaceChild(k(a), b), o(a);
                } else {
                    a.parentNode.replaceChild(k(a), a);
                }
            }
            function k(a) {
                var b = s("div");
                if (Y.win && Y.ie) {
                    b.innerHTML = a.innerHTML;
                } else {
                    var c = a.getElementsByTagName(G)[0];
                    if (c) {
                        var d = c.childNodes;
                        if (d) {
                            for (var e = d.length, f = 0; e > f; f++) {
                                1 === d[f].nodeType && "PARAM" === d[f].nodeName || 8 === d[f].nodeType || b.appendChild(d[f].cloneNode(!0));
                            }
                        }
                    }
                }
                return b;
            }
            function l(a, b) {
                var c = s("div");
                return c.innerHTML = "<object classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'><param name='movie' value='" + a + "'>" + b + "</object>", c.firstChild;
            }
            function m(a, b, c) {
                var d, e = r(c);
                if (c = q(c), Y.wk && Y.wk < 312) {
                    return d;
                }
                if (e) {
                    var f, g, h, i = Y.ie ? s("div"): s(G);
                    typeof a.id === F && (a.id = c);
                    for (h in b) {
                        b.hasOwnProperty(h) && "movie" !== h.toLowerCase() && n(i, h, b[h]);
                    }
                    Y.ie && (i = l(a.data, i.innerHTML));
                    for (f in a) {
                        a.hasOwnProperty(f) && (g = f.toLowerCase(), "styleclass" === g ? i.setAttribute("class", a[f]) : "classid" !== g && "data" !== g && i.setAttribute(f, a[f]));
                    }
                    Y.ie ? S[S.length] = a.id : (i.setAttribute("type", J), i.setAttribute("data", a.data)), e.parentNode.replaceChild(i, e), d = i;
                }
                return d;
            }
            function n(a, b, c) {
                var d = s("param");
                d.setAttribute("name", b), d.setAttribute("value", c), a.appendChild(d);
            }
            function o(a) {
                var b = r(a);
                b && "OBJECT" === b.nodeName.toUpperCase() && (Y.ie ? (b.style.display = "none", function c() {
                    if (4 === b.readyState) {
                        for (var a in b) {
                            "function" == typeof b[a] && (b[a] = null);
                        }
                        b.parentNode.removeChild(b);
                    } else {
                        setTimeout(c, 10);
                    }
                }()) : b.parentNode.removeChild(b));
            }
            function p(a) {
                return a && a.nodeType && 1 === a.nodeType;
            }
            function q(a) {
                return p(a) ? a.id : a;
            }
            function r(a) {
                if (p(a)) {
                    return a;
                }
                var b = null;
                try {
                    b = N.getElementById(a);
                } catch (c) {}
                return b;
            }
            function s(a) {
                return N.createElement(a);
            }
            function t(a) {
                return parseInt(a, 10);
            }
            function u(a, b, c) {
                a.attachEvent(b, c), T[T.length] = [a, b, c];
            }
            function v(a) {
                a += "";
                var b = Y.pv, c = a.split(".");
                return c[0] = t(c[0]), c[1] = t(c[1]) || 0, c[2] = t(c[2]) || 0, b[0] > c[0] || b[0] === c[0] && b[1] > c[1] || b[0] === c[0] && b[1] === c[1] && b[2] >= c[2]?!0 : !1;
            }
            function w(a, b, c, d) {
                var e = N.getElementsByTagName("head")[0];
                if (e) {
                    var f = "string" == typeof c ? c: "screen";
                    if (d && (D = null, E = null), !D || E !== f) {
                        var g = s("style");
                        g.setAttribute("type", "text/css"), g.setAttribute("media", f), D = e.appendChild(g), Y.ie && typeof N.styleSheets !== F && N.styleSheets.length > 0 && (D = N.styleSheets[N.styleSheets.length - 1]), E = f;
                    }
                    D && (typeof D.addRule !== F ? D.addRule(a, b) : typeof N.createTextNode !== F && D.appendChild(N.createTextNode(a + " {" + b + "}")));
                }
            }
            function x(a, b) {
                if (W) {
                    var c = b ? "visible": "hidden", d = r(a);
                    U && d ? d.style.visibility = c : "string" == typeof a && w("#" + a, "visibility:" + c);
                }
            }
            function y(a) {
                var b = /[\\\"<>\.;]/, c = null !== b.exec(a);
                return c && typeof encodeURIComponent !== F ? encodeURIComponent(a) : a;
            }
            var z, A, B, C, D, E, F = "undefined", G = "object", H = "Shockwave Flash", I = "ShockwaveFlash.ShockwaveFlash", J = "application/x-shockwave-flash", K = "SWFObjectExprInst", L = "onreadystatechange", M = window, N = document, O = navigator, P=!1, Q = [], R = [], S = [], T = [], U=!1, V=!1, W=!0, X=!1, Y = function() {
                var a = typeof N.getElementById !== F && typeof N.getElementsByTagName !== F && typeof N.createElement !== F, b = O.userAgent.toLowerCase(), c = O.platform.toLowerCase(), d = c ? /win/.test(c): /win/.test(b), e = c ? /mac/.test(c): /mac/.test(b), f = /webkit/.test(b) ? parseFloat(b.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")): !1, g = "Microsoft Internet Explorer" === O.appName, h = [0, 0, 0], i = null;
                if (typeof O.plugins !== F && typeof O.plugins[H] === G) {
                    i = O.plugins[H].description, i && typeof O.mimeTypes !== F && O.mimeTypes[J] && O.mimeTypes[J].enabledPlugin && (P=!0, g=!1, i = i.replace(/^.*\s+(\S+\s+\S+$)/, "$1"), h[0] = t(i.replace(/^(.*)\..*$/, "$1")), h[1] = t(i.replace(/^.*\.(.*)\s.*$/, "$1")), h[2] = /[a-zA-Z]/.test(i) ? t(i.replace(/^.*[a-zA-Z]+(.*)$/, "$1")) : 0);
                } else {
                    if (typeof M.ActiveXObject !== F) {
                        try {
                            var j = new M.ActiveXObject(I);
                            j && (i = j.GetVariable("$version"), i && (g=!0, i = i.split(" ")[1].split(","), h = [t(i[0]), t(i[1]), t(i[2])]));
                        } catch (k) {}
                    }
                }
                return {
                    w3: a,
                    pv: h,
                    wk: f,
                    ie: g,
                    win: d,
                    mac: e
                };
            }();
            !function() {
                Y.w3 && ((typeof N.readyState !== F && "complete" === N.readyState || typeof N.readyState === F && (N.getElementsByTagName("body")[0] || N.body)) && b(), U || (typeof N.addEventListener !== F && N.addEventListener("DOMContentLoaded", b, !1), Y.ie && (N.attachEvent(L, function a() {
                    "complete" === N.readyState && (N.detachEvent(L, a), b());
                }), M === top&&!function c() {
                    if (!U) {
                        try {
                            N.documentElement.doScroll("left");
                        } catch (a) {
                            return setTimeout(c, 0), void 0;
                        }
                        b();
                    }
                }()), Y.wk&&!function d() {
                    return U ? void 0 : /loaded|complete/.test(N.readyState) ? (b(), void 0) : (setTimeout(d, 0), void 0);
                }()));
            }();
            Q[0] = function() {
                P ? e() : f();
            };
            !function() {
                Y.ie && window.attachEvent("onunload", function() {
                    for (var b = T.length, c = 0; b > c; c++) {
                        T[c][0].detachEvent(T[c][1], T[c][2]);
                    }
                    for (var d = S.length, e = 0; d > e; e++) {
                        o(S[e]);
                    }
                    for (var f in Y) {
                        Y[f] = null;
                    }
                    Y = null;
                    for (var g in a) {
                        a[g] = null;
                    }
                    a = null;
                });
            }();
            return {
                registerObject: function(a, b, c, d) {
                    if (Y.w3 && a && b) {
                        var e = {};
                        e.id = a, e.swfVersion = b, e.expressInstall = c, e.callbackFn = d, R[R.length] = e, x(a, !1);
                    } else {
                        d && d({
                            success: !1,
                            id: a
                        });
                    }
                },
                getObjectById: function(a) {
                    return Y.w3 ? g(a) : void 0;
                },
                embedSWF: function(a, b, d, e, f, g, j, k, l, n) {
                    var o = q(b), p = {
                        success: !1,
                        id: o
                    };
                    Y.w3&&!(Y.wk && Y.wk < 312) && a && b && d && e && f ? (x(o, !1), c(function() {
                        d += "", e += "";
                        var c = {};
                        if (l && typeof l === G) {
                            for (var q in l) {
                                c[q] = l[q];
                            }
                        }
                        c.data = a, c.width = d, c.height = e;
                        var r = {};
                        if (k && typeof k === G) {
                            for (var s in k) {
                                r[s] = k[s];
                            }
                        }
                        if (j && typeof j === G) {
                            for (var t in j) {
                                if (j.hasOwnProperty(t)) {
                                    var u = X ? encodeURIComponent(t): t, w = X ? encodeURIComponent(j[t]): j[t];
                                    typeof r.flashvars !== F ? r.flashvars += "&" + u + "=" + w : r.flashvars = u + "=" + w;
                                }
                            }
                        }
                        if (v(f)) {
                            var y = m(c, r, b);
                            c.id === o && x(o, !0), p.success=!0, p.ref = y, p.id = y.id;
                        } else {
                            if (g && h()) {
                                return c.data = g, i(c, r, b, n), void 0;
                            }
                            x(o, !0);
                        }
                        n && n(p);
                    })) : n && n(p);
                },
                switchOffAutoHideShow: function() {
                    W=!1;
                },
                enableUriEncoding: function(a) {
                    X = typeof a === F?!0 : a;
                },
                ua: Y,
                getFlashPlayerVersion: function() {
                    return {
                        major: Y.pv[0],
                        minor: Y.pv[1],
                        release: Y.pv[2]
                    };
                },
                hasFlashPlayerVersion: v,
                createSWF: function(a, b, c) {
                    return Y.w3 ? m(a, b, c) : void 0;
                },
                showExpressInstall: function(a, b, c, d) {
                    Y.w3 && h() && i(a, b, c, d);
                },
                removeSWF: function(a) {
                    Y.w3 && o(a);
                },
                createCSS: function(a, b, c, d) {
                    Y.w3 && w(a, b, c, d);
                },
                addDomLoadEvent: c,
                addLoadEvent: d,
                getQueryParamValue: function(a) {
                    var b = N.location.search || N.location.hash;
                    if (b) {
                        if (/\?/.test(b) && (b = b.split("?")[1]), null === a) {
                            return y(b);
                        }
                        for (var c = b.split("&"), d = 0; d < c.length; d++) {
                            if (c[d].substring(0, c[d].indexOf("=")) === a) {
                                return y(c[d].substring(c[d].indexOf("=") + 1));
                            }
                        }
                    }
                    return "";
                },
                expressInstallCallback: function() {
                    if (V) {
                        var a = r(K);
                        a && z && (a.parentNode.replaceChild(z, a), A && (x(A, !0), Y.ie && (z.style.display = "block")), B && B(C)), V=!1;
                    }
                },
                version: "2.3"
            };
        }();
        return a;
    }), define("cvp/customevent", ["require", "exports", "module", "Class", "cvp/utils", "cvp/log"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/utils"), f = a("cvp/log"), g = f.getLogger(), h = d.extend({
            init: function(a) {
                this._type = a, this._listeners = [];
            },
            addListener: function(a, b) {
                e.isFunc(a) || g.warn("A function was not provided to `addListener`."), this._listeners.push({
                    fn: a,
                    scope: b
                });
            },
            removeListener: function(a, b) {
                for (var c, d = 0, e = this._listeners.length; e > d; ++d) {
                    if (c = this._listeners[d], c.fn === a && c.scope === b) {
                        this._listeners.splice(d, 1);
                        break;
                    }
                }
            },
            dispatch: function() {
                for (var a, b = 0, c = this._listeners.slice(), d = c.length; d > b; ++b) {
                    a = c[b], a.fn.apply(a.scope, arguments);
                }
            }
        });
        c.exports = h;
    }), define("cvp/events", ["require", "exports", "module", "swfobject", "cvp/utils", "cvp/customevent"], function(a, b) {
        function c(a) {
            h.addDomLoadEvent(a);
        }
        function d(a, b, c) {
            if (a.addEventListener) {
                a.addEventListener(b, c, !1);
            } else {
                c.$$guid || (c.$$guid = k++), a._cvpStoredEvents || (a._cvpStoredEvents = {});
                var d = a._cvpStoredEvents[b];
                d || (d = a._cvpStoredEvents[b] = {}, a["on" + b] && (d[0] = a["on" + b]), a["on" + b] = f), d[c.$$guid] = c;
            }
        }
        function e(a, b, c) {
            a.removeEventListener ? a.removeEventListener(b, c, !1) : a._cvpStoredEvents && a._cvpStoredEvents[b] && c.$$guid && delete a._cvpStoredEvents[b][c.$$guid];
        }
        function f(a) {
            a = a || g(window.event);
            var b, c=!0, d = this._cvpStoredEvents[a.type];
            for (b in d) {
                i.hasOwn(d, b) && (this.$$handler = d[b], this.$$handler(a)===!1 && (c=!1));
            }
            return this.$$handler && (this.$$handler = null), c;
        }
        function g(a) {
            return a.preventDefault = g._preventDefault, a.stopPropagation = g._stopPropagation, a;
        }
        var h = a("swfobject"), i = a("cvp/utils"), j = a("cvp/customevent"), k = 1;
        g._preventDefault = function() {
            this.returnValue=!1;
        }, g._stopPropagation = function() {
            this.cancelBubble=!0;
        }, b.onReady = c, b.addListener = d, b.removeListener = e, b.CustomEvent = j;
    }), define("cvp/detectors/pageorientationdetector", ["require", "exports", "module", "Class", "cvp/utils", "cvp/events", "cvp/log"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/utils"), f = a("cvp/events"), g = a("cvp/log"), h = (g.getLogger(), d.extend({
            init: function(a) {
                a = e.extend({
                    callback: function() {}
                }, a), this._callback = a.callback, this.handleOrientationBind = e.bind(this._handleScroll, this);
            },
            _handleScroll: function() {
                var a;
                switch (window.orientation) {
                case - 90:
                case 90:
                    a = "landscape";
                    break;
                default:
                    a = "portrait";
                }
                this._callback && this._callback(a);
            },
            start: function() {
                f.addListener(window, "orientationchange", this.handleOrientationBind);
            },
            stop: function() {
                f.removeListener(window, "orientationchange", this.handleOrientationBind);
            }
        }));
        c.exports = h;
    }), define("cvp/detectors/basestrategy", ["require", "exports", "module", "Class"], function(a, b, c) {
        var d = a("Class"), e = d.extend({
            getType: function() {
                throw new Error("'getType' must be implemented by child class.");
            },
            canUse: function() {
                throw new Error("'canUse' must be implemented by child class.");
            },
            isComposable: function() {
                return !0;
            },
            start: function() {
                throw new Error("'start' must be implemented by child class.");
            },
            stop: function() {
                throw new Error("'stop' must be implemented by child class.");
            }
        });
        c.exports = e;
    }), define("cvp/detectors/pagevisibilitystrategy", ["require", "exports", "module", "cvp/detectors/basestrategy", "cvp/utils", "cvp/events"], function(a, b, c) {
        var d = a("cvp/detectors/basestrategy"), e = a("cvp/utils"), f = a("cvp/events"), g = d.extend({
            init: function(a) {
                a = e.extend({
                    callback: null
                }, a), this._callback = a.callback, this._eventName = null, this._propName = null;
                for (var b = [{
                    event: "msvisibilitychange",
                    prop: "msHidden"
                }, {
                    event: "webkitvisibilitychange",
                    prop: "webkitHidden"
                }, {
                    event: "mozvisibilitychange",
                    prop: "mozHidden"
                }, {
                    event: "visibilitychange",
                    prop: "hidden"
                }
                ], c = 0; c < b.length; ++c) {
                    b[c].prop in document && (this._propName = b[c].prop, this._eventName = b[c].event);
                }
                this._onChangeBind = e.bind(this._onChange, this);
            },
            getType: function() {
                return "PageVisibilityStrategy";
            },
            canUse: function() {
                return null != this._propName;
            },
            _onChange: function() {
                var a = this._getHiddenValue();
                this._callback && this._callback(!a);
            },
            _getHiddenValue: function() {
                return document[this._propName];
            },
            start: function() {
                f.addListener(document, this._eventName, this._onChangeBind);
            },
            stop: function() {
                f.removeListener(document, this._eventName, this._onChangeBind);
            }
        });
        c.exports = g;
    }), define("cvp/detectors/pagefocusstrategy", ["require", "exports", "module", "cvp/detectors/basestrategy", "cvp/utils", "cvp/browser", "cvp/events"], function(a, b, c) {
        var d = a("cvp/detectors/basestrategy"), e = a("cvp/utils"), f = a("cvp/browser"), g = a("cvp/events"), h = d.extend({
            init: function(a) {
                a = e.extend({
                    callback: null
                }, a), this._delayFireBlur=!1, this._timerId = null, this._callback = a.callback, this._onFocusFiredBind = e.bind(this._onFocusFired, this), this._onBlurFiredBind = e.bind(this._onBlurFired, this), this._fireBlurBind = e.bind(this._fireBlur, this);
            },
            getType: function() {
                return "PageFocusStrategy";
            },
            canUse: function() {
                return f.isBrowser(f.IE)===!1;
            },
            _onFocusFired: function() {
                return this._delayFireBlur ? (this._timerId && window.clearTimeout(this._timerId), this._delayFireBlur=!1, void 0) : (this._onChange(!0), void 0);
            },
            _onBlurFired: function() {
                this._delayFireBlur=!0, this._timerId = window.setTimeout(this._fireBlurBind, 500);
            },
            _fireBlur: function() {
                this._delayFireBlur && this._callback && this._onChange(!1), this._delayFireBlur=!1;
            },
            _onChange: function(a) {
                this._callback && this._callback(a);
            },
            start: function() {
                g.addListener(window, "focus", this._onFocusFiredBind), g.addListener(window, "blur", this._onBlurFiredBind);
            },
            stop: function() {
                g.removeListener(window, "focus", this._onFocusFiredBind), g.removeListener(window, "blur", this._onBlurFiredBind);
            }
        });
        c.exports = h;
    }), define("cvp/detectors/pagefocusinstrategy", ["require", "exports", "module", "cvp/detectors/basestrategy", "cvp/utils", "cvp/browser", "cvp/events"], function(a, b, c) {
        var d = a("cvp/detectors/basestrategy"), e = a("cvp/utils"), f = a("cvp/browser"), g = a("cvp/events"), h = d.extend({
            init: function(a) {
                a = e.extend({
                    callback: null
                }, a), this._delayFireBlur=!1, this._timerId = null, this._callback = a.callback, this._onFocusFiredBind = e.bind(this._onFocusFired, this), this._onBlurFiredBind = e.bind(this._onBlurFired, this), this._fireBlurBind = e.bind(this._fireBlur, this);
            },
            getType: function() {
                return "PageFocusInStrategy";
            },
            canUse: function() {
                return f.isBrowser(f.IE)===!0;
            },
            _onFocusFired: function() {
                return this._delayFireBlur ? (this._timerId && window.clearTimeout(this._timerId), this._delayFireBlur=!1, void 0) : (this._onChange(!0), void 0);
            },
            _onBlurFired: function() {
                this._delayFireBlur=!0, this._timerId = window.setTimeout(this._fireBlurBind, 500);
            },
            _fireBlur: function() {
                this._delayFireBlur && this._callback && this._onChange(!1), this._delayFireBlur=!1;
            },
            _onChange: function(a) {
                this._callback && this._callback(a);
            },
            start: function() {
                g.addListener(document, "focusin", this._onFocusFiredBind), g.addListener(document, "focusout", this._onBlurFiredBind);
            },
            stop: function() {
                g.removeListener(document, "focusin", this._onFocusFiredBind), g.removeListener(document, "focusout", this._onBlurFiredBind);
            }
        });
        c.exports = h;
    }), define("cvp/detectors/pagefocusdetector", ["require", "exports", "module", "Class", "cvp/utils", "cvp/log", "cvp/detectors/pagevisibilitystrategy", "cvp/detectors/pagefocusstrategy", "cvp/detectors/pagefocusinstrategy"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/utils"), f = a("cvp/log"), g = a("cvp/detectors/pagevisibilitystrategy"), h = a("cvp/detectors/pagefocusstrategy"), i = a("cvp/detectors/pagefocusinstrategy"), j = f.getLogger(), k = d.extend({
            init: function(a) {
                a = e.extend({
                    callback: null,
                    strategies: null,
                    mode: k.AGGRESSIVE
                }, a), this._mode = a.mode, this._callback = a.callback, this._visible = null, this._onChangeBind = e.bind(this._onChange, this), this._availableStrategies = a.strategies || [new g({
                    callback: this._onChangeBind
                }), new h({
                    callback: this._onChangeBind
                }), new i({
                    callback: this._onChangeBind
                })], this._strategies = [];
                for (var b = 0; b < this._availableStrategies.length; ++b) {
                    if (this._availableStrategies[b].canUse()) {
                        if (this._strategies.length > 0&&!this._availableStrategies[b].isComposable()) {
                            continue;
                        }
                        if (this._strategies.push(this._availableStrategies[b]), j.log("[PageFocusDetector] Using detection strategy: " + this._availableStrategies[b].getType()), this._mode !== k.AGGRESSIVE) {
                            j.log("[PageFocusDetector] Conservative mode - sticking with one strategy");
                            break;
                        }
                    }
                }
                this._strategies.length || j.log("[PageFocusDetector] Warning - no valid detection strategies found.");
            },
            _onChange: function(a) {
                (null == this._visible || this._visible !== a) && (this._visible = a, this._callback && this._callback(a));
            },
            start: function() {
                e.each(this._strategies, function(a) {
                    a.start();
                });
            },
            stop: function() {
                e.each(this._strategies, function(a) {
                    a.stop();
                });
            }
        });
        k.CONSERVATIVE = "conservative", k.AGGRESSIVE = "aggressive", c.exports = k;
    }), define("cvp/detectors/scrolldetector", ["require", "exports", "module", "Class", "cvp/utils", "cvp/events", "cvp/log"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/utils"), f = a("cvp/events"), g = a("cvp/log"), h = g.getLogger(), i = d.extend({
            init: function(a) {
                a = e.extend({
                    callback: function() {},
                    delay: 500
                }, a), this._callback = a.callback, this._interval = a.interval, h.log("[ScrollDetector] debouncing with a delay of: " + a.delay), this.handleScrollBind = e.debounce(e.bind(this._handleScroll, this), a.delay);
            },
            _handleScroll: function() {
                var a = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop, b = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft, c = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth, d = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
                this._callback && this._callback({
                    scrollTop: a,
                    scrollLeft: b,
                    windowWidth: c,
                    windowHeight: d
                });
            },
            start: function() {
                f.addListener(window, "scroll", this.handleScrollBind), f.addListener(window, "resize", this.handleScrollBind);
            },
            stop: function() {
                f.removeListener(window, "scroll", this.handleScrollBind), f.removeListener(window, "resize", this.handleScrollBind);
            }
        });
        c.exports = i;
    }), define("cvp/detectors/viewportdetector", ["require", "exports", "module", "Class", "cvp/utils", "cvp/log", "cvp/detectors/scrolldetector"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/utils"), f = a("cvp/log"), g = a("cvp/detectors/scrolldetector"), h = (f.getLogger(), d.extend({
            init: function(a) {
                a = e.extend({
                    delay: 500
                }, this._validateTargetOptions(a)), this._targets = [], this.addTarget(a), this._scrollDetector = new g({
                    callback: e.bind(this._onScroll, this),
                    delay: a.delay
                });
            },
            _validateTargetOptions: function(a) {
                return e.extend({
                    elementId: null,
                    callback: function() {}
                }, a);
            },
            addTarget: function(a) {
                if (a = this._validateTargetOptions(a), null != a.elementId) {
                    var b = a.elementId, c = a.callback;
                    this._targets.push({
                        elementId: b,
                        callback: c,
                        clipped: !1
                    });
                }
            },
            _onScroll: function(a) {
                function b(a) {
                    var b, c, e = {
                        top: 0,
                        left: 0
                    };
                    return (b = a && a.ownerDocument) ? (c = b.documentElement, "undefined" != typeof a.getBoundingClientRect && (e = a.getBoundingClientRect()), {
                        top: e.top + d - (c.clientTop || 0),
                        left: e.left + f - (c.clientLeft || 0),
                        width: a.offsetWidth,
                        height: a.offsetHeight
                    }) : null;
                }
                function c(a, b, c) {
                    return a != b && c && c(!a), a;
                }
                var d = a.scrollTop, f = a.scrollLeft, g = a.windowWidth, h = a.windowHeight;
                e.each(this._targets, function(a) {
                    var i = a.elementId;
                    if (e.isString(i) && (i = e.byId(i)), i) {
                        var j = b(i);
                        j && (d >= j.top + j.height || f >= j.left + j.width || j.top >= d + h || j.left >= f + g ? a.clipped = c(!0, a.clipped, a.callback) : j.top > d && j.top + j.height < d + h && (a.clipped = c(!1, a.clipped, a.callback)));
                    }
                });
            },
            start: function() {
                this._scrollDetector.start();
            },
            stop: function() {
                this._scrollDetector.stop();
            }
        }));
        c.exports = h;
    }), define("cvp/static", ["require", "exports", "module", "core/app", "cvp/detectors/pageorientationdetector", "cvp/detectors/pagefocusdetector", "cvp/detectors/viewportdetector", "cvp/utils", "cvp/log"], function(a, b, c) {
        var d = a("core/app"), e = a("cvp/detectors/pageorientationdetector"), f = a("cvp/detectors/pagefocusdetector"), g = a("cvp/detectors/viewportdetector"), h = a("cvp/utils"), i = a("cvp/log"), j = i.getLogger(), k = {}, l = {
            initialized: !1,
            init: function() {
                var a = this;
                this.initialized || (this._pageOrientationDetector = new e({
                    callback: function(b) {
                        a._sendToAllInstances("onPageOrientationChange", b);
                    }
                }), this._pageFocusDetector = new f({
                    callback: function(b) {
                        a._sendToAllInstances("onPageVisibilityChange", b);
                    }
                }), this._viewportDetector = new g, this._pageOrientationDetector.start(), this._pageFocusDetector.start(), this._viewportDetector.start(), this.initialized=!0);
            },
            registerInstance: function(a) {
                var b = k.findInstance(a);
                b && this._addViewportTarget(a);
            },
            unregisterInstance: function() {},
            _addViewportTarget: function(a) {
                var b = this;
                this._viewportDetector.addTarget({
                    elementId: a,
                    callback: function(c) {
                        b._sendToInstance(a, "onViewportVisibilityChange", c);
                    }
                });
            },
            _sendToAllInstances: function() {
                var a = h.slice(arguments);
                h.each(k.instances, function(b, c) {
                    c.send.apply(c, a);
                });
            },
            _sendToInstance: function(a) {
                var b = h.slice(arguments, 1), c = k.instances[a];
                c && c.send.apply(c, b);
            }
        };
        k.HTML5 = d.HTML5, k.FLASH = d.FLASH, k.version = d.VERSION, k.buildDate = d.BUILD_DATE, k.VIDEO_NOT_FOUND_ERROR = "video not found", k.VIDEO_XML_NOT_FOUND_ERROR = "cms error", k.MEDIA_ERR_UNKNOWN = "Unknown error.", k.MEDIA_ERR_ABORTED = "The fetching process for the media resource was aborted by the user agent at the user's request.", k.MEDIA_ERR_NETWORK = "A network error of some description caused the user agent to stop fetching the media resource, after the resource was established to be usable.", k.MEDIA_ERR_DECODE = "An error of some description occurred while decoding the media resource, after the resource was established to be usable.", k.MEDIA_ERR_SRC_NOT_SUPPORTED = "The media resource indicated by the src attribute was not suitable.", k.instances = {}, k.registerInstance = function(a, b, c) {
            k.instances[a] = {
                instance: b,
                send: c
            }, l.initialized || l.init(), l.registerInstance(a);
        }, k.unregisterInstance = function(a) {
            a in k.instances && (window[a + "_callback_handler"] = null, k.instances[a] = null, delete k.instances[a]);
        }, k.findInstance = function(a) {
            var b = k.instances[a];
            return b && b.instance || b;
        }, k.onCallback = function(a, b) {
            var c = k.instances[a];
            if (!c) {
                throw j.error("onCallback - unable to find instance " + a), new Error("onCallback - unable to find instance " + a);
            }
            return c.send.apply(c.instance, ["handleCallBack"].concat(h.slice(b)));
        }, k.cleanup = function() {
            h.each(k.instances, function(a, b) {
                try {
                    b.instance.destroy(), k.unregisterInstance(a);
                } catch (c) {}
            });
        }, c.exports = k;
    }), define("cvp/shared", ["require", "exports", "module", "cvp/static", "cvp/version", "core/app", "cvp/utils", "cvp/log"], function(a, b) {
        function c(a) {
            var b = a + "_callback_handler";
            return i.isFunc(window[b])?!1 : (window[b] = function() {
                return arguments.length && "_pluginRequest" === arguments[0] ? f.PluginManager.onPluginHostRequest(a, i.slice(arguments, 1)) : f.onCallback(a, arguments);
            }, !0);
        }
        function d(a) {
            if (a === h.FLASH_VERSION) {
                return a;
            }
            try {
                var b = new g(a);
                if (b.gt(h.FLASH_VERSION)) {
                    return b.toString();
                }
            } catch (c) {
                k.warn("Failure to compare Flash versions", h.FLASH_VERSION, a);
            }
            return h.FLASH_VERSION;
        }
        function e(a) {
            var b = window.onbeforeunload;
            window.onbeforeunload = "function" != typeof window.onbeforeunload ? a : function() {
                b && b(), a();
            };
        }
        var f = a("cvp/static"), g = a("cvp/version"), h = a("core/app"), i = a("cvp/utils"), j = a("cvp/log"), k = j.getLogger();
        b.createCallbackHandler = c, b.validateFlashVersion = d, b.addBeforeUnLoadEvent = e;
    }), define("cvp/api", ["require", "exports", "module", "cvp/utils", "cvp/static", "cvp/shared", "swfobject", "cvp/events"], function(a, b, c) {
        var d = a("cvp/utils"), e = a("cvp/static"), f = a("cvp/shared"), g = a("swfobject"), h = a("cvp/events"), i = {
            getDOMPlayer: - 1 !== navigator.appName.indexOf("Microsoft") ? function() {
                return window[this.getId()];
            }
            : function() {
                return document[this.getId()];
            },
            sendMessage: function(a, b) {
                return this.getDOMPlayer().sendMessage(a, b), this;
            },
            getPlayer: function(a) {
                return this._playerType === e.FLASH ? (this.getDOMPlayer().getPlayerJS(a), this) : this.getDOMPlayer();
            },
            setDefaultPlayer: function(a) {
                return this.getDOMPlayer().setDefaultPlayer(a), this;
            },
            embedSWF: function() {
                return this.embed.apply(this, arguments);
            },
            embed: function(a) {
                var b = this;
                if (this._playerType === e.FLASH) {
                    var c = this.getId(), d = this.getFlashVars();
                    d.domId = c, d.cvpSessionToken = e.getSessionToken();
                    var i = this.getEmbed(), j = i.containerSwf, k = i.options, l = i.expressInstallSwf, m = f.validateFlashVersion(i.flashVersion), n = {
                        id: c,
                        name: c
                    };
                    g.hasFlashPlayerVersion("1.0.0") || e.onCallback(c, ["onNoFlashDetected"]), g.embedSWF(j, a, this.getWidth(), this.getHeight(), m, l, d, k, n);
                } else {
                    this.getPlayer().embed && h.onReady(function() {
                        b.getPlayer().embed(a);
                    });
                }
                return this;
            },
            removeSWF: function() {
                return this.remove.apply(this, arguments);
            },
            remove: function() {
                if (this.stop(), this._playerType === e.FLASH) {
                    g.removeSWF(this.getId());
                } else {
                    var a = this.getPlayer();
                    d.isFunc(a.remove) && a.remove();
                }
                return this;
            },
            destroy: function() {
                var a = this.getId();
                if (e.findInstance(a)) {
                    if (this.remove(), this._playerType === e.FLASH) {} else {
                        var b = this.getPlayer();
                        d.isFunc(b.dispose) && b.dispose();
                    }
                    e.unregisterInstance(a);
                }
            },
            play: function(a, b) {
                return this.getDOMPlayer().playContent(a, b || {}), this;
            },
            playFromObject: function(a, b) {
                return this.getDOMPlayer().playFromObject(a, b || {}), this;
            },
            reportAnalytics: function(a, b) {
                return this.getDOMPlayer().reportAnalytics(a, b), this;
            },
            replay: function() {
                return this.getDOMPlayer().replayContent(), this;
            },
            playNextInQueue: function() {
                return this.getDOMPlayer().playNextInQueue(), this;
            },
            pause: function() {
                return this.getDOMPlayer().pause(), this;
            },
            resume: function() {
                return this.getDOMPlayer().resume(), this;
            },
            stop: function() {
                return this.getDOMPlayer().stopContent(), this;
            },
            queue: function(a, b, c) {
                return "undefined" == typeof c && (c =- 1), this.getDOMPlayer().queue(a, b || {}, c), this;
            },
            queueFromObject: function(a, b, c) {
                return "undefined" == typeof c && (c =- 1), this.getDOMPlayer().queueFromObject(a, b || {}, c), this;
            },
            dequeue: function(a) {
                return this.getDOMPlayer().dequeue(a), this;
            },
            emptyQueue: function() {
                return this.getDOMPlayer().emptyQueue(), this;
            },
            setQueueAutoplay: function(a) {
                return this.getDOMPlayer().setQueueAutoplay(a), this;
            },
            getQueue: function() {
                return this.getDOMPlayer().getQueue();
            },
            seek: function(a) {
                return this.getDOMPlayer().seek(a), this;
            },
            mute: function() {
                return this.getDOMPlayer().mute(), this;
            },
            unmute: function() {
                return this.getDOMPlayer().unmute(), this;
            },
            setVolume: function(a) {
                return this.getDOMPlayer().setVolume(a), this;
            },
            getVolume: function() {
                return this.getDOMPlayer().getVolume();
            },
            isMuted: function() {
                return this.getDOMPlayer().isMuted();
            },
            getContentEntry: function(a) {
                return this.getDOMPlayer().getContentEntry(a);
            },
            goFullscreen: function() {
                return this.getDOMPlayer().goFullscreen(), this;
            },
            resize: function(a, b, c) {
                return this.getDOMPlayer().resize(a, b, c), this;
            },
            setMaxBitrate: function(a) {
                return this.getDOMPlayer().setMaxBitrate(a), this;
            },
            switchBitrateId: function(a) {
                return this.getDOMPlayer().switchBitrateId(a), this;
            },
            setAutoBitrateSwitch: function(a) {
                return this.getDOMPlayer().setAutoBitrateSwitch(a), this;
            },
            getAvailableBitrates: function(a) {
                return this.getDOMPlayer().getAvailableBitrates(a);
            },
            getBitrateId: function() {
                return this.getDOMPlayer().getBitrateId();
            },
            setGroupOrder: function(a) {
                return this.getDOMPlayer().setGroupOrder(a), this;
            },
            getShareOptions: function() {
                return this.getDOMPlayer().getShareOptions();
            },
            setClosedCaptions: function(a, b) {
                return this.getDOMPlayer().setClosedCaptions(a, b), this;
            },
            setAdSection: function(a) {
                return this.getDOMPlayer().setAdSection(a), this;
            },
            setAdKeyValue: function(a, b) {
                return this.getDOMPlayer().setAdKeyValue(a, b), this;
            },
            getAdKeyValues: function() {
                return this.getDOMPlayer().getAdKeyValues();
            },
            clearAdKeyValues: function() {
                return this.getDOMPlayer().clearAdKeyValues(), this;
            },
            setAdExchangeValue: function(a, b) {
                return this.getDOMPlayer().setAdExchangeValue(a, b), this;
            },
            setAdVisibility: function(a) {
                return this.getDOMPlayer().setAdVisibility(a), this;
            },
            switchAdContext: function(a) {
                return this.getDOMPlayer().switchAdContext(a), this;
            },
            switchTrackingContext: function(a) {
                return this.getDOMPlayer().switchTrackingContext(a), this;
            },
            setTrackingInterval: function(a) {
                return this.getDOMPlayer().setTrackingInterval(a), this;
            },
            setDataSrc: function(a) {
                return this.getDOMPlayer().setDataSrc(a), this;
            },
            setFileKey: function(a) {
                return this.getDOMPlayer().setFileKey(a), this;
            },
            sendUIMessage: function(a, b) {
                return this.getDOMPlayer().sendUIMessage(a, b), this;
            },
            sendUserReportedIssue: function(a) {
                return this.getDOMPlayer().sendUserReportedIssue(a), this;
            }
        };
        c.exports = i;
    }), define("cvp/players/null", ["require", "exports", "module", "Class"], function(a, b, c) {
        var d = a("Class"), e = d.extend({
            init: function() {
                for (var a, b = "sendMessage setDefaultPlayer play playFromObject replay playNextInQueue pause resume stop queue queueFromObject dequeue emptyQueue setQueueAutoplay getQueue seek mute unmute setVolume getVolume isMuted getContentEntry goFullscreen resize setMaxBitrate switchBitrateId setAutoBitrateSwitch getAvailableBitrates getBitrateId setGroupOrder getShareOptions setClosedCaptions setAdSection setAdKeyValue getAdKeyValues clearAdKeyValues setAdExchangeValue setAdVisibility switchAdContext switchTrackingContext setTrackingInterval setDataSrc setFileKey sendUIMessage sendUserReportedIssue".split(" "), c = function() {}, d = 0, e = b.length; e > d; ++d) {
                    a = b[d], this[a] || (this[a] = c);
                }
            }
        });
        c.exports = e;
    }), define("cvp/utils/commandqueue", ["require", "exports", "module", "Class", "cvp/utils"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/utils"), f = d.extend({
            init: function() {
                this._queue = [];
            },
            push: function(a, b, c) {
                this._queue.push({
                    fn: a,
                    scope: b,
                    args: c
                });
            },
            remove: function(a) {
                a = "number" != typeof a ? this._queue.length - 1 : a, this._queue.splice(a, 1);
            },
            execute: function() {
                for (var a, b = 0, c = this._queue.length; c > b; ++b) {
                    a = this._queue[b], a.fn.apply(a.scope, a.args);
                }
            },
            executeAsync: function(a) {
                a = e.undef(a) ? 10 : a;
                var b, c = this._queue.length;
                c && (b = this._queue.shift(), b.fn.apply(b.scope, b.args), setTimeout(e.bind(this.executeAsync, this, a), a));
            }
        });
        c.exports = f;
    }), define("cvp/ajax", ["require", "exports", "module", "when", "cvp/utils", "JSON", "cvp/log"], function(a, b, c) {
        var d = a("when"), e = a("cvp/utils"), f = a("JSON"), g = a("cvp/log"), h = g.getLogger(), i = {
            get: function(a) {
                return a.method = "GET", this._request(a);
            },
            getXml: function(a) {
                return a.type = "xml", this.get(a);
            },
            getJSON: function(a) {
                var b = d.defer(), c = a.success;
                return a.type = "json", a.success = function(a) {
                    try {
                        var c = f.parse(a);
                        b.resolve(c);
                    } catch (d) {
                        b.reject(d);
                    }
                }, this.get(a), d(b.promise, c, a.error), b.promise;
            },
            getJSONP: function(a) {
                return this.JSONP._request(a);
            },
            post: function(a) {
                return a.method = "POST", this._request(a);
            },
            _request: function(a) {
                var b = new XMLHttpRequest, c = d.defer();
                return b.onreadystatechange = function() {
                    4 === b.readyState && (200 <= b.status && b.status < 300 || 304 === b.status ? c.resolve(b.responseText) : c.reject(b), b.onreadystatechange = Function.prototype, b.abort(), b = null);
                }, d(c.promise, a.success, a.error), b.open(a.method, a.url, !0), b.send("POST" === a.method ? a.data : null), c.promise;
            }
        };
        i.JSONP = {
            requestTimeout: 5000,
            maxRetries: 0,
            _externalRoutes: {},
            requestMap: {},
            _counter: 0,
            _request: function(a) {
                return a = e.extend({
                    timeout: this.requestTimeout,
                    maxRetries: this.maxRetries
                }, a), a.tries = 0, a.deferred = d.defer(), h.debug("JSONP - creating request with timeout ", a.timeout, " and maxRetries ", a.maxRetries), this._sendRequest(a), d(a.deferred.promise, a.success, a.error), a.deferred.promise;
            },
            _sendRequest: function(a) {
                var b = this, c = this._createCallback(a), d = this._createScript(c, a.url);
                if (!d) {
                    var e = "JSONP - unable to create script for request " + a.url;
                    throw h.error(e), a.deferred.reject(a.url), new Error(e);
                }
                a.timeout && setTimeout(function() {
                    b._onError(c, a);
                }, a.timeout);
            },
            _onSuccess: function(a, b, c) {
                if (this.requestMap[a]) {
                    if (this._destroyRequest(a, b), e.isString(c)) {
                        try {
                            c = f.parse(c);
                        } catch (d) {
                            h.error("JSON.parse failed");
                        }
                    }
                    h.info("JSONP", "success", b.url), b.deferred.resolve(c);
                }
            },
            _onError: function(a, b) {
                if (this.requestMap[a]) {
                    if (this._destroyRequest(a, b), ++b.tries, b.maxRetries && b.tries < b.maxRetries) {
                        return h.warn("Request failed - resending"), this._sendRequest(b), void 0;
                    }
                    h.error("JSONP", "error", b.url), b.deferred.reject(b.url);
                }
            },
            _destroyRequest: function(a, b) {
                this._deregisterExternalCallback(b.jsonpCallback, a), delete this.requestMap[a], this._counter--;
                var c = document.getElementById(this._getScriptName(a));
                c && (c.parentNode.removeChild(c), c = null);
            },
            _createScript: function(a, b) {
                var c = "script", d = document.getElementsByTagName(c)[0], e = document.createElement(c);
                return e.type = "text/javascript", a && (e.id = this._getScriptName(a)), e.src = b, e.async=!0, d.parentNode.insertBefore(e, d), e;
            },
            _getScriptName: function(a) {
                return "cvp_jsonp_" + a;
            },
            _createCallback: function(a) {
                var b = this;
                if (e.empty(a.jsonpCallback)) {
                    return null;
                }
                ++this._counter;
                var c = "request_" + this._counter + "_" + e.now();
                this.requestMap[c] = function(d) {
                    b._onSuccess(c, a, d);
                };
                var d = function(a) {
                    h.debug("JSONP", "Internal CB received for request:", c), b.requestMap[c] ? b.requestMap[c](a) : h.debug("Request response came in after allotted time: ", c);
                };
                return this._registerExternalCallback(a.jsonpCallback, c, d), c;
            },
            _registerExternalCallback: function(a, b, c) {
                window[a] || this._createExternalCallback(a, this._routeExternalCallback(a)), this._externalRoutes[a] || (this._externalRoutes[a] = []), this._externalRoutes[a].push({
                    id: b,
                    cb: c
                });
            },
            _routeExternalCallback: function(a) {
                var b = this;
                return function(c) {
                    if (h.info("JSONP", "routing:", a), !b._externalRoutes) {
                        return h.error("JSONP", "routes haven't been initialized"), void 0;
                    }
                    if (!b._externalRoutes[a]) {
                        return h.error("JSONP", "routing hasn't been initialized for:", a), void 0;
                    }
                    if (!b._externalRoutes[a].length) {
                        return h.error("JSONP", "no waiting requests for route:", a), void 0;
                    }
                    var d = b._externalRoutes[a].shift();
                    h.info("JSONP", "request retrieved - id: ", d.id, "cb:", typeof d.cb), e.isFunc(d.cb) && d.cb(c);
                };
            },
            _createExternalCallback: function(a, b) {
                window[a] = b;
            },
            _deregisterExternalCallback: function(a, b) {
                for (var c = 0, d = this._externalRoutes[a].length; d > c; c++) {
                    var e = this._externalRoutes[a][c];
                    if (e.id === b) {
                        return h.info("JSONP", "removing request from route:", a, "with id:", b), this._externalRoutes[a].splice(c, 1), void 0;
                    }
                }
            }
        }, c.exports = i;
    }), define("cvp/utils/xml", ["require", "exports", "module", "cvp/utils"], function(a, b) {
        function c(a) {
            return 1 === a.nodeType;
        }
        function d(a) {
            var b = i.slice(a.children || a.childNodes || []);
            return b.length ? i.filter(b, c) : b;
        }
        function e(a, b) {
            if (!a) {
                return null;
            }
            if (!b) {
                return i.isNull(a.firstChild) ? null : a.firstChild.nodeValue;
            }
            var c = a.getElementsByTagName(b);
            return c.length > 0 && c[0].firstChild ? c[0].firstChild.nodeValue : void 0;
        }
        function f(a, b) {
            if (!a ||!b) {
                return null;
            }
            for (var c, d = a.getElementsByTagName("param"), e = 0, f = d.length; f > e; ++e) {
                if (c = d[e], g(c, "name") === b) {
                    return g(c, "value");
                }
            }
        }
        function g(a, b) {
            if (a && a.attributes && b) {
                var c = a.attributes.getNamedItem(b);
                return c ? c.nodeValue : null;
            }
        }
        function h(a, b) {
            for (var c, d = 0, e = b && b.length || 0; e > d; ++d) {
                c = b[d], a[c.nodeName] = c.nodeValue;
            }
        }
        var i = a("cvp/utils"), j = "DOMParser", k = "XMLSerializer", l = "ActiveXObject", m = function() {
            var a, b;
            return j in window ? (a = new window[j], b = function(a) {
                var b = a.getElementsByTagName("parsererror");
                return b && 0 !== b.length;
            }, function(c) {
                var d;
                return c ? (d = a.parseFromString(i.trim(c), "text/xml"), b(d) ? null : d) : null;
            }) : l in window ? (b = function(a) {
                var b = a.parseError;
                return b && 0 !== b.errorCode;
            }, function(a) {
                var c;
                return a ? (c = new window[l]("Microsoft.XMLDOM"), c.async = "false", c.loadXML(a), b(c) ? null : c) : null;
            }) : void 0;
        }(), n = function() {
            if (k in window) {
                var a = new window[k];
                return function(b) {
                    return a.serializeToString(b);
                };
            }
            return l in window ? function(a) {
                return a.xml;
            } : void 0;
        }(), o = function() {
            var a = />\s+</g, b = /\t+/g, c = /[\r\n]+/g, d = /<!--(.*?)-->/g, e = /&(?!amp;)/g, f = /xmlns(?::[^\s=]+)?=['"][^'"]*['"]/g;
            return function(g) {
                return g = g.replace(a, "><"), g = g.replace(b, " "), g = g.replace(c, " "), g = g.replace(d, ""), g = g.replace(e, "&amp;"), g = g.replace(f, "");
            };
        }();
        b.stringToDoc = m, b.docToString = n, b.cleanString = o, b.getChildElements = d, b.getNodeValue = e, b.getParamValue = f, b.getAttribute = g, b.assignAttributes = h;
    }), define("cvp/utils/jsonconverter", ["require", "exports", "module", "JSON", "cvp/utils/xml", "cvp/utils", "cvp/log"], function(a, b) {
        function c(a) {
            return t.test(a.nodeName);
        }
        function d(a) {
            return a.nodeName;
        }
        function e(a) {
            var b = o.map(a, d), c = o.uniq(b);
            return b.length !== c.length;
        }
        function f(a) {
            return !c(a);
        }
        function g(a) {
            return o.filter(o.slice(a.attributes), f);
        }
        function h(a, b) {
            return b = b || {}, a.length ? (o.each(a, function(a) {
                b[a.nodeName] = a.nodeValue;
            }), b) : b;
        }
        function i(a) {
            if (!a.hasChildNodes()) {
                return null;
            }
            var b = a.textContent || a.innerText || "";
            return o.trim(b).replace(s, " ");
        }
        function j(a, b) {
            b = o.isSimpleObject(b) ? b : {};
            var c, d = {};
            switch (a.nodeType) {
            case q.DOCUMENT_NODE:
                c = n.getChildElements(a), b = c.length ? j(c[0]) : null;
                break;
            case q.ELEMENT_NODE:
                c = n.getChildElements(a);
                var f = g(a);
                if (c.length) {
                    e(c) ? d = o.map(c, function(a) {
                        return j(a);
                    }) : (f.length && h(f, d), o.each(c, function(a) {
                        return j(a, d);
                    }));
                } else {
                    var k = i(a);
                    f.length ? (h(f, d), null !== k && (d.text = k)) : d = k || "";
                }
                b[a.nodeName] = d;
                break;
            default:
                r.debug("Ignoring type " + a.nodeType + ' node with name "' + a.nodeName + '"');
            }
            return b;
        }
        function k(a) {
            a.normalize();
            var b = j(a);
            if (b) {
                for (var c in b) {
                    return b[c];
                }
            }
            return null;
        }
        function l(a) {
            return m.stringify(k(a), null, "	");
        }
        var m = a("JSON"), n = a("cvp/utils/xml"), o = a("cvp/utils"), p = a("cvp/log"), q = window.Node, r = p.getLogger("JSONConverter"), s = /[\t\n\r\xA0]+/g, t = /^xmlns($|:)/;
        b.encodeXmlObject = l, b.xmlToJson = l, b.xmlToObject = k;
    }), define("cvp/utils/dependencymanager", ["require", "exports", "module", "Class", "cvp/customevent"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/customevent"), f = d.extend({
            init: function() {
                this._dependencies = [], this._currentDependency = null, this.eSuccess = new e, this.eFailure = new e, this.eDependencySuccess = new e, this.eDependencyFailure = new e;
            },
            addDependency: function(a) {
                a.setManager(this), this._dependencies.push(a);
            },
            load: function() {
                this._currentDependency = this._dependencies.shift(), this._currentDependency.eSuccess.addListener(this._onDependencySuccess, this), this._currentDependency.eFailure.addListener(this._onDependencyFailure, this);
                var a = this;
                window.setTimeout(function() {
                    a._currentDependency.load();
                }, 10);
            },
            _onDependencySuccess: function(a) {
                this.eDependencySuccess.dispatch(this._currentDependency, a), this._next();
            },
            _onDependencyFailure: function(a) {
                return this.eDependencyFailure.dispatch(this._currentDependency, a), this._currentDependency.required ? (this._onFailure(this._currentDependency.getDesc()), void 0) : (this._next(), void 0);
            },
            _next: function() {
                this._dependencies.length ? this.load() : this._onSuccess();
            },
            _onSuccess: function() {
                this.eSuccess.dispatch();
            },
            _onFailure: function(a) {
                this.eFailure.dispatch(a);
            }
        });
        c.exports = f;
    }), define("cvp/utils/asset", ["require", "exports", "module", "Class", "cvp/utils", "cvp/customevent", "cvp/log"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/utils"), f = a("cvp/customevent"), g = a("cvp/log"), h = g.getLogger(), i = d.extend({
            init: function(a, b) {
                this._firedSuccess=!1, this._url = a, this._type = e.empty(b) ? this._determineType() : b, this.id = "cvp_asset_" + e.getRandomInt(1, 1000), this.eSuccess = new f, this.eFailure = new f;
            },
            _determineType: function() {
                var a = e.empty(this._url) ? "": this._url.substring(this._url.lastIndexOf(".") + 1);
                return a;
            },
            load: function() {
                switch (h.info("Asset", "loading type", this._type), this._type) {
                case"js":
                    this._loadJs();
                    break;
                case"css":
                    this._loadCss();
                    break;
                default:
                    this._failure();
                }
            },
            _success: function() {
                h.info("Asset", "successfully loaded asset", this._url), this.eSuccess.dispatch(), this._firedSuccess=!0;
            },
            _failure: function() {
                h.error("Asset", "failed to load asset", this._url), this.eFailure.dispatch();
            },
            _loadJs: function() {
                var a = document.getElementsByTagName("head")[0];
                if (!a) {
                    return this._failure(), void 0;
                }
                var b = document.createElement("script");
                b.id = this.id, b.type = "text/javascript";
                var c = e.bind(function() {
                    this._firedSuccess || (this._success(), b.onload = b.onreadystatechange = null, a.removeChild(b));
                }, this);
                b.onload = c, b.onerror = e.bind(this._failure, this), b.onreadystatechange = function() {
                    ("loaded" === this.readyState || "complete" === this.readyState) && c();
                }, b.src = this._url, a.appendChild(b);
            },
            _loadCss: function() {
                var a, b = document.getElementsByTagName("head")[0];
                return b ? (a = document.createElement("link"), a.type = "text/css", a.rel = "stylesheet", a.href = this._url, a.media = "screen", b.appendChild(a), this._success(), void 0) : (this._failure(), void 0);
            }
        });
        c.exports = i;
    }), define("cvp/utils/dependency", ["require", "exports", "module", "Class", "cvp/customevent", "cvp/utils/asset", "cvp/log"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/customevent"), f = a("cvp/utils/asset"), g = a("cvp/log"), h = g.getLogger(), i = d.extend({
            init: function(a, b) {
                this._assetUrl = a, this.required = b, this._manager = null, this.eSuccess = new e, this.eFailure = new e;
            },
            load: function() {
                h.info("Dependency", "loading asset", this._assetUrl);
                var a = new f(this._assetUrl);
                a.eSuccess.addListener(this._success, this), a.eFailure.addListener(this._failure, this), a.load();
            },
            _success: function() {
                h.info("Dependency", "successfully loaded dependency", this._assetUrl), this.eSuccess.dispatch.apply(this.eSuccess, arguments);
            },
            _failure: function() {
                h.error("Dependency", "failed to load dependency", this._assetUrl), this.eFailure.dispatch.apply(this.eFailure, arguments);
            },
            setManager: function(a) {
                this._manager = a;
            },
            getDesc: function() {
                return this._assetUrl;
            }
        });
        c.exports = i;
    }), define("cvp/store", ["require", "exports", "module", "cvp/utils"], function(a, b, c) {
        var d = a("cvp/utils"), e = {};
        c.exports = {
            get: function(a, b) {
                var c = e[a];
                return b && delete e[a], c;
            },
            keys: function() {
                var a = [];
                for (var b in e) {
                    d.hasOwn(e, b) && a.push(b);
                }
                return a;
            },
            set: function(a, b) {
                e[a] = b;
            }
        };
    }), define("cvp/transports/flashxhr", ["require", "exports", "module", "core/app", "cvp/utils", "cvp/store", "cvp/customevent", "cvp/utils/commandqueue", "cvp/log", "Class", "swfobject"], function(a, b, c) {
        var d = a("core/app"), e = a("cvp/utils"), f = a("cvp/store"), g = a("cvp/customevent"), h = a("cvp/utils/commandqueue"), i = a("cvp/log"), j = a("Class"), k = a("swfobject"), l = i.getLogger(), m = j.extend({
            init: function(a) {
                l.debug("[Transport.init]"), this.ready=!1, this.queue = new h, this.events = {
                    dataReceived: new g("dataReceived"),
                    dataReceivedError: new g("dataReceivedError")
                }, this.channelId = m.nextChannel(), m.registerInstance(this), a = e.undef(a)?!1 : a, a || m.loadDependencies();
            },
            onReady: function() {
                l.debug("[Transport.onReady] channel: " + this.channelId), this.createListeners(), this.ready=!0, this.queue.executeAsync();
            },
            createListeners: function() {
                var a = this;
                f.set(m.getResponseCallback(this.channelId), function(b, c) {
                    setTimeout(function() {
                        a.fireDataReceived(b, c);
                    }, 0);
                }), f.set(m.getResponseErrorCallback(this.channelId), function(b, c) {
                    setTimeout(function() {
                        a.fireDataReceivedError(b, c);
                    }, 0);
                });
            },
            request: function(a, b) {
                return m.dependenciesLoaded || m.loadDependencies(), this.ready ? (l.debug("[Transport.request] channel: " + this.channelId), m.getSwf().request(this.channelId, a, b), void 0) : (this.queue.push(this.request, this, arguments), void 0);
            },
            on: function(a, b) {
                this.events.hasOwnProperty(a) && this.events[a].addListener(b);
            },
            fireDataReceived: function(a, b) {
                this.events.dataReceived.dispatch(a, b);
            },
            fireDataReceivedError: function(a, b) {
                this.events.dataReceivedError.dispatch(a, b);
            }
        });
        m.instances = [], m.registerInstance = function(a) {
            var b = {
                instance: a,
                ready: !1
            };
            m.dependenciesLoaded && (a.onReady(), b.ready=!0), m.instances.push(b);
        }, m.callPrefix = "cvp_flash_xhr", m.readySuffix = "ready", m.responseSuffix = "response", m.responseErrorSuffix = "response_error", m.getReadyCallback = function() {
            return [m.callPrefix, m.readySuffix].join("_");
        }, m.getResponseCallback = function(a) {
            return [m.callPrefix, a, m.responseSuffix].join("_");
        }, m.getResponseErrorCallback = function(a) {
            return [m.callPrefix, a, m.responseErrorSuffix].join("_");
        }, m.channelIndex = 0, m.nextChannel = function() {
            return "flaxhr." + ++m.channelIndex;
        }, m.dependenciesLoading=!1, m.dependenciesLoaded=!1, m.loadDependencies = function() {
            m.dependenciesLoading || m.dependenciesLoaded || (m.dependenciesLoading=!0, m.embed(e.bind(m.onDependenciesLoaded, m)));
        }, m.onDependenciesLoaded = function() {
            m.dependenciesLoading=!1, m.dependenciesLoaded=!0;
            for (var a = m.instances, b = 0; b < a.length; b++) {
                a[b].ready || (a[b].instance.onReady(), a[b].ready=!0);
            }
        }, m.swfId = "cvpXhrFlash", m.swfUrl = d.FLASHXHR_SWF_URL, m.getSwf = function() {
            return document.getElementById(m.swfId);
        }, m.embed = function(a) {
            l.debug("[Transport.embed] Checking if xhr is required on the page");
            var b = m.swfUrl, c = m.swfId;
            if (m.getSwf()) {
                return l.debug("[Transport.embed] cvpXhrFlash already present on the page. Proceeding."), e.isFunc(a) && a(), void 0;
            }
            var g = this.swfId + "_container", h = document.createElement("div");
            h.id = g, h.style.height = "1px", h.style.width = "1px", h.style.position = "fixed", h.style.overflow = "hidden", h.style.right = 0, h.style.top = 0, document.body.appendChild(h), f.set(m.getReadyCallback(), function() {
                l.debug("[Transport.ready] Callback received"), e.isFunc(a) && a();
            });
            var i = {
                callPrefix: this.callPrefix,
                log: "true"
            }, j = {
                menu: "false",
                scale: "noScale",
                allowFullscreen: "true",
                allowScriptAccess: "always",
                bgcolor: "#FFFFFF"
            }, n = {
                id: c
            };
            l.debug("[Transport.embed] Embedding xhr swf"), k.embedSWF(b, g, "10", "10", "8.0.0", d.EXPRESS_INSTALL_URL, i, j, n);
        }, c.exports = m;
    }), define("cvp/convert", ["require", "exports", "module", "JSON", "cvp/utils", "cvp/utils/jsonconverter", "cvp/utils/xml", "cvp/log"], function(require, exports, module) {
        function jsonTextToJsObject(jsontext) {
            if (logger.log("Convert::jsonTextToJsObject"), Utils.isNull(jsontext)) {
                return null;
            }
            if (jsontext = Utils.trim(jsontext), "" === jsontext) {
                return null;
            }
            var jsobject = null;
            try {
                jsobject = JSON.parse(jsontext);
            } catch (e) {
                if (logger.warn("Provided text was not valid JSON.  Attempting to eval()..."), isValidJSON(jsontext)) {
                    try {
                        jsobject = eval("(" + jsontext + ")");
                    } catch (e2) {
                        logger.error("Unable to eval text into JS object.");
                    }
                }
            }
            return jsobject;
        }
        function xmlTextToXmlDoc(a) {
            logger.log("Convert::xmlTextToXmlDoc");
            var b;
            return a ? (b = XML.stringToDoc(a), b || (logger.warn("Provided text was not valid XML.  Attempting to clean and parse again..."), a = XML.cleanString(a), b = XML.stringToDoc(a)), b) : null;
        }
        function xmlDocToXmlText(a) {
            return logger.log("Convert::xmlDocToXmlText"), XML.docToString(a);
        }
        function xmlDocToJsonText(a) {
            return logger.log("Convert::xmlDocToJsonText"), JsonConverter.xmlToJson(a);
        }
        function xmlDocToJsObject(a) {
            return logger.log("Convert::xmlDocToJsObject"), JsonConverter.xmlToObject(a);
        }
        function xmlTextToJsonText(a) {
            return logger.log("Convert::xmlTextToJsonText"), xmlDocToJsonText(xmlTextToXmlDoc(a));
        }
        function xmlTextToJsObject(a) {
            return logger.log("Convert::xmlTextToJsObject"), jsonTextToJsObject(xmlTextToJsonText(a));
        }
        var JSON = require("JSON"), Utils = require("cvp/utils"), JsonConverter = require("cvp/utils/jsonconverter"), XML = require("cvp/utils/xml"), Log = require("cvp/log"), logger = Log.getLogger(), re_allBackslashPairs = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, re_allSimpleValueTokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, re_allOpenBrackets = /(?:^|:|,)(?:\s*\[)+/g, re_onlyValidLeftoverChars = /^[\],:{}\s]*$/, isValidJSON = function(a) {
            return re_onlyValidLeftoverChars.test(a.replace(re_allBackslashPairs, "@").replace(re_allSimpleValueTokens, "]").replace(re_allOpenBrackets, ""));
        };
        module.exports = {
            jsonTextToJsObject: jsonTextToJsObject,
            xmlTextToXmlDoc: xmlTextToXmlDoc,
            xmlDocToXmlText: xmlDocToXmlText,
            xmlDocToJsonText: xmlDocToJsonText,
            xmlDocToJsObject: xmlDocToJsObject,
            xmlTextToJsonText: xmlTextToJsonText,
            xmlTextToJsObject: xmlTextToJsObject
        };
    }), function(a, b, c, d, e, f) {
        function g(a, b) {
            var c = typeof a[b];
            return "function" == c ||!("object" != c ||!a[b]) || "unknown" == c;
        }
        function h(a, b) {
            return !("object" != typeof a[b] ||!a[b]);
        }
        function i(a) {
            return "[object Array]" === Object.prototype.toString.call(a);
        }
        function j() {
            var a = "Shockwave Flash", b = "application/x-shockwave-flash";
            if (!t(navigator.plugins) && "object" == typeof navigator.plugins[a]) {
                var c = navigator.plugins[a].description;
                c&&!t(navigator.mimeTypes) && navigator.mimeTypes[b] && navigator.mimeTypes[b].enabledPlugin && (C = c.match(/\d+/g));
            }
            if (!C) {
                var d;
                try {
                    d = new ActiveXObject("ShockwaveFlash.ShockwaveFlash"), C = Array.prototype.slice.call(d.GetVariable("$version").match(/(\d+),(\d+),(\d+),(\d+)/), 1), d = null;
                } catch (e) {}
            }
            if (!C) {
                return !1;
            }
            var f = parseInt(C[0], 10), g = parseInt(C[1], 10);
            return D = f > 9 && g > 0, !0;
        }
        function k() {
            if (!S) {
                S=!0;
                for (var a = 0; a < T.length; a++) {
                    T[a]();
                }
                T.length = 0;
            }
        }
        function l(a, b) {
            return S ? (a.call(b), void 0) : (T.push(function() {
                a.call(b);
            }), void 0);
        }
        function m() {
            var a = parent;
            if ("" !== M) {
                for (var b = 0, c = M.split("."); b < c.length; b++) {
                    a = a[c[b]];
                }
            }
            return a.easyXDM;
        }
        function n(b) {
            return a.easyXDM = O, M = b, M && (P = "easyXDM_" + M.replace(".", "_") + "_"), N;
        }
        function o(a) {
            return a.match(J)[3];
        }
        function p(a) {
            return a.match(J)[4] || "";
        }
        function q(a) {
            var b = a.toLowerCase().match(J), c = b[2], d = b[3], e = b[4] || "";
            return ("http:" == c && ":80" == e || "https:" == c && ":443" == e) && (e = ""), c + "//" + d + e;
        }
        function r(a) {
            if (a = a.replace(L, "$1/"), !a.match(/^(http||https):\/\//)) {
                var b = "/" === a.substring(0, 1) ? "": c.pathname;
                "/" !== b.substring(b.length - 1) && (b = b.substring(0, b.lastIndexOf("/") + 1)), a = c.protocol + "//" + c.host + b + a;
            }
            for (; K.test(a);) {
                a = a.replace(K, "");
            }
            return a;
        }
        function s(a, b) {
            var c = "", d = a.indexOf("#");
            - 1 !== d && (c = a.substring(d), a = a.substring(0, d));
            var e = [];
            for (var g in b) {
                b.hasOwnProperty(g) && e.push(g + "=" + f(b[g]));
            }
            return a + (Q ? "#" : - 1 == a.indexOf("?") ? "?" : "&") + e.join("&") + c;
        }
        function t(a) {
            return "undefined" == typeof a;
        }
        function u(a, b, c) {
            var d;
            for (var e in b) {
                b.hasOwnProperty(e) && (e in a ? (d = b[e], "object" == typeof d ? u(a[e], d, c) : c || (a[e] = b[e])) : a[e] = b[e]);
            }
            return a;
        }
        function v() {
            var a = b.body.appendChild(b.createElement("form")), c = a.appendChild(b.createElement("input"));
            c.name = P + "TEST" + H, B = c !== a.elements[c.name], b.body.removeChild(a);
        }
        function w(a) {
            t(B) && v();
            var c;
            B ? c = b.createElement('<iframe name="' + a.props.name + '"/>') : (c = b.createElement("IFRAME"), c.name = a.props.name), c.id = c.name = a.props.name, delete a.props.name, "string" == typeof a.container && (a.container = b.getElementById(a.container)), a.container || (u(c.style, {
                position: "absolute",
                top: "-2000px",
                left: "0px"
            }), a.container = b.body);
            var d = a.props.src;
            if (a.props.src = "javascript:false", u(c, a.props), c.border = c.frameBorder = 0, c.allowTransparency=!0, a.container.appendChild(c), a.onLoad && E(c, "load", a.onLoad), a.usePost) {
                var e, f = a.container.appendChild(b.createElement("form"));
                if (f.target = c.name, f.action = d, f.method = "POST", "object" == typeof a.usePost) {
                    for (var g in a.usePost) {
                        a.usePost.hasOwnProperty(g) && (B ? e = b.createElement('<input name="' + g + '"/>') : (e = b.createElement("INPUT"), e.name = g), e.value = a.usePost[g], f.appendChild(e));
                    }
                }
                f.submit(), f.parentNode.removeChild(f);
            } else {
                c.src = d;
            }
            return a.props.src = d, c;
        }
        function x(a, b) {
            "string" == typeof a && (a = [a]);
            for (var c, d = a.length; d--;) {
                if (c = a[d], c = new RegExp("^" == c.substr(0, 1) ? c : "^" + c.replace(/(\*)/g, ".$1").replace(/\?/g, ".") + "$"), c.test(b)) {
                    return !0;
                }
            }
            return !1;
        }
        function y(d) {
            var e, f = d.protocol;
            if (d.isHost = d.isHost || t(V.xdm_p), Q = d.hash ||!1, d.props || (d.props = {}), d.isHost) {
                d.remote = r(d.remote), d.channel = d.channel || "default" + H++, d.secret = Math.random().toString(16).substring(2), t(f) && (f = q(c.href) == q(d.remote) ? "4" : g(a, "postMessage") || g(b, "postMessage") ? "1" : d.swf && g(a, "ActiveXObject") && j() ? "6" : "Gecko" === navigator.product && "frameElement" in a&&-1 == navigator.userAgent.indexOf("WebKit") ? "5" : d.remoteHelper ? "2" : "0");
            } else {
                if (d.channel = V.xdm_c.replace(/["'<>\\]/g, ""), d.secret = V.xdm_s, d.remote = V.xdm_e.replace(/["'<>\\]/g, ""), f = V.xdm_p, d.acl&&!x(d.acl, d.remote)) {
                    throw new Error("Access denied for " + d.remote);
                }
            }
            switch (d.protocol = f, f) {
            case"0":
                if (u(d, {
                    interval: 100,
                    delay: 2000,
                    useResize: !0,
                    useParent: !1,
                    usePolling: !1
                }, !0), d.isHost) {
                    if (!d.local) {
                        for (var h, i = c.protocol + "//" + c.host, k = b.body.getElementsByTagName("img"), l = k.length; l--;) {
                            if (h = k[l], h.src.substring(0, i.length) === i) {
                                d.local = h.src;
                                break;
                            }
                        }
                        d.local || (d.local = a);
                    }
                    var m = {
                        xdm_c: d.channel,
                        xdm_p: 0
                    };
                    d.local === a ? (d.usePolling=!0, d.useParent=!0, d.local = c.protocol + "//" + c.host + c.pathname + c.search, m.xdm_e = d.local, m.xdm_pa = 1) : m.xdm_e = r(d.local), d.container && (d.useResize=!1, m.xdm_po = 1), d.remote = s(d.remote, m);
                } else {
                    u(d, {
                        channel: V.xdm_c,
                        remote: V.xdm_e,
                        useParent: !t(V.xdm_pa),
                        usePolling: !t(V.xdm_po),
                        useResize: d.useParent?!1: d.useResize
                    });
                }
                e = [new N.stack.HashTransport(d), new N.stack.ReliableBehavior({}), new N.stack.QueueBehavior({
                    encode: !0,
                    maxLength: 4000 - d.remote.length
                }), new N.stack.VerifyBehavior({
                    initiate: d.isHost
                })];
                break;
            case"1":
                e = [new N.stack.PostMessageTransport(d)];
                break;
            case"2":
                d.isHost && (d.remoteHelper = r(d.remoteHelper)), e = [new N.stack.NameTransport(d), new N.stack.QueueBehavior, new N.stack.VerifyBehavior({
                    initiate: d.isHost
                })];
                break;
            case"3":
                e = [new N.stack.NixTransport(d)];
                break;
            case"4":
                e = [new N.stack.SameOriginTransport(d)];
                break;
            case"5":
                e = [new N.stack.FrameElementTransport(d)];
                break;
            case"6":
                C || j(), e = [new N.stack.FlashTransport(d)];
            }
            return e.push(new N.stack.QueueBehavior({
                lazy: d.lazy,
                remove: !0
            })), e;
        }
        function z(a) {
            for (var b, c = {
                incoming: function(a, b) {
                    this.up.incoming(a, b);
                },
                outgoing: function(a, b) {
                    this.down.outgoing(a, b);
                },
                callback: function(a) {
                    this.up.callback(a);
                },
                init: function() {
                    this.down.init();
                },
                destroy: function() {
                    this.down.destroy();
                }
            }, d = 0, e = a.length; e > d; d++) {
                b = a[d], u(b, c, !0), 0 !== d && (b.down = a[d - 1]), d !== e - 1 && (b.up = a[d + 1]);
            }
            return b;
        }
        function A(a) {
            a.up.down = a.down, a.down.up = a.up, a.up = a.down = null;
        }
        var B, C, D, E, F, G = this, H = Math.floor(10000 * Math.random()), I = Function.prototype, J = /^((http.?:)\/\/([^:\/\s]+)(:\d+)*)/, K = /[\-\w]+\/\.\.\//, L = /([^:])\/\//g, M = "", N = {}, O = a.easyXDM, P = "easyXDM_", Q=!1;
        if (g(a, "addEventListener")) {
            E = function(a, b, c) {
                a.addEventListener(b, c, !1);
            }, F = function(a, b, c) {
                a.removeEventListener(b, c, !1);
            };
        } else {
            if (!g(a, "attachEvent")) {
                throw new Error("Browser not supported");
            }
            E = function(a, b, c) {
                a.attachEvent("on" + b, c);
            }, F = function(a, b, c) {
                a.detachEvent("on" + b, c);
            };
        }
        var R, S=!1, T = [];
        if ("readyState" in b ? (R = b.readyState, S = "complete" == R||~navigator.userAgent.indexOf("AppleWebKit/") && ("loaded" == R || "interactive" == R)) : S=!!b.body, !S) {
            if (g(a, "addEventListener")) {
                E(b, "DOMContentLoaded", k);
            } else {
                if (E(b, "readystatechange", function() {
                    "complete" == b.readyState && k();
                }), b.documentElement.doScroll && a === top) {
                    var U = function() {
                        if (!S) {
                            try {
                                b.documentElement.doScroll("left");
                            } catch (a) {
                                return d(U, 1), void 0;
                            }
                            k();
                        }
                    };
                    U();
                }
            }
            E(a, "load", k);
        }
        var V = function(a) {
            a = a.substring(1).split("&");
            for (var b, c = {}, d = a.length; d--;) {
                b = a[d].split("="), c[b[0]] = e(b[1]);
            }
            return c;
        }(/xdm_e=/.test(c.search) ? c.search : c.hash), W = function() {
            var a = {}, b = {
                a: [1, 2, 3]
            }, c = '{"a":[1,2,3]}';
            return "undefined" != typeof JSON && "function" == typeof JSON.stringify && JSON.stringify(b).replace(/\s/g, "") === c ? JSON : (Object.toJSON && Object.toJSON(b).replace(/\s/g, "") === c && (a.stringify = Object.toJSON), "function" == typeof String.prototype.evalJSON && (b = c.evalJSON(), b.a && 3 === b.a.length && 3 === b.a[2] && (a.parse = function(a) {
                return a.evalJSON();
            })), a.stringify && a.parse ? (W = function() {
                return a;
            }, a) : null);
        };
        u(N, {
            version: "2.4.19.3",
            query: V,
            stack: {},
            apply: u,
            getJSONObject: W,
            whenReady: l,
            noConflict: n
        }), N.DomHelper = {
            on: E,
            un: F,
            requiresJSON: function(c) {
                h(a, "JSON") || b.write('<script type="text/javascript" src="' + c + '"><\/script>');
            }
        }, function() {
            var a = {};
            N.Fn = {
                set: function(b, c) {
                    a[b] = c;
                },
                get: function(b, c) {
                    if (a.hasOwnProperty(b)) {
                        var d = a[b];
                        return c && delete a[b], d;
                    }
                }
            };
        }(), N.Socket = function(a) {
            var b = z(y(a).concat([{
                incoming: function(b, c) {
                    a.onMessage(b, c);
                },
                callback: function(b) {
                    a.onReady && a.onReady(b);
                }
            }
            ])), c = q(a.remote);
            this.origin = q(a.remote), this.destroy = function() {
                b.destroy();
            }, this.postMessage = function(a) {
                b.outgoing(a, c);
            }, b.init();
        }, N.Rpc = function(a, b) {
            if (b.local) {
                for (var c in b.local) {
                    if (b.local.hasOwnProperty(c)) {
                        var d = b.local[c];
                        "function" == typeof d && (b.local[c] = {
                            method: d
                        });
                    }
                }
            }
            var e = z(y(a).concat([new N.stack.RpcBehavior(this, b), {
                callback: function(b) {
                    a.onReady && a.onReady(b);
                }
            }
            ]));
            this.origin = q(a.remote), this.destroy = function() {
                e.destroy();
            }, e.init();
        }, N.stack.SameOriginTransport = function(a) {
            var b, e, f, g;
            return b = {
                outgoing: function(a, b, c) {
                    f(a), c && c();
                },
                destroy: function() {
                    e && (e.parentNode.removeChild(e), e = null);
                },
                onDOMReady: function() {
                    g = q(a.remote), a.isHost ? (u(a.props, {
                        src: s(a.remote, {
                            xdm_e: c.protocol + "//" + c.host + c.pathname,
                            xdm_c: a.channel,
                            xdm_p: 4
                        }),
                        name: P + a.channel + "_provider"
                    }), e = w(a), N.Fn.set(a.channel, function(a) {
                        return f = a, d(function() {
                            b.up.callback(!0);
                        }, 0), function(a) {
                            b.up.incoming(a, g);
                        };
                    })) : (f = m().Fn.get(a.channel, !0)(function(a) {
                        b.up.incoming(a, g);
                    }), d(function() {
                        b.up.callback(!0);
                    }, 0));
                },
                init: function() {
                    l(b.onDOMReady, b);
                }
            };
        }, N.stack.FlashTransport = function(a) {
            function e(a) {
                d(function() {
                    h.up.incoming(a, j);
                }, 0);
            }
            function g(c) {
                var d = a.swf + "?host=" + a.isHost, e = "easyXDM_swf_" + Math.floor(10000 * Math.random());
                N.Fn.set("flash_loaded" + c.replace(/[\-.]/g, "_"), function() {
                    N.stack.FlashTransport[c].swf = k = m.firstChild;
                    for (var a = N.stack.FlashTransport[c].queue, b = 0; b < a.length; b++) {
                        a[b]();
                    }
                    a.length = 0;
                }), a.swfContainer ? m = "string" == typeof a.swfContainer ? b.getElementById(a.swfContainer) : a.swfContainer : (m = b.createElement("div"), u(m.style, D && a.swfNoThrottle ? {
                    height: "20px",
                    width: "20px",
                    position: "fixed",
                    right: 0,
                    top: 0
                } : {
                    height: "1px",
                    width: "1px",
                    position: "absolute",
                    overflow: "hidden",
                    right: 0,
                    top: 0
                }), b.body.appendChild(m));
                var g = "callback=flash_loaded" + f(c.replace(/[\-.]/g, "_")) + "&proto=" + G.location.protocol + "&domain=" + f(o(G.location.href)) + "&port=" + f(p(G.location.href)) + "&ns=" + f(M);
                m.innerHTML = "<object height='20' width='20' type='application/x-shockwave-flash' id='" + e + "' data='" + d + "'><param name='allowScriptAccess' value='always'></param><param name='wmode' value='transparent'><param name='movie' value='" + d + "'></param><param name='flashvars' value='" + g + "'></param><embed type='application/x-shockwave-flash' FlashVars='" + g + "' allowScriptAccess='always' wmode='transparent' src='" + d + "' height='1' width='1'></embed></object>";
            }
            var h, i, j, k, m;
            return h = {
                outgoing: function(b, c, d) {
                    k.postMessage(a.channel, b.toString()), d && d();
                },
                destroy: function() {
                    try {
                        k.destroyChannel(a.channel);
                    } catch (b) {}
                    k = null, i && (i.parentNode.removeChild(i), i = null);
                },
                onDOMReady: function() {
                    j = a.remote, N.Fn.set("flash_" + a.channel + "_init", function() {
                        d(function() {
                            h.up.callback(!0);
                        });
                    }), N.Fn.set("flash_" + a.channel + "_onMessage", e), a.swf = r(a.swf);
                    var b = o(a.swf), f = function() {
                        N.stack.FlashTransport[b].init=!0, k = N.stack.FlashTransport[b].swf, k.createChannel(a.channel, a.secret, q(a.remote), a.isHost), a.isHost && (D && a.swfNoThrottle && u(a.props, {
                            position: "fixed",
                            right: 0,
                            top: 0,
                            height: "20px",
                            width: "20px"
                        }), u(a.props, {
                            src: s(a.remote, {
                                xdm_e: q(c.href),
                                xdm_c: a.channel,
                                xdm_p: 6,
                                xdm_s: a.secret
                            }),
                            name: P + a.channel + "_provider"
                        }), i = w(a));
                    };
                    N.stack.FlashTransport[b] && N.stack.FlashTransport[b].init ? f() : N.stack.FlashTransport[b] ? N.stack.FlashTransport[b].queue.push(f) : (N.stack.FlashTransport[b] = {
                        queue: [f]
                    }, g(b));
                },
                init: function() {
                    l(h.onDOMReady, h);
                }
            };
        }, N.stack.PostMessageTransport = function(b) {
            function e(a) {
                if (a.origin) {
                    return q(a.origin);
                }
                if (a.uri) {
                    return q(a.uri);
                }
                if (a.domain) {
                    return c.protocol + "//" + a.domain;
                }
                throw "Unable to retrieve the origin of the event";
            }
            function f(a) {
                var c = e(a);
                c == j && a.data.substring(0, b.channel.length + 1) == b.channel + " " && g.up.incoming(a.data.substring(b.channel.length + 1), c);
            }
            var g, h, i, j;
            return g = {
                outgoing: function(a, c, d) {
                    i.postMessage(b.channel + " " + a, c || j), d && d();
                },
                destroy: function() {
                    F(a, "message", f), h && (i = null, h.parentNode.removeChild(h), h = null);
                },
                onDOMReady: function() {
                    if (j = q(b.remote), b.isHost) {
                        var e = function(c) {
                            c.data == b.channel + "-ready" && (i = "postMessage" in h.contentWindow ? h.contentWindow : h.contentWindow.document, F(a, "message", e), E(a, "message", f), d(function() {
                                g.up.callback(!0);
                            }, 0));
                        };
                        E(a, "message", e), u(b.props, {
                            src: s(b.remote, {
                                xdm_e: q(c.href),
                                xdm_c: b.channel,
                                xdm_p: 1
                            }),
                            name: P + b.channel + "_provider"
                        }), h = w(b);
                    } else {
                        E(a, "message", f), i = "postMessage" in a.parent ? a.parent : a.parent.document, i.postMessage(b.channel + "-ready", j), d(function() {
                            g.up.callback(!0);
                        }, 0);
                    }
                },
                init: function() {
                    l(g.onDOMReady, g);
                }
            };
        }, N.stack.FrameElementTransport = function(e) {
            var f, g, h, i;
            return f = {
                outgoing: function(a, b, c) {
                    h.call(this, a), c && c();
                },
                destroy: function() {
                    g && (g.parentNode.removeChild(g), g = null);
                },
                onDOMReady: function() {
                    i = q(e.remote), e.isHost ? (u(e.props, {
                        src: s(e.remote, {
                            xdm_e: q(c.href),
                            xdm_c: e.channel,
                            xdm_p: 5
                        }),
                        name: P + e.channel + "_provider"
                    }), g = w(e), g.fn = function(a) {
                        return delete g.fn, h = a, d(function() {
                            f.up.callback(!0);
                        }, 0), function(a) {
                            f.up.incoming(a, i);
                        };
                    }) : (b.referrer && q(b.referrer) != V.xdm_e && (a.top.location = V.xdm_e), h = a.frameElement.fn(function(a) {
                        f.up.incoming(a, i);
                    }), f.up.callback(!0));
                },
                init: function() {
                    l(f.onDOMReady, f);
                }
            };
        }, N.stack.NameTransport = function(a) {
            function b(b) {
                var c = a.remoteHelper + (h ? "#_3" : "#_2") + a.channel;
                i.contentWindow.sendMessage(b, c);
            }
            function c() {
                h ? 2!==++k && h || g.up.callback(!0) : (b("ready"), g.up.callback(!0));
            }
            function e(a) {
                g.up.incoming(a, n);
            }
            function f() {
                m && d(function() {
                    m(!0);
                }, 0);
            }
            var g, h, i, j, k, m, n, o;
            return g = {
                outgoing: function(a, c, d) {
                    m = d, b(a);
                },
                destroy: function() {
                    i.parentNode.removeChild(i), i = null, h && (j.parentNode.removeChild(j), j = null);
                },
                onDOMReady: function() {
                    h = a.isHost, k = 0, n = q(a.remote), a.local = r(a.local), h ? (N.Fn.set(a.channel, function(b) {
                        h && "ready" === b && (N.Fn.set(a.channel, e), c());
                    }), o = s(a.remote, {
                        xdm_e: a.local,
                        xdm_c: a.channel,
                        xdm_p: 2
                    }), u(a.props, {
                        src: o + "#" + a.channel,
                        name: P + a.channel + "_provider"
                    }), j = w(a)) : (a.remoteHelper = a.remote, N.Fn.set(a.channel, e));
                    var b = function() {
                        var e = i || this;
                        F(e, "load", b), N.Fn.set(a.channel + "_load", f), function g() {
                            "function" == typeof e.contentWindow.sendMessage ? c() : d(g, 50);
                        }();
                    };
                    i = w({
                        props: {
                            src: a.local + "#_4" + a.channel
                        },
                        onLoad: b
                    });
                },
                init: function() {
                    l(g.onDOMReady, g);
                }
            };
        }, N.stack.HashTransport = function(b) {
            function c(a) {
                if (p) {
                    var c = b.remote + "#" + n+++"_" + a;
                    (i ||!r ? p.contentWindow : p).location = c;
                }
            }
            function e(a) {
                m = a, h.up.incoming(m.substring(m.indexOf("_") + 1), s);
            }
            function f() {
                if (o) {
                    var a = o.location.href, b = "", c = a.indexOf("#");
                    - 1 != c && (b = a.substring(c)), b && b != m && e(b);
                }
            }
            function g() {
                j = setInterval(f, k);
            }
            var h, i, j, k, m, n, o, p, r, s;
            return h = {
                outgoing: function(a) {
                    c(a);
                },
                destroy: function() {
                    a.clearInterval(j), (i ||!r) && p.parentNode.removeChild(p), p = null;
                },
                onDOMReady: function() {
                    if (i = b.isHost, k = b.interval, m = "#" + b.channel, n = 0, r = b.useParent, s = q(b.remote), i) {
                        if (u(b.props, {
                            src: b.remote,
                            name: P + b.channel + "_provider"
                        }), r) {
                            b.onLoad = function() {
                                o = a, g(), h.up.callback(!0);
                            };
                        } else {
                            var c = 0, e = b.delay / 50;
                            !function f() {
                                if (++c > e) {
                                    throw new Error("Unable to reference listenerwindow");
                                }
                                try {
                                    o = p.contentWindow.frames[P + b.channel + "_consumer"];
                                } catch (a) {}
                                o ? (g(), h.up.callback(!0)) : d(f, 50);
                            }();
                        }
                        p = w(b);
                    } else {
                        o = a, g(), r ? (p = parent, h.up.callback(!0)) : (u(b, {
                            props: {
                                src: b.remote + "#" + b.channel + new Date,
                                name: P + b.channel + "_consumer"
                            },
                            onLoad: function() {
                                h.up.callback(!0);
                            }
                        }), p = w(b));
                    }
                },
                init: function() {
                    l(h.onDOMReady, h);
                }
            };
        }, N.stack.ReliableBehavior = function() {
            var a, b, c = 0, d = 0, e = "";
            return a = {
                incoming: function(f, g) {
                    var h = f.indexOf("_"), i = f.substring(0, h).split(",");
                    f = f.substring(h + 1), i[0] == c && (e = "", b && b(!0)), f.length > 0 && (a.down.outgoing(i[1] + "," + c + "_" + e, g), d != i[1] && (d = i[1], a.up.incoming(f, g)));
                },
                outgoing: function(f, g, h) {
                    e = f, b = h, a.down.outgoing(d + "," + ++c + "_" + f, g);
                }
            };
        }, N.stack.QueueBehavior = function(a) {
            function b() {
                if (a.remove && 0 === h.length) {
                    return A(c), void 0;
                }
                if (!i && 0 !== h.length&&!g) {
                    i=!0;
                    var e = h.shift();
                    c.down.outgoing(e.data, e.origin, function(a) {
                        i=!1, e.callback && d(function() {
                            e.callback(a);
                        }, 0), b();
                    });
                }
            }
            var c, g, h = [], i=!0, j = "", k = 0, l=!1, m=!1;
            return c = {
                init: function() {
                    t(a) && (a = {}), a.maxLength && (k = a.maxLength, m=!0), a.lazy ? l=!0 : c.down.init();
                },
                callback: function(a) {
                    i=!1;
                    var d = c.up;
                    b(), d.callback(a);
                },
                incoming: function(b, d) {
                    if (m) {
                        var f = b.indexOf("_"), g = parseInt(b.substring(0, f), 10);
                        j += b.substring(f + 1), 0 === g && (a.encode && (j = e(j)), c.up.incoming(j, d), j = "");
                    } else {
                        c.up.incoming(b, d);
                    }
                },
                outgoing: function(d, e, g) {
                    a.encode && (d = f(d));
                    var i, j = [];
                    if (m) {
                        for (; 0 !== d.length;) {
                            i = d.substring(0, k), d = d.substring(i.length), j.push(i);
                        }
                        for (; i = j.shift();) {
                            h.push({
                                data: j.length + "_" + i,
                                origin: e,
                                callback: 0 === j.length ? g: null
                            });
                        }
                    } else {
                        h.push({
                            data: d,
                            origin: e,
                            callback: g
                        });
                    }
                    l ? c.down.init() : b();
                },
                destroy: function() {
                    g=!0, c.down.destroy();
                }
            };
        }, N.stack.VerifyBehavior = function(a) {
            function b() {
                d = Math.random().toString(16).substring(2), c.down.outgoing(d);
            }
            var c, d, e;
            return c = {
                incoming: function(f, g) {
                    var h = f.indexOf("_");
                    - 1 === h ? f === d ? c.up.callback(!0) : e || (e = f, a.initiate || b(), c.down.outgoing(f)) : f.substring(0, h) === e && c.up.incoming(f.substring(h + 1), g);
                },
                outgoing: function(a, b, e) {
                    c.down.outgoing(d + "_" + a, b, e);
                },
                callback: function() {
                    a.initiate && b();
                }
            };
        }, N.stack.RpcBehavior = function(a, b) {
            function c(a) {
                a.jsonrpc = "2.0", f.down.outgoing(g.stringify(a));
            }
            function d(a, b) {
                var d = Array.prototype.slice;
                return function() {
                    var e, f = arguments.length, g = {
                        method: b
                    };
                    f > 0 && "function" == typeof arguments[f - 1] ? (f > 1 && "function" == typeof arguments[f - 2] ? (e = {
                        success: arguments[f - 2],
                        error: arguments[f - 1]
                    }, g.params = d.call(arguments, 0, f - 2)) : (e = {
                        success: arguments[f - 1]
                    }, g.params = d.call(arguments, 0, f - 1)), j["" + ++h] = e, g.id = h) : g.params = d.call(arguments, 0), a.namedParams && 1 === g.params.length && (g.params = g.params[0]), c(g);
                };
            }
            function e(a, b, d, e) {
                if (!d) {
                    return b && c({
                        id: b,
                        error: {
                            code: - 32601,
                            message: "Procedure not found."
                        }
                    }), void 0;
                }
                var f, g;
                b ? (f = function(a) {
                    f = I, c({
                        id: b,
                        result: a
                    });
                }, g = function(a, d) {
                    g = I;
                    var e = {
                        id: b,
                        error: {
                            code: - 32099,
                            message: a
                        }
                    };
                    d && (e.error.data = d), c(e);
                }) : f = g = I, i(e) || (e = [e]);
                try {
                    var h = d.method.apply(d.scope, e.concat([f, g]));
                    t(h) || f(h);
                } catch (j) {
                    g(j.message);
                }
            }
            var f, g = b.serializer || W(), h = 0, j = {};
            return f = {
                incoming: function(a) {
                    var d = g.parse(a);
                    if (d.method) {
                        b.handle ? b.handle(d, c) : e(d.method, d.id, b.local[d.method], d.params);
                    } else {
                        var f = j[d.id];
                        d.error ? f.error && f.error(d.error) : f.success && f.success(d.result), delete j[d.id];
                    }
                },
                init: function() {
                    if (b.remote) {
                        for (var c in b.remote) {
                            b.remote.hasOwnProperty(c) && (a[c] = d(b.remote[c], c));
                        }
                    }
                    f.down.init();
                },
                destroy: function() {
                    for (var c in b.remote) {
                        b.remote.hasOwnProperty(c) && a.hasOwnProperty(c) && delete a[c];
                    }
                    f.down.destroy();
                }
            };
        }, define("easyXDM", N);
    }(window, document, location, window.setTimeout, decodeURIComponent, encodeURIComponent), define("cvp/request", ["require", "exports", "module", "core/app", "cvp/utils", "cvp/log", "cvp/transports/flashxhr", "JSON", "swfobject", "cvp/convert", "when"], function(a, b, c) {
        function d() {
            return H.apply(this, arguments);
        }
        var e = a("core/app"), f = a("cvp/utils"), g = a("cvp/log"), h = a("cvp/transports/flashxhr"), i = a("JSON"), j = a("swfobject"), k = a("cvp/convert"), l = a("when"), m = g.getLogger(), n = "GET", o = "POST", p = "withCredentials", q = function(a, b, c) {
            return function() {
                if (a && 4 === a.readyState) {
                    try {
                        200 <= a.status && a.status < 300 || 304 === a.status ? c.resolve(a.responseText) : c.reject(a.status + " " + a.statusText);
                    } catch (b) {
                        m.error("Exception with XHR: ", b), c.reject(b.message);
                    } finally {
                        a.onreadystatechange = Function.prototype, a.abort(), a = null;
                    }
                }
            };
        }, r = function(a, b) {
            for (var c in b) {
                f.hasOwn(b, c) && a.setRequestHeader(c, b[c]);
            }
        }, s = function(a) {
            return f.isNull(a) ? a : f.isObject(a) ? f.encodeParams(a) : window.encodeURIComponent(a).replace(/%20/g, "+");
        }, t = {
            accepts: function(a) {
                return !f.isCrossDomain(a.url);
            },
            request: function(a) {
                m.log("Request::AjaxTransport.request", a.url), a.method === n && a.data && (a.url = f.augmentQueryString(a.url, a.data), a.data = null);
                var b = l.defer(), c = new window.XMLHttpRequest;
                c.onreadystatechange = q(c, a, b.resolver), c.open(a.method, a.url, !0), r(c, a.headers);
                var d = s(a.data);
                return c.send(a.method === o ? d : null), b.promise;
            }
        }, u = {
            _uniqId: 0,
            _paramRE: /([^?&]+)=\?(?=&|$)/,
            createCallbackName: function(a) {
                return "cvp_jsonp_" + a + "_" + f.now();
            },
            determineCallbackParam: function(a) {
                var b = this._paramRE.exec(a);
                return b ? b[1] : void 0;
            },
            accepts: function(a) {
                return "jsonp" === a.type || a.jsonpCallback;
            },
            request: function(a) {
                m.log("Request::JSONPTransport.request", a.url);
                var b=++this._uniqId;
                a.data = a.data || {}, a.timeout = a.timeout || 5000;
                var c, d = l.defer(), e = function(a) {
                    c = a, d.resolve(a);
                }, g = "script", h = document.getElementsByTagName(g)[0], i = document.createElement(g), j = /^(complete|loaded)$/, k=!1, n = a.jsonpParam || this.determineCallbackParam(a.url), o = a.jsonpCallback || this.createCallbackName(b), p = window[o];
                window[o] = e, n && (a.data[n] = o), a.cache===!1 && (a.data._ = f.now()), a.url = f.augmentQueryString(a.url, a.data);
                var q = function() {
                    k || "readyState" in i&&!j.test(i.readyState) || (k=!0, m.info("installed " + this.src));
                }, r = function() {
                    var a = "failed to install " + this.src;
                    k=!0, m.error(a), d.reject(a);
                }, s = function() {
                    if (!k) {
                        var b = "timeout while attempting to load " + a.url;
                        k=!0, m.warn(b), d.reject(b);
                    }
                }, t = "number" == typeof a.timeout ? window.setTimeout(s, a.timeout): null, u = function() {
                    window[o] = p, window.clearTimeout(t), i.onload = i.onreadystatechange = i.onerror = null, i.parentElement.removeChild(i), c && f.isFunction(p) && p(c), h = i = p = c = void 0, void 0 === window[o] && delete window[o];
                };
                return d.promise.ensure(u), i.onload = i.onreadystatechange = q, i.onerror = r, i.id = a.id || this.createCallbackName(b), i.src = a.url, h.parentNode.insertBefore(i, h), d.promise;
            }
        }, v = {
            accepts: function() {
                return j.hasFlashPlayerVersion("8.0.0");
            },
            request: function(a) {
                m.log("Request::FlashXHRTransport.request", a.url);
                var b = l.defer(), c = new h(a.lazy), d = function(a, c) {
                    b.resolve(c);
                }, e = function(a, c) {
                    b.reject(c);
                };
                return c.on("dataReceived", d), c.on("dataReceivedError", e), c.request(a.url, {
                    type: a.method,
                    data: a.data
                }), b.promise;
            }
        }, w = {
            accepts: function() {
                return window.XMLHttpRequest && p in new window.XMLHttpRequest ||!f.isUndefined(window.XDomainRequest);
            },
            request: function(a) {
                m.log("Request::CORSTransport.request", a.url);
                var b = new window.XMLHttpRequest, c = l.defer();
                if (a.method === n && a.data && (a.url = f.augmentQueryString(a.url, a.data), a.data = null), b.onreadystatechange = q(b, a, c.resolver), f.isBoolean(a.withCredentials) && p in b && (b.withCredentials = a.withCredentials), p in b) {
                    b.open(a.method, a.url, !0), a.method === o && r(b, {
                        "Content-Type": "application/x-www-form-urlencoded"
                    });
                } else {
                    if (f.isUndefined(window.XDomainRequest)) {
                        throw b = null, new Error("Did not find CORS-compatible interface.");
                    }
                    b = new window.XDomainRequest, b.open(a.method, a.url);
                }
                var d = s(a.data);
                return b.send(a.method === o ? d : null), c.promise;
            }
        }, x = [], y = function(a) {
            if (m.log("Request::registerXDM"), f.isArray(a)) {
                m.debug("Request::registerXDM - merging provided array with xdmRegistry"), x.push.apply(x, a);
            } else {
                if (f.isSimpleObject(a)) {
                    m.debug("Request::registerXDM - adding each property to xdmRegistry");
                    for (var b in a) {
                        f.hasOwn(a, b) && x.push({
                            match: b,
                            path: a[b]
                        });
                    }
                } else {
                    if (2 !== arguments.length) {
                        throw new Error("Invalid parameters to `registerXDM` -- use either registerXDM(list/map) or registerXDM(string/regex, path-to-iframe)");
                    }
                    m.debug("Request::registerXDM - adding xdmRegistry for '" + arguments[0] + "' with path '" + arguments[1] + "'"), x.push({
                        match: arguments[0],
                        path: arguments[1]
                    });
                }
            }
        }, z = function(a) {
            m.log("Request::unregisterXDM");
            for (var b, c = a.toString(), d = x.length - 1; d >= 0; d--) {
                if (b = x[d], c === b.match.toString()) {
                    return x.splice(d, 1);
                }
            }
        }, A = function(a, b) {
            m.log("Request::testPattern");
            var c = "[object RegExp]" === Object.prototype.toString.call(b) ? String.prototype.search: String.prototype.indexOf;
            return - 1 !== c.call(a, b);
        }, B = function(a) {
            m.log("Request::lookupIframe");
            for (var b, c = x.length - 1; c >= 0; c--) {
                if (b = x[c], A(a, b.match)) {
                    return m.debug("Request::lookupIframe - origin '" + a + "' matched '" + b.match + "'"), a + b.path;
                }
                m.debug("Request::lookupIframe - origin '" + a + "' did not match '" + b.match + "'");
            }
        }, C = {
            getIframe: function(a) {
                var b = f.parseUrl(a), c = b.origin, d = B(c);
                return d;
            },
            hasIframe: function(a) {
                return !!this.getIframe(a);
            },
            accepts: function(a) {
                return f.isCrossDomain(a.url) && this.hasIframe(a.url);
            },
            request: function(b) {
                m.log("Request::XDMTransport.request", b.url);
                var c = this.getIframe(b.url);
                if (!c) {
                    var d = f.parseUrl(b.url), g = d.origin;
                    throw new Error("Did not find a registered XDM iframe for origin '" + g + "'.");
                }
                m.log("Found a registered XDM iframe at '" + c + "'.");
                var h = l.defer();
                return a(["easyXDM"], function(a) {
                    var d = new a.Rpc({
                        swf: e.EASYXDM_SWF_URL,
                        remote: c
                    }, {
                        serializer: i,
                        remote: {
                            request: {}
                        }
                    }), g = {
                        url: b.url,
                        method: b.method,
                        headers: b.header || void 0,
                        timeout: b.timeout || void 0,
                        data: b.data
                    }, j = function(a) {
                        m.log("XDMTransport request success: ", a);
                        try {
                            h.resolve(a.data);
                        } catch (b) {
                            h.reject(f.extend(a, {
                                responseText: a.data
                            }));
                        }
                    }, k = function(a) {
                        m.log("XDMTransport request failure: ", a), "data" in a && (a = f.extend({
                            responseText: a.data.data,
                            statusText: a.message
                        }, a.data)), h.reject(a);
                    };
                    d.request(g, j, k);
                }), h.promise;
            }
        }, D = [{
            name: "jsonp",
            impl: u,
            exclusive: !0
        }, {
            name: "ajax",
            impl: t,
            exclusive: !0
        }, {
            name: "flxhr",
            impl: v
        }, {
            name: "cors",
            impl: w
        }, {
            name: "xdm",
            impl: C
        }
        ], E = /\.(js(?:onp?)?|(?:ht|x)ml)$/i, F = function(a) {
            if (a.type) {
                return a.type.toLowerCase();
            }
            var b = f.parseUrl(a.url), c = E.exec(b.pathname);
            return c ? c[1].toLowerCase() : "";
        }, G = function(a) {
            for (var b, c = [], d = [].concat(a.transports || a.transport || []), e = f.isEmpty(d), g = 0, h = D.length; h > g && (b = D[g], !e&&-1 === f.indexOf(d, b.name) ||!b.impl.accepts(a) || (c.push(b.impl), !b.exclusive)); ++g) {}
            return c;
        }, H = function(a) {
            if (!f.isSimpleObject(a)) {
                throw new Error("Request.createRequest requires an object parameter.");
            }
            var b = l.defer();
            a.method = (a.method || n).toUpperCase(), a.type = F(a), a.data = a.data || null, a.headers = a.headers || {}, a.success = a.callback || a.success, a.failure = a.error || a.failure, b.promise.then(a.success, a.failure);
            var c = G(a), d = null, e = function(a) {
                b.resolve(a);
            }, g = function(a) {
                d = a, h();
            }, h = function() {
                if (0 === c.length) {
                    b.reject(d);
                } else {
                    var f = c.shift();
                    try {
                        var h = f.request(a);
                        h.then(e, g);
                    } catch (i) {
                        g(i);
                    }
                }
            };
            return h(), b.promise;
        };
        d.registerXDM = y, d.unregisterXDM = z, d.get = function(a) {
            return a.method = n, H(a);
        }, d.getXML = function(a) {
            return a.type = "xml", H(a).then(k.xmlTextToXmlDoc);
        }, d.getJSON = function(a) {
            return a.type = "json", H(a).then(k.jsonTextToJsObject);
        }, d.getJSONP = function(a) {
            return a.type = "jsonp", H(a);
        }, d.post = function(a) {
            return a.method = o, H(a);
        }, d.registerXDM(/^(http:\/\/[iz]|https:\/\/s)\.cdn\.turner\.com(:\d+)?$/, "/xslo/xslo/test/xdm_iframe"), d.registerXDM(/^https?:\/\/aspen\.turner\.com(:\d+)?$/, "/static/xdm_iframe.html"), d.registerXDM(/^https?:\/\/refwebapp\.aspen\.vgtf\.net(:\d+)?$/, "/static/xdm_iframe.html"), c.exports = d;
    }), define("html5/parsers/generic", ["require", "exports", "module", "Class", "cvp/customevent", "cvp/utils", "cvp/request", "cvp/log"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/customevent"), f = a("cvp/utils"), g = a("cvp/request"), h = a("cvp/log"), i = h.getLogger(), j = d.extend({
            init: function() {
                this.onLoaded = f.bind(this.onLoaded, this), this.onLoadError = f.bind(this.onLoadError, this), this.eParseCompleted = new e, this.eParseError = new e;
            },
            parse: function(a) {
                i.debug("Parser", "Loading the file to parse", a), this.load(a);
            },
            load: function(a) {
                this._createRequest(a).then(this.onLoaded, this.onLoadError);
            },
            _createRequest: function(a) {
                return g.getXML({
                    url: a
                });
            },
            onLoaded: function(a) {
                i.debug("Parser", "Data loaded"), this.parseData(a);
            },
            onLoadError: function(a) {
                i.error("Parser", "onLoadError:", a), this._fireLoadedFailure();
            },
            parseData: function() {},
            _fireLoadedSuccess: function() {
                i.debug("Parser", "successfully Loaded asset"), this.eParseCompleted.dispatch.apply(this.eParseCompleted, arguments);
            },
            _fireLoadedFailure: function() {
                i.error("Parser", "failed to Load asset"), this.eParseError.dispatch.apply(this.eParseError, arguments);
            }
        });
        c.exports = j;
    }), define("html5/parsers/mapping", ["require", "exports", "module", "html5/parsers/generic", "cvp/utils", "cvp/request"], function(a, b, c) {
        var d = a("html5/parsers/generic"), e = a("cvp/utils"), f = a("cvp/request"), g = d.extend({
            _createRequest: function(a) {
                return f.getJSONP({
                    url: a,
                    jsonpCallback: "cvp_onMappingReceived"
                });
            },
            setMappingProfile: function(a) {
                this.profile = a;
            },
            parseData: function(a) {
                var b, c, d;
                if (e.undef(a) || e.undef(a.mappings)) {
                    return this.eParseError.dispatch(), void 0;
                }
                if (c = a.mappings, e.empty(this.profile)) {
                    return this.onLoadError(null, "No mapping profile provided", "Invalid mapping profile"), void 0;
                }
                for (d in c) {
                    c[d].profile === this.profile && (b = c[d]);
                }
                return e.empty(b) ? (this.onLoadError(null, "No mapping profile '" + this.profile + "' found", "Invalid mapping profile"), void 0) : (this._fireLoadedSuccess(b), void 0);
            }
        });
        c.exports = g;
    }), define("html5/parsers/appconfig", ["require", "exports", "module", "html5/parsers/generic", "cvp/request"], function(a, b, c) {
        var d = a("html5/parsers/generic"), e = a("cvp/request"), f = d.extend({
            _createRequest: function(a) {
                return e.getJSONP({
                    url: a,
                    jsonpCallback: "cvp_onAppConfigReceived"
                });
            },
            parseData: function(a) {
                var b = a.appConfig;
                this._fireLoadedSuccess(b);
            }
        });
        c.exports = f;
    }), define("html5/shared/playerconfig", {
        params: {},
        mapping: {},
        appConfig: {},
        containerInfo: {},
        configInfo: {
            html5Order: "",
            html5Types: "",
            omniture: {},
            share: {},
            embed: {}
        },
        adPolicy: {
            ads: {
                attr: {
                    type: "NONE"
                }
            }
        },
        trackingPolicy: {
            interval: "50%"
        }
    }), define("html5/parsers/container", ["require", "exports", "module", "html5/parsers/generic", "cvp/utils/xml", "cvp/utils", "html5/shared/playerconfig"], function(a, b, c) {
        function d(a, b) {
            var c = f.getParamValue(a, "adPolicySrc"), d = f.getParamValue(a, "adPolicyContext"), e = f.getParamValue(a, "trackingPolicySrc"), h = f.getParamValue(a, "trackingPolicyContext");
            g.empty(c) || (b.adPolicySrc = c), g.empty(d) || (b.adPolicyContext = d), g.empty(e) || (b.trackingPolicySrc = e), g.empty(h) || (b.trackingPolicyContext = h);
        }
        var e = a("html5/parsers/generic"), f = a("cvp/utils/xml"), g = a("cvp/utils"), h = a("html5/shared/playerconfig"), i = e.extend({
            setParams: function(a) {
                this._params = a;
            },
            parseData: function(a) {
                var b = 0, c = 0, e = a.documentElement, i = this._params.context || "", j = this._params.element || "", k = null, l = null, m = [], n = g.extend({}, h.containerInfo), o = e.getElementsByTagName("default");
                if (o.length && (m = o[0].getElementsByTagName("policies"), m.length && d(m[0], n)), n.elementName = j, k = e.getElementsByTagName("context"), k.length) {
                    for (c = k.length; c > b; ++b) {
                        if (f.getAttribute(k[b], "name") === i) {
                            l = k[b];
                            break;
                        }
                    }
                    if (l) {
                        var p = l.getElementsByTagName("element"), q = null, r = null;
                        for (b = 0, c = p.length; c > b; ++b) {
                            if (q = p[b], f.getAttribute(q, "id") === j) {
                                r = q;
                                break;
                            }
                        }
                        r || (r = p[0]), j = f.getAttribute(r, "id"), m = r.getElementsByTagName("policies"), m.length && d(m[0], n);
                        var s = r.getElementsByTagName("player"), t = f.getAttribute(s[s.length - 1], "playerInstance");
                        g.empty(t) && (t = i), n.playerInstance = t;
                    }
                    g.empty(j) || (n.elementName = j);
                }
                g.print(n, "containerInfo"), this._fireLoadedSuccess(n);
            }
        });
        c.exports = i;
    }), define("html5/parsers/config", ["require", "exports", "module", "html5/parsers/generic", "cvp/utils/xml", "cvp/utils", "html5/shared/playerconfig"], function(a, b, c) {
        var d = a("html5/parsers/generic"), e = a("cvp/utils/xml"), f = a("cvp/utils"), g = a("html5/shared/playerconfig"), h = function(a, b, c) {
            switch (b) {
            default:
                a[b] = c;
            }
        }, i = function(a, b) {
            b.hasAttributes && (a.attr || (a.attr = {}), e.assignAttributes(a.attr, b.attributes));
        }, j = function(a, b) {
            var c = null;
            switch (b) {
            case"akamai2":
                a.akamai2 = {}, c = a.akamai2;
                break;
            case"akamaiSpe":
                a.akamaiSpe = {}, c = a.akamaiSpe;
                break;
            case"tokenAuth":
                a.token = {}, c = a.token;
            }
            return c;
        }, k = function(a, b) {
            if (!f.isNull(a)) {
                for (var c, d, g = a.childNodes, l = 0, m = g.length; m > l; ++l) {
                    d = g[l], c = j(b, d.nodeName), f.isNull(c) ? "param" === d.nodeName && h(b, e.getAttribute(d, "name"), e.getAttribute(d, "value")) : (i(c, d), d.childNodes.length && k(d, c));
                }
            }
        }, l = d.extend({
            setPlayerInstance: function(a) {
                this.playerInstanceName = a || "";
            },
            parseData: function(a) {
                var b = f.extend({}, g.configInfo), c = a.documentElement, d = c.getElementsByTagName("default");
                d.length > 0 && k(d[0], b);
                for (var h = null, i = c.getElementsByTagName("player"), j = null; i.length;) {
                    j = i[i.length - 1], e.getAttribute(j, "name") === this.playerInstanceName && (h = j.cloneNode(!0)), c.removeChild(j);
                }
                f.isNull(h) || k(h, b), f.print(b, "configInfo"), this._fireLoadedSuccess(b);
            }
        });
        c.exports = l;
    }), define("html5/dependencies/config", ["require", "exports", "module", "cvp/utils/dependency", "html5/parsers/config", "cvp/utils", "cvp/log"], function(a, b, c) {
        var d = a("cvp/utils/dependency"), e = a("html5/parsers/config"), f = a("cvp/utils"), g = a("cvp/log"), h = g.getLogger(), i = d.extend({
            init: function() {
                this._super.apply(this, arguments), this.required=!0, this._parser = new e, this._parser.eParseCompleted.addListener(this._onParseCompleted, this), this._parser.eParseError.addListener(this._onParseError, this);
            },
            setContext: function(a) {
                this._parser.setPlayerInstance(a);
            },
            load: function() {
                this._parser.parse(this._assetUrl);
            },
            _onParseCompleted: function(a) {
                this._manager && (f.empty(a.omniture) || f.empty(a.omniture.omniture_account) || h.info("ContainerDependency", "adding Omniture dependency")), this._success(a);
            },
            _onParseError: function() {
                this._failure();
            },
            getDesc: function() {
                return "ConfigDependency: " + this._assetUrl;
            }
        });
        c.exports = i;
    }), define("html5/parsers/adpolicy", ["require", "exports", "module", "html5/parsers/generic", "cvp/utils/xml", "cvp/utils", "html5/shared/playerconfig"], function(a, b, c) {
        var d = a("html5/parsers/generic"), e = a("cvp/utils/xml"), f = a("cvp/utils"), g = a("html5/shared/playerconfig"), h = function(a, b, c) {
            switch (b) {
            case"adApi":
                a.apiUrl = c;
                break;
            case"adManRootUrl":
                a.adManRootUrl = c;
                break;
            case"adServerRootUrl":
                a.adServerRootUrl = c;
                break;
            case"adVideoRootUrl":
                a.adVideoRootUrl = c;
                break;
            case"adVideoExtension":
                a.adVideoExtension = c;
                break;
            case"additionalVideoSegvars":
                a.additionalVideoSegVars = c;
                break;
            case"additionalSyncSegvars":
                a.additionalSyncSegVars = c;
                break;
            case"adSection":
                a.adSection = c;
                break;
            case"adNetworkId":
                a.adNetworkId = c;
                break;
            case"adVideoNetworkId":
                a.adVideoNetworkId = c;
                break;
            case"adVideoAssetId":
                a.adVideoAssetId = c;
                break;
            case"adPlayerProfile":
                a.adPlayerProfile = c;
                break;
            case"renderersUrl":
                a.renderersUrl = c;
                break;
            case"externalSlots":
                a.externalSlots = f.isFlagActive(c, a.externalSlots);
                break;
            case"adLiveContentDuration":
                a.liveDuration = c;
                break;
            default:
                a[b] = c;
            }
        }, i = function(a, b) {
            b.hasAttributes && (a.attr || (a.attr = {}), e.assignAttributes(a.attr, b.attributes));
        }, j = function(a, b) {
            var c = null;
            switch (b) {
            case"adServer":
                c = a.ads;
            }
            return c;
        }, k = function(a, b) {
            if (!f.isNull(a)) {
                for (var c, d, g = a.childNodes, l = 0, m = g.length; m > l; ++l) {
                    d = g[l], c = j(b, d.nodeName), f.isNull(c) ? "param" === d.nodeName && h(b, e.getAttribute(d, "name"), e.getAttribute(d, "value")) : (i(c, d), d.childNodes.length && k(d, c));
                }
            }
        }, l = d.extend({
            setAdPolicyContext: function(a) {
                this.adPolicyContextName = a || "";
            },
            parseData: function(a) {
                var b = f.extend({}, g.adPolicy), c = a.documentElement, d = c.getElementsByTagName("default");
                0 !== d.length && k(d[0], b);
                for (var h = null, i = c.getElementsByTagName("context"), j = 0, l = i.length; l > j; ++j) {
                    if (e.getAttribute(i[j], "name") === this.adPolicyContextName) {
                        h = i[j];
                        break;
                    }
                }
                f.isNull(h) || k(h, b), f.print(b, "adPolicy"), this._fireLoadedSuccess(b);
            }
        });
        c.exports = l;
    }), define("html5/dependencies/adpolicy", ["require", "exports", "module", "cvp/utils/dependency", "html5/parsers/adpolicy", "cvp/log", "core/app"], function(a, b, c) {
        var d = a("cvp/utils/dependency"), e = a("html5/parsers/adpolicy"), f = a("cvp/log"), g = f.getLogger(), h = a("core/app"), i = d.extend({
            init: function() {
                this._super.apply(this, arguments), this.required=!0, this._parser = new e, this._parser.eParseCompleted.addListener(this._onParseCompleted, this), this._parser.eParseError.addListener(this._onParseError, this);
            },
            setContext: function(a) {
                this._parser.setAdPolicyContext(a);
            },
            load: function() {
                g.info("AdPolicyDependency", "loading xml", this._assetUrl), this._parser.parse(this._assetUrl);
            },
            _onParseCompleted: function(a) {
                var b = a.ads.attr.type.toLowerCase();
                "freewheel" === b ? (g.info("AdPolicyDependency", "adding FW dependency"), this._manager.addDependency(new d(h.AD_MANAGER_URL, !0))) : "dfp" === b && (g.info("AdPolicyDependency", "adding DFP dependency"), this._manager.addDependency(new d(h.AD_DFP_URL, !0))), this._success(a);
            },
            _onParseError: function() {
                this._failure();
            },
            getDesc: function() {
                return "AdPolicyDependency: " + this._assetUrl;
            }
        });
        c.exports = i;
    }), define("html5/parsers/TrackingPolicy", ["require", "exports", "module", "html5/parsers/generic", "cvp/utils/xml", "cvp/utils", "html5/shared/playerconfig"], function(a, b, c) {
        var d = a("html5/parsers/generic"), e = a("cvp/utils/xml"), f = a("cvp/utils"), g = a("html5/shared/playerconfig"), h = function(a, b, c) {
            switch (b) {
            case"interval":
                a.interval = c;
            }
        }, i = function(a, b) {
            if (!f.isNull(a)) {
                for (var c, d = e.getChildElements(a), g = 0, i = d.length; i > g; ++g) {
                    c = d[g], "param" === c.nodeName && h(b, e.getAttribute(c, "name"), e.getAttribute(c, "value"));
                }
            }
        }, j = d.extend({
            setTrackingPolicyContext: function(a) {
                this.trackingPolicyContextName = a || "";
            },
            parseData: function(a) {
                var b = f.extend({}, g.trackingPolicy), c = a.documentElement, d = c.getElementsByTagName("default");
                d.length && i(d[0], b);
                for (var h, j = null, k = c.getElementsByTagName("context"), l = 0, m = k.length; m > l; ++l) {
                    if (h = k[l], e.getAttribute(h, "name") === this.trackingPolicyContextName) {
                        j = h;
                        break;
                    }
                }
                j && i(j, b), f.print(b, "trackingPolicy"), this._fireLoadedSuccess(b);
            }
        });
        c.exports = j;
    }), define("html5/dependencies/trackingpolicy", ["require", "exports", "module", "cvp/utils/dependency", "html5/parsers/TrackingPolicy", "cvp/log"], function(a, b, c) {
        var d = a("cvp/utils/dependency"), e = a("html5/parsers/TrackingPolicy"), f = a("cvp/log"), g = f.getLogger(), h = d.extend({
            init: function() {
                this._super.apply(this, arguments), this._parser = new e, this._parser.eParseCompleted.addListener(this._onParseCompleted, this), this._parser.eParseError.addListener(this._onParseError, this);
            },
            setContext: function(a) {
                this._parser.setTrackingPolicyContext(a);
            },
            load: function() {
                g.info("TrackingPolicyDependency", "loading xml", this._assetUrl), this._parser.parse(this._assetUrl);
            },
            _onParseCompleted: function(a) {
                this._success(a);
            },
            _onParseError: function() {
                this._failure();
            },
            getDesc: function() {
                return "TrackingPolicyDependency: " + this._assetUrl;
            }
        });
        c.exports = h;
    }), define("html5/dependencies/container", ["require", "exports", "module", "cvp/utils/dependency", "html5/parsers/container", "html5/dependencies/config", "html5/dependencies/adpolicy", "html5/dependencies/trackingpolicy", "cvp/utils", "cvp/log"], function(a, b, c) {
        var d = a("cvp/utils/dependency"), e = a("html5/parsers/container"), f = a("html5/dependencies/config"), g = a("html5/dependencies/adpolicy"), h = a("html5/dependencies/trackingpolicy"), i = a("cvp/utils"), j = a("cvp/log"), k = j.getLogger(), l = d.extend({
            init: function() {
                this._super.apply(this, arguments), this.required=!0, this._parser = new e, this._parser.eParseCompleted.addListener(this._onParseCompleted, this), this._parser.eParseError.addListener(this._onParseError, this);
            },
            setConfigUrl: function(a) {
                this.configUrl = a;
            },
            passParams: function(a) {
                this._parser.setParams(a);
            },
            load: function() {
                k.info("ContainerDependency", "loading xml", this._assetUrl), this._parser.parse(this._assetUrl);
            },
            _onParseCompleted: function(a) {
                var b = new f(this.configUrl, !0);
                if (b.setContext(a.playerInstance), this._manager.addDependency(b), !i.empty(a.adPolicySrc)) {
                    var c = new g(a.adPolicySrc, !0);
                    c.setContext(a.adPolicyContext), this._manager.addDependency(c);
                }
                if (!i.empty(a.trackingPolicySrc)) {
                    var d = new h(a.trackingPolicySrc, !1);
                    d.setContext(a.trackingPolicyContext), this._manager.addDependency(d);
                }
                this._success(a);
            },
            _onParseError: function() {
                this._failure();
            },
            getDesc: function() {
                return "ContainerDependency: " + this._assetUrl;
            }
        });
        c.exports = l;
    }), define("html5/dependencies/appconfig", ["require", "exports", "module", "cvp/utils/dependency", "html5/parsers/appconfig", "html5/dependencies/container", "cvp/utils", "cvp/log"], function(a, b, c) {
        var d = a("cvp/utils/dependency"), e = a("html5/parsers/appconfig"), f = a("html5/dependencies/container"), g = a("cvp/utils"), h = a("cvp/log"), i = h.getLogger(), j = d.extend({
            init: function() {
                this._super.apply(this, arguments), this.required=!0, this._parser = new e, this._parser.eParseCompleted.addListener(this._onParseCompleted, this), this._parser.eParseError.addListener(this._onParseError, this);
            },
            load: function() {
                i.info("AppConfigDependency", "loading xml", this._assetUrl), this._parser.parse(this._assetUrl);
            },
            _onParseCompleted: function(a) {
                if (!a || g.empty(a.containerUrl) || g.empty(a.configUrl)) {
                    return i.error("Unable to retrieve the appConfig file."), this._failure(), void 0;
                }
                var b = new f(a.containerUrl, !0);
                b.setConfigUrl(a.configUrl), b.passParams(this._manager.getParams()), this._manager.addDependency(b), this._success(a);
            },
            _onParseError: function() {
                this._failure();
            },
            getDesc: function() {
                return "AppConfigDependency: " + this._assetUrl;
            }
        });
        c.exports = j;
    }), define("html5/dependencies/mapping", ["require", "exports", "module", "cvp/utils/dependency", "html5/parsers/mapping", "html5/dependencies/appconfig", "cvp/utils", "cvp/log"], function(a, b, c) {
        var d = a("cvp/utils/dependency"), e = a("html5/parsers/mapping"), f = a("html5/dependencies/appconfig"), g = a("cvp/utils"), h = a("cvp/log"), i = h.getLogger(), j = d.extend({
            init: function() {
                this._super.apply(this, arguments), this.required=!0, this._parser = new e, this._parser.eParseCompleted.addListener(this._onParseCompleted, this), this._parser.eParseError.addListener(this._onParseError, this);
            },
            setContext: function(a) {
                this._parser.setMappingProfile(a);
            },
            load: function() {
                i.info("MappingDependency", "loading xml", this._assetUrl), this._parser.parse(this._assetUrl);
            },
            _onParseCompleted: function(a) {
                if (!a || g.empty(a.url)) {
                    return i.error("Unable to retrieve the mapping file."), this._failure(), void 0;
                }
                var b = g.replaceExtension(a.url, "xml", "json");
                this._manager.addDependency(new f(b, !0)), this._success(a);
            },
            _onParseError: function() {
                this._failure();
            },
            getDesc: function() {
                return "MappingDependency: " + this._assetUrl;
            }
        });
        c.exports = j;
    }), define("html5/bootstrapper", ["require", "exports", "module", "Class", "cvp/customevent", "cvp/utils/dependencymanager", "html5/dependencies/mapping", "html5/dependencies/appconfig", "html5/dependencies/container", "html5/dependencies/config", "html5/dependencies/adpolicy", "html5/dependencies/trackingpolicy", "cvp/utils", "html5/shared/playerconfig"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/customevent"), f = a("cvp/utils/dependencymanager"), g = a("html5/dependencies/mapping"), h = a("html5/dependencies/appconfig"), i = a("html5/dependencies/container"), j = a("html5/dependencies/config"), k = a("html5/dependencies/adpolicy"), l = a("html5/dependencies/trackingpolicy"), m = a("cvp/utils"), n = a("html5/shared/playerconfig"), o = f.extend({
            setBootstrapper: function(a) {
                this._bootstrap = a;
            },
            setParams: function(a) {
                this._params = a;
            },
            getParams: function() {
                return this._params;
            }
        }), p = d.extend({
            init: function(a, b) {
                this._mappingUrl = a, this._params = b || {}, this.eSuccess = new e, this.eFailure = new e;
            },
            load: function() {
                this._bootManager = new o, this._bootManager.setBootstrapper(this), this._bootManager.setParams(this._params);
                var a = new g(this._mappingUrl, !0);
                a.setContext(this._params.profile), this._bootManager.addDependency(a), this._bootManager.eDependencySuccess.addListener(this._onDependencySuccess, this), this._bootManager.eSuccess.addListener(this._success, this), this._bootManager.eFailure.addListener(this._failure, this), this._bootManager.load();
            },
            _onDependencySuccess: function(a, b) {
                a instanceof g ? this._mapping = b : a instanceof h ? this._appConfig = b : a instanceof i ? this._containerInfo = b : a instanceof j ? this._configInfo = b : a instanceof k ? this._adPolicy = b : a instanceof l && (this._trackingPolicy = b);
            },
            _success: function() {
                var a = {};
                a.data = {}, a.data.mapping = m.extend({}, n.mapping, this._mapping), a.data.appConfig = m.extend({}, n.appConfig, this._appConfig), a.data.containerInfo = m.extend({}, n.containerInfo, this._containerInfo), a.data.configInfo = m.extend({}, n.configInfo, this._configInfo), a.data.adPolicy = m.extend({}, n.adPolicy, this._adPolicy), a.data.trackingPolicy = m.extend({}, n.trackingPolicy, this._trackingPolicy), this.eSuccess.dispatch(a);
            },
            _failure: function() {
                this.eFailure.dispatch();
            }
        });
        c.exports = p;
    }), define("aspen/log", ["require", "exports", "module", "cvp/log"], function(a, b, c) {
        var d = a("cvp/log"), e = d.getLogger("Aspen");
        c.exports = e;
    }), define("aspen/aspencomm", ["require", "exports", "module", "aspen/log", "cvp/request", "cvp/utils", "cvp/convert"], function(a, b) {
        var c = a("aspen/log"), d = a("cvp/request"), e = a("cvp/utils"), f = a("cvp/convert"), g = 500, h = 3, i=!1, j = [], k = function() {
            c.log("AspenComm::init"), i=!0, k = function() {
                throw new Error("already init'ed - ignored");
            }, o();
        }, l = function(a, b, c) {
            i ? p(a, b, c) : m(a, b, c);
        }, m = function() {
            j.push(arguments);
        }, n = function(a) {
            return j.length > g && j.splice(0, g - j.length), e.isArray(a) && a.length ? j.unshift.apply(j, a) : j.push(a);
        }, o = function() {
            for (var a = j.splice(0, j.length), b = null; null != (b = a.shift());) {
                p.apply(null, b).otherwise(e.bind(n, null, b));
            }
        }, p = function(a, b, e) {
            c.log("AspenComm::makeRequest", a);
            var g = function(a) {
                c.log("AspenComm::makeRequest", "request success", a);
                var d = f.jsonTextToJsObject(a);
                b(d);
            }, i = function(b) {
                c.debug("AspenComm::makeRequest", "request failure", b), a._retries > h ? e(a.url) : (a._retries += 1, n(arguments));
            };
            a._retries = "_retries" in a ? a._retries + 1 : 0;
            var j = d(a);
            return j.then(g, i), j;
        };
        b.init = k, b.request = l;
    }), define("aspen/transportmanager", ["require", "exports", "module", "aspen/aspencomm", "cvp/utils", "cvp/request", "JSON", "aspen/log"], function(a, b, c) {
        var d = a("aspen/aspencomm"), e = a("cvp/utils"), f = a("cvp/request"), g = a("JSON"), h = a("aspen/log"), i = {
            Format: {
                JSON: "json",
                JSONP: "jsonp"
            },
            getDefaultFormats: function() {
                return [i.Format.JSONP];
            },
            init: function(a) {
                this._config = a, this._transportFormat = this._config.transportFormats.shift(), this._bootstrapped=!1;
            },
            bootstrapTM: function() {
                if (h.log("TransportManager::bootstrapTM", "_bootstrapped:", this._bootstrapped), this._transportFormat === i.Format.JSON&&!this._bootstrapped) {
                    var a = this._config.servicesUrl;
                    d.init(a), this._bootstrapped=!0, h.log("TransportManager::bootstrapTM", "transportFormat:", this._transportFormat);
                }
            },
            createRequest: function(a, b, c, j, k) {
                h.log("TransportManager::createRequest");
                var l = this._config.servicesUrl + a + "." + this._transportFormat, m = e.bind(c, k), n = e.bind(j, k);
                switch (this._transportFormat) {
                case i.Format.JSON:
                    d.request({
                        url: l,
                        method: - 1 !== a.indexOf("postEvent") ? "POST": "GET",
                        data: {
                            aspenJson: g.stringify(b)
                        }
                    }, m, n);
                    break;
                case i.Format.JSONP:
                    l = e.augmentQueryString(l, {
                        aspenJson: b
                    }), f.getJSONP({
                        jsonpCallback: "parseCVPServicesInitialization",
                        url: l,
                        success: m,
                        failure: n
                    });
                }
            },
            fallback: function() {
                return h.debug("TransportManager::fallback", "current transport format failed", this._transportFormat), this._transportFormat = this._config.transportFormats.shift(), this._transportFormat ? (h.debug("TransportManager::fallback", "trying next transport format", this._transportFormat), !0) : !1;
            }
        };
        c.exports = i;
    }), define("aspen/batchservice", ["require", "exports", "module", "Class", "cvp/utils", "cvp/shared", "JSON", "aspen/log", "aspen/transportmanager"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/utils"), f = a("cvp/shared"), g = a("JSON"), h = a("aspen/log"), i = a("aspen/transportmanager"), j = "total", k = "timer", l = "none", m = d.extend({
            init: function(a, b) {
                this._enabled=!1, this._queue = [], this._config = a, this._aspen = b || window.Aspen, this._timer = null, this._postTimerEvent = e.bind(this._postTimerEvent, this), this._firstPostTimerEvent = e.bind(this._firstPostTimerEvent, this), this.dispose = e.bind(this.dispose, this), f.addBeforeUnLoadEvent(this.dispose);
            },
            dispose: function() {
                this.disableTimer(), this.post();
            },
            start: function(a) {
                if (this._config = a, this._enabled=!0, this._aspen.config.batchMode === k) {
                    var b = Math.ceil(Math.random() * this._aspen.config.batchModeAmount);
                    b === this._aspen.config.batchModeAmount && (b -= 1, 0 >= b && (b = 0.5)), h.log("BatchService::start", "random time: " + b), setTimeout(this._firstPostTimerEvent, 1000 * b);
                }
            },
            add: function(a) {
                return this._aspen.config.enabled ? this._config.batchThrottled ? (h.debug("BatchService::add", "Batching is throttled. Message not added."), void 0) : (h.debug("BatchService::add", "Adding message to batch queue."), this._queue.push(a), this._enabled ? (this._aspen.config.batchMode === k && null === this._timer ? (h.debug("BatchService::add", "Starting timer on message-add."), this._timer = setTimeout(this._postTimerEvent, 1000 * this._aspen.config.batchModeAmount)) : (this._aspen.config.batchMode === j && this._queue.length >= this._aspen.config.batchModeAmount || this._aspen.config.batchMode === l || this._aspen.config.batchMode !== k) && this.post(), e.empty(this._queue) || ("error" === a.eventType ? this.flushByError(a.eventData) : "error" === a.eventType || e.undef(this._aspen.config.highPriorityEvents) || this.flushByEvent(a.eventType)), void 0) : (h.debug("BatchService::add", "Batch service not enabled. Queuing message."), void 0)) : (h.debug("BatchService::add", "Aspen is disabled via aspenanalytics config. Message not added."), void 0);
            },
            post: function() {
                if (this._config.postThrottled) {
                    return h.debug("BatchService::post", "Batch posting is throttled. Batch not posted."), void 0;
                }
                var a = {
                    sessionId: this._config.sessionId,
                    events: this._queue
                };
                if (h.debug("BatchService::post", "send batch string"), "gzip" === this._aspen.config.batchContentEncoding) {
                    var b = "?aspenJson=" + g.stringify(a), c = encodeURIComponent(b).replace(/%20/g, "+"), d = c;
                    a = d;
                }
                i.createRequest(this._aspen.config.batchApi, a, this._postSuccess, this._postFailure, this), this._queue.length = 0;
            },
            _postTimerEvent: function() {
                e.empty(this._queue) ? (h.log("BatchService::_postTimerEvent", "no messages to post"), this._timer = null) : (h.log("BatchService::_postTimerEvent", "queue.length: " + this._queue.length), this.post(), this._timer = setTimeout(this._postTimerEvent, 1000 * this._aspen.config.batchModeAmount));
            },
            _firstPostTimerEvent: function() {
                e.empty(this._queue) ? h.log("BatchService::_firstPostTimerEvent", "no messages to post") : (h.log("BatchService::_firstPostTimerEvent", "queue.length: " + this._queue.length), this.post());
            },
            _postSuccess: function(a) {
                h.log("BatchService::_postSuccess", a);
            },
            _postFailure: function(a) {
                h.log("BatchService::_postFailure", a);
            },
            flushByError: function(a) {
                if (e.isString(a.errorCode) && e.isString(this._aspen.config.highPriorityErrors)) {
                    for (var b = a.errorCode, c = b.substring(0, 2), d = b.substring(2, 4), f = b.substring(4, 6), g = b.substring(6), i = this._aspen.config.highPriorityErrors.split(/[, ]+/), j = "", k = "", l = "", m = "", n = [], o = [], p = [], q = [], r = 0, s = i.length; s > r; ++r) {
                        switch (r) {
                        case 0:
                            j = i[r], n = j.split("+");
                            break;
                        case 1:
                            k = i[r], o = k.split("+");
                            break;
                        case 2:
                            l = i[r], p = l.split("+");
                            break;
                        case 3:
                            m = i[r], q = m.split("+");
                        }
                    }
                    for (r = 0, s = n.length; s > r; ++r) {
                        var t = n[r];
                        if (c === t || "*" === t) {
                            for (var u = 0, v = o.length; v > u; ++u) {
                                var w = o[u];
                                if (d === w || "*" === w) {
                                    for (var x = 0, y = p.length; y > x; ++x) {
                                        var z = p[x];
                                        if (f === z || "*" === z) {
                                            for (var A = 0, B = q.length; B > A; ++A) {
                                                var C = q[A];
                                                (g === C || "*" === C) && (h.debug("BatchService::flushByError", "found match, flushing batch"), this.post());
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            flushByEvent: function(a) {
                if (e.isString(this._aspen.config.highPriorityEvents)) {
                    for (var b = this._aspen.config.highPriorityEvents.split(/[, ]+/), c = 0, d = b.length; d > c; ++c) {
                        var f = b[c];
                        f === a && (h.debug("BatchService::flushByEvent", "found match, flushing batch"), this.post());
                    }
                }
            },
            setSessionId: function(a) {
                this._config.sessionId = a;
            },
            setBatchThrottled: function(a) {
                this._config.batchThrottled = a;
            },
            setPostThrottled: function(a) {
                this._config.postThrottled = a;
            },
            disableTimer: function() {
                this._aspen.config.batchMode === k && clearTimeout(this._timer);
            }
        });
        c.exports = m;
    }), define("aspen/configfile", ["require", "exports", "module", "cvp/utils/dependency", "aspen/log", "cvp/utils", "cvp/request"], function(a, b, c) {
        var d = a("cvp/utils/dependency"), e = a("aspen/log"), f = a("cvp/utils"), g = a("cvp/request"), h = d.extend({
            init: function(a) {
                var b = a.basePath || ".";
                e.log("Using config base path: " + b);
                var c = b + "/aspenanalytics.json?_=" + f.now();
                e.log("config url: ", c), this._super(c, !1);
            },
            load: function() {
                g.getJSONP({
                    jsonpCallback: "cvp_onAnalyticsConfigReceived",
                    url: this._assetUrl,
                    success: f.bind(this._loadConfigSuccess, this),
                    error: f.bind(this._loadConfigFailure, this)
                });
            },
            _loadConfigSuccess: function(a) {
                e.log("Config loaded successfully"), this._success(a, this._assetUrl);
            },
            _loadConfigFailure: function(a) {
                e.log("Config failed to load", a), this._failure(a);
            },
            getDesc: function() {
                return "Aspen ConfigDependency: " + this._assetUrl;
            }
        });
        c.exports = h;
    }), define("aspen/sessionid", ["require", "exports", "module", "aspen/log"], function(a, b, c) {
        var d, e = a("aspen/log");
        c.exports = {
            set: function(a) {
                return d ? (e.debug("sessionId is already '" + d + "'; will NOT set to '" + a + "'"), void 0) : (e.debug("setting sessionId to '" + a + "'"), d = a, void 0);
            },
            get: function() {
                return e.debug("retreiving ID '" + d + "'"), d;
            }
        };
    }), define("aspen/sessiontoken", ["require", "exports", "module", "cvp/utils", "aspen/log"], function(a, b, c) {
        var d = a("cvp/utils"), e = a("aspen/log"), f = d.getQueryParam("sessionToken");
        c.exports = {
            create: function() {
                return d.randomString(25);
            },
            read: function() {
                return f || (e.debug("sessionToken does not exist; creating anew"), f = this.create()), e.debug("retreiving sessionToken '" + f + "'"), f;
            }
        };
    }), define("aspen/core", ["require", "exports", "module", "core/app", "cvp/utils", "cvp/customevent", "cvp/events", "JSON", "aspen/log", "aspen/batchservice", "aspen/configfile", "aspen/transportmanager", "aspen/sessionid", "aspen/sessiontoken"], function(a, b, c) {
        var d = a("core/app"), e = a("cvp/utils"), f = a("cvp/customevent"), g = a("cvp/events"), h = a("JSON"), i = a("aspen/log"), j = a("aspen/batchservice"), k = a("aspen/configfile"), l = a("aspen/transportmanager"), m = a("aspen/sessionid"), n = a("aspen/sessiontoken"), o = d.CDN_ORIGIN + "/xslo/cvp/config/", p = {
            WAITING: "loadStateWaiting",
            LOADING: "loadStateLoading",
            READY: "loadStateReady",
            FAILED: "loadStateFailed"
        }, q = function(a) {
            var b=!0, c = {
                applicationName: "cvp",
                applicationVersion: d.VERSION,
                platformName: "javascript",
                platformVersion: void 0
            };
            return "object" == typeof a && ("aspenAppSignature" in a && (c = e.extend({}, c, a.aspenAppSignature)), "useSharedSessionToken" in a && (b=!!a.useSharedSessionToken)), {
                initialized: !1,
                ready: !1,
                config: {},
                batchService: null,
                sessionObject: {},
                serviceUrlRoot: "",
                isThrottled: !0,
                timeDifference: 0,
                progressReportInterval: 30,
                _throttledTimeRecord: {},
                _retryTimer: null,
                _retries: 0,
                _retriesMade: 0,
                _retryTime: 0,
                _savedSession: {},
                _messageQueue: [],
                _loadState: p.WAITING,
                _configLoaded: !1,
                _dependenciesLoaded: !1,
                eInitSuccess: new f("AspenInitSuccess"),
                eInitFailure: new f("AspenInitFailure"),
                init: function(a) {
                    var b = this;
                    return this.initialized ? (i.warn("Aspen is already set up!"), void 0) : (this._helloRetry = e.bind(this._helloRetry, this), this.initialized=!0, this._options = a || {}, this._options.site = this._options.site || d._cvpsetup && d._cvpsetup.site || "cvp", e.empty(this._options.site) ? (i.error("Unable to start Aspen, no site provided"), void 0) : (this.batchService = new j({
                        batchThrottled: !0,
                        postThrottled: !0
                    }, this), this._loadState = p.LOADING, g.onReady(function() {
                        var a = b._options.configBaseUrl || o + b._options.site, c = b._dependency = new k({
                            basePath: a
                        });
                        c.eSuccess.addListener(b._onConfigLoaded, b), c.eFailure.addListener(b._onConfigLoadFailure, b), c.load();
                    }), void 0));
                },
                _freeDependency: function() {
                    this._dependency && (this._dependency.eSuccess.removeListener(this._onConfigLoaded, this), this._dependency.eFailure.removeListener(this._onConfigLoadFailure, this), this._dependency = null);
                },
                dispose: function() {
                    this._freeDependency(), clearTimeout(this._retryTimer), this.batchService.dispose();
                },
                _setupConfig: function(a, b) {
                    var c = e.extend({}, a["default"], "context" in this._options ? a[this._options.context] : null);
                    c.enabled = "true" === c.enabled&&!e.empty(c.servicesUrl), c.batchMode = c.batchMode || "total", c.batchModeAmount = c.batchModeAmount && Number(c.batchModeAmount) || 10, c.helloRetryCount = isNaN(c.helloRetryCount = Number(c.helloRetryCount)) ? 5 : c.helloRetryCount, c.helloRetryTime = c.helloRetryTime && Number(c.helloRetryTime) || 10000, c.batchContentEncoding = c.batchContentEncoding || "json", c.transportFormats = c.transportFormats && c.transportFormats.split(/[, ]+/) || l.getDefaultFormats(), i.debug("enabled: ", c.enabled), i.debug("servicesUrl: ", c.servicesUrl), i.debug("batchMode: ", c.batchMode), i.debug("batchModeAmount: ", c.batchModeAmount), i.debug("helloRetryCount: ", c.helloRetryCount), i.debug("helloRetryTime: ", c.helloRetryTime), i.debug("batchContentEncoding: ", c.batchContentEncoding), i.debug("transportFormats: ", c.transportFormats), this.config = c, this.configSourceUrl = b, this.send(this.config, "aspenConfigDetails");
                },
                getConfig: function(a) {
                    return a in this.config ? this.config[a] : void 0;
                },
                _onConfigLoaded: function(a, b) {
                    this._freeDependency(), this._setupConfig(a, b), this._loadState = p.READY, i.log("_onConfigLoaded - config successfully loaded"), this.config.enabled ? (i.log("analytics enabled via config"), l.init({
                        transportFormats: this.config.transportFormats,
                        servicesUrl: this.config.servicesUrl
                    }), this.serviceUrlRoot = this.config.servicesUrl, this._hello()) : (i.log("analytics disabled via config"), this._initFailure());
                },
                _onConfigLoadFailure: function(a) {
                    this._freeDependency(), this._loadState = p.FAILED, i.log("_onConfigLoadFailure - failed to load " + a);
                },
                _hello: function() {
                    i.log("hello");
                    var a = m.get(), d = b ? n.read(): n.create(), f = e.extend({}, c, {
                        aspenConfigUrl: this.configSourceUrl,
                        propertyName: this._options.site,
                        pageUrl: document.URL,
                        context: this._options.context,
                        debug: this._options.dt ? "true": "false",
                        sessionId: a,
                        sessionToken: d,
                        protocol: "1.0"
                    });
                    l.bootstrapTM(), l.createRequest(this.config.helloApi, f, this._helloSuccess, this._helloFailure, this), this._retryTimer = setTimeout(this._helloRetry, this.config.helloRetryTime), this._isRetrying=!0;
                },
                _helloSuccess: function(a) {
                    i.log("_helloSuccess"), clearTimeout(this._retryTimer), this.isThrottled = e.isString(a.throttled) ? "no" !== a.throttled : this.isThrottled, this.timeDifference = a.timestamp ? a.timestamp - e.now() : this.timeDifference, this.progressReportInterval = a.progressReportInterval || this.progressReportInterval, i.debug("config.throttled: " + a.throttled), i.debug("config.sessionId: " + a.sessionId), i.debug("throttled: " + this.isThrottled), i.debug("timeDifference: " + this.timeDifference), i.debug("progressReportInterval: " + this.progressReportInterval), a.sessionId && m.set(a.sessionId), this.batchService.start({
                        batchThrottled: !1,
                        postThrottled: !0,
                        sessionId: ""
                    }), this.batchService.setSessionId(m.get()), this.batchService.setPostThrottled(this.isThrottled);
                    var b = e.getQueryParam("sessionToken");
                    b && this.send({}, "authSessionReload"), this._initSuccess();
                },
                _helloFailure: function(a) {
                    i.log("_helloFailure url: " + a), l.fallback() && this._hello();
                },
                _helloRetry: function() {
                    i.log("helloRetry"), this._retries === this.config.helloRetryCount ? (i.log("retries exhasted"), clearTimeout(this._retryTimer), this._retries = 0, l.fallback() ? this._hello() : (i.debug("retries exhasted, fallbacks exhausted, aspen is disabled"), this.isThrottled=!0, this.batchService.setBatchThrottled(!0), this.batchService.setPostThrottled(!0), this.batchService.disableTimer())) : (this._retries += 1, this._retryTime = this._retries * this.config.helloRetryTime, this._savedSession.retries = this._retries, this._savedSession.retryTime = this._retryTime, this._hello());
                },
                isMessageExcluded: function(a) {
                    return e.isString(this.config.messageExcludes)&&-1 !== this.config.messageExcludes.indexOf(a);
                },
                send: function(a, b) {
                    return this.disabled ? (i.debug("send - Aspen is disabled, message was not sent"), void 0) : (a.timestamp = (a.timestamp || e.now()) + this.timeDifference, this.ready ? this.isThrottled ? (i.debug("Add message to batch is throttled! Message not added."), void 0) : this.isMessageExcluded(b) ? (i.debug("message excluded by config, not added to batch", b), void 0) : (this._send(a, b), void 0) : (i.debug("send - Aspen's not ready, queuing message"), this._messageQueue.push({
                        message: a,
                        type: b
                    }), void 0));
                },
                _send: function(a, b) {
                    switch (b) {
                    case"appConfig":
                        a = e.extend({}, c, a), a.aspenConfigUrl = this.configSourceUrl;
                        break;
                    case"contentProgress":
                        if (this._throttledTimeRecord.contentProgress && a.timestamp < this._throttledTimeRecord.contentProgress + 1000 * this.progressReportInterval) {
                            return;
                        }
                        this._throttledTimeRecord.contentProgress = a.timestamp;
                    }
                    "applicationName" in c&&!("applicationName" in a) && (a.applicationName = c.applicationName);
                    var d = {};
                    d.eventType = b, d.eventData = a, i.log("add to batch json message: " + h.stringify(d)), this.batchService.add(d);
                },
                _initSuccess: function() {
                    i.log("Successful init"), this.ready=!0;
                    for (var a = 0, b = this._messageQueue.length; b > a; ++a) {
                        this.send(this._messageQueue[a].message, this._messageQueue[a].type);
                    }
                    this._messageQueue.length = 0, this.send({
                        screenWidth: screen.width,
                        screenHeight: screen.height,
                        browserName: navigator.appName,
                        userAgent: navigator.userAgent,
                        platform: navigator.platform
                    }, "systemInfo"), this._initSuccess = function() {}, this.eInitSuccess.dispatch();
                },
                _initFailure: function() {
                    i.log("Failed init"), this.disabled=!0, this.eInitFailure.dispatch();
                }
            };
        };
        c.exports = q;
    }), define("aspen/aspen", ["require", "exports", "module", "aspen/core", "aspen/sessiontoken"], function(a, b, c) {
        var d = a("aspen/core"), e = a("aspen/sessiontoken"), f = d();
        f.createInstance = d, f.getSessionToken = function() {
            return e.read();
        }, c.exports = f;
    }), define("html5/aspencontroller", ["require", "exports", "module", "aspen/aspen", "cvp/utils", "cvp/customevent", "cvp/log"], function(a, b, c) {
        function d(a, b) {
            m("AspenController - send", arguments), h.send(b, a);
        }
        function e(a) {
            function b(a) {
                this.getConfig = function(b) {
                    return a.getConfig(b);
                }, this.eInitSuccess.dispatch();
            }
            m("AspenController - init", arguments), l || (l=!0, h.eInitSuccess.addListener(i.bind(b, this, h)), h.init(a));
        }
        function f() {
            return l;
        }
        function g() {}
        var h = a("aspen/aspen"), i = a("cvp/utils"), j = a("cvp/customevent"), k = a("cvp/log"), l=!1, m = k.getLogger().log;
        c.exports = {
            videoCount: 0,
            eInitSuccess: new j,
            isReady: f,
            getConfig: g,
            send: d,
            init: e
        };
    }), define("html5/contententry", ["require", "exports", "module", "Class", "cvp/utils", "cvp/utils/xml", "cvp/log"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/utils"), f = a("cvp/utils/xml"), g = a("cvp/log"), h = g.getLogger(), i = ["flv"], j = d.extend({
            init: function(a) {
                var b, c, d, g, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y;
                if (this._xmlEntry = a.documentElement, this._requestId = null, this._mediaUrl = "", this._name = f.getNodeValue(this._xmlEntry, "slug"), this._title = f.getNodeValue(this._xmlEntry, "headline"), this._category = f.getNodeValue(this._xmlEntry, "category"), this._trt =+ f.getNodeValue(this._xmlEntry, "trt"), b = this._xmlEntry.getElementsByTagName("files"), b.length) {
                    for (b = f.getChildElements(b[0]), this._fileList = {}, k = 0, l = b.length; l > k; ++k) {
                        c = b[k], "file" === c.nodeName && (d = f.getAttribute(c, "key") || f.getAttribute(c, "bitrate"), g = f.getAttribute(c, "fallback"), j = f.getNodeValue(c), j ? (m = "", y = e.parseUrl(this.sanitizeUrl(j)), y && (t = y.file.lastIndexOf("."), - 1 !== t && (m = y.file.substring(t + 1))), h.debug("ContentCatalogEntry", d, j, m), - 1 === e.indexOf(i, m) ? this._fileList[d] = {
                            url: j,
                            fallback: g,
                            ext: m
                        } : h.info("Ignoring " + j + " because extention '" + m + "' is unsupported.")) : h.info("Ignoring file key/bitrate '" + d + "' because it has no text() -- no URL!"));
                    }
                } else {
                    h.warn("ContentCatalogEntry", "No file entries found!");
                }
                if (n = this._xmlEntry.getElementsByTagName("images"), n.length) {
                    for (n = f.getChildElements(n[0]), this._imageList = {}, k = 0, l = n.length; l > k; ++k) {
                        o = n[k], p = f.getAttribute(o, "width"), q = f.getAttribute(o, "height"), s = f.getNodeValue(o), h.debug("ContentCatalogEntry", "images", p, q, s), r = p + "|" + q, this._imageList[r] = {
                            url: s,
                            width: p,
                            height: q
                        };
                    }
                }
                if (u = this._xmlEntry.getElementsByTagName("ads"), u.length) {
                    for (u = f.getChildElements(u[0]), this._adList = {}, k = 0, l = u.length; l > k; ++k) {
                        v = u[k], w = f.getAttribute(v, "type"), x = f.getNodeValue(v), h.debug("ContentCatalogEntry", "ad", w, x), this._adList[w] = {
                            url: x
                        };
                    }
                }
            },
            hasFiles: function() {
                return !e.empty(this._fileList);
            },
            setMediaUrl: function(a) {
                this._mediaUrl = a;
            },
            getMediaUrl: function() {
                return this._mediaUrl;
            },
            getId: function() {
                var a = f.getAttribute(this._xmlEntry, "id");
                return e.empty(a) ? this._requestId : a;
            },
            getName: function() {
                return this._name;
            },
            getTitle: function() {
                return this._title;
            },
            getCategory: function() {
                return this._category;
            },
            getTrt: function() {
                return this._trt;
            },
            isAdSensitive: function() {
                var a = f.getNodeValue(this._xmlEntry, "isAdSensitive");
                return e.isFlagActive(a, !1);
            },
            getSource: function() {
                var a = f.getAttribute(this._xmlEntry, "source");
                return a || void 0;
            },
            getOriginId: function() {
                var a = f.getAttribute(this._xmlEntry, "originId");
                return a || void 0;
            },
            getMode: function() {
                var a = f.getAttribute(this._xmlEntry, "isLive");
                return e.empty(a) ? "vod" : "live";
            },
            isLive: function() {
                return "live" === this.getMode();
            },
            sanitizeUrl: function(a) {
                return a ? (e.isRelative(a) && (a = this._mediaUrl + a), this.token && e.augmentQueryString(a, {
                    hdnea: this.token
                }), a) : a;
            },
            getAllFiles: function() {
                var a = {};
                return e.each(this._fileList, function(b, c) {
                    a[b] = e.extend({}, c);
                }), a;
            },
            getContentUrl: function(a) {
                var b, c = null, d=!1;
                for (b in this._fileList) {
                    if (b === a) {
                        c = this.sanitizeUrl(this._fileList[b].url), d=!0;
                        break;
                    }
                }
                return d ? e.empty(c) && h.warn("text attribute is empty in the video XML for the <file> node whose quality is '" + a + "'.") : h.warn("Config XML specifies a '" + a + "' bitrate entry, but there is no <file> node in video XML where bitrate attribute is '" + a + "'."), c;
            },
            getContentUrlsForExtension: function(a) {
                var b = [];
                return e.each(this._fileList, function(c, d) {
                    d.ext === a && b.push(this.sanitizeUrl(d.url));
                }, this), b;
            },
            getContentUrlsByExtensions: function(a) {
                var b = [];
                return e.each(a, function(a) {
                    var c = this.getContentUrlsForExtension(a);
                    b.push.apply(b, c);
                }, this), b;
            },
            getContentUrlsByFileKeys: function(a) {
                return e.map(a, this.getContentUrl, this);
            },
            getContentUrlFromFallback: function(a) {
                var b = null, c = null, d = "";
                for (d in this._fileList) {
                    if (c = this._fileList[d], !e.empty(c.fallback) && a === c.fallback) {
                        b = this.sanitizeUrl(c.url);
                        break;
                    }
                }
                return b;
            },
            getContentUrlFromType: function(a) {
                var b, c = null, d = null;
                for (b in this._fileList) {
                    if (d = this._fileList[b], a === d.ext) {
                        c = this.sanitizeUrl(d.url);
                        break;
                    }
                }
                return c;
            },
            getThumbnailUrl: function(a, b) {
                var c, d = null, e = a + "|" + b;
                for (c in this._imageList) {
                    if (c === e) {
                        d = this._imageList[c].url;
                        break;
                    }
                }
                return d;
            },
            getImageForDimensions: function(a, b) {
                function c(c) {
                    var d = {};
                    return d.url = c.url, d.width = Number(c.width) || 1, d.height = Number(c.height) || 1, d.ratio = d.width / d.height, d.absDeltaWidth = Math.abs(a - d.width), d.absDeltaHeight = Math.abs(b - d.height), d.absDeltaRatio = Math.abs(f - d.ratio), d;
                }
                if (h.log("getImageForDimensions", a, b), e.isEmpty(this._imageList)) {
                    return h.log("getImageForDimensions", "No images!"), null;
                }
                var d = this.getThumbnailUrl(a, b);
                if (d) {
                    return h.log("getImageForDimensions", "Found exact match!"), d;
                }
                var f = a / b, g = [];
                if (e.each(this._imageList, function(a, b) {
                    g.push(c(b));
                }), g.length < 2) {
                    return g[0].url;
                }
                var i = g.sort(this._compareAbsDeltaWidth), j = i[0];
                h.debug("getImageForDimensions", "closest by width", j);
                var k = i.sort(this._compareAbsDeltaHeight), l = k[0];
                h.debug("getImageForDimensions", "closest by height", l);
                var m;
                if (j === l) {
                    h.debug("getImageForDimensions", "found an obvious winner (closest by width AND height)"), m = j;
                } else {
                    var n = [j, l].sort(this._compareAbsDeltaRatio);
                    h.debug("getImageForDimensions", "comparing closest-by-width and closest-by-height to find the closest in aspect ratio", j, l), m = n[0];
                }
                return h.debug("getImageForDimensions", "winner", m), m.url;
            },
            _compareAbsDeltaWidth: function(a, b) {
                return a.absDeltaWidth - b.absDeltaWidth;
            },
            _compareAbsDeltaHeight: function(a, b) {
                return a.absDeltaHeight - b.absDeltaHeight;
            },
            _compareAbsDeltaRatio: function(a, b) {
                return a.absDeltaRatio - b.absDeltaRatio;
            },
            getAdUrl: function(a) {
                return this._adList && this._adList[a] && this._adList[a].url || null;
            },
            getXML: function() {
                return this._xmlEntry;
            }
        });
        c.exports = j;
    }), define("html5/fakecontententry", ["require", "exports", "module", "html5/contententry", "cvp/utils", "cvp/utils/xml"], function(a, b, c) {
        var d = a("html5/contententry"), e = a("cvp/utils"), f = a("cvp/utils/xml"), g = d.extend({
            init: function(a) {
                var b = null, c = "", d = a.id || a.url;
                if (e.isString(a.url) && (b = a.url), e.isObject(a.metadata)) {
                    for (var g in a.metadata) {
                        "files" === g && b || (c += "<" + g + ">" + a.metadata[g] + "</" + g + ">");
                    }
                }
                b && (c += "<files><file>" + b + "</file></files>");
                var h = "<video id='" + d + "'> " + c + "</video>", i = f.stringToDoc(h);
                this._super(i);
            }
        });
        c.exports = g;
    }), define("html5/cms", ["require", "exports", "module", "core/app", "Class", "cvp/customevent", "html5/contententry", "html5/fakecontententry", "cvp/request", "cvp/utils"], function(a, b, c) {
        var d = a("core/app"), e = a("Class"), f = a("cvp/customevent"), g = a("html5/contententry"), h = a("html5/fakecontententry"), i = a("cvp/request"), j = a("cvp/utils"), k = e.extend({
            init: function() {
                this._catalogDataURL = "", this._mediaUrl = "", this._requestPendingQueue = [], this._requestInProgress=!1, this._videoCatalog = [], this._requests = {}, this._objectMap = {}, this._onContentIdRequestComplete = j.bind(this._onContentIdRequestComplete, this), this._onContentIdRequestIOError = j.bind(this._onContentIdRequestIOError, this), this._requestCleanup = j.bind(this._requestCleanup, this), this.eRequestCompleted = new f("CmsRequestCompletedEvent");
            },
            addContentId: function(a) {
                var b = this.getContentId(a);
                if (j.isNull(b)) {
                    this._requestPendingQueue.push(a);
                } else {
                    var c = a.split("|")[1];
                    a = a.split("|")[0], this._notifyListeners(a, a, c, "", "");
                }
                this._processNextRequest();
            },
            addContentObject: function(a, b) {
                var c = a.split("|"), e = c[0], f = (c[1], new h(b)), g = this._videoCatalog.length;
                f && f.hasFiles() ? (this._objectMap[a] = f, this._requestPendingQueue.push(a)) : this._notifyListeners(e, e, g, "Invalid data", d.ERROR_CMS_PARSE), this._processNextRequest();
            },
            getContentId: function(a) {
                a = a.split("|")[0];
                for (var b, c = 0, d = this._videoCatalog.length; d > c; ++c) {
                    if (b = this._videoCatalog[c], b.getId() === a) {
                        return b;
                    }
                }
                return null;
            },
            setDataUrl: function(a) {
                this._catalogDataURL = a;
            },
            setMediaUrl: function(a) {
                this._mediaUrl = a;
            },
            _getRequestUrl: function(a) {
                var b, c = this._catalogDataURL.substr(0).search(/\$\{/);
                if ( - 1 !== c) {
                    var d = this._catalogDataURL.substr(c).search(/\}/);
                    if ( - 1 !== d) {
                        var e = this._catalogDataURL.substr(c, d + 1);
                        b = this._catalogDataURL.replace(e, a);
                    }
                } else {
                    b = this._catalogDataURL + "/" + a + ".xml";
                }
                return b;
            },
            _createContentEntryFromRequestData: function(a, b) {
                try {
                    var c = new g(a);
                    return c.setMediaUrl(this._mediaUrl), c;
                } catch (d) {
                    alert(this._getRequestUrl(b) + ": " + d.message);
                }
                return null;
            },
            _processNextRequest: function() {
                if (!this._requestInProgress && this._requestPendingQueue.length) {
                    var a = this._requestPendingQueue[0];
                    if (a in this._objectMap) {
                        this._processVideoFromObject(a);
                    } else {
                        var b = a.split("|")[0];
                        this._requestVideoWithId(b);
                    }
                }
            },
            _requestVideoWithId: function(a) {
                var b = this._getRequestUrl(a), c = i.getXML({
                    url: b
                });
                this._requestInProgress=!0, c.then(this._onContentIdRequestComplete, this._onContentIdRequestIOError).ensure(this._requestCleanup);
            },
            _requestCleanup: function() {
                this._requestInProgress=!1, this._requestPendingQueue.shift(), this._processNextRequest();
            },
            _onContentIdRequestComplete: function(a) {
                var b = this._requestPendingQueue[0].split("|"), c = b[0], e = b[1];
                if (a) {
                    var f = this._createContentEntryFromRequestData(a, c);
                    f && f.hasFiles() ? (f.requestId = c, this._videoCatalog.push(f), this._notifyListeners(f.getId(), f.requestId, e, "", "")) : this._notifyListeners(c, c, e, "Invalid data", d.ERROR_CMS_PARSE);
                } else {
                    this._notifyListeners(c, c, e, "No data", d.ERROR_CMS_PARSE);
                }
            },
            _onContentIdRequestIOError: function(a) {
                var b = this._requestPendingQueue[0].split("|"), c = b[0], e = b[1];
                this._notifyListeners(c, c, e, "IOError : " + a, d.ERROR_CMS_IO);
            },
            _processVideoFromObject: function(a) {
                var b = this._objectMap[a], c = a.split("|"), d = c[0], e = c[1];
                b.requestId = d, b.setMediaUrl(this._mediaUrl), this._videoCatalog.push(b), this._notifyListeners(d, b.requestId, e, "", ""), this._requestCleanup();
            },
            _notifyListeners: function(a, b, c, d, e) {
                this.eRequestCompleted.dispatch(a, b, c, d, e);
            }
        });
        c.exports = k;
    }), define("cvp/utils/conditionaltask", ["require", "exports", "module", "cvp/utils", "cvp/log"], function(a, b, c) {
        var d = a("cvp/utils"), e = a("cvp/log"), f = e.getLogger(), g = function(a, b, c) {
            this._interval = d.isNull(c) ? 10 : c, this._maxTries = 500, this._condition = a, this._success = b, this._tries = 0, this.conditionWrapper = d.bind(function() {
                var a = this._condition();
                a ? (window.clearInterval(this._timer), this._success()) : this._tries > this._maxTries && (f.warn("condition never met!"), window.clearInterval(this._timer)), ++this._tries;
            }, this), this.start = function() {
                this._timer = window.setInterval(this.conditionWrapper, this._interval);
            };
        };
        c.exports = g;
    }), define("html5/player/baseplayer", ["require", "exports", "module", "Class", "cvp/browser", "cvp/customevent", "cvp/utils", "cvp/utils/conditionaltask", "cvp/log"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/browser"), f = a("cvp/customevent"), g = a("cvp/utils"), h = a("cvp/utils/conditionaltask"), i = a("cvp/log"), j = i.getLogger(), k = d.extend({
            init: function(a) {
                if (this._config = a.config, this.options = g.extend({
                    containerElement: "",
                    elementId: "",
                    controls: !0,
                    width: 0,
                    height: 0
                }, a), this.containerElement = g.byId(this.options.containerElement), this.elementId = this.options.elementId, g.empty(this.elementId)) {
                    throw j.error("Invalid element id...exiting"), new Error("Invalid element id");
                }
                this.playerOptions = {}, this.width = this.options.width, this.height = this.options.height, this.airplay = e.isOS(e.IOS) ||!g.undef(this._config.params.iosAirplay)&&!g.undef(this._config.configInfo.iosAirplay) ? 'x-webkit-airplay="allow"' : "", this.element = null, this.rendering=!1, this.position = {
                    top: null,
                    right: null,
                    bottom: null,
                    left: null
                }, this.eRendered = new f, this.eContentMetadata = new f, this.eContentPlay = new f, this.eContentPause = new f, this.eContentEnd = new f, this.eContentPlayhead = new f, this.eContentBuffering = new f, this.eContentVolume = new f, this.eContentError = new f, this.eContentResize = new f, this.eContentSeek = new f, this.eContentSeekEnd = new f, this.eFullscreenChange = new f, this.eFullscreenError = new f, this.ePlayerMuted = new f, this.ePlayerPaused = new f, this.ePlayerStopped = new f;
            },
            getMarkup: function() {
                return "";
            },
            render: function(a) {
                if (j.debug("Player", "render"), g.empty(a) || (this.containerElement = g.byId(a)), g.isNull(this.containerElement)) {
                    throw j.error("Container element could not be found...cannot render...exiting"), new Error("Container could not be found");
                }
                var b = this.getMarkup();
                this.rendering=!0, this.containerElement.innerHTML = b;
                var c = this;
                new h(function() {
                    return !g.isNull(g.byId(c.elementId));
                }, function() {
                    c.rendering=!1, c.element = g.byId(c.elementId), c.fireRendered();
                }).start();
            },
            rendered: function() {
                return this.element && this.element.parentNode === this.containerElement;
            },
            show: function() {
                this.element && this.position.left && (this.element.style.left = this.position.left);
            },
            hide: function() {
                this.element && (this.position.left = this.element.style.left, this.element.style.left = "-5000px");
            },
            remove: function() {
                if (j.debug("Player", "remove"), g.isNull(this.containerElement)) {
                    throw j.error("Container element could not be found .. cannot remove"), new Error("Container element could not be found");
                }
                var a = g.byId(this.elementId);
                if (a) {
                    for (; a.firstChild;) {
                        a.removeChild(a.firstChild);
                    }
                    a.parentNode && a.parentNode.removeChild(a);
                }
            },
            dispose: function() {
                this.removePlayerListeners(), this.remove();
            },
            addPlayerListeners: function() {},
            removePlayerListeners: function() {},
            fireRendered: function() {
                this.eRendered.dispatch();
            },
            getContentId: function() {
                return this._catalogEntry ? this._catalogEntry.getId() : "";
            },
            firePlay: function() {
                this.eContentPlay.dispatch(this.getContentId(), "");
            },
            fireEnded: function() {
                this.eContentEnd.dispatch(this.getContentId());
            }
        });
        c.exports = k;
    }), define("cvp/utils/configutils", ["require", "exports", "module", "cvp/utils", "cvp/utils/xml"], function(a, b) {
        function c(a, b, c) {
            var d, e = this.getReplacementPatterns(a), g = 0, h = 0, i = "";
            if (!f.empty(e)) {
                for (h = e.length; h > g; ++g) {
                    d = e[g], i = "", i = this.getReplacementText(d, b), f.empty(i) ? i = "" : c && (i = encodeURI(i)), a = a.replace(d, i);
                }
            }
            return a;
        }
        function d(a) {
            return a && a.match(/[$][{][^}]*[}]/g);
        }
        function e(a, b) {
            var c = "", d = "", e = [], f = "";
            switch (a) {
            case"${page.domain}":
                c = document.domain;
                break;
            case"${page.url}":
                c = location.href;
                break;
            case"${videoId}":
            case"${video.id}":
                b && (c = b.getId());
                break;
            default:
                if (d = a.substr(2, a.length - 3), e = d.split("."), f = e[0], e.length > 1) {
                    switch (d = d.substr(f.length + 1), f) {
                    case"video":
                        b && (c = g.getNodeValue(b._xmlEntry, d));
                        break;
                    case"javascript":
                        window.cvpSearchTheClient && (c = window.cvpSearchTheClient(null, d));
                        break;
                    default:
                        c = a;
                    }
                } else {
                    c = a;
                }
            }
            return c;
        }
        var f = a("cvp/utils"), g = a("cvp/utils/xml");
        b.stringReplace = c, b.getReplacementPatterns = d, b.getReplacementText = e;
    }), define("html5/player/fileselection", ["require", "exports", "module", "Class", "cvp/utils", "cvp/utils/configutils", "cvp/browser", "cvp/utils/jsonconverter", "JSON", "cvp/log"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/utils"), f = a("cvp/utils/configutils"), g = a("cvp/browser"), h = a("cvp/utils/jsonconverter"), i = (a("JSON"), a("cvp/log")), j = i.getLogger("FileSelection"), k = function(a) {
            return a = a || {}, a.hasOwnProperty("key") ? a.key : a.hasOwnProperty("bitrate") ? a.bitrate : void 0;
        }, l = function(a) {
            var b = k(a);
            return q.availableFiles.hasOwnProperty(b) ? q.availableFiles[b].ext : "";
        }, m = function(a, b) {
            return function(c) {
                return c.hasOwnProperty(a) ? c[a] === b : !1;
            };
        }, n = function(a, b) {
            return function(c) {
                return c && c.hasOwnProperty(a) ? c[a] : b;
            };
        }, o = n("url", ""), p = n("text", ""), q = {
            config: {},
            supportedFileTypes: [],
            selectedFileKeys: [],
            fallbackFileTypes: ["m3u8", "mp4"],
            availableFiles: {},
            availableFileKeys: [],
            availableFileUrls: [],
            contentEntryObj: {},
            contentEntryFiles: []
        }, r = d.extend({
            canExecute: function() {
                var a = q.config.params;
                return a.hasOwnProperty("fileSelection") || a.hasOwnProperty("perVideoFallbacks");
            },
            execute: function(a) {
                var b, c = q.config.params;
                return c.hasOwnProperty("fileSelection") ? b = this._getPageFileSelection(a) : c.hasOwnProperty("perVideoFallbacks") && (b = this._getFileByParameterFallback(a)), e.isString(b) && (b = [b]), e.isArray(b) && (e.each(b, function(a) {
                    - 1 === e.indexOf(q.availableFileUrls, a) && j.warn("Potentially invalid url: " + a);
                }), b = e.map(b, function(b) {
                    return a.sanitizeUrl(b);
                })), b;
            },
            _getPageFileSelection: function() {
                j.debug("Using page selection via 'fileSelection'");
                var a = q.config.params.fileSelection || null;
                if (!a) {
                    return !1;
                }
                var b = {
                    _makeList: function(a) {
                        return e.isString(a) && (a = a.split(",")), e.isArray(a) ? a.map(function(a) {
                            return e.trim(a);
                        }) : [];
                    },
                    filterBy: function(a, b, c) {
                        var d = e.isFunc(b) ? b: m(b, c);
                        return e.filter(a, d);
                    },
                    filterByDimension: function(a, b, c) {
                        return this.filterBy(a, function(a) {
                            return a.width === b && a.height === c;
                        });
                    },
                    filterByKey: function(a, b) {
                        return b = this._makeList(b), this.filterBy(a, function(a) {
                            return e.indexOf(b, k(a))>-1;
                        });
                    },
                    filterByExtension: function(a, b) {
                        return b = this._makeList(b), this.filterBy(a, function(a) {
                            return e.indexOf(b, l(a))>-1;
                        });
                    }
                }, c = a.call(b, q.contentEntryFiles, q.contentEntryObj);
                return e.isArray(c) ? c.map(p) : c;
            },
            _getFileByParameterFallback: function(a) {
                j.debug("Using page selection via 'perVideoFallbacks'");
                var b = q.config.params.perVideoFallbacks || [];
                if (!b) {
                    return !1;
                }
                for (var c, d, e = 0, g = b.length; g > e; ++e) {
                    if (c = b[e], d = f.stringReplace(c.criteria, a, !1), c.evaluate(d)) {
                        return f.stringReplace(c.filter, a, !1);
                    }
                }
                return null;
            }
        }), s = d.extend({
            canExecute: function() {
                return !0;
            },
            execute: function(a) {
                var b = [];
                if (q.selectedFileKeys.length || q.supportedFileTypes.length) {
                    j.debug("Using config file key selection: " + q.selectedFileKeys), j.debug("Using config file type selection: " + q.supportedFileTypes);
                    var c = a.getContentUrlsByFileKeys(q.selectedFileKeys), d = a.getContentUrlsByExtensions(q.supportedFileTypes);
                    j.debug("fileKeyUrls:", c), j.debug("fileTypeUrls:", d), c && c.length && b.push.apply(b, c), d && d.length && b.push.apply(b, d);
                } else {
                    j.debug("Using config legacy selection");
                    var e = this._getFileByFallback(a), f = this._getFileByConfigFallbackParam(a), g = a.getContentUrlsByExtensions(q.fallbackFileTypes);
                    j.debug("iOSFallbackUrl:", e), j.debug("configFallbackUrl:", f), j.debug("defaultUrls:", g), e && b.push(e), f && b.push(f), g && g.length && b.push.apply(b, g);
                }
                return b;
            },
            _getFileByConfigFallbackParam: function(a) {
                var b = q.config.configInfo.fallbackFilenameIOS;
                return e.empty(b) ? b : b = f.stringReplace(b, a, !1);
            },
            _getFileByFallback: function(a) {
                return g.isOS(g.IOS) ? a.getContentUrlFromFallback("iOS") : void 0;
            }
        }), t = d.extend({
            init: function(a) {
                q.config = a;
                var b = /\W+/, c = q.config.configInfo;
                q.supportedFileTypes = e.uniq(e.filter(c.html5Types.split(b))), q.selectedFileKeys = e.uniq(e.filter(c.html5Order.split(b))), this._pageSelection = new r, this._configSelection = new s;
            },
            getPlaylistForEntry: function(a) {
                this._setState(a);
                var b = [], c = this._pageSelection.canExecute(), d = null, f = this._configSelection.canExecute(), g = null;
                return c && (d = this._pageSelection.execute(a)), c && e.isArray(d) ? b = b.concat(d) : c && d!==!0 && null !== d && void 0 !== d || f && (g = this._configSelection.execute(a), e.isArray(g) && (b = b.concat(g))), b = e.uniq(e.filter(b));
            },
            _setState: function(a) {
                q.availableFiles = a.getAllFiles(), q.availableFileKeys = e.keys(q.availableFiles), q.availableFileUrls = e.map(q.availableFileKeys, function(a, b, c) {
                    return o(q.availableFiles[a], b, c);
                });
                var b = h.xmlToObject(a.getXML());
                q.contentEntryObj = b;
                var c = [];
                e.filter(b.files, function(a) {
                    var b = a.file, d = k(b);
                    q.availableFiles.hasOwnProperty(d) && b.text === q.availableFiles[d].url && c.push(b);
                }), q.contentEntryFiles = c;
            }
        });
        c.exports = t;
    }), define("html5/player/videoplayer", ["require", "exports", "module", "html5/player/baseplayer", "html5/player/fileselection", "core/app", "cvp/browser", "cvp/static", "cvp/utils", "cvp/log", "cvp/customevent"], function(a, b, c) {
        var d = a("html5/player/baseplayer"), e = a("html5/player/fileselection"), f = a("core/app"), g = a("cvp/browser"), h = a("cvp/static"), i = a("cvp/utils"), j = a("cvp/log"), k = a("cvp/customevent"), l = j.getLogger("VideoPlayer"), m = function() {
            function a() {
                this._seekStartPlayhead = null, this._seekStartTime = null, this._seekEndTimer = null, this._handleTimeupdate = i.bind(this._handleTimeupdate, this), this._handleSeeking = i.bind(this._handleSeeking, this), this._handleSeeked = i.bind(this._handleSeeked, this), this.emitSeeking = i.bind(this.emitSeeking, this), this.emitSeeked = i.bind(this.emitSeeked, this), this.onSeeking = new k("seeking"), this.onSeeked = new k("seeked");
            }
            var b = j.getLogger("SeekingMonitor"), c = 250, d = c / 1000, e = 400, f = 1, g = 1000, h=!1;
            return a.prototype = {
                setup: function(a) {
                    b.log("setup"), this.element = a, this._lastPlayhead = 0, this._lastNonSeekingPlayhead = 0, this._isSeeking=!1, this.element.addEventListener("timeupdate", this._handleTimeupdate, !1), this.element.addEventListener("seeking", this._handleSeeking, !1), this.element.addEventListener("seeked", this._handleSeeked, !1);
                },
                teardown: function() {
                    b.log("teardown"), this.element && (this.element.removeEventListener("timeupdate", this._handleTimeupdate), this.element.removeEventListener("seeking", this._handleSeeking), this.element.removeEventListener("seeked", this._handleSeeked));
                },
                _resetSeekEndTimer: function() {
                    this._seekEndTimer && window.clearTimeout(this._seekEndTimer), this._seekEndTimer = window.setTimeout(this.emitSeeked, g);
                },
                _handleTimeupdate: function() {
                    var a = i.now(), b = this._lastPlayheadTime || (this._lastPlayheadTime = a), d = a - b, e = this.element.currentTime;
                    c > d || (h || this._inferSeekFromTimeupdate(e, d), this._isSeeking || (this._lastNonSeekingPlayhead = e, this._lastNonSeekingPlayheadTime = a)), this._lastPlayhead = e, this._lastPlayheadTime = a;
                },
                _inferSeekFromTimeupdate: function(a, b) {
                    var c = this._lastPlayhead, e = Math.abs(a - c), f = Math.abs(this.element.playbackRate || 1) * b / 1000;
                    e > f + d && this._determineSeeking();
                },
                _canEmitSeeking: function() {
                    return i.now() - this._seekStartTime > e && Math.abs(this.element.currentTime - this._seekStartPlayhead) > f;
                },
                _determineSeeking: function() {
                    var a=!1;
                    i.isNull(this._seekStartPlayhead) && (a=!0, this._seekStartPlayhead = this._lastNonSeekingPlayhead, this._seekStartTime = this._lastNonSeekingPlayheadTime), (a || this._canEmitSeeking()) && this.emitSeeking(), this._resetSeekEndTimer();
                },
                _handleSeeking: function() {
                    h || (h=!0);
                    var a = i.now(), b = this._lastSeekingPlayheadTime || (this._lastSeekingPlayheadTime = a), d = a - b;
                    if (!(c > d)) {
                        var e = this.element.currentTime;
                        this._determineSeeking(), this._lastSeekingPlayhead = e, this._lastSeekingPlayheadTime = a;
                    }
                },
                _handleSeeked: function() {
                    this._resetSeekEndTimer();
                },
                emitSeeking: function() {
                    var a = this._seekStartPlayhead, c = this.element.currentTime, d = this.element.duration;
                    b.log("emitSeeking", a, c, d), this._isSeeking=!0, this.onSeeking.dispatch(a, c, d);
                },
                emitSeeked: function() {
                    var a = this._seekStartPlayhead, c = this.element.currentTime, d = this.element.duration;
                    b.log("emitSeeked", a, c, d), this._seekStartPlayhead = null, this._seekStartTime = null, this.onSeeked.dispatch(a, c, d), this._isSeeking=!1;
                }
            }, a;
        }(), n = function() {
            function a() {
                this._isFullscreen=!1, this._onW3FullscreenChangeBind = i.bind(this._onW3FullscreenChange, this), this._onWebKitFullscreenChangeBind = i.bind(this._onWebKitFullscreenChange, this), this._onMozFullscreenChangeBind = i.bind(this._onMozFullscreenChange, this), this._onWebKitBeginFullscreenBind = i.bind(this._onWebKitBeginFullscreen, this), this._onWebKitEndFullscreenBind = i.bind(this._onWebKitEndFullscreen, this), this._onW3FullscreenErrorBind = i.bind(this._onW3FullscreenError, this), this._onWebKitFullscreenErrorBind = i.bind(this._onWebKitFullscreenError, this), this._onMozFullscreenErrorBind = i.bind(this._onMozFullscreenError, this), this.emitFullscreenChange = i.bind(this.emitFullscreenChange, this), this.emitFullscreenError = i.bind(this.emitFullscreenError, this), this.onFullscreenChange = new k("fullscreenChange"), this.onFullscreenError = new k("fullscreenError");
            }
            var b = j.getLogger("FullscreenMonitor");
            return a.prototype = {
                setup: function(a) {
                    b.log("setup"), this.element = a, this.element&&!this._addedFullscreenListeners && (this.element.addEventListener("webkitbeginfullscreen", this._onWebKitBeginFullscreenBind, !1), this.element.addEventListener("webkitendfullscreen", this._onWebKitEndFullscreenBind, !1), document.addEventListener("fullscreenchange", this._onW3FullscreenChangeBind, !1), document.addEventListener("webkitfullscreenchange", this._onWebKitFullscreenChangeBind, !1), document.addEventListener("mozfullscreenchange", this._onMozFullscreenChangeBind, !1), document.addEventListener("fullscreenerror", this._onW3FullscreenErrorBind, !1), document.addEventListener("webkitfullscreenerror", this._onWebKitFullscreenErrorBind, !1), document.addEventListener("mozfullscreenerror", this._onMozFullscreenErrorBind, !1), this._addedFullscreenListeners=!0);
                },
                teardown: function() {
                    b.log("teardown"), this.element && this._addedFullscreenListeners && (this.element.removeEventListener("webkitbeginfullscreen", this._onWebKitBeginFullscreenBind, !1), this.element.removeEventListener("webkitendfullscreen", this._onWebKitEndFullscreenBind, !1), document.removeEventListener("fullscreenchange", this._onW3FullscreenChangeBind, !1), document.removeEventListener("webkitfullscreenchange", this._onWebKitFullscreenChangeBind, !1), document.removeEventListener("mozfullscreenchange", this._onMozFullscreenChangeBind, !1), document.removeEventListener("fullscreenerror", this._onW3FullscreenErrorBind, !1), document.removeEventListener("webkitfullscreenerror", this._onWebKitFullscreenErrorBind, !1), document.removeEventListener("mozfullscreenerror", this._onMozFullscreenErrorBind, !1), this._addedFullscreenListeners=!1);
                },
                _handleFullscreenChange: function(a, b) {
                    (!a || a && b === this.element) && a !== this._isFullscreen && (this._isFullscreen = a, this.emitFullscreenChange(this._isFullscreen, b));
                },
                _onW3FullscreenChange: function() {
                    var a = document.fullscreenElement, c=!(!document.fullscreenEnabled&&!document.fullscreen&&!a);
                    b.debug("_onW3FullscreenChange", c, a), this._handleFullscreenChange(c, a);
                },
                _onWebKitFullscreenChange: function() {
                    var a = document.webkitFullscreenElement, c=!!document.webkitIsFullScreen||!!a;
                    b.debug("_onWebKitFullscreenChange", c, a), this._handleFullscreenChange(c, a);
                },
                _onMozFullscreenChange: function() {
                    var a = document.mozFullScreenElement, c=!(!document.mozFullScreen&&!document.fullScreen&&!a);
                    b.debug("_onMozFullscreenChange", c, a), this._handleFullscreenChange(c, a);
                },
                _onWebKitBeginFullscreen: function() {
                    var a = this.element, c=!0;
                    b.debug("_onWebKitBeginFullscreen", c, a), this._handleFullscreenChange(c, a);
                },
                _onWebKitEndFullscreen: function() {
                    var a = null, c=!1;
                    b.debug("_onWebKitEndFullscreen", c, a), this._handleFullscreenChange(c, a);
                },
                _handleFullscreenError: function() {
                    b.log("_onFullscreenError"), this.emitFullscreenError();
                },
                _onW3FullscreenError: function() {
                    b.log("_onW3FullscreenError"), this._handleFullscreenError();
                },
                _onWebKitFullscreenError: function() {
                    b.log("_onWebKitFullscreenError"), this._handleFullscreenError();
                },
                _onMozFullscreenError: function() {
                    b.log("_onMozFullscreenError"), this._handleFullscreenError();
                },
                emitFullscreenChange: function(a, c) {
                    b.log("emitFullscreenChange"), this.onFullscreenChange.dispatch(a, c);
                },
                emitFullscreenError: function() {
                    b.log("emitFullscreenError"), this.onFullscreenError.dispatch();
                }
            }, a;
        }(), o = d.extend({
            init: function(a) {
                this._super(a), this.playerOptions.controls = this.options.controls, this.playerOptions.autoplay = g.allowedAutoPlay && this.options.autostart ||!1, this._playheadThrottle = 250, this._firePlay=!1, this._addedListeners=!1, this._playlist = [], this._stopped=!1, this._loaded=!1, this._muted=!1, this._paused=!1, this._buffering=!1, this._timeAtSeekBegin = null, this._seeking=!1, this._fullscreen=!1, this._fileSelectionHandler = new e(this._config), this._seekingMonitor = new m, this._fullscreenMonitor = new n, this.eRendered.addListener(this.onRender, this), this._pilotEvents = [], this._pilotTimer = null, this._maxPilotAttemptTime = 20000, this._onPilotStall = i.bind(this._onPilotStall, this), this._onPilotEvent = i.bind(this._onPilotEvent, this), this._onPilotTimeout = i.bind(this._onPilotTimeout, this), this._pilotStallEvents = ["progress", "waiting", "suspend", "stalled"], this._eventListeners = {
                    loadedmetadata: i.bind(this._onLoadedMetaData, this),
                    play: i.bind(this._onContentPlay, this),
                    ended: i.bind(this._onContentEnd, this),
                    playing: i.bind(this._onContentPlaying, this),
                    pause: i.bind(this._onContentPause, this),
                    timeupdate: i.bind(this._onContentPlayhead, this),
                    error: i.bind(this._onContentError, this),
                    waiting: i.bind(this._onContentBuffering, this),
                    volumechange: i.bind(this._onContentVolume, this)
                }, this._addEventListener = i.bind(this._addEventListener, this), this._removeEventListener = i.bind(this._removeEventListener, this);
            },
            _addEventListener: function(a, b) {
                this.element.addEventListener(a, b, !1);
            },
            _removeEventListener: function(a, b) {
                this.element.removeEventListener(a, b, !1);
            },
            _setupSeekingMonitor: function() {
                this._seekingMonitor.setup(this.element), this._seekingMonitor.onSeeking.addListener(this._onContentSeeking, this), this._seekingMonitor.onSeeked.addListener(this._onContentSeeked, this);
            },
            _teardownSeekingMonitor: function() {
                this._seekingMonitor.teardown(), this._seekingMonitor.onSeeking.removeListener(this._onContentSeeking, this), this._seekingMonitor.onSeeked.removeListener(this._onContentSeeked, this);
            },
            _setupFullscreenMonitor: function() {
                this._fullscreenMonitor.setup(this.element), this._fullscreenMonitor.onFullscreenChange.addListener(this._onFullscreenChange, this), this._fullscreenMonitor.onFullscreenError.addListener(this._onFullscreenError, this);
            },
            _teardownFullscreenMonitor: function() {
                this._fullscreenMonitor.teardown(), this._fullscreenMonitor.onFullscreenChange.removeListener(this._onFullscreenChange, this), this._fullscreenMonitor.onFullscreenError.removeListener(this._onFullscreenError, this);
            },
            dispose: function() {
                this._teardownSeekingMonitor(), this._teardownFullscreenMonitor(), this.eRendered.removeListener(this.onRender, this), this._teardownPilot(), this.removePlayerListeners(), this.element.removeAttribute("src"), this.remove();
            },
            onRender: function() {
                this._setupFullscreenMonitor();
                var a = this._config.configInfo;
                a.volume && this.setVolume(a.volume), a.muted && this.mute();
            },
            firePause: function() {
                this.ePlayerPaused.dispatch(this.getContentId(), this.element.currentTime, this._paused), this.eContentPause.dispatch(this.getContentId(), this._paused);
            },
            fireBuffering: function() {
                this.eContentBuffering.dispatch(this.getContentId(), this._buffering);
            },
            fireMetadata: function() {
                this.eContentMetadata.dispatch(this.getContentId(), this.element.duration || this._catalogEntry.getTrt(), + this.width, + this.height);
            },
            firePlayhead: function() {
                this.eContentPlayhead.dispatch(this.getContentId(), this.element.currentTime, this.element.duration, - 1);
            },
            fireSeek: function() {
                this.eContentSeek.dispatch(this.getContentId(), this._timeAtSeekBegin, this.element.currentTime, this.element.duration);
            },
            fireSeekEnd: function() {
                this.eContentSeekEnd.dispatch(this.getContentId(), this._timeAtSeekBegin, this.element.currentTime, this.element.duration);
            },
            getMarkup: function() {
                return i.template('<video id="{0}" width={1} height={2} preload="none" controls {3}></video>', this.elementId, this.width, this.height, this.airplay);
            },
            play: function(a) {
                if (a = a || this._catalogEntry, l.log("play"), this._isReady=!1, this._firePlay=!1, this._stopped=!1, a === this._catalogEntry && this._currentSrc) {
                    return this._setupPlayer(), this.element.src = this._currentSrc, this.element.load(), this.element.play(), void 0;
                }
                switch (this._catalogEntry = a, this._currentSrc = null, this.playerOptions.autoplay || (l.debug("displaying thumbnail since video is not autoplay-ing"), this._setPoster()), this._updatePlaylist(a), this._playlist.length) {
                case 0:
                    return this.eContentError.dispatch(this.getContentId(), "No content URL selected."), void 0;
                case 1:
                    this._setupPlayer(), this.element.src = this._playlist[0], this.element.load(), this.element.play();
                    break;
                default:
                    this._setupPilot(), this._playPilotVideo();
                }
            },
            _updatePlaylist: function(a) {
                l.log("_updatePlaylist"), this._playlist.length = 0;
                var b = this._fileSelectionHandler.getPlaylistForEntry(a);
                this._playlist.push.apply(this._playlist, b), l.debug("internal playlist [" + this._playlist.length + "]:", this._playlist);
            },
            _setupPilot: function() {
                l.log("_setupPilot"), this._clearPilotEvents(), this.removePlayerListeners(), this._addPilotListeners();
            },
            _teardownPilot: function() {
                this._stopPilotTimer(), this._removePilotListeners();
            },
            _queuePilotEvent: function(a) {
                this._pilotEvents.push(a), l.debug("_queuePilotEvent", this._pilotEvents);
            },
            _clearPilotEvents: function() {
                this._pilotEvents.length = 0;
            },
            _dispatchPilotEvent: function(a) {
                this.element.dispatchEvent(a);
            },
            _dispatchPilotEvents: function() {
                l.log("_dispatchPilotEvents");
                var a = this._pilotEvents;
                a.length && (i.each(a.slice(0, - 1), this._dispatchPilotEvent, this), window.setTimeout(i.bind(this._dispatchPilotEvent, this, a[a.length - 1]), 0), this._clearPilotEvents());
            },
            _getPilotEventNames: function() {
                var a = i.keys(this._eventListeners);
                return a = i.filter(a.concat(this._pilotStallEvents));
            },
            _addPilotListener: function(a) {
                this._addEventListener(a, this._onPilotEvent);
            },
            _addPilotListeners: function() {
                l.log("_addPilotListeners", this._getPilotEventNames()), i.each(this._getPilotEventNames(), this._addPilotListener, this);
            },
            _removePilotListener: function(a) {
                this._removeEventListener(a, this._onPilotEvent);
            },
            _removePilotListeners: function() {
                l.log("_removePilotListeners", this._getPilotEventNames()), i.each(this._getPilotEventNames(), this._removePilotListener, this);
            },
            _stopPilotTimer: function() {
                this._pilotTimer && window.clearTimeout(this._pilotTimer), this._pilotTimer = null;
            },
            _startPilotTimer: function() {
                this._stopPilotTimer();
                var a = i.now() - this._pilotAttemptStart;
                return a > this._maxPilotAttemptTime ? (this._endPilot(), void 0) : (this._pilotTimer = window.setTimeout(this._onPilotTimeout, 5000), void 0);
            },
            _onPilotTimeout: function() {
                l.log("_onPilotTimeout"), this._isReady || this._playNextPilot();
            },
            _onPilotEvent: function(a) {
                switch (l.log("_onPilotEvent", a.type), a.type) {
                case"loadedmetadata":
                    this._queuePilotEvent(a), this._endPilot();
                    break;
                case"error":
                    a.target && a.target.error && "code" in a.target.error && a.target.error.code === a.target.error.MEDIA_ERR_SRC_NOT_SUPPORTED && (this._queuePilotEvent(a), this._playNextPilot());
                    break;
                case"progress":
                case"waiting":
                case"suspend":
                case"stalled":
                    this._startPilotTimer();
                    break;
                default:
                    this._queuePilotEvent(a);
                }
            },
            _playNextPilot: function() {
                l.log("_playNextPilot"), this._playlist.shift(), this._playPilotVideo();
            },
            _playPilotVideo: function() {
                this._clearPilotEvents();
                var a = this._playlist.length ? this._playlist[0]: "";
                l.debug("_playPilotVideo", "attempting to play '" + a + "'"), a ? (this._pilotAttemptStart = i.now(), this._startPilotTimer(), this.element.src = a, this.element.load(), this.element.play()) : (this._teardownPilot(), this._setupPlayer());
            },
            _endPilot: function() {
                l.log("_endPilot"), this._isReady || (this._isReady=!0, this._currentSrc = this.element.currentSrc, this._teardownPilot(), this._setupPlayer());
            },
            _setupPlayer: function() {
                l.log("_setupPlayer"), this.setDefaultOptions(), this._firePlay=!0, this.addPlayerListeners(), this._dispatchPilotEvents();
            },
            pause: function() {
                this.element.pause();
            },
            resume: function() {
                this.element.play();
            },
            reset: function() {
                this.removePlayerListeners(), this.element.removeAttribute("autoplay"), this.element.removeAttribute("controls"), this.element.removeAttribute("poster"), this.element.src = f.BLANK_MP4_URL, this.element.load();
            },
            stop: function() {
                this._stopped || (this._stopped=!0, this.reset(), this.ePlayerStopped.dispatch(this.getContentId()));
            },
            seek: function(a) {
                this.element.currentTime = a;
            },
            setVolume: function(a) {
                this.element.volume = a;
            },
            getVolume: function() {
                return this.element.volume;
            },
            mute: function() {
                this.element.muted=!0;
            },
            unmute: function() {
                this.element.muted=!1;
            },
            isMuted: function() {
                return this.element.muted;
            },
            resize: function(a, b) {
                this.element.width = a, this.element.height = b, this._onContentResize();
            },
            getFullscreenElement: function() {
                return document.fullscreenElement || document.webkitFullscreenElement || document.webkitCurrentFullScreenElement || document.mozFullscreenElement;
            },
            _requestFullscreen: function(a) {
                for (var b, c = ["requestFullscreen", "requestFullScreen", "webkitRequestFullscreen", "webkitRequestFullScreen", "webkitEnterFullscreen", "webkitEnterFullScreen", "mozRequestFullScreen"], d = 0, e = c.length; e > d; ++d) {
                    if (b = c[d], b in a && "function" == typeof a[b]) {
                        return a[b]();
                    }
                }
            },
            _exitFullscreen: function() {
                for (var a, b = ["exitFullscreen", "cancelFullscreen", "cancelFullScreen", "webkitExitFullscreen", "webkitExitFullScreen", "webkitCancelFullscreen", "webkitCancelFullScreen", "mozCancelFullScreen"], c = 0, d = b.length; d > c; ++c) {
                    if (a = b[c], a in document && "function" == typeof document[a]) {
                        return document[a]();
                    }
                }
            },
            goFullscreen: function() {
                if (g.forcesFullscreen) {
                    return l.warn("goFullscreen is not permitted on devices that automatically play video in fullscreen."), void 0;
                }
                var a = this.element;
                if (this.getFullscreenElement() === a) {
                    try {
                        this._exitFullscreen();
                    } catch (b) {
                        l.error("goFullscreen failed to exit fullscreen", b.message);
                    }
                } else {
                    try {
                        this._requestFullscreen(a);
                    } catch (b) {
                        l.error("goFullscreen failed to enter fullscreen", b.message);
                    }
                }
            },
            getDimensions: function() {
                return {
                    width: this.element.width,
                    height: this.element.height,
                    videoWidth: this.element.videoWidth,
                    videoHeight: this.element.videoHeight
                };
            },
            setDefaultOptions: function() {
                this.setOptions(this.playerOptions);
            },
            setOptions: function(a) {
                a = a || {};
                var b;
                for (b in a) {
                    i.hasOwn(a, b) && (this.element[b] = a[b]);
                }
            },
            _clearPoster: function() {
                this.element.poster && this.element.removeAttribute("poster");
            },
            _setPoster: function(a) {
                var b = arguments.length ? a: this.getThumbnail();
                l.debug("_setPoster", b), this._clearPoster(), b && (this.element.poster = b);
            },
            getThumbnail: function() {
                return this._catalogEntry ? this._catalogEntry.getImageForDimensions(this.getWidth(), this.getHeight()) : "";
            },
            getWidth: function() {
                var a = i.getStyle(this.element, "width");
                return a ? i.toInt(a) : this.width;
            },
            getHeight: function() {
                var a = i.getStyle(this.element, "height");
                return a ? i.toInt(a) : this.height;
            },
            _onLoadedMetaData: function() {
                l.log("_onLoadedMetaData"), this._loaded=!0, this.fireMetadata();
            },
            _onContentPlay: function() {
                l.log("_onContentPlay"), this._paused && (this._paused=!1, this.firePause()), this._firePlay && (this._firePlay=!1, this.firePlay());
            },
            _onContentPlaying: function() {
                l.log("_onContentPlaying"), this._clearPoster(), this._buffering && (this._buffering=!1, this.fireBuffering());
            },
            _onContentPause: function() {
                l.log("_onContentPause"), this._paused=!0, this.element.currentTime !== this.element.duration && this.firePause();
            },
            _onContentPlayhead: function() {
                if (!this._seeking) {
                    var a = i.now(), b = this._lastPlayheadTime, c = this.element.currentTime, d = this._lastPlayhead;
                    b&&!(a - b >= this._playheadThrottle) || d && c === d || this.firePlayhead(), this._lastPlayheadTime = a, this._lastPlayhead = c;
                }
            },
            _onContentSeeking: function(a) {
                l.log("_onContentSeeking"), this._seeking=!0, i.isNull(this._timeAtSeekBegin) && (this._timeAtSeekBegin = a), this.fireSeek();
            },
            _onContentSeeked: function() {
                l.log("_onContentSeeked"), this.fireSeekEnd(), this._seeking=!1, this._timeAtSeekBegin = null;
            },
            _onContentEnd: function() {
                l.log("_onContentEnd"), this.fireEnded();
            },
            _onContentError: function(a) {
                var b = h.MEDIA_ERR_UNKNOWN;
                if (a.target && a.target.error) {
                    switch (a.target.error.code) {
                    case a.target.error.MEDIA_ERR_ABORTED:
                        b = h.MEDIA_ERR_ABORTED;
                        break;
                    case a.target.error.MEDIA_ERR_NETWORK:
                        b = h.MEDIA_ERR_NETWORK;
                        break;
                    case a.target.error.MEDIA_ERR_DECODE:
                        b = h.MEDIA_ERR_DECODE;
                        break;
                    case a.target.error.MEDIA_ERR_SRC_NOT_SUPPORTED:
                        b = h.MEDIA_ERR_SRC_NOT_SUPPORTED;
                    }
                }
                l.error("_onContentError", b), this.eContentError.dispatch(this.getContentId(), b);
            },
            _onContentBuffering: function() {
                l.log("_onContentBuffering"), this._buffering=!0, this.fireBuffering();
            },
            _onContentVolume: function() {
                l.log("_onContentVolume");
                var a = this._muted !== this.element.muted;
                a && (this._muted = this.element.muted, this.ePlayerMuted.dispatch(this.element.muted)), this.eContentVolume.dispatch(this.element.muted, this.element.volume);
            },
            _onContentResize: function() {
                l.log("_onContentResize"), this.eContentResize.dispatch(this.element.width, this.element.height, this._fullscreen);
            },
            _onFullscreenChange: function(a) {
                l.log("_onFullscreenChange", a), this._fullscreen = a;
                var b = this.getContentId();
                b ? this.eFullscreenChange.dispatch(b, a) : l.debug("Fullscreen event was not emitted because contentId was not determined at this time.");
            },
            _onFullscreenError: function() {
                l.log("_onFullscreenError"), this.eFullscreenError.dispatch();
            },
            addPlayerListeners: function() {
                return l.log("addPlayerListeners"), this.element ? this._addedListeners ? (l.log("addPlayerListeners", "already listening to events!"), void 0) : (i.each(this._eventListeners, this._addEventListener, this), this._setupSeekingMonitor(), this._addedListeners=!0, void 0) : (l.error("addPlayerListeners", "cannot find element to listen to!"), void 0);
            },
            removePlayerListeners: function() {
                return l.log("removePlayerListeners"), this.element ? this._addedListeners ? (i.each(this._eventListeners, this._removeEventListener, this), this._teardownSeekingMonitor(), this._addedListeners=!1, void 0) : (l.log("removePlayerListeners", "already stopped listening to events!"), void 0) : (l.error("removePlayerListeners", "cannot find element to not listen to!"), void 0);
            }
        });
        c.exports = o;
    }), define("html5/ads/baseimpl", ["require", "exports", "module", "Class", "cvp/utils", "cvp/customevent", "cvp/log"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/utils"), f = a("cvp/customevent"), g = a("cvp/log"), h = g.getLogger(), i = d.extend({
            init: function(a) {
                this._adPolicy = a, this._keyValues = {}, this._adServerInfo = this._adPolicy.ads, this._adSection = this.getConfigProperty("adSection"), this.currentAdType = "", this.currentAdId = "", this.currentAdDuration = 0, this.eAdPlayhead = new f, this.eAdPlay = new f, this.eAdEnd = new f, this.eAdError = new f, this.eAdClick = new f, this.eAdReady = new f, this.eAdStopped = new f;
            },
            stop: function() {},
            dispose: function() {},
            setAdSection: function(a) {
                this._adSection = a;
            },
            getAdSection: function() {
                return this._adSection;
            },
            setAdKeyValue: function(a, b) {
                a && (null === b ? delete this._keyValues[a] : this._keyValues[a] = b);
            },
            getAdKeyValue: function(a) {
                return this._keyValues[a] || void 0;
            },
            getAdKeyValues: function() {
                return this._keyValues;
            },
            clearAdKeyValues: function() {
                this._keyValues = {};
            },
            setVideoState: function(a) {
                this._videoState = a;
            },
            getVideoState: function() {
                return this._videoState;
            },
            getAdAnalyticsData: function() {},
            getAdAnalyticsDataForCurrentSlot: function() {},
            getMidrolls: function() {
                return {};
            },
            getConfigProperty: function(a) {
                var b = null, c=!1;
                switch (a) {
                case"adApi":
                    b = this._adServerInfo.apiUrl, c=!0;
                    break;
                case"adServerRootUrl":
                    b = this._adServerInfo.adServerRootUrl, c=!0;
                    break;
                case"adNetworkId":
                    b = this._adServerInfo.adNetworkId, c=!0;
                    break;
                case"adVideoNetworkId":
                    b = this._adServerInfo.adVideoNetworkId, c=!0;
                    break;
                case"adVideoAssetId":
                    b = this._adServerInfo.adVideoAssetId, c=!0;
                    break;
                case"adSection":
                    b = this._adServerInfo.adSection, c=!0;
                    break;
                case"adPlayerProfile":
                    b = this._adServerInfo.adPlayerProfile, c=!0;
                    break;
                case"renderersUrl":
                    b = this._adServerInfo.renderersUrl, c=!1;
                    break;
                case"sensitiveFallbackId":
                    b = this._adServerInfo.sensitiveFallbackId, c=!1;
                    break;
                case"adLiveContentDuration":
                    b = this._adServerInfo.liveDuration, c=!1;
                }
                return e.empty(b) && (c ? h.error("the following required ad server config value is missing:", a) : h.warn("the following optional ad server config value is missing:", a)), b;
            }
        });
        c.exports = i;
    }), define("cvp/utils/timing", ["require", "exports", "module"], function(a, b, c) {
        c.exports = {
            periodically: function(a, b) {
                var c, d = 0, e = function() {
                    a(++d, b);
                }, f = function() {
                    c && g(), c = window.setInterval(e, b || 1000);
                }, g = function() {
                    window.clearInterval(c);
                };
                return {
                    start: f,
                    stop: g
                };
            }
        };
    }), define("html5/ads/freewheelimpl", ["require", "exports", "module", "html5/ads/baseimpl", "cvp/utils", "cvp/utils/configutils", "cvp/utils/timing", "cvp/log"], function(a, b, c) {
        var d = a("html5/ads/baseimpl"), e = a("cvp/utils"), f = a("cvp/utils/configutils"), g = a("cvp/utils/timing"), h = a("cvp/log"), i = h.getLogger(), j = d.extend({
            init: function() {
                if (i.log("FreeWheelImpl", "Instantiating"), this._super.apply(this, arguments), this._createNewContext = e.bind(this._createNewContext, this), this._freewheel = null, this.enabled=!1, e.isObject(window.tv) && e.isObject(window.tv.freewheel) && e.isObject(window.tv.freewheel.SDK)) {
                    j.initialized || (j.SDK = window.tv.freewheel.SDK, j.PREROLL = j.SDK.TIME_POSITION_CLASS_PREROLL, j.MIDROLL = j.SDK.TIME_POSITION_CLASS_MIDROLL, j.POSTROLL = j.SDK.TIME_POSITION_CLASS_POSTROLL, j.VIDEO_PLAYING = j.SDK.VIDEO_STATE_PLAYING, j.VIDEO_PAUSED = j.SDK.VIDEO_STATE_PAUSED, j.VIDEO_STOPPED = j.SDK.VIDEO_STATE_STOPPED, j.VIDEO_COMPLETED = j.SDK.VIDEO_STATE_COMPLETED, j.initialized=!0);
                    var a = this.getConfigProperty("adNetworkId"), b = this.getConfigProperty("adServerRootUrl") + "/ad/g/1";
                    this._freewheel = new j.SDK.AdManager, this._freewheel.setNetwork(a), this._freewheel.setServer(b);
                }
                this._isListening=!1, this._adProgress = 0, this._adTimer = null, this._adTimerDelay = 1000, this._ads = {}, this._ads[j.PREROLL] = [], this._ads[j.MIDROLL] = [], this._ads[j.POSTROLL] = [], this._onRequestComplete = e.bind(this._onRequestComplete, this), this._onSlotStarted = e.bind(this._onSlotStarted, this), this._onSlotEnded = e.bind(this._onSlotEnded, this), this._onPauseRequested = e.bind(this._onPauseRequested, this), this._onResumeRequested = e.bind(this._onResumeRequested, this), this._onAdStart = e.bind(this._onAdStart, this), this._onAdEnd = e.bind(this._onAdEnd, this), this._onAdClick = e.bind(this._onAdClick, this);
            },
            _createAdIncrementor: function(a) {
                return e.bind(function(a) {
                    var b = a.getPlayheadTime();
                    b !== this._adProgress && (b > this.currentAdDuration || (this._adProgress = b, this.onAdPlayhead(this._adProgress, this.currentAdDuration)));
                }, this, a);
            },
            _updateAdTimer: function(a) {
                this._disposeAdTimer(), this._adTimer = new g.periodically(this._createAdIncrementor(a), this._adTimerDelay), this._adTimer.start();
            },
            _disposeAdTimer: function() {
                null !== this._adTimer && (this._adTimer.stop(), this._adTimer = null);
            },
            setVideoDisplayBase: function(a) {
                j.initialized && (this.displayBase = a, this.enabled=!0);
            },
            loadAds: function(a) {
                this._catalogEntry = a, this._ads[j.PREROLL].length = 0, this._ads[j.MIDROLL].length = 0, this._ads[j.POSTROLL].length = 0, this._fwContext && this._currentSlot ? (this._fwContext.addEventListener(j.SDK.EVENT_SLOT_ENDED, this._createNewContext), this._currentSlot.stop()) : this._createNewContext();
            },
            stop: function() {
                this._currentSlot && this._currentSlot.stop(), this.eAdStopped.dispatch();
            },
            dispose: function() {
                i.log("FreeWheelImpl", "dispose"), this._reset();
            },
            _reset: function() {
                i.log("FreeWheelImpl", "_reset"), this._fwContext && (this._currentSlot && this._currentSlot.stop(), this._disposeAdTimer(), this._listen(!1), this._fwContext.removeEventListener(j.SDK.EVENT_SLOT_ENDED, this._createNewContext), this._fwContext.dispose());
            },
            _createNewContext: function() {
                i.log("FreeWheelImpl", "_createNewContext");
                var a = this._catalogEntry, b = this.getConfigProperty("adNetworkId"), c = a.getTrt(), d = e.empty(this._adServerInfo.adVideoAssetId) ? a.getId(): f.stringReplace(this._adServerInfo.adVideoAssetId, a, !1);
                this._fwContext && this._reset(), this._fwContext = this._freewheel.newContext(), this._fwContext.setProfile(b + ":turner_html5"), this._fwContext.setVideoAsset(d, c), this._fwContext.setSiteSection(this._adSection), this._fwContext.registerVideoDisplayBase(this.displayBase);
                var g = this.getAdKeyValues();
                for (var h in g) {
                    e.hasOwn(g, h) && this._fwContext.addKeyValue(h, g[h]);
                }
                this._listen(!0), this._fwContext.submitRequest();
            },
            _listen: function(a) {
                var b = this._fwContext;
                if (b && this._isListening !== a) {
                    this._isListening = a;
                    var c = a ? b.addEventListener: b.removeEventListener;
                    c.call(b, j.SDK.EVENT_REQUEST_COMPLETE, this._onRequestComplete), c.call(b, j.SDK.EVENT_SLOT_STARTED, this._onSlotStarted), c.call(b, j.SDK.EVENT_SLOT_ENDED, this._onSlotEnded), c.call(b, j.SDK.EVENT_CONTENT_VIDEO_PAUSE_REQUESTED, this._onContentPauseRequested), c.call(b, j.SDK.EVENT_CONTENT_VIDEO_RESUME_REQUESTED, this._onContentResumeRequested), c.call(b, j.SDK.EVENT_AD_IMPRESSION, this._onAdStart), c.call(b, j.SDK.EVENT_AD_IMPRESSION_END, this._onAdEnd), c.call(b, j.SDK.EVENT_AD_CLICK, this._onAdClick), c.call(b, j.SDK.EVENT_ERROR, this._onAdError);
                }
            },
            _onRequestComplete: function(a) {
                if (i.log("FreeWheelImpl", "_onRequestComplete", a), a && a.success) {
                    for (var b = a.target.getTemporalSlots(), c = 0, d = b.length; d > c; ++c) {
                        var e = b[c], f = e.getTimePositionClass();
                        switch (f) {
                        case j.PREROLL:
                        case j.MIDROLL:
                        case j.POSTROLL:
                            this._ads[f].push(e);
                        }
                    }
                } else {
                    i.debug("FreeWheelImpl", "_onRequestComplete", "No ad event or ad request was unsuccessful.");
                }
                this._createMidrollsData(), this.eAdReady.dispatch(), this.playPreroll();
            },
            _createMidrollsData: function() {
                var a = {}, b = this._ads[j.MIDROLL];
                e.each(b, function(b, c) {
                    var d = b.getTimePosition();
                    d >= 0 && (a[d] = c);
                }), this._midrolls = a;
            },
            getMidrolls: function() {
                return e.extend({}, this._midrolls);
            },
            _onSlotStarted: function(a) {
                i.log("FreeWheelImpl", "_onSlotStarted", a.type, a.target, a.slot);
            },
            _playSlot: function(a) {
                this._currentSlot = a, this._currentSlot.play();
            },
            _continuePlayingSlots: function(a) {
                var b = this._ads[a];
                return b && b.length && (b.shift(), b.length) ? (this._playSlot(b[0]), !0) : !1;
            },
            _onSlotEnded: function(a) {
                i.log("FreeWheelImpl", "_onSlotEnded", a.type, a.target, a.slot), this._previousSlot = this._currentSlot, this._currentSlot = null;
                var b = a.slot.getTimePositionClass();
                switch (b) {
                case j.PREROLL:
                    this._continuePlayingSlots(b) || this.onPrerollCompleted();
                    break;
                case j.MIDROLL:
                    this.onMidrollCompleted();
                    break;
                case j.POSTROLL:
                    this._continuePlayingSlots(b) || this.onPostrollCompleted();
                }
            },
            _onContentPauseRequested: function(a) {
                i.log("FreeWheelImpl", "_onContentPauseRequested", a.type, a.target, a.success), this.displayBase.querySelector("video").controls = "controls";
            },
            _onContentResumeRequested: function(a) {
                i.log("FreeWheelImpl", "_onContentResumeRequested", a.type, a.target, a.slot), this.displayBase.querySelector("video").controls = "";
            },
            _onAdStart: function(a) {
                i.log("FreeWheelImpl", "_onAdStart", a.type, a.target, a.adInstance);
            },
            _onAdEnd: function(a) {
                i.log("FreeWheelImpl", "_onAdEnd", a.type, a.target, a.adInstance);
            },
            _onAdClick: function(a) {
                i.log("FreeWheelImpl", "_onAdClick", a);
                var b = a.adInstance;
                if (b) {
                    var c = b.getEventCallbackUrls(j.SDK.EVENT_AD_CLICK, j.SDK.EVENT_TYPE_CLICK);
                    i.log("FreeWheelImpl", "_onAdClick", "callbackUrls:", c), c && c.length && this.eAdClick.dispatch(c[0]);
                }
            },
            _onAdError: function(a) {
                i.debug("FreeWheelImpl", "_onAdError", a);
            },
            playPreroll: function() {
                i.log("FreeWheelImpl", "playPreroll"), this.currentAdType = j.PREROLL, this._adPlay(j.PREROLL);
            },
            onPrerollCompleted: function() {
                i.log("FreeWheelImpl", "onPrerollCompleted"), this._adEnd();
            },
            playMidroll: function(a) {
                i.log("FreeWheelImpl", "playMidroll"), this.currentAdType = j.MIDROLL, this._adPlay(j.MIDROLL, a);
            },
            onMidrollCompleted: function() {
                i.log("FreeWheelImpl", "onMidrollCompleted"), this._adEnd();
            },
            playPostroll: function() {
                i.log("FreeWheelImpl", "playPostroll"), this.currentAdType = j.POSTROLL, this._adPlay(j.POSTROLL);
            },
            onPostrollCompleted: function() {
                i.log("FreeWheelImpl", "onPostrollCompleted"), this._adEnd();
            },
            _adPlay: function(a, b) {
                b = b || 0, i.log("FreeWheelImpl", "_adPlay", a);
                var c = this._catalogEntry;
                if (c.isAdSensitive()) {
                    return this._adError("catalogEntry specified 'isAdSensitive'; skipping ad play."), void 0;
                }
                var d = this._ads[a];
                if (!d.length) {
                    return this._adError("no slots provided for the ad type: " + a), void 0;
                }
                if (0 > b || d.length <= b) {
                    return this._adError("no slot at index '" + b + "' provided for the ad type: " + a), void 0;
                }
                var e = d[b];
                return e && 0 !== e.getAdCount() && 0 !== e.getTotalDuration() ? (this._currentSlot = e, this.currentAdId = e.getCustomId(), this.currentAdDuration = e.getTotalDuration(), this._adProgress = 0, this._updateAdTimer(e), this.eAdPlay.dispatch(c), this._playSlot(e), void 0) : (this._adError("no ad provided for the slot for ad type: " + a), void 0);
            },
            _adEnd: function() {
                i.log("FreeWheelImpl", "_adEnd");
                var a = this._catalogEntry;
                this.eAdEnd.dispatch(a), this._cleanup();
            },
            _adError: function(a) {
                i.debug("FreeWheelImpl", "_adError", a), this.eAdError.dispatch(a), this._cleanup();
            },
            _cleanup: function() {
                this._disposeAdTimer(), this.currentAdId = "";
            },
            onAdPlayhead: function(a, b) {
                this.eAdPlayhead.dispatch(a, b);
            },
            setVideoState: function(a) {
                this._super.apply(this, arguments), this._fwContext && this._fwContext.setVideoState(a);
            },
            getAdAnalyticsData: function() {
                var a = {};
                if (!this._fwContext) {
                    return a;
                }
                var b = this._fwContext.getTemporalSlots();
                return e.each(b, function(b, c) {
                    var d = "temporal_" + c;
                    a[d] = this._getDataForSlot(b);
                }, this), a;
            },
            _getDataForSlot: function(a) {
                var b = {
                    slotId: a.getCustomId(),
                    adType: a.getTimePositionClass(),
                    position: a.getTimePosition(),
                    category: a.getType(),
                    duration: a.getTotalDuration(),
                    adCount: a.getAdCount(),
                    adInstances: this._getAdAnalyticsForSlot(a)
                };
                return b;
            },
            getAdAnalyticsDataForCurrentSlot: function() {
                return this._currentSlot ? {
                    adInstances: this._getAdAnalyticsForSlot(this._currentSlot)
                } : void 0;
            },
            _getAdAnalyticsForSlot: function(a) {
                var b = a.getAdInstances();
                return e.map(b, this._getDataForAdInstance, this);
            },
            _getDataForAdInstance: function(a) {
                var b = {
                    adId: a.getAdId()
                }, c = a.getEventCallbackUrls(j.SDK.EVENT_AD_CLICK, j.SDK.EVENT_TYPE_CLICK);
                b.clickUrl = c.length ? c[0] : "";
                var d = a.getActiveCreativeRendition();
                if (d && e.isFunc(d.getPrimaryCreativeRenditionAsset)) {
                    var f = d.getPrimaryCreativeRenditionAsset();
                    f && (b.assetUrl = f.getUrl(), b.contentType = f.getContentType());
                }
                return b;
            }
        });
        j.PREROLL = null, j.MIDROLL = null, j.POSTROLL = null, c.exports = j;
    }), define("html5/ads/dfpimpl", ["require", "exports", "module", "html5/ads/baseimpl", "cvp/utils", "cvp/utils/configutils", "cvp/log"], function(a, b, c) {
        var d = a("html5/ads/baseimpl"), e = a("cvp/utils"), f = a("cvp/utils/configutils"), g = a("cvp/log"), h = g.getLogger(), i = d.extend({
            init: function() {
                h.debug("DFPImpl", "Instantiating"), this._super.apply(this, arguments), this.enabled=!1, this._loader = new window.google.ima.AdsLoader, this._loader.addEventListener(window.google.ima.AdsLoadedEvent.Type.ADS_LOADED, e.bind(this._onAdsLoaded, this)), this._loader.addEventListener(window.google.ima.AdErrorEvent.Type.AD_ERROR, e.bind(this._onAdLoadError, this));
            },
            setVideoDisplayBase: function(a) {
                h.debug("DFP", "setVideoDisplayBase", a), e.undef(window.google) || e.undef(window.google.ima.AdsLoader) || (this.displayBase = a, this.enabled=!0, h.debug("DFP", "setVideoDisplayBase", "videoDisplayBase", "enabling"));
            },
            loadAds: function(a) {
                this._catalogEntry = a, this.playPreroll();
            },
            playPreroll: function() {
                var a = this._catalogEntry.getAdUrl("preroll"), b = this._constructAdUrl(a, this._catalogEntry);
                this.currentAdType = i.PREROLL, this.loadAds(b);
            },
            playPostroll: function() {
                var a = this._catalogEntry.getAdUrl("postroll"), b = this._constructAdUrl(a, this._catalogEntry);
                this.currentAdType = i.POSTROLL, this.loadAds(b);
            },
            _loadAdUrl: function(a) {
                h.debug("DFP", "_loadAdUrl - adTag", a);
                var b = {
                    adTagUrl: a,
                    adType: "video"
                };
                this._loader.requestAds(b);
            },
            _constructAdUrl: function(a, b) {
                var c = "", d = this.getConfigProperty("adServerRootUrl");
                c = e.empty(a) ? d : e.isRelative(a) ? this._addToTag(d, a) : a;
                var g = this.getAdKeyValues();
                for (var h in g) {
                    if (e.hasOwn(g, h)) {
                        var i = h + "=" + this._keyValues[h];
                        c = this._addToTag(c, i);
                    }
                }
                return c = f.stringReplace(c, b);
            },
            _addToTag: function(a, b) {
                if (!a) {
                    return b;
                }
                var c = ";";
                return ";" === a.charAt(a.length - 1) && (c = ""), a + c + b;
            },
            _onAdsLoaded: function(a) {
                h.debug("DFP", "_onAdsLoaded");
                var b = a.getAdsManager();
                b.addEventListener(window.google.ima.AdErrorEvent.Type.AD_ERROR, e.bind(this._onAdError, this)), b.addEventListener(window.google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, e.bind(this._onPauseRequested, this)), b.addEventListener(window.google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, e.bind(this._onResumeRequested, this));
                try {
                    this.eAdPlay.dispatch();
                    var c = {
                        restoreContentState: !1
                    }, d = document.getElementById(this.displayBase).getElementsByTagName("video")[0];
                    b.play(d, c);
                } catch (f) {
                    h.error("DFP", "ad play error", f.toString());
                }
            },
            _onAdLoadError: function() {
                h.debug("DFP", "_onAdLoadError"), this.eAdError.dispatch();
            },
            _onPauseRequested: function() {
                h.debug("DFP", "_onPauseRequested");
            },
            _onResumeRequested: function() {
                h.debug("DFP", "_onResumeRequested"), this.eAdEnd.dispatch();
            },
            _onAdError: function(a) {
                h.debug("DFP", "_onAdError", a.toString()), this.eAdError.dispatch();
            }
        });
        i.PREROLL = "dfpPreroll", i.POSTROLL = "dfpPostroll", c.exports = i;
    }), define("html5/ads/adserverproxy", ["require", "exports", "module", "Class", "cvp/customevent", "cvp/log", "html5/ads/freewheelimpl", "html5/ads/dfpimpl"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/customevent"), f = a("cvp/log"), g = f.getLogger(), h = a("html5/ads/freewheelimpl"), i = a("html5/ads/dfpimpl"), j = d.extend({
            init: function(a) {
                return this._adPolicy = a, this.eAdPlay = new e, this.eAdPlayhead = new e, this.eAdEnd = new e, this.eAdError = new e, this.eAdClick = new e, this.eAdReady = new e, this.eAdStopped = new e, this._adServerType = this._adPolicy.ads.attr.type.toLowerCase(), this._adServer = this._createImpl(), this._adServer ? (this._adServer.eAdPlay.addListener(this._onAdPlay, this), this._adServer.eAdPlayhead.addListener(this._onAdPlayhead, this), this._adServer.eAdEnd.addListener(this._onAdEnd, this), this._adServer.eAdError.addListener(this._onAdError, this), this._adServer.eAdClick.addListener(this._onAdClick, this), this._adServer.eAdReady.addListener(this._onAdReady, this), this._adServer.eAdStopped.addListener(this._onAdStopped, this), void 0) : (g.warn("AdServerProxy", "Unable to create ad server impl."), void 0);
            },
            _createImpl: function() {
                var a = this._adServerType;
                switch (a) {
                case"freewheel":
                    return new h(this._adPolicy);
                case"dfp":
                    return new i(this._adPolicy);
                default:
                    return null;
                }
            },
            setAdSection: function(a) {
                this._adServer && this._adServer.setAdSection(a);
            },
            getAdSection: function() {
                return this._adServer ? this._adServer.getAdSection() : void 0;
            },
            setAdKeyValue: function(a, b) {
                this._adServer && this._adServer.setAdKeyValue(a, b);
            },
            getAdKeyValue: function(a) {
                return this._adServer ? this._adServer.getAdKeyValue(a) : void 0;
            },
            getAdKeyValues: function() {
                return this._adServer ? this._adServer.getAdKeyValues() : void 0;
            },
            clearAdKeyValues: function() {
                this._adServer && this._adServer.clearAdKeyValues();
            },
            setVideoState: function(a) {
                this._adServer && this._adServer.setVideoState(this._convertVideoStateToImpl(a));
            },
            setVideoStatePlaying: function() {
                this.setVideoState(j.VIDEO_PLAYING);
            },
            setVideoStatePaused: function() {
                this.setVideoState(j.VIDEO_PAUSED);
            },
            setVideoStateStopped: function() {
                this.setVideoState(j.VIDEO_STOPPED);
            },
            setVideoStateCompleted: function() {
                this.setVideoState(j.VIDEO_COMPLETED);
            },
            _convertVideoStateToImpl: function(a) {
                switch (this._adServerType) {
                case"freewheel":
                    switch (a) {
                    case j.VIDEO_PLAYING:
                        return h.VIDEO_PLAYING;
                    case j.VIDEO_PAUSED:
                        return h.VIDEO_PAUSED;
                    case j.VIDEO_STOPPED:
                        return h.VIDEO_STOPPED;
                    case j.VIDEO_COMPLETED:
                        return h.VIDEO_COMPLETED;
                    }
                }
            },
            getVideoState: function() {
                return this._adServer ? this._convertVideoStateFromImpl(this._adServer.getVideoState()) : void 0;
            },
            _convertVideoStateFromImpl: function(a) {
                switch (this._adServerType) {
                case"freewheel":
                    switch (a) {
                    case h.VIDEO_PLAYING:
                        return j.VIDEO_PLAYING;
                    case h.VIDEO_PAUSED:
                        return j.VIDEO_PAUSED;
                    case h.VIDEO_STOPPED:
                        return j.VIDEO_STOPPED;
                    case h.VIDEO_COMPLETED:
                        return j.VIDEO_COMPLETED;
                    }
                }
            },
            setVideoDisplayBase: function(a) {
                this._adServer && this._adServer.setVideoDisplayBase(a);
            },
            isEnabled: function() {
                return this._adServer ? this._adServer.enabled : !1;
            },
            playPreroll: function() {
                this._adServer && this._adServer.playPreroll();
            },
            getMidrolls: function() {
                return this._adServer ? this._adServer.getMidrolls() : void 0;
            },
            playMidroll: function(a) {
                this._adServer && this._adServer.playMidroll(a);
            },
            playPostroll: function() {
                this._adServer && this._adServer.playPostroll();
            },
            loadAds: function(a) {
                this._adServer && this._adServer.loadAds(a);
            },
            stop: function() {
                this._adServer && this._adServer.stop();
            },
            dispose: function() {
                this._adServer && this._adServer.dispose();
            },
            getCurrentAdId: function() {
                return this._adServer ? this._adServer.currentAdId : "";
            },
            getCurrentAdDuration: function() {
                return this._adServer ? this._adServer.currentAdDuration : 0;
            },
            getCurrentAdType: function() {
                return this._convertAdType(this._adServer.currentAdType);
            },
            getAdAnalyticsData: function() {
                return this._adServer ? this._adServer.getAdAnalyticsData() : void 0;
            },
            getAdAnalyticsDataForCurrentSlot: function() {
                return this._adServer ? this._adServer.getAdAnalyticsDataForCurrentSlot() : void 0;
            },
            _convertAdType: function(a) {
                switch (this._adServerType) {
                case"freewheel":
                    switch (a) {
                    case h.PREROLL:
                        return j.PREROLL;
                    case h.MIDROLL:
                        return j.MIDROLL;
                    case h.POSTROLL:
                        return j.POSTROLL;
                    }
                    break;
                case"dfp":
                    switch (a) {
                    case i.PREROLL:
                        return j.PREROLL;
                    case i.POSTROLL:
                        return j.POSTROLL;
                    }
                }
                return "";
            },
            _onAdPlay: function() {
                var a = {
                    ads: [],
                    token: null,
                    mode: "standard",
                    id: this.getCurrentAdId(),
                    duration: this.getCurrentAdDuration(),
                    blockId: 0,
                    adType: this.getCurrentAdType(),
                    adAnalyticsData: this.getAdAnalyticsDataForCurrentSlot()
                };
                g.debug("AdServerProxy", "_onAdPlay", a.adType), this.eAdPlay.dispatch(a);
            },
            _onAdPlayhead: function() {
                this.eAdPlayhead.dispatch.apply(this.eAdPlayhead, arguments);
            },
            _onAdEnd: function() {
                var a = {
                    token: null,
                    mode: "standard",
                    id: this.getCurrentAdId(),
                    blockId: 0,
                    adType: this.getCurrentAdType()
                };
                g.debug("AdServerProxy", "_onAdEnd", a.adType), this.eAdEnd.dispatch(a);
            },
            _onAdError: function() {
                var a = {
                    id: this.getCurrentAdId(),
                    adType: this.getCurrentAdType(),
                    errors: []
                };
                this.eAdError.dispatch(a);
            },
            _onAdClick: function(a) {
                var b = {
                    id: this.getCurrentAdId(),
                    adType: this.getCurrentAdType(),
                    url: a
                };
                this.eAdClick.dispatch(b);
            },
            _onAdReady: function() {
                this.eAdReady.dispatch();
            },
            _onAdStopped: function() {
                this.eAdStopped.dispatch();
            }
        });
        j.PREROLL = "preroll", j.MIDROLL = "midroll", j.POSTROLL = "postroll", j.VIDEO_PLAYING = "PLAYING", j.VIDEO_PAUSED = "PAUSED", j.VIDEO_STOPPED = "STOPPED", j.VIDEO_COMPLETED = "COMPLETED", c.exports = j;
    }), define("html5/player/dummyplaystrategy", ["require", "exports", "module", "Class", "cvp/customevent", "cvp/log", "core/app", "cvp/browser"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/customevent"), f = a("cvp/log"), g = f.getLogger(), h = a("core/app"), i = a("cvp/browser"), j = d.extend({
            init: function(a, b, c) {
                g.debug("[StartStrategy] init: ", arguments), this.eReady = new e, this._element = a, this._poster = b, this._autostart = c, this._elementSrc = h.BLANK_MP4_URL;
            },
            execute: function() {
                var a = this, b=!1, c = this._getEventList(), d = function(b, d) {
                    for (var e = b ? "addEventListener" : "removeEventListener", f = 0, g = c.length; g > f; f++) {
                        a._element[e](c[f], d);
                    }
                }, e = function(c) {
                    g.debug("[StartStrategy] received: ", c.type), d(!1, e), b || (b=!0, a._element.controls = "", a._element.pause(), a._fireReady());
                };
                g.debug("[StartStrategy] execute"), d(!0, e), this._poster && (this._element.poster && this._element.removeAttribute("poster"), this._element.poster = this._poster), this._element.controls=!0, this._element.src = this._elementSrc, this._element.load(), i.allowedAutoPlay && this._autostart && (g.debug("[StartStrategy] auto-play()-ing"), this._element.play());
            },
            _getEventList: function() {
                var a = ["click", "play"];
                return i.allowedAutoPlay && a.push("loadmetadata"), a;
            },
            _fireReady: function() {
                this.eReady.dispatch();
            }
        });
        c.exports = j;
    }), define("html5/player/controller", ["require", "exports", "module", "Class", "cvp/static", "cvp/utils", "cvp/utils/commandqueue", "cvp/customevent", "cvp/log", "cvp/browser", "html5/player/videoplayer", "html5/ads/adserverproxy", "html5/player/dummyplaystrategy"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/static"), f = a("cvp/utils"), g = a("cvp/utils/commandqueue"), h = a("cvp/customevent"), i = a("cvp/log"), j = a("cvp/browser"), k = a("html5/player/videoplayer"), l = a("html5/ads/adserverproxy"), m = a("html5/player/dummyplaystrategy"), n = i.getLogger("PlayerController"), o = d.extend({
            init: function(a) {
                this._config = a, this._autostart = this._config.configInfo.autostart, this._commandQ = new g, this._videoPlayer = new k({
                    config: this._config,
                    containerElement: "player_container",
                    elementId: this._config.params.id || "cvp_videoPlayer_" + f.now(),
                    width: this._config.params.width,
                    height: this._config.params.height,
                    controls: !0,
                    autostart: this._autostart
                }), this._adProxy = new l(this._config.adPolicy), this._videoPlayer.eRendered.addListener(this._onRendered, this), this._videoPlayer.eFullscreenChange.addListener(this._onFullscreenChange, this), this._videoPlayer.eFullscreenError.addListener(this._onFullscreenError, this), this._videoPlayer.ePlayerPaused.addListener(this._onPlayerPaused, this), this._videoPlayer.ePlayerMuted.addListener(this._onPlayerMuted, this), this._videoPlayer.ePlayerStopped.addListener(this._onPlayerStopped, this), this._videoPlayer.eContentMetadata.addListener(this._onContentMetadata, this), this._videoPlayer.eContentPlay.addListener(this._onContentPlay, this), this._videoPlayer.eContentPause.addListener(this._onContentPause, this), this._videoPlayer.eContentEnd.addListener(this._onContentEnd, this), this._videoPlayer.eContentPlayhead.addListener(this._onContentPlayhead, this), this._videoPlayer.eContentSeek.addListener(this._onContentSeek, this), this._videoPlayer.eContentSeekEnd.addListener(this._onContentSeeked, this), this._videoPlayer.eContentBuffering.addListener(this._onContentBuffering, this), this._videoPlayer.eContentVolume.addListener(this._onContentVolume, this), this._videoPlayer.eContentError.addListener(this._onContentError, this), this._videoPlayer.eContentResize.addListener(this._onContentResize, this), this._adProxy.eAdPlayhead.addListener(this._onAdPlayhead, this), this._adProxy.eAdPlay.addListener(this._onAdPlay, this), this._adProxy.eAdEnd.addListener(this._onAdEnd, this), this._adProxy.eAdError.addListener(this._onAdError, this), this._adProxy.eAdClick.addListener(this._onAdClick, this), this._adProxy.eAdReady.addListener(this._onAdReady, this), this._adProxy.eAdStopped.addListener(this._onPlayerStopped, this), this._currentContentId = "", this._contentQueue = [], this._seekTo = 0, this._isStopped=!1, this._isShimmed=!1, this._firstPlay=!0, this._delayPlayerControls=!1, this._triggeredAd=!1, this._isFullscreen=!1, this._queueAutoplay=!0, this._metadataFired=!1, this._playEventQueue = [], this.eRendered = new h, this.eFullscreenChange = new h, this.eFullscreenError = new h, this.ePlayerPaused = new h, this.ePlayerMuted = new h, this.eContentMetadata = new h, this.eContentBegin = new h, this.eContentPlay = new h, this.eContentPause = new h, this.eContentEnd = new h, this.eContentComplete = new h, this.eContentReplay = new h, this.eContentPlayhead = new h, this.eContentSeek = new h, this.eContentSeekEnd = new h, this.eContentBuffering = new h, this.eContentQueue = new h, this.eContentQueueAutoplay = new h, this.eContentVolume = new h, this.eContentError = new h, this.eContentResize = new h, this.eContentStarted = new h, this.eAdPlayhead = new h, this.eAdPlay = new h, this.eAdEnd = new h, this.eAdError = new h, this.eAdClick = new h;
            },
            render: function(a) {
                this._adProxy.setVideoDisplayBase(a), this._videoPlayer.render(a);
            },
            remove: function() {
                this._videoPlayer.remove();
            },
            dispose: function() {
                n.log("dispose"), this.stop(), this._adProxy.dispose(), this._videoPlayer.dispose();
            },
            _onRendered: function(a) {
                n.log("_onRendered", a), this._commandQ.execute(), this.eRendered.dispatch();
            },
            play: function(a, b) {
                return n.log("play", a.getId()), this._isStopped=!1, this._catalogEntry = a, this._playOptions = b, this._videoPlayer.eContentPlayhead.addListener(this._onContentStarted, this), this._videoPlayer.rendered() ? (this._executePlayStrategy(f.bind(this._playMedia, this)), void 0) : (this._commandQ.push(this.play, this, arguments), void 0);
            },
            replay: function(a) {
                var b = this._catalogEntry;
                if (!b) {
                    return n.warn("replay", "No previous content entry to replay!"), void 0;
                }
                var c = this._playOptions, d = b.getId();
                n.log("replay", d);
                var g = e.onCallback(a, ["onContentReplayRequest", a, d, c]);
                g!==!1 && (f.isObject(g) && (c = g), this.eContentReplay.dispatch(d, c), this.play(b, c));
            },
            playNextInQueue: function() {
                if (!this._contentQueue.length) {
                    return n.warn("playNextInQueue", "Content queue is empty!"), void 0;
                }
                var a = this._contentQueue.shift();
                this.eContentQueue.dispatch(this.getQueue()), this.play(a.entry, a.options);
            },
            reset: function() {
                if (n.debug("reset", "determine if shim is needed"), this._firstPlay && this._autostart&&!j.allowedAutoPlay&&!this._isShimmed) {
                    n.debug("reset", "first play - run DummyPlayStartStrategy");
                    var a = new m(this._videoPlayer.element, null, !0);
                    this._videoPlayer.removePlayerListeners(), this._delayPlayerControls=!0, a.eReady.addListener(f.bind(function() {
                        n.debug("reset", "shim DummyPlayStartStrategy was successful"), this._firstPlay=!1, a = null;
                    }, this)), n.debug("reset", "executing DummyPlayStartStrategy for shim"), a.execute(), this._isShimmed=!0;
                } else {
                    n.debug("reset", "not first play or in process of being shimmed - no shim needed");
                }
            },
            _executePlayStrategy: function(a) {
                if (n.log("_executePlayStrategy"), !this._firstPlay || this._autostart && j.allowedAutoPlay) {
                    n.debug("_executePlayStrategy", "not first play or allowed to autoplay"), a();
                } else {
                    n.debug("_executePlayStrategy", "first play"), this._videoPlayer.removePlayerListeners(), this._delayPlayerControls=!0;
                    var b = new m(this._videoPlayer.element, this._catalogEntry.getImageForDimensions(this._videoPlayer.getWidth(), this._videoPlayer.getHeight()), this._autostart);
                    b.eReady.addListener(function() {
                        n.debug("_executePlayStrategy", "DummyPlayStartStrategy was successful"), a(), b = null;
                    }), b.execute();
                }
            },
            _playMedia: function() {
                n.log("_playMedia"), this._firstPlay=!1, this._metadataFired=!1, this._onContentBegin(this._catalogEntry.getId()), this._adProxy.isEnabled() ? this._adProxy.loadAds(this._catalogEntry) : this._playContent();
            },
            _playContent: function() {
                n.log("_playContent"), this._delayPlayerControls && (this._videoPlayer.playerOptions.controls=!1), this._adProxy.setVideoStatePlaying(), this._videoPlayer.play(this._catalogEntry);
            },
            _resumeContent: function() {
                n.log("_resumeContent"), this._videoPlayer.eContentPlayhead.addListener(this._onContentStarted, this), this._adProxy.setVideoStatePlaying(), this._videoPlayer.play(this._catalogEntry);
            },
            pause: function() {
                this._videoPlayer.pause();
            },
            resume: function() {
                this._videoPlayer.resume();
            },
            _reset: function() {
                this.clearRestorePlayhead();
            },
            stop: function() {
                this._reset(), "AD" === this._mediaClass ? (n.log("stopping ad"), this._adProxy.stop()) : (n.log("stopping content"), this._videoPlayer.stop());
            },
            queue: function(a, b) {
                n.debug("queue", a.getId()), this._contentQueue.push({
                    entry: a,
                    options: b
                }), this.eContentQueue.dispatch(this.getQueue());
            },
            dequeue: function(a) {
                for (var b, c = this._contentQueue.length, d = c - 1; d >= 0; --d) {
                    if (b = this._contentQueue[d].entry, b.getId() === a) {
                        this._contentQueue.splice(d, 1);
                        break;
                    }
                }
                this._contentQueue.length !== c && this.eContentQueue.dispatch(this.getQueue());
            },
            emptyQueue: function() {
                this._contentQueue.length && (this._contentQueue.length = 0, this.eContentQueue.dispatch(this.getQueue()));
            },
            setQueueAutoplay: function(a) {
                this._queueAutoplay = a, this.eContentQueueAutoplay.dispatch(this._queueAutoplay);
            },
            getQueue: function() {
                return f.map(this._contentQueue, function(a) {
                    return a.entry.getId();
                });
            },
            seek: function(a) {
                this._contentStarted ? this._videoPlayer.seek(a) : this.setRestorePlayhead(a);
            },
            setRestorePlayhead: function(a) {
                n.info("set restore playhead to " + a), this._seekTo = a;
            },
            clearRestorePlayhead: function() {
                this._seekTo = 0;
            },
            resize: function(a, b) {
                this._videoPlayer.resize(a, b);
            },
            goFullscreen: function() {
                this._videoPlayer.goFullscreen();
            },
            setVolume: function(a) {
                this._videoPlayer.setVolume(a);
            },
            getVolume: function() {
                return this._videoPlayer.getVolume();
            },
            mute: function() {
                this._videoPlayer.mute();
            },
            unmute: function() {
                this._videoPlayer.unmute();
            },
            isMuted: function() {
                this._videoPlayer.isMuted();
            },
            setAdSection: function(a) {
                this._adProxy.setAdSection(a);
            },
            getAdSection: function() {
                return this._adProxy.getAdSection();
            },
            setAdKeyValue: function(a, b) {
                this._adProxy.setAdKeyValue(a, b);
            },
            getAdKeyValue: function(a) {
                return this._adProxy.getAdKeyValue(a);
            },
            getAdKeyValues: function() {
                return this._adProxy.getAdKeyValues();
            },
            clearAdKeyValues: function() {
                this._adProxy.clearAdKeyValues();
            },
            getCatalogEntry: function() {
                return this._catalogEntry;
            },
            getPlayerDimensions: function() {
                var a = this._videoPlayer.getDimensions();
                return this._isFullscreen && f.extend(a, {
                    width: window.screen.width,
                    height: window.screen.height
                }), a;
            },
            getAdId: function() {
                return this._adProxy.currentAdId;
            },
            getAdType: function() {
                return this._adProxy.getCurrentAdType();
            },
            _onFullscreenChange: function(a, b) {
                if (n.log("_onFullscreenChange"), this._isFullscreen = b, this.eFullscreenChange.dispatch.apply(this.eFullscreenChange, arguments), "CONTENT" === this._mediaClass) {
                    var c = this.getPlayerDimensions();
                    this._onContentResize(c.width, c.height, b);
                }
            },
            _onFullscreenError: function() {
                n.log("_onFullscreenError"), this.eFullscreenError.dispatch.apply(this.eFullscreenError, arguments);
            },
            _onPlayerPaused: function() {
                n.log("_onPlayerPaused"), this.ePlayerPaused.dispatch.apply(this.ePlayerPaused, arguments);
            },
            _onPlayerMuted: function() {
                n.log("_onPlayerMuted"), this.ePlayerMuted.dispatch.apply(this.ePlayerMuted, arguments);
            },
            _onPlayerStopped: function() {
                n.log("_onPlayerStopped"), this._isStopped=!0;
            },
            _onContentMetadata: function(a, b) {
                n.log("_onContentMetadata"), this._currentContentDuration = b, this._metadataFired || this.eContentMetadata.dispatch.apply(this.eContentMetadata, arguments), this._dumpPlayEventQueue();
            },
            _onContentBegin: function(a) {
                n.log("_onContentBegin"), this._currentContentId = a, this.eContentBegin.dispatch(a, this._playOptions);
            },
            _dumpPlayEventQueue: function() {
                if (this._metadataFired=!0, 0 !== this._playEventQueue.length) {
                    for (var a = 0, b = this._playEventQueue.length; b > a; ++a) {
                        this._fireContentPlay.apply(this, this._playEventQueue[a]);
                    }
                    this._playEventQueue.length = 0;
                }
            },
            _fireContentPlay: function() {
                this.eContentPlay.dispatch.apply(this.eContentPlay, arguments);
            },
            _onContentPlay: function() {
                n.log("_onContentPlay"), this._delayPlayerControls && this._videoPlayer.setOptions({
                    controls: !0
                }), this._mediaClass = "CONTENT", this._contentStarted=!1, this._metadataFired ? this._fireContentPlay.apply(this, arguments) : this._playEventQueue.push(arguments);
            },
            _onContentPause: function(a, b) {
                n.log("_onContentPause"), this.eContentPause.dispatch.apply(this.eContentPause, arguments), b ? this._adProxy.setVideoStatePaused() : this._adProxy.setVideoStatePlaying();
            },
            _onContentEnd: function() {
                n.log("_onContentEnd"), this._mediaClass = "", this.eContentEnd.dispatch.apply(this.eContentEnd, arguments), this._adProxy.setVideoStateStopped(), this._adProxy.isEnabled() ? (this._videoPlayer.setOptions({
                    controls: !1
                }), this._adProxy.playPostroll(this._catalogEntry)) : this._onContentComplete.apply(this, arguments);
            },
            _continueAutoplay: function() {
                if (this._queueAutoplay && this._contentQueue.length) {
                    var a = this._contentQueue.shift();
                    this.eContentQueue.dispatch(this.getQueue()), this.play(a.entry, a.options);
                } else {
                    this.pause(), this.seek(0);
                }
            },
            _onContentComplete: function() {
                n.log("_onContentComplete"), this.eContentComplete.dispatch(this._catalogEntry.getId()), this._adProxy.setVideoStateCompleted(), this._continueAutoplay();
            },
            _onContentStarted: function(a, b) {
                n.log("_onContentStarted"), b > 0 && (this._contentStarted=!0, this._videoPlayer.eContentPlayhead.removeListener(this._onContentStarted, this), this._seekAhead(), this.eContentStarted.dispatch());
            },
            _seekAhead: function() {
                this._seekTo && (n.info("restoring playhead to " + this._seekTo), this.seek(this._seekTo), this.clearRestorePlayhead());
            },
            _onContentPlayhead: function(a, b) {
                this._dumpPlayEventQueue(), this._currentContentPlayhead = b, this.eContentPlayhead.dispatch.apply(this.eContentPlayhead, arguments);
            },
            _onAdReady: function() {
                n.log("_onAdReady"), this._midrollMap = this._adProxy.getMidrolls(), f.isSimpleObject(this._midrollMap)&&!f.isEmpty(this._midrollMap) && (n.log("_onAdReady - midrolls: ", f.keys(this._midrollMap)), this._videoPlayer.eContentPlayhead.addListener(this._onPlayheadForMidrolls, this));
            },
            _onPlayheadForMidrolls: function(a, b) {
                var c = Math.floor(b);
                c in this._midrollMap && (n.log("_onPlayheadForMidrolls", "playing midroll at " + c + " of midrolls: ", f.keys(this._midrollMap)), this.setRestorePlayhead(b), this._currentMidroll = this._midrollMap[c], delete this._midrollMap[c], this._playMidroll(this._currentMidroll));
            },
            _playMidroll: function(a) {
                n.log("_playMidroll"), this._adProxy.setVideoStatePaused(), this._adProxy.playMidroll(a);
            },
            _resumeFromMidroll: function() {
                n.log("_resumeFromMidroll"), this._resumeContent();
            },
            _onContentSeek: function() {
                n.log("_onContentSeek"), this.eContentSeek.dispatch.apply(this.eContentSeek, arguments);
            },
            _onContentSeeked: function() {
                n.log("_onContentSeeked"), this.eContentSeekEnd.dispatch.apply(this.eContentSeekEnd, arguments);
            },
            _onContentBuffering: function() {
                n.log("_onContentBuffering"), this.eContentBuffering.dispatch.apply(this.eContentBuffering, arguments);
            },
            _onContentVolume: function() {
                n.log("_onContentVolume"), this.eContentVolume.dispatch.apply(this.eContentVolume, arguments);
            },
            _onContentError: function() {
                n.log("_onContentError"), this.eContentError.dispatch.apply(this.eContentError, arguments), this._continueAutoplay();
            },
            _onContentResize: function() {
                n.log("_onContentResize"), this.eContentResize.dispatch.apply(this.eContentResize, arguments);
            },
            _onAdPlayhead: function(a, b) {
                this._currentAdPlayhead = a, this._currentAdDuration = b, this.eAdPlayhead.dispatch.apply(this.eAdPlayhead, arguments);
            },
            _onAdPlay: function(a) {
                var b = (a.ads, a.token), c = a.mode, d = a.id, e = a.duration, f = a.blockId, g = a.adType, h = a.adAnalyticsData;
                n.debug("_onAdPlay", "event", a), this._triggeredAd=!0, this._contentStarted=!1, this._mediaClass = "AD", this._videoPlayer.removePlayerListeners(), this.eAdPlay.dispatch(b, c, d, e, f, g, h);
            },
            _onAdEnd: function(a) {
                var b = a.token, c = a.mode, d = a.id, e = a.blockId, f = a.adType;
                n.debug("_onAdEnd", "event", a), this._mediaClass = "", this._triggeredAd && this.eAdEnd.dispatch(b, c, d, e, f), this._onAdComplete(f);
            },
            _onAdError: function(a) {
                var b = 0, c = 0, d = null, e = null, g = a.errors, h = a.adType, i = [], j = {
                    INFO: 1,
                    WARN: 2,
                    ERROR: 3,
                    FATAL: 4
                };
                for (n.debug("_onAdError", a), f.undef(a) ? i.push({
                    severity: "WARN",
                    name: "Received no params to callback, assuming no ad played"
                }) : (a.success || i.push({
                    severity: "ERROR",
                    name: "Did not receive successful response to ad request"
                }), g && 0 !== g.length && i.concat(g)), c = i.length; c > b; ++b) {
                    d = i[b], e = d.severity && j[d.severity] || j.INFO, n.debug("_onAdError", d.severity, d.name), e > j.WARN && this.eAdError.dispatch(d.name);
                }
                this._onAdComplete(h);
            },
            _onAdComplete: function(a) {
                if (this._triggeredAd=!1, this._isStopped) {
                    return this._videoPlayer.reset(), void 0;
                }
                switch (a) {
                case l.PREROLL:
                    this._playContent();
                    break;
                case l.MIDROLL:
                    this._resumeFromMidroll();
                    break;
                default:
                    this._onContentComplete(this._currentContentId);
                }
            },
            _onAdClick: function(a) {
                this.eAdClick.dispatch(a.url);
            }
        });
        c.exports = o;
    }), define("html5/player/instance", ["require", "exports", "module", "html5/shared/playerconfig", "cvp/utils", "html5/player/controller"], function(a, b, c) {
        var d = a("html5/shared/playerconfig"), e = a("cvp/utils"), f = a("html5/player/controller"), g = function(a) {
            var b = e.extend({}, d);
            return e.extend(b.params, a.params), e.extend(b, a.configData), new f(b);
        };
        c.exports = g;
    }), define("html5/tracking/trackingmanager", ["require", "exports", "module", "Class", "cvp/utils", "cvp/customevent", "cvp/log"], function(a, b, c) {
        var d = a("Class"), e = (a("cvp/utils"), a("cvp/customevent")), f = a("cvp/log"), g = f.getLogger("TrackingManager"), h = d.extend({
            setLogger: function(a) {
                this._logger = a;
            },
            init: function(a) {
                this.setLogger(a.logger || g), this._playerController = a.playerController, this._trackingInterval = 0, this.eTrackingAdStart = new e, this.eTrackingAdComplete = new e, this.eTrackingAdProgress = new e, this.eTrackingAdCountdown = new e, this.eTrackingAdClick = new e, this.eTrackingContentBegin = new e, this.eTrackingContentPlay = new e, this.eTrackingContentProgress = new e, this.eTrackingContentEnd = new e, this.eTrackingContentComplete = new e, this.eTrackingContentReplay = new e, this.eTrackingContentSeek = new e, this.eTrackingContentSeekEnd = new e, this.eTrackingContentSegmentPlay = new e, this.eTrackingContentSegmentComplete = new e, this.eTrackingFullscreen = new e, this.eTrackingMuted = new e, this.eTrackingPaused = new e, this.reset(), this.addListeners();
            },
            reset: function() {
                this._lastPlayhead = 0, this._lastPercent = 0, this._previousAdPlayhead = 0, this._currentAdDuration = 0, this._currentAdPlayhead = 0, this._totalAdPlayTime = 0, this._previousContentPlayhead = 0, this._currentContentDuration = 0, this._currentContentPlayhead = 0, this._totalContentPlayTime = 0, this._totalGrossPlayTime = 0;
            },
            dispose: function() {
                this.removeListeners();
            },
            getCatalogEntry: function() {
                return this._playerController.getCatalogEntry();
            },
            getPlayerDimensions: function() {
                return this._playerController.getPlayerDimensions();
            },
            getAdId: function() {
                return this._playerController.getAdId();
            },
            getAdType: function() {
                return this._playerController.getAdType();
            },
            getAdSection: function() {
                return this._playerController.getAdSection();
            },
            addListeners: function() {
                this._playerController.eAdPlay.addListener(this._onTrackingAdStart, this), this._playerController.eAdEnd.addListener(this._onTrackingAdComplete, this), this._playerController.eAdPlayhead.addListener(this._onTrackingAdProgress, this), this._playerController.eAdPlayhead.addListener(this._onTrackingAdCountdown, this), this._playerController.eAdClick.addListener(this._onTrackingAdClick, this), this._playerController.eContentBegin.addListener(this._onTrackingContentBegin, this), this._playerController.eContentPlay.addListener(this._onTrackingContentPlay, this), this._playerController.eContentPlayhead.addListener(this._onTrackingContentProgress, this), this._playerController.eContentEnd.addListener(this._onTrackingContentEnd, this), this._playerController.eContentComplete.addListener(this._onTrackingContentComplete, this), this._playerController.eContentReplay.addListener(this._onTrackingContentReplay, this), this._playerController.eContentSeek.addListener(this._onTrackingContentSeek, this), this._playerController.eContentSeekEnd.addListener(this._onTrackingContentSeekEnd, this), this._playerController.eFullscreenChange.addListener(this._onTrackingFullscreen, this), this._playerController.ePlayerPaused.addListener(this._onTrackingPaused, this), this._playerController.ePlayerMuted.addListener(this._onTrackingMuted, this);
            },
            removeListeners: function() {
                this._playerController.eAdPlay.removeListener(this._onTrackingAdStart, this), this._playerController.eAdEnd.removeListener(this._onTrackingAdComplete, this), this._playerController.eAdPlayhead.removeListener(this._onTrackingAdProgress, this), this._playerController.eAdPlayhead.removeListener(this._onTrackingAdCountdown, this), this._playerController.eAdClick.removeListener(this._onTrackingAdClick, this), this._playerController.eContentBegin.removeListener(this._onTrackingContentBegin, this), this._playerController.eContentPlay.removeListener(this._onTrackingContentPlay, this), this._playerController.eContentPlayhead.removeListener(this._onTrackingContentProgress, this), this._playerController.eContentEnd.removeListener(this._onTrackingContentEnd, this), this._playerController.eContentComplete.removeListener(this._onTrackingContentComplete, this), this._playerController.eContentReplay.removeListener(this._onTrackingContentReplay, this), this._playerController.eContentSeek.removeListener(this._onTrackingContentSeek, this), this._playerController.eContentSeekEnd.removeListener(this._onTrackingContentSeekEnd, this), this._playerController.eFullscreenChange.removeListener(this._onTrackingFullscreen, this), this._playerController.ePlayerPaused.removeListener(this._onTrackingPaused, this), this._playerController.ePlayerMuted.removeListener(this._onTrackingMuted, this);
            },
            _canEmitProgress: function(a, b) {
                var c = this._trackingInterval;
                if (!c) {
                    return !1;
                }
                var d = Math.floor(a), e = Math.floor(a / b * 100), f=!1, g = this._intervalRegex.exec(c), h = Number(g[1]), i = g[2];
                return isNaN(b) && "%" === i && (h = 30, i = "s"), "s" === i ? d !== this._lastPlayhead && d%h === 0 && (f=!0) : e !== this._lastPercent && 100 > e && e%h === 0 && (f=!0), f && (this._lastPlayhead = d, this._lastPercent = e), f;
            },
            _onTrackingAdStart: function(a, b, c, d, e, f, g) {
                this._logger.log("_onTrackingAdStart", arguments), this._lastPlayhead = 0, this._lastPercent = 0, this._previousAdPlayhead = 0, this._currentAdPlayhead = 0, this._currentAdDuration = 0;
                var h = this.getPlayerDimensions(), i = this.getCatalogEntry();
                this.eTrackingAdStart.dispatch({
                    adTitle: c,
                    adWidth: h.videoWidth,
                    adHeight: h.videoHeight,
                    adSection: this.getAdSection(),
                    contentId: i.getId(),
                    originId: i.getOriginId(),
                    mediaUrl: i.getMediaUrl(),
                    adType: f,
                    adDuration: d,
                    adBlock: 0,
                    totalPlayTime: this._totalGrossPlayTime,
                    adTotalPlayTime: this._totalAdPlayTime,
                    adAnalyticsData: g
                });
            },
            _onTrackingAdComplete: function(a, b, c, d, e) {
                this._logger.log("_onTrackingAdComplete", arguments), this.eTrackingAdComplete.dispatch({
                    adTitle: c,
                    adType: e,
                    adBlock: 0,
                    totalPlayTime: this._totalGrossPlayTime,
                    adTotalPlayTime: this._totalAdPlayTime
                });
            },
            _onTrackingAdProgress: function(a, b) {
                this._currentAdPlayhead = a, this._currentAdDuration = b;
                var c = a - this._previousAdPlayhead;
                this._previousAdPlayhead = a, 0 >= c || c >= 1.25 || (this._totalAdPlayTime += c, this._totalGrossPlayTime += c, this._canEmitProgress(a, b) && this.eTrackingAdProgress.dispatch({
                    totalPlayTime: this._totalGrossPlayTime,
                    playheadTime: this._currentAdPlayhead,
                    grossProgressMarker: 0,
                    adType: this.getAdType(),
                    adTotalPlaytime: this._totalAdPlayTime
                }));
            },
            _onTrackingAdCountdown: function(a, b) {
                var c = Math.ceil(b - a);
                c > 0 && c !== this._previousAdCountdown && (this._previousAdCountdown = c, this.eTrackingAdCountdown.dispatch({
                    adMode: "standard",
                    secs: c
                }));
            },
            _onTrackingAdClick: function(a) {
                this._logger.log("_onTrackingAdClick", arguments);
                var b = this.getCatalogEntry();
                this.eTrackingAdClick.dispatch({
                    contentId: b.getId(),
                    url: a
                });
            },
            _onTrackingContentBegin: function(a, b) {
                this._logger.log("_onTrackingContentBegin", arguments), this.reset();
                var c = this.getCatalogEntry();
                this.eTrackingContentBegin.dispatch({
                    contentId: c.getId(),
                    playOptions: b,
                    originId: c.getOriginId(),
                    contentMode: c.getMode(),
                    contentSource: c.getSource(),
                    totalPlayTime: this._totalGrossPlayTime,
                    adTotalPlayTime: this._totalAdPlayTime
                });
            },
            _onTrackingContentPlay: function() {
                this._logger.log("_onTrackingContentPlay", arguments), this._lastPlayhead = 0, this._lastPercent = 0;
                var a = this.getCatalogEntry();
                this.eTrackingContentPlay.dispatch({
                    contentId: a.getId(),
                    originId: a.getOriginId(),
                    mediaUrl: a.getMediaUrl(),
                    length: a.getTrt(),
                    grossLength: a.getTrt(),
                    totalPlayTime: this._totalGrossPlayTime,
                    adTotalPlayTime: this._totalAdPlayTime
                });
            },
            _onTrackingContentProgress: function(a, b, c) {
                this._currentContentPlayhead = b, this._currentContentDuration = c;
                var d = b - this._previousContentPlayhead;
                if (this._previousContentPlayhead = b, !(0 >= d || d >= 1.25) && (this._totalContentPlayTime += d, this._totalGrossPlayTime += d, this._canEmitProgress(b, c, a))) {
                    var e = this.getCatalogEntry(), f = this.getPlayerDimensions();
                    this.eTrackingContentProgress.dispatch({
                        contentId: e.getId(),
                        originId: e.getOriginId(),
                        playerWidth: f.width,
                        playerHeight: f.height,
                        percent: b / c * 100,
                        totalPlayTime: this._totalGrossPlayTime,
                        playheadTime: this._currentContentPlayhead,
                        progressMarker: 0,
                        grossProgressMarker: 0,
                        adTotalPlayTime: this._totalAdPlayTime
                    });
                }
            },
            _onTrackingContentEnd: function() {
                this._logger.log("_onTrackingContentEnd", arguments);
                var a = this.getCatalogEntry();
                this.eTrackingContentEnd.dispatch({
                    contentId: a.getId(),
                    totalPlayTime: this._totalGrossPlayTime,
                    playheadTime: this._currentContentPlayhead,
                    adTotalPlayTime: this._totalAdPlayTime
                });
            },
            _onTrackingContentComplete: function() {
                this._logger.log("_onTrackingContentComplete", arguments);
                var a = this.getCatalogEntry();
                this.eTrackingContentComplete.dispatch({
                    contentId: a.getId(),
                    percent: 100,
                    totalPlayTime: this._totalGrossPlayTime,
                    playheadTime: this._currentContentPlayhead,
                    progressMarker: 0,
                    grossProgressMarker: 0,
                    adTotalPlayTime: this._totalAdPlayTime
                });
            },
            _onTrackingContentReplay: function(a, b) {
                this._logger.log("_onTrackingContentReplay", arguments), this.eTrackingContentReplay.dispatch({
                    contentId: a,
                    additionalParams: b
                });
            },
            _onTrackingContentSeek: function(a, b, c, d) {
                this._logger.log("_onTrackingContentSeek", arguments);
                this.getCatalogEntry();
                this.eTrackingContentSeek.dispatch({
                    contentId: a,
                    previousPlayhead: b,
                    newPlayhead: c,
                    duration: d
                });
            },
            _onTrackingContentSeekEnd: function(a, b, c, d) {
                this._logger.log("_onTrackingContentSeekEnd", arguments), this.eTrackingContentSeekEnd.dispatch({
                    contentId: a,
                    previousPlayhead: b,
                    newPlayhead: c,
                    duration: d
                });
            },
            _onTrackingFullscreen: function(a, b) {
                this._logger.log("_onTrackingFullscreen", arguments), this.eTrackingFullscreen.dispatch({
                    contentId: a,
                    fullscreen: b
                });
            },
            _onTrackingMuted: function(a, b) {
                this._logger.log("_onTrackingMuted", arguments), this.eTrackingMuted.dispatch({
                    contentId: a,
                    muted: b
                });
            },
            _onTrackingPaused: function(a, b, c) {
                this._logger.log("_onTrackingPaused", arguments), this.eTrackingPaused.dispatch({
                    contentId: a,
                    playhead: b,
                    paused: c
                });
            },
            _intervalRegex: /(\d+)([s%])?/,
            setTrackingInterval: function(a) {
                if (!a) {
                    return this._trackingInterval = 0, void 0;
                }
                var b = this._intervalRegex.exec(String(a));
                if (!b) {
                    return this._logger.error('setTrackingInterval param "' + a + '" did not match accepted regex'), void 0;
                }
                var c = b[1], d = b[2] || "%";
                c > 100 && (d = "s"), this._trackingInterval = c + d;
            }
        });
        c.exports = h;
    }), define("html5/tracking/aspentracking", ["require", "exports", "module", "Class", "cvp/utils", "cvp/log", "html5/tracking/trackingmanager", "html5/aspencontroller"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/utils"), f = a("cvp/log"), g = a("html5/tracking/trackingmanager"), h = a("html5/aspencontroller"), i = f.getLogger("AspenTracking"), j = f.getLogger("AspenTrackingManager"), k = d.extend({
            init: function(a) {
                i.log("init"), this._playerController = a.playerController, this._cvpElementId = a.cvpElementId, this._trackingManager = new g({
                    logger: j,
                    playerController: this._playerController
                }), this._isListening=!1, this.listen(), h.isReady() ? this.updateTrackingInterval() : (this.setTrackingInterval("30s"), this._watchAspenInit());
            },
            setTrackingInterval: function(a) {
                i.log("setTrackingInterval"), a = e.toInt(a) + "s", this._trackingManager.setTrackingInterval(a);
            },
            updateTrackingInterval: function() {
                this._unwatchAspenInit();
                var a = h.getConfig("progressReportInterval");
                a && this.setTrackingInterval(a);
            },
            _watchAspenInit: function() {
                h.eInitSuccess.addListener(this.updateTrackingInterval, this);
            },
            _unwatchAspenInit: function() {
                h.eInitSuccess.removeListener(this.updateTrackingInterval, this);
            },
            dispose: function() {
                i.log("dispose"), this._unwatchAspenInit(), this.deafen(), this._trackingManager.dispose();
            },
            listen: function() {
                return i.log("listen"), this._isListening ? (i.log("already listening"), void 0) : (this._isListening=!0, this._trackingManager.eTrackingAdStart.addListener(this._onTrackingAdStart, this), this._trackingManager.eTrackingAdComplete.addListener(this._onTrackingAdComplete, this), this._trackingManager.eTrackingContentPlay.addListener(this._onTrackingContentPlay, this), this._trackingManager.eTrackingContentBegin.addListener(this._onTrackingContentBegin, this), this._trackingManager.eTrackingContentProgress.addListener(this._onTrackingContentProgress, this), this._trackingManager.eTrackingContentEnd.addListener(this._onTrackingContentEnd, this), this._trackingManager.eTrackingContentComplete.addListener(this._onTrackingContentComplete, this), this._trackingManager.eTrackingContentSeekEnd.addListener(this._onTrackingContentSeekEnd, this), this._trackingManager.eTrackingPaused.addListener(this._onTrackingPaused, this), void 0);
            },
            deafen: function() {
                return i.log("deafen"), this._isListening ? (this._isListening=!1, this._trackingManager.eTrackingAdStart.removeListener(this._onTrackingAdStart, this), this._trackingManager.eTrackingAdComplete.removeListener(this._onTrackingAdComplete, this), this._trackingManager.eTrackingContentPlay.removeListener(this._onTrackingContentPlay, this), this._trackingManager.eTrackingContentBegin.removeListener(this._onTrackingContentBegin, this), this._trackingManager.eTrackingContentProgress.removeListener(this._onTrackingContentProgress, this), this._trackingManager.eTrackingContentEnd.removeListener(this._onTrackingContentEnd, this), this._trackingManager.eTrackingContentComplete.removeListener(this._onTrackingContentComplete, this), this._trackingManager.eTrackingContentSeekEnd.removeListener(this._onTrackingContentSeekEnd, this), this._trackingManager.eTrackingPaused.removeListener(this._onTrackingPaused, this), void 0) : (i.log("not listening"), void 0);
            },
            getCurrentPlayer: function() {
                return this._playerManager.getCurrentPlayer();
            },
            _onTrackingAdInfo: function(a) {
                i.log("_onTrackingAdInfo"), h.send("adInfo", {
                    cvpElementId: this._cvpElementId,
                    contentId: a.contentId,
                    videoContentCount: String(h.videoCount),
                    adSection: a.adSection,
                    adAssetId: a.adTitle,
                    adSlotInfo: void 0
                });
            },
            _onTrackingAdStart: function(a) {
                i.log("_onTrackingAdStart"), h.send("adStart", {
                    cvpElementId: this._cvpElementId,
                    contentId: a.contentId,
                    videoContentCount: String(h.videoCount),
                    adType: a.adType,
                    adBlockId: String(a.adBlock),
                    adSection: a.adSection,
                    adAssetId: a.adTitle,
                    width: String(a.adWidth),
                    height: String(a.adHeight),
                    duration: String(a.adDuration),
                    slotId: void 0,
                    adInstances: void 0
                });
            },
            _onTrackingAdComplete: function(a) {
                i.log("_onTrackingAdComplete"), h.send("adStop", {
                    cvpElementId: this._cvpElementId,
                    contentId: a.contentId,
                    videoContentCount: String(h.videoCount),
                    adType: a.adType,
                    adBlockId: String(a.adBlock),
                    adAssetId: a.adTitle,
                    slotId: void 0
                });
            },
            _onTrackingContentBegin: function(a) {
                i.log("_onTrackingContentBegin"), h.videoCount += 1, h.send("contentStart", {
                    cvpElementId: this._cvpElementId,
                    contentId: a.contentId,
                    originId: a.originId,
                    playOptions: a.playOptions,
                    mode: a.contentMode,
                    propertyName: a.contentSource
                });
            },
            _onTrackingContentPlay: function(a) {
                i.log("_onTrackingContentPlay"), h.send("contentPlay", {
                    cvpElementId: this._cvpElementId,
                    contentId: a.contentId,
                    originId: a.originId,
                    contentType: a.contentType,
                    duration: String(a.length),
                    joinTime: String(a.totalPlayTime),
                    mediaPath: a.mediaUrl,
                    bandwidth: void 0,
                    serverIp: void 0,
                    ccAvailable: void 0,
                    dvrAvailable: void 0
                });
            },
            _onTrackingContentProgress: function(a) {
                i.log("_onTrackingContentProgress"), h.send("contentProgress", {
                    cvpElementId: this._cvpElementId,
                    contentId: a.contentId,
                    videoContentCount: String(h.videoCount),
                    originId: a.originId,
                    timeSpentBuffering: void 0,
                    timeSpentPlaying: String(a.totalPlayTime),
                    playHead: String(a.playheadTime),
                    playerWidth: String(a.playerWidth),
                    playerHeight: String(a.playerHeight),
                    ccAvailable: void 0,
                    ccEnabled: void 0,
                    ccTrackLang: void 0,
                    dvrAvailable: void 0,
                    dvrEnabled: void 0,
                    dvrWindow: void 0,
                    dvrStart: void 0
                });
            },
            _onTrackingPaused: function(a) {
                i.log("_onTrackingPaused"), h.send("contentPause", {
                    cvpElementId: this._cvpElementId,
                    contentId: a.contentId,
                    videoContentCount: String(h.videoCount),
                    contentPlayHead: String(a.playhead),
                    isPaused: String(a.paused)
                });
            },
            _onTrackingContentSeekEnd: function(a) {
                i.log("_onTrackingContentSeekEnd"), h.send("contentSeek", {
                    cvpElementId: this._cvpElementId,
                    contentId: a.contentId,
                    videoContentCount: String(h.videoCount),
                    seekFrom: String(a.previousPlayhead),
                    seekTo: String(a.newPlayhead),
                    dvrAvailable: void 0,
                    dvrEnabled: void 0
                });
            },
            _onTrackingContentEnd: function(a) {
                i.log("_onTrackingContentEnd"), h.send("contentStop", {
                    cvpElementId: this._cvpElementId,
                    contentId: a.contentId,
                    videoContentCount: String(h.videoCount),
                    playHead: String(a.playheadTime),
                    segmentId: void 0
                });
            },
            _onTrackingContentComplete: function(a) {
                i.log("_onTrackingContentComplete"), h.send("contentFinish", {
                    cvpElementId: this._cvpElementId,
                    contentId: a.contentId,
                    videoContentCount: String(h.videoCount)
                });
            }
        });
        c.exports = k;
    }), define("html5/manager", ["require", "exports", "module", "Class", "cvp/customevent", "cvp/ajax", "cvp/utils", "cvp/utils/jsonconverter", "cvp/log", "core/app", "html5/bootstrapper", "html5/aspencontroller", "html5/cms", "cvp/browser", "html5/player/instance", "html5/tracking/trackingmanager", "html5/tracking/aspentracking", "JSON"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/customevent"), f = a("cvp/ajax"), g = a("cvp/utils"), h = a("cvp/utils/jsonconverter"), i = a("cvp/log"), j = a("core/app"), k = a("html5/bootstrapper"), l = a("html5/aspencontroller"), m = a("html5/cms"), n = a("cvp/browser"), o = a("html5/player/instance"), p = a("html5/tracking/trackingmanager"), q = a("html5/tracking/aspentracking"), r = a("JSON"), s = i.getLogger(), t = d.extend({
            init: function() {
                this._configData = {}, this.ePlayerLoaded = new e, this.ePlayerLoadError = new e, this.ePlayerRendered = new e, this.eContentMetadata = new e, this.eContentBegin = new e, this.eContentPlay = new e, this.eContentPause = new e, this.eContentEnd = new e, this.eContentComplete = new e, this.eContentPlayhead = new e, this.eContentBuffering = new e, this.eContentQueue = new e, this.eContentQueueAutoplay = new e, this.eContentVolume = new e, this.eContentError = new e, this.eContentResize = new e, this.eContentEntryLoad = new e, this.eContentEntryLoadError = new e, this.eAdPlayhead = new e, this.eAdPlay = new e, this.eAdEnd = new e, this.eAdError = new e, this.eTrackingAdStart = new e, this.eTrackingAdComplete = new e, this.eTrackingAdProgress = new e, this.eTrackingAdCountdown = new e, this.eTrackingAdClick = new e, this.eTrackingContentPlay = new e, this.eTrackingContentBegin = new e, this.eTrackingContentProgress = new e, this.eTrackingContentEnd = new e, this.eTrackingContentComplete = new e, this.eTrackingContentReplay = new e, this.eTrackingContentSeek = new e, this.eTrackingContentSeekEnd = new e, this.eTrackingFullscreen = new e, this.eTrackingMuted = new e, this.eTrackingPaused = new e, this._loadingEntryQueue = {}, this._params = {};
            },
            load: function(a) {
                this._params = a;
                var b = a.flashVars;
                g.isSimpleObject(b) && (a.site = b.site, a.profile = b.profile, a.context = b.context, a.contentId = b.contentId, a.containerUrl = b.containerUrl, a.configUrl = b.configUrl, a.aspenContext = b.aspenContext, a.dt=!!b.superduperdevtime, a.requestTimeout = g.toInt(b.requestTimeout), a.requestRetries = g.toInt(b.requestRetries), "autostart" in b && (a.autostart = g.isFlagActive(b.autostart, !1))), a.requestTimeout && (f.JSONP.requestTimeout = a.requestTimeout), a.requestRetries && (f.JSONP.maxRetries = a.requestRetries);
                var c = this._calculateMappingUrl(this._params.site);
                return g.empty(c) ? (s.error("Unable to calculate mapping file url. Failing."), this._bootStrapFailure(), void 0) : (this._bootStrapper = new k(c, this._params), this._bootStrapper.eSuccess.addListener(this._bootStrapSuccess, this), this._bootStrapper.eFailure.addListener(this._bootStrapFailure, this), this._bootStrapper.load(), l.init({
                    dt: this._params.dt,
                    context: this._params.aspenContext || this._params.context,
                    site: this._params.site
                }), void 0);
            },
            _calculateMappingUrl: function(a) {
                if (g.empty(a)) {
                    return null;
                }
                var b = g.replaceExtension(j.MAPPING_FILE, "xml", "json");
                return this._params.dt || (b = g.template(j.MAPPING_PATH, a) + b), b;
            },
            _bootStrapSuccess: function(a) {
                if (!a ||!a.data) {
                    return s.error("MainController", "Unable to retrieve config data - failing."), this._bootStrapFailure(), void 0;
                }
                this._configData = a.data, s.debug("MainController", "_bootStrapSuccess");
                var b = this._configData.configInfo;
                if (b && (g.each(["autostart", "muted"], function(a) {
                    b[a] = g.isFlagActive(b[a], !1);
                }), "volume" in b)) {
                    var c = g.toInt(b.volume) / 100;
                    isFinite(c) && (b.volume = Math.min(Math.max(c, 0), 1));
                }
                var d = this._params;
                "autostart" in d && (this._configData.configInfo.autostart = d.autostart), this._playerController = new o({
                    params: this._params,
                    configData: this._configData
                }), this._aspenTracking = new q({
                    playerController: this._playerController,
                    cvpElementId: this.getCurrentPlayer()
                }), this._trackingManager = new p({
                    playerController: this._playerController
                }), this.setTrackingInterval(this._configData.trackingPolicy.interval), this._playerController.eRendered.addListener(this._onRendered, this), this._playerController.eContentMetadata.addListener(this._onContentMetadata, this), this._playerController.eContentBegin.addListener(this._onContentBegin, this), this._playerController.eContentPlay.addListener(this._onContentPlay, this), this._playerController.eContentPause.addListener(this._onContentPause, this), this._playerController.eContentEnd.addListener(this._onContentEnd, this), this._playerController.eContentComplete.addListener(this._onContentComplete, this), this._playerController.eContentPlayhead.addListener(this._onContentPlayhead, this), this._playerController.eContentBuffering.addListener(this._onContentBuffering, this), this._playerController.eContentQueue.addListener(this._onContentQueue, this), this._playerController.eContentQueueAutoplay.addListener(this._onContentQueueAutoplay, this), this._playerController.eContentVolume.addListener(this._onContentVolume, this), this._playerController.eContentError.addListener(this._onContentError, this), this._playerController.eContentResize.addListener(this._onContentResize, this), this._playerController.eAdPlayhead.addListener(this._onAdPlayhead, this), this._playerController.eAdPlay.addListener(this._onAdPlay, this), this._playerController.eAdEnd.addListener(this._onAdEnd, this), this._playerController.eAdError.addListener(this._onAdError, this), this._trackingManager.eTrackingAdStart.addListener(this._onTrackingAdStart, this), this._trackingManager.eTrackingAdComplete.addListener(this._onTrackingAdComplete, this), this._trackingManager.eTrackingAdProgress.addListener(this._onTrackingAdProgress, this), this._trackingManager.eTrackingAdCountdown.addListener(this._onTrackingAdCountdown, this), this._trackingManager.eTrackingAdClick.addListener(this._onTrackingAdClick, this), this._trackingManager.eTrackingContentPlay.addListener(this._onTrackingContentPlay, this), this._trackingManager.eTrackingContentBegin.addListener(this._onTrackingContentBegin, this), this._trackingManager.eTrackingContentProgress.addListener(this._onTrackingContentProgress, this), this._trackingManager.eTrackingContentEnd.addListener(this._onTrackingContentEnd, this), this._trackingManager.eTrackingContentComplete.addListener(this._onTrackingContentComplete, this), this._trackingManager.eTrackingContentReplay.addListener(this._onTrackingContentReplay, this), this._trackingManager.eTrackingContentSeek.addListener(this._onTrackingContentSeek, this), this._trackingManager.eTrackingContentSeekEnd.addListener(this._onTrackingContentSeekEnd, this), this._trackingManager.eTrackingFullscreen.addListener(this._onTrackingFullscreen, this), this._trackingManager.eTrackingMuted.addListener(this._onTrackingMuted, this), this._trackingManager.eTrackingPaused.addListener(this._onTrackingPaused, this), this._cms = new m, this._cms.setDataUrl(this._configData.configInfo.dataSrc), this._cms.setMediaUrl(this._configData.configInfo.mediaSrc), this._cms.eRequestCompleted.addListener(this._onCmsRequestCompleted, this), function(a) {
                    var b = a && a.adPolicy && a.adPolicy.ads || {}, c = a.configInfo || {}, d = a.containerInfo || {}, e = {
                        cvpElementId: d.elementName,
                        adApi: b.apiUrl,
                        adServerRootUrl: b.adServerRootUrl,
                        adNetworkId: b.adNetworkId,
                        adVideoNetworkId: b.adVideoNetworkId,
                        adVideoAssetId: b.adVideoAssetId,
                        adSection: b.adSection,
                        adPlayerProfile: b.adPlayerProfile,
                        renderersUrl: b.renderersUrl,
                        sensitiveFallbackId: b.sensitiveFallbackId,
                        adLiveContentDuration: b.liveDuration,
                        mediaSrc: c.mediaSrc,
                        dataSrc: c.dataSrc,
                        adPolicyUrl: d.adPolicySrc
                    };
                    l.send("appConfig", {
                        playerConfigUrl: a.appConfig && a.appConfig.configUrl,
                        osName: n.os.name,
                        osVersion: n.os.version && String(n.os.version),
                        deviceName: n.name,
                        deviceVersion: n.version && String(n.version),
                        propertyName: this._params.site,
                        containerName: document.URL
                    }), l.send("elementConfig", e);
                }.call(this, this._configData), this.ePlayerLoaded.dispatch();
            },
            _bootStrapFailure: function() {
                s.debug("MainController", "_bootStrapFailure"), this.ePlayerLoadError.dispatch();
            },
            render: function(a) {
                this._playerController.render(a);
            },
            remove: function() {
                this._playerController.remove();
            },
            dispose: function() {
                this._trackingManager.dispose(), this._aspenTracking.dispose(), this._playerController.dispose(), this._cms = null;
            },
            _onRendered: function() {
                g.isNull(this._params.contentId) || this.playContentWithId(this._params.contentId), this.ePlayerRendered.dispatch();
            },
            playContentWithId: function(a, b) {
                s.debug("MainController", "playContentWithId", a);
                var c = this._getNextIndexForId(a), d = a + "|" + c;
                s.debug("MainController", "playContentWithId", "key", d), this._loadingEntryQueue[d] = {
                    play: !0,
                    additionalParams: b
                }, this.reset(), this._cms.addContentId(d);
            },
            playFromObject: function(a, b) {
                if (!g.isString(a.url)) {
                    return s.warn("MainController", "playFromObject", "The property 'url' is required of the object parameter."), this.eContentEntryLoadError.dispatch(a.id, "Invalid object configuration", j.ERROR_CMS_PARSE, !1), void 0;
                }
                var c = a.id || a.url;
                s.debug("MainController", "playFromObject", c);
                var d = this._getNextIndexForId(c), e = c + "|" + d;
                s.debug("MainController", "playFromObject", "key", e), this._loadingEntryQueue[e] = {
                    play: !0,
                    additionalParams: b
                }, this.reset(), this._cms.addContentObject(e, a);
            },
            queueFromObject: function(a, b) {
                var c = a.id || a.url;
                s.debug("MainController", "queueFromObject", c);
                var d = this._getNextIndexForId(c), e = c + "|" + d;
                s.debug("MainController", "queueFromObject", "key", e), this._loadingEntryQueue[e] = {
                    play: !1,
                    additionalParams: b
                }, this._cms.addContentObject(e, a);
            },
            playNextInQueue: function() {
                this._playerController.playNextInQueue();
            },
            replay: function(a) {
                this._playerController.replay(a);
            },
            pause: function() {
                this._playerController.pause();
            },
            resume: function() {
                this._playerController.resume();
            },
            stop: function() {
                this._playerController.stop();
            },
            reset: function() {
                this._playerController.reset();
            },
            queueContentWithId: function(a, b) {
                s.debug("MainController", "queueContentWithId", a);
                var c = this._getNextIndexForId(a), d = a + "|" + c;
                s.debug("MainController", "queueContentWithId", "key", d), this._loadingEntryQueue[d] = {
                    play: !1,
                    additionalParams: b
                }, this._cms.addContentId(d);
            },
            dequeueContentWithId: function(a) {
                this._playerController.dequeue(a);
            },
            emptyQueue: function() {
                this._playerController.emptyQueue();
            },
            setQueueAutoplay: function(a) {
                this._playerController.setQueueAutoplay(a);
            },
            getQueue: function() {
                return this._playerController.getQueue();
            },
            seek: function(a) {
                this._playerController.seek(a);
            },
            resize: function(a, b) {
                this._playerController.resize(a, b);
            },
            goFullscreen: function() {
                this._playerController.goFullscreen();
            },
            setVolume: function(a) {
                this._playerController.setVolume(a);
            },
            getVolume: function() {
                return this._playerController.getVolume();
            },
            mute: function() {
                this._playerController.mute();
            },
            unmute: function() {
                this._playerController.unmute();
            },
            isMuted: function() {
                return this._playerController.isMuted();
            },
            getContentEntry: function(a) {
                if (!a ||!g.isString(a)) {
                    throw new Error("getContentEntry() requires a content ID");
                }
                var b = this._cms.getContentId(a);
                return b ? h.xmlToJson(b.getXML()) : "";
            },
            setAdSection: function(a) {
                this._playerController.setAdSection(a);
            },
            setAdKeyValue: function(a, b) {
                this._playerController.setAdKeyValue(a, b);
            },
            getAdKeyValues: function() {
                return this._playerController.getAdKeyValues();
            },
            clearAdKeyValues: function() {
                this._playerController.clearAdKeyValues();
            },
            setTrackingInterval: function(a) {
                this._trackingManager.setTrackingInterval(a);
            },
            setDataSrc: function(a) {
                this._cms.setDataUrl(a);
            },
            getCurrentPlayer: function() {
                return this._configData.containerInfo.elementName;
            },
            _onContentMetadata: function(a) {
                l.send("videoConfig", {
                    cvpElementId: this.getCurrentPlayer(),
                    videoXmlJson: r.parse(this.getContentEntry(a))
                }), this.eContentMetadata.dispatch.apply(this.eContentMetadata, arguments);
            },
            _onContentBegin: function() {
                this.eContentBegin.dispatch.apply(this.eContentBegin, arguments);
            },
            _onContentPlay: function() {
                this.eContentPlay.dispatch.apply(this.eContentPlay, arguments);
            },
            _onContentPause: function() {
                this.eContentPause.dispatch.apply(this.eContentPause, arguments);
            },
            _onContentEnd: function() {
                this.eContentEnd.dispatch.apply(this.eContentEnd, arguments);
            },
            _onContentComplete: function() {
                this.eContentComplete.dispatch.apply(this.eContentComplete, arguments);
            },
            _onContentPlayhead: function() {
                this.eContentPlayhead.dispatch.apply(this.eContentPlayhead, arguments);
            },
            _onContentBuffering: function() {
                this.eContentBuffering.dispatch.apply(this.eContentBuffering, arguments);
            },
            _onContentQueue: function() {
                this.eContentQueue.dispatch.apply(this.eContentQueue, arguments);
            },
            _onContentQueueAutoplay: function() {
                this.eContentQueueAutoplay.dispatch.apply(this.eContentQueueAutoplay, arguments);
            },
            _onContentVolume: function() {
                this.eContentVolume.dispatch.apply(this.eContentVolume, arguments);
            },
            _onContentError: function(a, b) {
                l.send("error", {
                    cvpElementId: this.getCurrentPlayer(),
                    contentId: a,
                    videoContentCount: void 0,
                    errorCode: void 0,
                    errorMessage: b
                }), this.eContentError.dispatch.apply(this.eContentError, arguments);
            },
            _onContentResize: function() {
                this.eContentResize.dispatch.apply(this.eContentResize, arguments);
            },
            _onAdPlayhead: function() {
                this.eAdPlayhead.dispatch.apply(this.eAdPlayhead, arguments);
            },
            _onAdPlay: function() {
                this.eAdPlay.dispatch.apply(this.eAdPlay, arguments);
            },
            _onAdEnd: function() {
                this.eAdEnd.dispatch.apply(this.eAdEnd, arguments);
            },
            _onAdError: function() {
                this.eAdError.dispatch.apply(this.eAdError, arguments);
            },
            _onTrackingAdStart: function() {
                this.eTrackingAdStart.dispatch.apply(this.eTrackingAdStart, arguments);
            },
            _onTrackingAdComplete: function() {
                this.eTrackingAdComplete.dispatch.apply(this.eTrackingAdComplete, arguments);
            },
            _onTrackingAdProgress: function() {
                this.eTrackingAdProgress.dispatch.apply(this.eTrackingAdProgress, arguments);
            },
            _onTrackingAdCountdown: function() {
                this.eTrackingAdCountdown.dispatch.apply(this.eTrackingAdCountdown, arguments);
            },
            _onTrackingAdClick: function() {
                this.eTrackingAdClick.dispatch.apply(this.eTrackingAdClick, arguments);
            },
            _onTrackingContentPlay: function() {
                this.eTrackingContentPlay.dispatch.apply(this.eTrackingContentPlay, arguments);
            },
            _onTrackingContentBegin: function() {
                this.eTrackingContentBegin.dispatch.apply(this.eTrackingContentBegin, arguments);
            },
            _onTrackingContentProgress: function() {
                this.eTrackingContentProgress.dispatch.apply(this.eTrackingContentProgress, arguments);
            },
            _onTrackingContentEnd: function() {
                this.eTrackingContentEnd.dispatch.apply(this.eTrackingContentEnd, arguments);
            },
            _onTrackingContentComplete: function() {
                this.eTrackingContentComplete.dispatch.apply(this.eTrackingContentComplete, arguments);
            },
            _onTrackingContentReplay: function() {
                this.eTrackingContentReplay.dispatch.apply(this.eTrackingContentReplay, arguments);
            },
            _onTrackingContentSeek: function() {
                this.eTrackingContentSeek.dispatch.apply(this.eTrackingContentSeek, arguments);
            },
            _onTrackingContentSeekEnd: function() {
                this.eTrackingContentSeekEnd.dispatch.apply(this.eTrackingContentSeekEnd, arguments);
            },
            _onTrackingFullscreen: function() {
                this.eTrackingFullscreen.dispatch.apply(this.eTrackingFullscreen, arguments);
            },
            _onTrackingMuted: function() {
                this.eTrackingMuted.dispatch.apply(this.eTrackingMuted, arguments);
            },
            _onTrackingPaused: function() {
                this.eTrackingPaused.dispatch.apply(this.eTrackingPaused, arguments);
            },
            _removeLoadingQueueEntry: function(a) {
                delete this._loadingEntryQueue[a];
            },
            _onCmsRequestCompleted: function(a, b, c, d, e) {
                s.debug("_onCmsRequestCompleted", arguments);
                var f = b + "|" + c;
                if (e) {
                    return this.eContentEntryLoadError.dispatch(a, d, e, !1), this._removeLoadingQueueEntry(f), void 0;
                }
                var h = this._loadingEntryQueue[f], i = this._cms.getContentId(a + "|" + c), j=!1;
                return g.empty(h) ? (s.warn("onCmsRequestCompleted", "no entry for key '" + f + "' found in loading queue"), void 0) : g.empty(i) ? (s.error("onCmsRequestCompleted", "no catalogEntry for contentId '" + a + "'"), this._removeLoadingQueueEntry(f), void 0) : (s.debug("onCmsRequestCompleted", a, h.play), h.play ? (this._playerController.emptyQueue(), this._playerController.play(i, h.additionalParams)) : (this._playerController.queue(i, h.additionalParams), j=!0), this._removeLoadingQueueEntry(f), "" === e && this.eContentEntryLoad.dispatch(a, j), void 0);
            },
            _getNextIndexForId: function(a) {
                var b, c, d, e, f = 0;
                for (b in this._loadingEntryQueue) {
                    c = b.split("|"), c && c.length > 1 && (d = c[0], e =+ c[1], d === a&&!isNaN(e) && e >= f && (f = e + 1));
                }
                return f;
            }
        });
        c.exports = t;
    }), define("html5/api", ["require", "exports", "module", "Class", "cvp/customevent", "html5/manager", "cvp/utils"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/customevent"), f = a("html5/manager"), g = a("cvp/utils"), h = d.extend({
            init: function(a) {
                this._manager = new f, this._manager.ePlayerLoaded.addListener(this._onPlayerLoaded, this), this._manager.ePlayerLoadError.addListener(this._onPlayerLoadError, this), this._manager.ePlayerRendered.addListener(this._onPlayerRendered, this), this._manager.eContentMetadata.addListener(this._onContentMetadata, this), this._manager.eContentBegin.addListener(this._onContentBegin, this), this._manager.eContentPlay.addListener(this._onContentPlay, this), this._manager.eContentPause.addListener(this._onContentPause, this), this._manager.eContentEnd.addListener(this._onContentEnd, this), this._manager.eContentComplete.addListener(this._onContentComplete, this), this._manager.eContentPlayhead.addListener(this._onContentPlayhead, this), this._manager.eContentBuffering.addListener(this._onContentBuffering, this), this._manager.eContentQueue.addListener(this._onContentQueue, this), this._manager.eContentQueueAutoplay.addListener(this._onContentQueueAutoplay, this), this._manager.eContentVolume.addListener(this._onContentVolume, this), this._manager.eContentError.addListener(this._onContentError, this), this._manager.eContentResize.addListener(this._onContentResize, this), this._manager.eContentEntryLoad.addListener(this._onContentEntryLoad, this), this._manager.eContentEntryLoadError.addListener(this._onContentEntryLoadError, this), this._manager.eAdPlayhead.addListener(this._onAdPlayhead, this), this._manager.eAdPlay.addListener(this._onAdPlay, this), this._manager.eAdEnd.addListener(this._onAdEnd, this), this._manager.eAdError.addListener(this._onAdError, this), this._manager.eTrackingAdStart.addListener(this._onTrackingAdStart, this), this._manager.eTrackingAdComplete.addListener(this._onTrackingAdComplete, this), this._manager.eTrackingAdProgress.addListener(this._onTrackingAdProgress, this), this._manager.eTrackingAdCountdown.addListener(this._onTrackingAdCountdown, this), this._manager.eTrackingAdClick.addListener(this._onTrackingAdClick, this), this._manager.eTrackingContentPlay.addListener(this._onTrackingContentPlay, this), this._manager.eTrackingContentBegin.addListener(this._onTrackingContentBegin, this), this._manager.eTrackingContentProgress.addListener(this._onTrackingContentProgress, this), this._manager.eTrackingContentComplete.addListener(this._onTrackingContentComplete, this), this._manager.eTrackingContentReplay.addListener(this._onTrackingContentReplay, this), this._manager.eTrackingContentSeek.addListener(this._onTrackingContentSeek, this), this._manager.eTrackingContentSeekEnd.addListener(this._onTrackingContentSeekEnd, this), this._manager.eTrackingFullscreen.addListener(this._onTrackingFullscreen, this), this._manager.eTrackingMuted.addListener(this._onTrackingMuted, this), this._manager.eTrackingPaused.addListener(this._onTrackingPaused, this), this.ePlayerLoaded = new e, this.ePlayerLoadError = new e, this.ePlayerReady = new e, this.eContentMetadata = new e, this.eContentBegin = new e, this.eContentPlay = new e, this.eContentPause = new e, this.eContentEnd = new e, this.eContentComplete = new e, this.eContentPlayhead = new e, this.eContentBuffering = new e, this.eContentQueue = new e, this.eContentQueueAutoplay = new e, this.eContentVolume = new e, this.eContentError = new e, this.eContentResize = new e, this.eContentEntryLoad = new e, this.eContentEntryLoadError = new e, this.eAdPlayhead = new e, this.eAdPlay = new e, this.eAdEnd = new e, this.eAdError = new e, this.eTrackingAdStart = new e, this.eTrackingAdComplete = new e, this.eTrackingAdProgress = new e, this.eTrackingAdCountdown = new e, this.eTrackingAdClick = new e, this.eTrackingContentPlay = new e, this.eTrackingContentBegin = new e, this.eTrackingContentProgress = new e, this.eTrackingContentComplete = new e, this.eTrackingContentReplay = new e, this.eTrackingContentSeek = new e, this.eTrackingContentSeekEnd = new e, this.eTrackingFullscreen = new e, this.eTrackingMuted = new e, this.eTrackingPaused = new e, this._manager.load(a);
            },
            render: function(a) {
                this._manager.render(a);
            },
            reset: function() {
                this._manager.reset();
            },
            remove: function() {
                this._manager.remove();
            },
            dispose: function() {
                this._manager.dispose();
            },
            getDefaultPlayer: function() {
                return this._manager.getCurrentPlayer();
            },
            play: function(a, b) {
                this._manager.playContentWithId(a, b);
            },
            playFromObject: function(a, b) {
                this._manager.playFromObject(a, b);
            },
            replay: function(a) {
                this._manager.replay(a);
            },
            playNextInQueue: function() {
                this._manager.playNextInQueue();
            },
            pause: function() {
                this._manager.pause();
            },
            resume: function() {
                this._manager.resume();
            },
            stop: function() {
                this._manager.stop();
            },
            queue: function(a, b, c) {
                this._manager.queueContentWithId(a, b, c);
            },
            queueFromObject: function(a, b, c) {
                this._manager.queueFromObject(a, b, c);
            },
            dequeue: function(a) {
                this._manager.dequeueContentWithId(a);
            },
            emptyQueue: function() {
                this._manager.emptyQueue();
            },
            setQueueAutoplay: function(a) {
                this._manager.setQueueAutoplay(a);
            },
            getQueue: function() {
                return this._manager.getQueue();
            },
            seek: function(a) {
                this._manager.seek(a);
            },
            resize: function(a, b) {
                this._manager.resize(a, b);
            },
            goFullscreen: function() {
                this._manager.goFullscreen();
            },
            setVolume: function(a) {
                this._manager.setVolume(a);
            },
            getVolume: function() {
                return this._manager.getVolume();
            },
            mute: function() {
                this._manager.mute();
            },
            unmute: function() {
                this._manager.unmute();
            },
            isMuted: function() {
                return this._manager.isMuted();
            },
            getContentEntry: function(a) {
                return this._manager.getContentEntry(a);
            },
            setAdSection: function(a) {
                this._manager.setAdSection(a);
            },
            setAdKeyValue: function(a, b) {
                this._manager.setAdKeyValue(a, b);
            },
            getAdKeyValues: function() {
                return this._manager.getAdKeyValues();
            },
            clearAdKeyValues: function() {
                this._manager.clearAdKeyValues();
            },
            setTrackingInterval: function(a) {
                this._manager.setTrackingInterval(a);
            },
            setDataSrc: function(a) {
                this._manager.setDataSrc(a);
            },
            switchAdContext: function(a, b) {
                this._manager.switchAdContext(a, b);
            },
            switchTrackingContext: function(a, b) {
                this._manager.switchTrackingContext(a, b);
            },
            _mungeArgs: function(a) {
                var b = g.slice(a);
                return b.unshift(this.getDefaultPlayer()), b;
            },
            _onPlayerLoaded: function() {
                this.ePlayerLoaded.dispatch();
            },
            _onPlayerLoadError: function() {
                this.ePlayerLoadError.dispatch();
            },
            _onPlayerRendered: function() {
                this.ePlayerReady.dispatch.apply(this.ePlayerReady, this._mungeArgs(arguments));
            },
            _onContentMetadata: function() {
                this.eContentMetadata.dispatch.apply(this.eContentMetadata, this._mungeArgs(arguments));
            },
            _onContentBegin: function() {
                this.eContentBegin.dispatch.apply(this.eContentBegin, this._mungeArgs(arguments));
            },
            _onContentPlay: function() {
                this.eContentPlay.dispatch.apply(this.eContentPlay, this._mungeArgs(arguments));
            },
            _onContentPause: function() {
                this.eContentPause.dispatch.apply(this.eContentPause, this._mungeArgs(arguments));
            },
            _onContentEnd: function() {
                this.eContentEnd.dispatch.apply(this.eContentEnd, this._mungeArgs(arguments));
            },
            _onContentComplete: function() {
                this.eContentComplete.dispatch.apply(this.eContentComplete, this._mungeArgs(arguments));
            },
            _onContentPlayhead: function() {
                this.eContentPlayhead.dispatch.apply(this.eContentPlayhead, this._mungeArgs(arguments));
            },
            _onContentBuffering: function() {
                this.eContentBuffering.dispatch.apply(this.eContentBuffering, this._mungeArgs(arguments));
            },
            _onContentQueue: function() {
                this.eContentQueue.dispatch.apply(this.eContentQueue, this._mungeArgs(arguments));
            },
            _onContentQueueAutoplay: function() {
                this.eContentQueueAutoplay.dispatch.apply(this.eContentQueueAutoplay, this._mungeArgs(arguments));
            },
            _onContentVolume: function() {
                this.eContentVolume.dispatch.apply(this.eContentVolume, this._mungeArgs(arguments));
            },
            _onContentError: function() {
                this.eContentError.dispatch.apply(this.eContentError, this._mungeArgs(arguments));
            },
            _onContentResize: function() {
                this.eContentResize.dispatch.apply(this.eContentResize, this._mungeArgs(arguments));
            },
            _onContentEntryLoad: function() {
                this.eContentEntryLoad.dispatch.apply(this.eContentEntryLoad, this._mungeArgs(arguments));
            },
            _onContentEntryLoadError: function() {
                this.eContentEntryLoadError.dispatch.apply(this.eContentEntryLoadError, this._mungeArgs(arguments));
            },
            _onAdPlayhead: function() {
                this.eAdPlayhead.dispatch.apply(this.eAdPlayhead, this._mungeArgs(arguments));
            },
            _onAdPlay: function() {
                this.eAdPlay.dispatch.apply(this.eAdPlay, this._mungeArgs(arguments));
            },
            _onAdEnd: function() {
                this.eAdEnd.dispatch.apply(this.eAdEnd, this._mungeArgs(arguments));
            },
            _onAdError: function() {
                this.eAdError.dispatch.apply(this.eAdError, this._mungeArgs(arguments));
            },
            _onTrackingAdStart: function() {
                this.eTrackingAdStart.dispatch.apply(this.eTrackingAdStart, this._mungeArgs(arguments));
            },
            _onTrackingAdComplete: function() {
                this.eTrackingAdComplete.dispatch.apply(this.eTrackingAdComplete, this._mungeArgs(arguments));
            },
            _onTrackingAdProgress: function() {
                this.eTrackingAdProgress.dispatch.apply(this.eTrackingAdProgress, this._mungeArgs(arguments));
            },
            _onTrackingAdCountdown: function() {
                this.eTrackingAdCountdown.dispatch.apply(this.eTrackingAdCountdown, this._mungeArgs(arguments));
            },
            _onTrackingAdClick: function() {
                this.eTrackingAdClick.dispatch.apply(this.eTrackingAdClick, this._mungeArgs(arguments));
            },
            _onTrackingContentPlay: function() {
                this.eTrackingContentPlay.dispatch.apply(this.eTrackingContentPlay, this._mungeArgs(arguments));
            },
            _onTrackingContentBegin: function() {
                this.eTrackingContentBegin.dispatch.apply(this.eTrackingContentBegin, this._mungeArgs(arguments));
            },
            _onTrackingContentProgress: function() {
                this.eTrackingContentProgress.dispatch.apply(this.eTrackingContentProgress, this._mungeArgs(arguments));
            },
            _onTrackingContentComplete: function() {
                this.eTrackingContentComplete.dispatch.apply(this.eTrackingContentComplete, this._mungeArgs(arguments));
            },
            _onTrackingContentReplay: function() {
                this.eTrackingContentReplay.dispatch.apply(this.eTrackingContentReplay, this._mungeArgs(arguments));
            },
            _onTrackingContentSeek: function() {
                this.eTrackingContentSeek.dispatch.apply(this.eTrackingContentSeek, this._mungeArgs(arguments));
            },
            _onTrackingContentSeekEnd: function() {
                this.eTrackingContentSeekEnd.dispatch.apply(this.eTrackingContentSeekEnd, this._mungeArgs(arguments));
            },
            _onTrackingFullscreen: function() {
                this.eTrackingFullscreen.dispatch.apply(this.eTrackingFullscreen, this._mungeArgs(arguments));
            },
            _onTrackingMuted: function() {
                this.eTrackingMuted.dispatch.apply(this.eTrackingMuted, this._mungeArgs(arguments));
            },
            _onTrackingPaused: function() {
                this.eTrackingPaused.dispatch.apply(this.eTrackingPaused, this._mungeArgs(arguments));
            }
        });
        c.exports = h;
    }), define("cvp/players/html5", ["require", "exports", "module", "cvp/static", "cvp/players/null", "cvp/utils/commandqueue", "cvp/utils", "cvp/log"], function(a, b, c) {
        var d = a("cvp/static"), e = a("cvp/players/null"), f = a("cvp/utils/commandqueue"), g = a("cvp/utils"), h = a("cvp/log"), i = g.bind, j = h.getLogger(), k = function(a) {
            this._instance = new a(this._options), this._instance.ePlayerLoaded.addListener(this._onPlayerLoaded, this), this._instance.ePlayerLoadError.addListener(this._onPlayerLoadError, this), this._instance.ePlayerReady.addListener(this._onPlayerReady, this), this._instance.ePlayerReady.addListener(this._onCVPReady, this), this._instance.ePlayerReady.addListener(i(this._onCallBack, this, "onPlayerReady")), this._instance.ePlayerReady.addListener(i(this._onCallBack, this, "onCVPReady")), this._instance.eContentBegin.addListener(i(this._onCallBack, this, "onContentBegin")), this._instance.eContentPlay.addListener(i(this._onCallBack, this, "onContentPlay")), this._instance.eContentPause.addListener(i(this._onCallBack, this, "onContentPause")), this._instance.eContentEnd.addListener(i(this._onCallBack, this, "onContentEnd")), this._instance.eContentComplete.addListener(i(this._onCallBack, this, "onContentComplete")), this._instance.eContentEntryLoad.addListener(i(this._onCallBack, this, "onContentEntryLoad")), this._instance.eContentEntryLoadError.addListener(i(this._onCallBack, this, "onContentEntryLoadError")), this._instance.eContentMetadata.addListener(i(this._onCallBack, this, "onContentMetadata")), this._instance.eContentPlayhead.addListener(i(this._onCallBack, this, "onContentPlayhead")), this._instance.eContentBuffering.addListener(i(this._onCallBack, this, "onContentBuffering")), this._instance.eContentResize.addListener(i(this._onCallBack, this, "onContentResize")), this._instance.eContentQueue.addListener(i(this._onCallBack, this, "onContentQueue")), this._instance.eContentQueueAutoplay.addListener(i(this._onCallBack, this, "onContentQueueAutoplay")), this._instance.eContentVolume.addListener(i(this._onCallBack, this, "onContentVolume")), this._instance.eContentError.addListener(i(this._onCallBack, this, "onContentError")), this._instance.eAdPlayhead.addListener(i(this._onCallBack, this, "onAdPlayhead")), this._instance.eAdPlay.addListener(i(this._onCallBack, this, "onAdPlay")), this._instance.eAdEnd.addListener(i(this._onCallBack, this, "onAdEnd")), this._instance.eAdError.addListener(i(this._onCallBack, this, "onAdError")), this._instance.eTrackingAdStart.addListener(i(this._onCallBack, this, "onTrackingAdStart")), this._instance.eTrackingAdComplete.addListener(i(this._onCallBack, this, "onTrackingAdComplete")), this._instance.eTrackingAdProgress.addListener(i(this._onCallBack, this, "onTrackingAdProgress")), this._instance.eTrackingAdCountdown.addListener(i(this._onCallBack, this, "onTrackingAdCountdown")), this._instance.eTrackingAdClick.addListener(i(this._onCallBack, this, "onTrackingAdClick")), this._instance.eTrackingContentPlay.addListener(i(this._onCallBack, this, "onTrackingContentPlay")), this._instance.eTrackingContentBegin.addListener(i(this._onCallBack, this, "onTrackingContentBegin")), this._instance.eTrackingContentProgress.addListener(i(this._onCallBack, this, "onTrackingContentProgress")), this._instance.eTrackingContentComplete.addListener(i(this._onCallBack, this, "onTrackingContentComplete")), this._instance.eTrackingContentReplay.addListener(i(this._onCallBack, this, "onTrackingContentReplay")), this._instance.eTrackingContentSeek.addListener(i(this._onCallBack, this, "onTrackingContentSeek")), this._instance.eTrackingContentSeekEnd.addListener(i(this._onCallBack, this, "onTrackingContentSeekEnd")), this._instance.eTrackingFullscreen.addListener(i(this._onCallBack, this, "onTrackingFullscreen")), this._instance.eTrackingMuted.addListener(i(this._onCallBack, this, "onTrackingMuted")), this._instance.eTrackingPaused.addListener(i(this._onCallBack, this, "onTrackingPaused"));
        }, l = e.extend({
            init: function(b) {
                this._super(), this._options = b, this._loadQ = new f, this._loaded=!1, a(["html5/api"], i(k, this));
            },
            _onPlayerLoaded: function() {
                j.debug("_onPlayerLoaded"), this._loaded=!0, this._loadQ.execute();
            },
            _onPlayerLoadError: function() {
                j.debug("_onPlayerLoadError"), this._onCallBack("onPlayerLoadError");
            },
            _onPlayerReady: function() {
                j.debug("_onPlayerReady");
            },
            _onCVPReady: function() {
                j.debug("_onCVPReady");
            },
            embed: function(a) {
                return this._loaded ? (j.info("executing embed"), this._instance.render(a), void 0) : (j.info("queuing embed"), this._loadQ.push(this.embed, this, arguments), void 0);
            },
            remove: function() {
                this._instance.remove();
            },
            dispose: function() {
                this._instance.dispose();
            },
            playContent: function(a, b) {
                this._instance.play(a, b);
            },
            playFromObject: function(a, b) {
                this._instance.playFromObject(a, b);
            },
            replayContent: function() {
                this._instance.replay(this._options.id);
            },
            playNextInQueue: function() {
                this._instance.playNextInQueue();
            },
            pause: function() {
                this._instance.pause();
            },
            resume: function() {
                this._instance.resume();
            },
            stopContent: function() {
                this._instance.stop();
            },
            queue: function(a, b, c) {
                this._instance.queue(a, b, c);
            },
            queueFromObject: function(a, b, c) {
                this._instance.queueFromObject(a, b, c);
            },
            dequeue: function(a) {
                this._instance.dequeue(a);
            },
            emptyQueue: function() {
                this._instance.emptyQueue();
            },
            setQueueAutoplay: function(a) {
                this._instance.setQueueAutoplay(a);
            },
            getQueue: function() {
                return this._instance.getQueue();
            },
            seek: function(a) {
                this._instance.seek(a);
            },
            resize: function(a, b) {
                this._instance.resize(a, b);
            },
            goFullscreen: function() {
                this._instance.goFullscreen();
            },
            mute: function() {
                this._instance.mute();
            },
            unmute: function() {
                this._instance.unmute();
            },
            setVolume: function(a) {
                this._instance.setVolume(a);
            },
            getVolume: function() {
                return this._instance.getVolume();
            },
            isMuted: function() {
                return this._instance.isMuted();
            },
            getContentEntry: function(a) {
                return this._instance.getContentEntry(a);
            },
            setAdSection: function(a) {
                this._instance.setAdSection(a);
            },
            setAdKeyValue: function(a, b) {
                this._instance.setAdKeyValue(a, b);
            },
            getAdKeyValues: function() {
                return this._instance.getAdKeyValues();
            },
            clearAdKeyValues: function() {
                this._instance.clearAdKeyValues();
            },
            setTrackingInterval: function(a) {
                this._instance.setTrackingInterval(a);
            },
            setDataSrc: function(a) {
                this._instance.setDataSrc(a);
            },
            _onCallBack: function() {
                d.onCallback(this._options.id, arguments);
            },
            instance: function() {
                return this._instance;
            },
            supported: function() {
                return !!document.createElement("video").canPlayType;
            }
        });
        c.exports = l;
    }), define("cvp/utils/log4js", ["require", "exports", "module", "core/app", "cvp/log"], function(a, b) {
        function c() {
            !h || j || i || window.log4javascript || (g.info("installing log4javascript"), i=!0, function(a, b, c) {
                var d = a.createElement(b), f = a.getElementsByTagName(b)[0], h = /^(complete|loaded)$/, i=!1;
                d.onload = d.onreadystatechange = function() {
                    i || c in d && h.test(d[c]) || (d.onload = d.onreadystatechange = null, i=!0, g.info("installed log4javascript"), j=!0);
                }, d.src = e.LOG4JAVASCRIPT_URL, f.parentNode.insertBefore(d, f);
            }(document, "script", "readyState"));
        }
        function d() {
            return j;
        }
        var e = a("core/app"), f = a("cvp/log"), g = f.getLogger(), h = e.DEBUG, i=!1, j=!1;
        b.install = c, b.isInstalled = d;
    }), define("flash/global", ["require", "exports", "module"], function(require, exports, module) {
        function cvpSearchTheClient(theObj, thePath) {
            var index = thePath.indexOf("."), objName = "", subPath = "", childObj;
            return null === theObj && (theObj = window), - 1 === index?-1 !== thePath.indexOf("(")&&-1 !== thePath.indexOf(")") ? eval("theObj." + thePath) : theObj[thePath] : (objName = thePath.substring(0, index), subPath = thePath.substring(index + 1), childObj = theObj[objName], - 1 !== objName.indexOf("(")&&-1 !== objName.indexOf(")") && (childObj = eval("theObj." + objName)), null === childObj ? "" : subPath.length < 1 ? childObj.toString() : cvpSearchTheClient(childObj, subPath));
        }
        exports.cvpSearchTheClient = cvpSearchTheClient;
    }), define("cvp/core", ["require", "exports", "module", "cvp/static", "cvp/api", "cvp/shared", "cvp/utils", "core/app", "cvp/browser", "swfobject", "cvp/players/html5", "cvp/players/null", "cvp/log", "cvp/utils/log4js", "flash/global"], function(a, b, c) {
        var d = a("cvp/static"), e = a("cvp/api"), f = a("cvp/shared"), g = a("cvp/utils"), h = a("core/app"), i = a("cvp/browser"), j = a("swfobject"), k = a("cvp/players/html5"), l = a("cvp/players/null"), m = a("cvp/log"), n = a("cvp/utils/log4js"), o = a("flash/global"), p = function(a) {
            var b = this;
            this.options = g.extend({
                id: "cvp_player",
                width: "320",
                height: "240",
                flashVars: {},
                initialize: function() {}
            }, a);
            var c = m.getLogger(this.options.id);
            if (this.options.embed = g.extend({
                containerSwf: "",
                expressInstallSwf: h.EXPRESS_INSTALL_URL,
                flashVersion: h.FLASH_VERSION
            }, this.options.embed), this.options.embed.options = g.extend({
                quality: "high",
                bgcolor: "#000000",
                allowFullScreen: "true",
                allowScriptAccess: "always"
            }, this.options.embed.options), !this.options.embed.containerSwf) {
                throw c.error("Invalid containerSwf...exiting"), new Error("Invalid containerSwf");
            }
            this.options.initialize();
            var e = this.options.id, p = this.options.width, q = this.options.height, r = this.options.flashVars, s = this.options.embed;
            this._playerType = this.options.playerType;
            var t = [h.FLASH, h.HTML5];
            this._playerType&&-1 !== g.indexOf(t, this._playerType) || (this._playerType = h.FLASH, i.allowedHtmlPlayer&&!j.hasFlashPlayerVersion(s.flashVersion) && (this._playerType = h.HTML5));
            var u = null;
            if (this._playerType === h.HTML5 ? (r.site && r.profile ? (c.info("instantiating the HTML5 player"), u = new k(this.options)) : (c.error("invalid HTML5 params...instantiating null player"), this._playerType=!1, u = new l(this.options)), this.getDOMPlayer = function() {
                return u;
            }) : (c.info("instantiating the Flash player"), n.install(), g.extend(window, o)), d.findInstance(e) || g.byId(e)) {
                throw c.error(e + " is already in use...exiting"), new Error(e + " is already in use");
            }
            if (this.getId = function() {
                return e;
            }, this.getWidth = function() {
                return p;
            }, this.getHeight = function() {
                return q;
            }, this.getFlashVars = function() {
                return r;
            }, this.getEmbed = function() {
                return s;
            }, this.getPlayerType = function() {
                return this._playerType;
            }, !f.createCallbackHandler(e)) {
                throw c.error('callback handler for id "' + e + '" could not be created...exiting'), new Error('callback handler for id "' + e + '" could not be created...exiting');
            }
            this.callbacks = {}, delete this.options.initialize;
            var v, w;
            for (v in this.options) {
                g.hasOwn(this.options, v) && (w = this.options[v], g.isFunc(w) && (this.callbacks[v] = w));
            }
            var x = function(a) {
                if (g.hasOwn(y, a)) {
                    try {
                        y[a].apply(y, g.slice(arguments, 1));
                    } catch (b) {
                        c.warn("exception on message " + a, b.message);
                    }
                }
            }, y = {
                handleCallBack: function(a) {
                    var d, e;
                    if (arguments.length) {
                        var f = g.slice(arguments, 1);
                        if (e = b[a], g.isFunc(e)) {
                            try {
                                d = e.apply(b, f);
                            } catch (h) {
                                c.warn("exception on internal CB " + a, h.message);
                            }
                        }
                        if (e = b.callbacks[a], g.isFunc(e)) {
                            try {
                                d = e.apply(b, f);
                            } catch (i) {
                                c.error("exception on user CB " + a, i.message);
                            }
                        }
                    }
                    return d;
                },
                onPageOrientationChange: function(a) {
                    b.isCVPReady() && a !== b.getPageOrientation() && (this._sendPageStateChange({
                        orientation: a
                    }), this.handleCallBack("onPageOrientationChange", e, a));
                },
                onPageVisibilityChange: function(a) {
                    b.isCVPReady() && a !== b.isPageVisible() && (this.handleCallBack("onPageVisibilityChange", e, a), this._fireCVPVisibilityChange());
                },
                onViewportVisibilityChange: function(a) {
                    b.isCVPReady() && a !== b.isViewportVisible() && (this.handleCallBack("onViewportVisibilityChange", e, a), this._fireCVPVisibilityChange());
                },
                _fireCVPVisibilityChange: function() {
                    this.handleCallBack("onCVPVisibilityChange", e, b.isCVPVisible());
                },
                _sendPageStateChange: function(a) {
                    this._invokeAPI("sendMessage", "pageStateChange", a);
                },
                _invokeAPI: function(a) {
                    var d = g.slice(arguments, 1);
                    if (a in b) {
                        try {
                            b[a].apply(b, d);
                        } catch (e) {
                            c.warn("[_invokeAPI] Error calling: " + a);
                        }
                    }
                }
            }, z=!1, A = r.contentId || "", B = r.contentUrl || "", C = r.playlistId || "", D = r.context || "", E = D, F = 0, G = 0, H = 0, I = 0, J =- 1, K=!1, L=!1, M=!1, N = window.orientation || "unknown", O=!0, P=!0;
            return this.isCVPReady = function() {
                return z;
            }, this.getDOMPlayerInstance = function() {
                return E;
            }, this.getContentId = function() {
                return A;
            }, this.getContentUrl = function() {
                return B;
            }, this.playlistId = function() {
                return C;
            }, this.getContext = function() {
                return D;
            }, this.getContentWidth = function() {
                return F;
            }, this.getContentHeight = function() {
                return G;
            }, this.getDuration = function() {
                return H;
            }, this.getPlayhead = function() {
                return I;
            }, this.getAbsolutePlayhead = function() {
                return J;
            }, this.isBuffering = function() {
                return K;
            }, this.isPaused = function() {
                return L;
            }, this.isFullscreen = function() {
                return M;
            }, this.getPageOrientation = function() {
                return N;
            }, this.isPageVisible = function() {
                return O;
            }, this.isViewportVisible = function() {
                return P;
            }, this.isCVPVisible = function() {
                return O && P;
            }, this.onCVPReady = function() {
                z=!0;
            }, this.onPlayerReady = function() {
                E = this.getDOMPlayerInstance();
            }, this.onPageVisibilityChange = function(a, b) {
                O = b;
            }, this.onViewportVisibilityChange = function(a, b) {
                P = b;
            }, this.onContentMetadata = function(a, b, c, d, e) {
                A = b, I = 0, H = c, F = d, G = e;
            }, this.onContentBegin = function(a, b) {
                A = b;
            }, this.onContentBuffering = function(a, b, c) {
                K = c;
            }, this.onContentPlayhead = function(a, b, c, d, e) {
                I = c, J = e||-1;
            }, this.onContentPause = function(a, b, c) {
                L = c;
            }, this.onContentResize = function(a, b, c, d) {
                M = d;
            }, d.registerInstance(e, this, x), this;
        };
        p.prototype = e, c.exports = p;
    }), define("cvp/pluginmanager", ["require", "exports", "module", "cvp/static", "cvp/utils", "cvp/log"], function(a, b, c) {
        var d = a("cvp/static"), e = a("cvp/utils"), f = a("cvp/log"), g = e.extend, h = e.slice, i = e.isFunc, j = e.now, k = f.getLogger("PluginManager"), l = {
            LMDB: "lmdb"
        }, m = {}, n = function(a, b) {
            return a = (a || "").toUpperCase(), l[a] ? (m[a] = b, void 0) : (k.warn("[registerPlugin] Invalid plugin type. Unable to register: " + a), void 0);
        }, o = {};
        o.create = function(a, b) {
            return a = (a || "").toUpperCase(), m[a] ? new m[a](b) : (k.warn("[create] Invalid plugin type. Unable to create: " + a), null);
        }, o.createLMDB = function(a) {
            return o.create(l.LMDB, a);
        };
        var p = {}, q = function(a, b) {
            p[a] = b;
        }, r = function(a, b, c) {
            var d = this;
            if (this.id = a, !b ||!c) {
                return k.error("[PluginHostAdapter] Invalid host or plugin. Aborting"), null;
            }
            var e = function(a) {
                return function() {
                    return c[a].apply(c, arguments);
                };
            };
            for (var f in c) {
                i(c[f]) && (this[f] = e(f));
            }
            var g = function(a) {
                var c = b();
                return function() {
                    c._sendToPluginHost(d.id, a, h(arguments));
                };
            };
            for (var j in c.getEvents()) {
                c.on(j, g(j));
            }
        };
        r.create = function(a, b, c, e) {
            var f = [a, b, c, j()].join("_"), g = function() {
                var b = d.findInstance(a);
                return b.instance.getDOMPlayer();
            }, h = o.create(c, e);
            return new r(f, g, h);
        };
        var s = function(a, b) {
            var c = b.shift(), d = b.shift(), e = null;
            if (k.debug("[onPluginHostAPIRequest] request received: " + c + ", " + d), !c) {
                return "create" !== d ? (k.error("[onPluginHostAPIRequest] Invalid create method passed"), null) : (e = r[d].apply(r, [a].concat(b)), q(e.id, e), e.id);
            }
            e = p[c];
            try {
                return e[d].apply(e, b);
            } catch (f) {
                k.warn("[onPluginHostAPIRequest] Unable to call method: " + d + " on plugin: " + c);
            }
        }, t = {
            register: n
        };
        t = g(t, l), t = g(t, o), t.onPluginHostRequest = s, c.exports = t;
    }), define("cvp/plugins/lmdb", ["require", "exports", "module", "Class", "cvp/customevent", "cvp/utils", "cvp/request", "cvp/utils/timing", "cvp/convert", "cvp/log"], function(a, b, c) {
        var d = a("Class"), e = a("cvp/customevent"), f = a("cvp/utils"), g = a("cvp/request"), h = a("cvp/utils/timing"), i = a("cvp/convert"), j = a("cvp/log"), k = j.getLogger("LMDB"), l = function(a, b) {
            return new h.periodically(a, b);
        }, m = function(a) {
            return a && 0 === a.indexOf("<") && a.lastIndexOf(">") === a.length - 1;
        }, n = d.extend({
            init: function(a) {
                var b = this;
                this.setOptions(a), this.events = {
                    dataReceived: new e("dataReceived"),
                    dataReceivedError: new e("dataReceivedError")
                }, this._onDataReceived = function(a, c) {
                    k.debug("[LMDB.onDataReceived] url: " + a), m(c) && b.options.convertXML && (k.debug("[LMDB.onDataReceived] Detected XML - converting"), c = i.xmlTextToJsonText(c)), b.events.dataReceived.dispatch(a, i.jsonTextToJsObject(c));
                }, this._onDataReceivedError = function(a, c) {
                    k.debug("[LMDB.onDataReceivedError] url: " + a), b.events.dataReceivedError.dispatch(a, c);
                };
            },
            setOptions: function(a) {
                var b = {
                    convertXML: !0
                };
                if (this.options = f.extend(this.options || b, a || {}), k.debug("[LMDB.setOptions] url: " + this.options.url + ", interval: " + this.options.interval), this.options.interval && this.options.url) {
                    if (f.toInt(this.options.interval) <= 0) {
                        return;
                    }
                    k.debug("[LMDB.setOptions] creating timer with interval: " + this.options.interval), this.periodical && this.periodical.stop(), this.periodical = l(f.bind(this.request, this, this.options.url), this.options.interval);
                }
            },
            getEvents: function() {
                return this.events;
            },
            request: function(a) {
                k.info("[LMDB.request] url: " + a), this._transport = g.get({
                    url: a,
                    lazy: this.options.lazy,
                    success: f.bind(this._onDataReceived, this, a),
                    failure: f.bind(this._onDataReceivedError, this, a)
                });
            },
            on: function(a, b) {
                f.hasOwn(this.events, a) && this.events[a].addListener(f.bind(b, this));
            },
            start: function(a) {
                k.debug("[LMDB.start]"), f.undef(a) && (a=!0), this.periodical && (this.periodical.start(), a && this.request(this.options.url));
            },
            stop: function() {
                this.periodical && this.periodical.stop();
            },
            getScheduleItems: function(a) {
                var b = [];
                return a && a.hasOwnProperty("LiveFeed") && a.LiveFeed.hasOwnProperty("tveLiveSched") && a.LiveFeed.tveLiveSched.hasOwnProperty("SchedItem") ? b.concat(a.LiveFeed.tveLiveSched.SchedItem) : b;
            },
            getScheduleItem: function(a, b) {
                for (var c = this.getScheduleItems(a), d = f.undef(b), e = f.isFunc(b), g = 0; g < c.length; g++) {
                    if (d) {
                        return c[g];
                    }
                    if (e) {
                        if (b(c[g])) {
                            return c[g];
                        }
                    } else {
                        if (c[g].AiringID == b) {
                            return c[g];
                        }
                    }
                }
                return null;
            }
        });
        c.exports = n;
    }), define("cvp/plugins", ["require", "exports", "module", "cvp/pluginmanager", "cvp/plugins/lmdb"], function(a, b, c) {
        var d = a("cvp/pluginmanager"), e = a("cvp/plugins/lmdb"), f = {};
        d.register(d.LMDB, e), f.LMDB = d.createLMDB({
            lazy: !0
        }), c.exports = f;
    }), define("cvp/main", ["require", "exports", "module", "core/app", "cvp/static", "cvp/core", "cvp/shared", "cvp/utils", "Class", "swfobject", "cvp/utils/commandqueue", "cvp/utils/asset", "cvp/utils/dependency", "cvp/utils/dependencymanager", "cvp/utils/jsonconverter", "cvp/utils/xml", "cvp/utils/timing", "cvp/detectors/viewportdetector", "cvp/detectors/pagefocusdetector", "cvp/ajax", "cvp/events", "JSON", "cvp/log", "cvp/version", "cvp/browser", "cvp/request", "cvp/store", "cvp/pluginmanager", "cvp/plugins"], function(a, b, c) {
        var d = a("core/app"), e = a("cvp/static"), f = a("cvp/core"), g = a("cvp/shared"), h = a("cvp/utils");
        e.Class = a("Class"), e.swfobject = a("swfobject"), e.Utils = h, e.Utils.CommandQueue = a("cvp/utils/commandqueue"), e.Utils.Asset = a("cvp/utils/asset"), e.Utils.Dependency = a("cvp/utils/dependency"), e.Utils.DependencyManager = a("cvp/utils/dependencymanager"), e.Utils.JsonConverter = a("cvp/utils/jsonconverter"), e.Utils.XML = a("cvp/utils/xml"), e.Utils.Timing = a("cvp/utils/timing"), e.Utils.ViewportDetector = a("cvp/detectors/viewportdetector"), e.Utils.PageFocusDetector = a("cvp/detectors/pagefocusdetector"), e.Ajax = a("cvp/ajax"), e.Events = a("cvp/events"), e.JSON = a("JSON"), e.Log = a("cvp/log"), e.Version = a("cvp/version"), e.Browser = a("cvp/browser"), e.Request = a("cvp/request"), e.Store = a("cvp/store"), e.PluginManager = a("cvp/pluginmanager"), e.Plugins = a("cvp/plugins"), e.init = function(a) {
            var b, c;
            if (!h.isSimpleObject(a)) {
                throw new Error("CVP.init() requires one param: a simple object");
            }
            for (b in a) {
                h.hasOwn(a, b) && (c = a[b], d._cvpsetup[b] = h.isSimpleObject(c) ? h.extend(d._cvpsetup[b], c) : c);
            }
        }, e.createPlayer = function(a) {
            return new f(a);
        }, e.getSessionToken = function() {
            return "Aspen" in window ? window.Aspen.getSessionToken() : void 0;
        };
        var i = function(a) {
            return e.createPlayer(a);
        };
        g.addBeforeUnLoadEvent(e.cleanup), c.exports = h.extend(i, e);
    }), define("oldcvp", ["require", "exports", "module", "cvp/main", "aspen/aspen"], function(a, b, c) {
        var d = a("cvp/main");
        window.Aspen = a("aspen/aspen"), c.exports = d;
    }), require(["oldcvp"]), require("oldcvp");
});
var CNNVIDEO = function(q, D) {
    var aa = "0.4", g = window.jQuery, v = g.trim(q), f = g(v.substring(0, 1) !== "#" ? "#" + q : q), O = false, W = false, F = f.attr("id"), d = F + "-videowrapper", t, J, r, w, B, m, h, l, ab, Z, E, V, U, G, a, o, e, c, I, S, Q, L, b, n, X, P, C, y, p, A, z, ac, R, k, s, M, T, u, Y, K = String.prototype.split.call("onContentMetadata onPlayerReady onContentBegin onContentPlay onContentPause onContentEnd onContentComplete onContentBuffering onTrackingContentSeek onContentVolume onContentError onAdPlay onAdEnd", " "), H = {}, N = g.extend({}, {
        video: "/tech/2012/01/11/ces-2012-3d-tvs.cnn",
        network: "cnnintl",
        profile: "desktop",
        context: "main",
        section: "",
        thumb: "http://i2.cdn.turner.com/cnn/dam/assets/120307022252-romney-gingrich-santorum-split-story-top.jpg",
        autostart: false,
        width: "640",
        height: "360",
        preset: "custom",
        diagnostics: {
            section: "default"
        }
    }, D);
    N.diagnostics.version = aa;
    N.diagnostics.adsection = D.adsection || "default";
    N.fullscreenbitrate = 1300;
    if (N.isLive) {
        w = "http://i.cdn.turner.com/cnn/.e/img/3.0/video/416_player_Click_to_watch_off.png";
        B = "http://i.cdn.turner.com/cnn/.e/img/3.0/video/416_player_click_to_watch_on.png";
        m = 145;
    } else {
        w = "http://i.cdn.turner.com/cnn/.e/img/3.0/video/416_player_Click_to_play_off.png";
        B = "http://i.cdn.turner.com/cnn/.e/img/3.0/video/416_player_click_to_play_on.png";
        m = 136;
    }
    t = D.adsection || false;
    J = ".cnnvideo_wrapper{ position: relative; }.cnnvideo_playcontainer{ position: absolute; top:0px; left: 0px; cursor: pointer; background: url(" + w + ") no-repeat; }.cnnvideo_click_standard { width:" + m + "px; height:42px;}.cnnvideo_playcontainer:hover{ background: url(" + B + ") no-repeat; }#adCountdown {background: black; color: white; font-size: 10px; height: 18px; padding: 1px 5px; position: absolute; bottom: 0; width: 406px; } #source{ color: #666666; } .vidSource{ color: #999999; } .vidSource a{ color: #6AB9D3; }.vidSource a:hover{ color: #CA0002; }";
    if (N.preset && N.preset !== "custom") {
        switch (N.preset) {
        case"homepage":
        case"sectionfront":
            N.width = "416";
            N.height = "230";
            N.profile = "desktop";
            N.context = "sectionfront";
            break;
        case"debates":
            N.width = "768";
            N.height = "432";
            N.profile = "desktop";
            N.context = "2012debates";
            break;
        case"storypage":
            N.width = "640";
            N.height = "360";
            N.profile = "desktop";
            N.context = "main";
            break;
        case"blog":
            N.width = "512";
            N.height = "288";
            break;
        case"large":
            N.width = "768";
            N.height = "432";
            break;
        case"xlarge":
            N.width = "960";
            N.height = "540";
            break;
        case"leanback":
            N.width = "1280";
            N.height = "720";
            break;
        default:
        }
    }
    U = function() {
        var ad = g('<div class="cnnvideo_wrapper" id="' + d + '"></div>');
        f.html(ad);
        return ad;
    };
    G = function(ae, ad) {
        W.play(ae, ad || {});
    };
    a = function() {
        if (W) {
            W.pause();
        }
    };
    z = function() {
        var ad = W.getDuration();
        if (!W) {
            ad = 0;
        }
        return ad;
    };
    ac = function() {
        var ad = W.getPlayhead();
        if (!W) {
            ad = 0;
        }
        return ad;
    };
    Y = function() {
        var ad;
        if (W) {
            ad = W.getAbsolutePlayhead();
        } else {
            ad =- 1;
        }
        return ad;
    };
    o = function() {
        if (W) {
            W.resume();
        }
    };
    y = function(ae, ad, af) {
        if (W) {
            W.resize(ae, ad, af);
        }
    };
    A = function(ad) {
        if (W) {
            W.seek(ad);
        }
    };
    p = function(ad) {
        if (!R) {
            R = W.getContentEntry(ad);
        }
        return R;
    };
    k = function(af) {
        var ae = p(af), ad;
        if (ae) {
            ad = g.parseJSON(ae);
            if (ad && ad.broadcastStartTime) {
                return ad.broadcastStartTime;
            }
        }
        return 0;
    };
    s = function() {
        return N.video;
    };
    e = function(ad) {
        W.setAdSection(ad);
    };
    c = function(ad) {
        return (ad.indexOf("cvptve/")!==-1);
    };
    I = function(ad) {
        return (ad.indexOf("cvplive/")!==-1);
    };
    S = function(af) {
        var ae = N.diagnostics || {}, ad = af || W.getContentId();
        ae.deliveryType = "O";
        if (c(ad)) {
            ae.deliveryType = "T";
        } else {
            if (I(ad)) {
                ae.deliveryType = "L";
            }
        }
        return ae;
    };
    Q = function() {
        if (t !== undefined) {
            e(t);
        }
        G(N.video, {
            convivaMetadata: S()
        });
    };
    L = function(ad) {
        if (W) {
            return;
        }
        var ag, ae = K.length, ah;
        W = new window.CVP({
            id: "cvp_" + F,
            width: N.width,
            height: N.height,
            flashVars: {
                context: N.context,
                site: N.network,
                profile: N.profile
            },
            embed: {
                containerSwf: "http://z.cdn.turner.com/xslo/cvp/assets/container/2.0.4.0/cvp_main_container.swf",
                options: {
                    quality: "high",
                    bgcolor: "#000000",
                    allowFullScreen: "true",
                    allowScriptAccess: "always",
                    wMode: "transparent"
                }
            },
            fileSelection: function(ak, ai) {
                var aj = navigator.userAgent, al = /android/i;
                if (al.test(aj)&&!ai.isLive) {
                    return this.filterByExtension(ak, "mp4");
                }
                return true;
            },
            onCVPReady: function() {
                Q();
            },
            onPlayerReady: function(ai) {
                f.triggerHandler("onPlayerReady", {
                    type: "onPlayerReady",
                    playerId: ai
                });
            },
            onContentBegin: function(ai, aj) {
                f.triggerHandler("onContentBegin", {
                    type: "onContentBegin",
                    playerId: ai,
                    contentId: aj
                });
            },
            onContentPlay: function(ai, aj) {
                f.triggerHandler("onContentPlay", {
                    type: "onContentPlay",
                    playerId: ai,
                    contentId: aj
                });
            },
            onContentComplete: function(ai, aj) {
                f.triggerHandler("onContentComplete", {
                    type: "onContentComplete",
                    playerId: ai,
                    contentId: aj
                });
            },
            onContentEnd: function(ai, aj) {
                f.triggerHandler("onContentEnd", {
                    type: "onContentEnd",
                    playerId: ai,
                    contentId: aj
                });
            },
            onContentPlayhead: function(ai, al, aj, ak) {
                f.triggerHandler("onContentPlayhead", {
                    type: "onContentPlayhead",
                    playerId: ai,
                    contentId: al,
                    playhead: aj,
                    duration: ak
                });
            },
            onAdPlay: function(ak, al, an, ao, am, aj, ai) {
                f.triggerHandler("adPlay", {
                    type: "adPlay",
                    playerId: ak,
                    token: al,
                    mode: an,
                    id: ao,
                    duration: am,
                    segmentId: aj,
                    adType: ai
                });
            },
            onAdEnd: function(ak, al, an, ao, am, aj, ai) {
                f.triggerHandler("onAdEnd", {
                    type: "onAdEnd",
                    playerId: ak,
                    token: al,
                    mode: an,
                    id: ao,
                    duration: am,
                    segmentId: aj,
                    adType: ai
                });
            },
            onContentBuffering: function(ai, ak, aj) {
                f.triggerHandler("onContentBuffering", {
                    type: "onContentBuffering",
                    playerId: ai,
                    contentId: ak,
                    buffering: aj
                });
            },
            onTrackingContentSeek: function(aj, ai) {
                f.triggerHandler("onTrackingContentSeek", {
                    type: "onTrackingContentSeek",
                    playerId: aj,
                    dataObj: ai
                });
            },
            onContentPause: function(ai, ak, aj) {
                f.triggerHandler("onContentPause", {
                    type: "onContentPause",
                    playerId: ai,
                    contentId: ak,
                    paused: aj
                });
            },
            onTrackingFullscreen: function(aj, ai) {
                f.triggerHandler("onTrackingFullscreen", {
                    type: "onTrackingFullscreen",
                    playerId: aj,
                    dataObj: ai
                });
            },
            onTrackingAdCountdown: function(ai, aj) {
                document.getElementById("adCountdown").innerHTML = "Your video will play in  " + aj.secs + " secs";
            }
        });
        function af() {
            return f.triggerHandler("event", arguments);
        }
        for (ag = 0; ag < ae; ag += 1) {
            ah = K[ag];
            if (!(W.hasOwnProperty(ah))) {
                W[ah] = af();
            }
        }
        if (typeof ad === "function") {
            ad();
        }
    };
    b = function() {
        if (g('style[title="cnnvideo"]').length > 0) {
            return;
        }
        var ae = document.getElementsByTagName("head")[0], af = document.createElement("style"), ad;
        af.type = "text/css";
        af.title = "cnnvideo";
        if (af.styleSheet) {
            af.styleSheet.cssText = J;
        } else {
            ad = document.createTextNode(J);
            af.appendChild(ad);
        }
        ae.appendChild(af);
    };
    n = function() {
        var ae = Math.ceil(N.width / 2) - 100, ad = Math.ceil(N.height / 2) - 30;
        return '<a class="cnnvideo_clicklink" href="#" title="Click to watch this video"><div class="cnnvideo_playcontainer cnnvideo_click_standard" style="top:' + ad + "px;left:" + ae + 'px;"></div></a>';
    };
    X = function() {
        return ['<img src="', N.thumb, '" width="', N.width, '" height="', N.height, '" alt="', N.alt || "Watch this video", '" />'].join("");
    };
    M = function() {
        if (N.headline) {
            var ad;
            if (N.headlineUrl) {
                ad = "<a href=" + N.headlineUrl + ">" + N.headline + "</a>";
            } else {
                ad = N.headline;
            }
            return '<div class="cnn_mtt1imgh videoHeadline"><div class="cnn_mtt1imghtitle"><h1><span>' + ad + "</span></h1></div></div>";
        }
    };
    T = function() {
        g("#cnnCVP1").append('<div id="adCountdown" style="display: none;"></div>');
    };
    u = function() {
        if (N.source) {
            var ad;
            if (N.sourceUrl) {
                ad = "<a href=" + N.sourceUrl + ' target="_blank">' + N.source + "</a>";
            } else {
                ad = N.source;
            }
            return '<div id="source">Source: <span class="vidSource">' + ad + "</span></div>";
        }
    };
    P = function() {
        g("#cnnCVP1").parent().append('<div id="adCountdown"></div>');
        f.find(".videoHeadline").remove();
        O.empty();
        W.embed(d);
    };
    C = function() {
        L(function() {
            P();
        });
    };
    f.on("onPlayerReady", function(ae, ad) {
        try {
            W.setAdKeyValue("transactionID", cnnad_transactionID);
            W.setAdKeyValue("guID", cnnad_readCookie("ug"));
        } catch (ae) {}
    });
    f.on("onContentBegin", function(ae, ad) {
        H.META = new window._jsmd.plugin.gCNNVideoCollection();
        H.CONTENT = g.parseJSON(W.getContentEntry(ad.contentId));
    });
    f.on("onContentPlay", function(af, ae) {
        var ad = "video-start";
        if (I(ae.contentId)) {
            if (N.context === "debates_homepage" || N.context === "homepage_large") {
                window.live_interval = 60;
            }
            ad = "video-live";
        }
        document.getElementById("adCountdown").innerHTML = u();
        window.sendVideo2Event(H.CONTENT, ad, ae.playerId);
    });
    f.on("onContentEnd", function(ae, ad) {
        window.sendVideo2Event(H.CONTENT, "video-complete", ad.playerId);
    });
    f.on("onContentPlayhead", function(ah, ag) {
        var ae = ag.playhead, af = ag.duration, ai = ag.contentId, ad = ag.playerId;
        if (H.META !== undefined && ae !== undefined&&!H.META.get(ai, "hasScrubbed")) {
            if (ae > (af * 0.75)&&!H.META.get(ai, "isSeventyFive")) {
                window.sendVideo2Event(H.CONTENT, "video-seventyfive", ad);
            } else {
                if (ae > (af * 0.5)&&!H.META.get(ai, "isHalf")) {
                    window.sendVideo2Event(H.CONTENT, "video-fifty", ad);
                } else {
                    if (ae > (af * 0.25)&&!H.META.get(ai, "isTwentyFive")) {
                        window.sendVideo2Event(H.CONTENT, "video-twentyfive", ad);
                    } else {
                        if (ae > (af * 0.1)&&!H.META.get(ai, "isTen")) {
                            window.sendVideo2Event(H.CONTENT, "video-ten", ad);
                        }
                    }
                }
            }
        }
    });
    f.on("adPlay", function(af, ae) {
        var ad = ae.playerId;
        H.CONTENT.ad_duration = ae.duration;
        if (I(H.CONTENT.id)) {
            H.CONTENT.player_type = "live player";
        }
        window.sendVideo2Event(H.CONTENT, "video-preroll", ad);
    });
    f.on("onAdEnd", function(ae, ad) {
        window.sendVideo2Event(H.CONTENT, "video-midroll-complete", ad.playerId);
    });
    f.on("onContentBuffering", function(ae, ad) {
        window.sendVideo2Event(H.CONTENT, "video-buffer", ad.playerId);
    });
    f.on("onTrackingContentSeek", function(ae, ad) {
        window.sendVideo2Event(H.CONTENT, "video-scrub", ad.playerId);
    });
    f.on("onContentPause", function(ae, ad) {
        window.sendVideo2Event(H.CONTENT, "video-pause", ad.playerId);
    });
    f.on("onTrackingFullscreen", function(ae, ad) {
        if (ad.dataObj.fullscreen) {
            W.setMaxBitrate(N.fullscreenbitrate);
        }
    });
    b();
    O = U();
    if (N.autostart) {
        C();
    }
    if (!N.autostart) {
        O.html(X() + n());
        if (N.headline) {
            f.append(M());
        }
        O.find(".cnnvideo_playcontainer").on("click", function(ad) {
            C();
            ad.preventDefault();
        });
    }
    return {
        getVersion: function() {
            return aa;
        },
        resume: function() {
            o();
        },
        pause: function() {
            a();
        },
        resize: function(ae, ad, af) {
            y(ae, ad, af);
        },
        seek: function(ad) {
            A(ad);
        },
        getContentEntry: function(ad) {
            return p(ad);
        },
        getContentPlayhead: function() {
            return Y();
        },
        getDuration: function() {
            return z();
        },
        getPlayHead: function() {
            return ac();
        },
        getStartTime: function(ad) {
            return k(ad);
        },
        getVideoId: function() {
            return s();
        }
    };
};
function callCnnVideo(a) {
    window.CNNVIDEOS = window.CNNVIDEOS || {};
    window.CNNVIDEOS[a.key] = window.CNNVIDEO(a.markupid, {
        video: a.video,
        thumb: a.thumb,
        preset: "homepage",
        diagnostics: {
            section: "homepage",
            placement: a.placement
        },
        network: "cnnintl",
        adsection: a.adsection,
        headline: a.headline,
        headlineUrl: a.url,
        source: a.source,
        sourceUrl: a.sourceUrl,
        isLive: a.isLive,
        section: a.section
    });
}
function initializeChartbeat(a, c, b) {
    window._sf_startpt = (new Date()).getTime();
    window._sf_async_config = {};
    window._sf_async_config.uid = 37612;
    window._sf_async_config.useCanonical = true;
    window._sf_async_config.domain = a;
    window._sf_async_config.sections = c;
    window._sf_async_config.authors = b;
}
function loadChartbeat(d, b) {
    var a = location.host;
    if (a == "localhost" || a.indexOf("dev.cnn.com") >= 0) {
        a = "ref.cnn.com";
    }
    initializeChartbeat(a, d, b);
    window._sf_endpt = (new Date()).getTime();
    var c = document.createElement("script");
    c.setAttribute("src", (("https:" === document.location.protocol) ? "https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/" : "http://static.chartbeat.com/") + "js/chartbeat.js");
    document.body.appendChild(c);
}
if ("undefined" === typeof window.CNNHP) {
    var CNNHP = {};
}(function(b, c) {
    function a(g, f) {
        var e, d;
        if ("undefined" !== typeof g) {
            d = "undefined" !== typeof g.length;
            if (!d) {
                g[f.name] = f.definition;
            }
            if (d) {
                for (e = g.length - 1; e >= 0; e -= 1) {
                    if ("undefined" !== typeof g[e]) {
                        g[e][f.name] = f.definition;
                    }
                }
            }
        }
    }
    a(b, {
        "name": "UtilsModule",
        "definition": (function(f) {
            var d, e;
            function g() {
                this.keys = function(l) {
                    var k, h = [];
                    if (!Object.keys) {
                        if ("object" !== typeof l) {
                            throw new TypeError("Object.keys called on non-object");
                        }
                        for (k in l) {
                            if (Object.prototype.hasOwnProperty.call(l, k)) {
                                h.push(k);
                            }
                        }
                    } else {
                        h = Object.keys(l);
                    }
                    return h;
                };
                this.cnn_add_query_arg = function(F, G, D) {
                    var C, B, A, w, s, q, E, p, n = [], t = [], u = typeof F, z = typeof G, r = ("object" === u), y = ("string" === u && "string" === z), o = "", m = "", h = "";
                    if (y || r) {
                        E = F;
                        p = G;
                        if (r) {
                            t = d.keys(E);
                        }
                        if (y) {
                            E = {};
                            E[F] = G;
                            p = D;
                            t.push(F);
                        }
                        if ("undefined" === typeof p || "" === p) {
                            p = f.location.href;
                        }
                        p = p.split("#");
                        m = ("undefined" === typeof p[1]) ? "" : "#" + p[1];
                        p = p[0].split("?");
                        o = p[0];
                        p = ("undefined" === typeof p[1]) ? "" : p[1];
                        if ("" !== p) {
                            p = p.split("&");
                        }
                        for (C = p.length - 1; 0 <= C; C -= 1) {
                            q = p[C].split("=");
                            n.push(p[C]);
                            for (B = t.length - 1; 0 <= B; B -= 1) {
                                A = t[B];
                                if (A === q[0]) {
                                    n.pop();
                                    t[B] = t[t.length - 1];
                                    t.pop();
                                    B =- 1;
                                    s = E[A];
                                    if ("" !== s) {
                                        q[1] = s;
                                        n.push(A + "=" + s);
                                    }
                                }
                            }
                        }
                        if (t.length > 0) {
                            for (w = t.length - 1; 0 <= w; w -= 1) {
                                A = t[w];
                                s = E[A];
                                if ("" !== s) {
                                    n.push(A + "=" + s);
                                }
                            }
                        }
                        h = (0 === n.length) ? "" : "?";
                        if ("?" === h) {
                            h += ((n.length > 1) ? n.join("&") : n[0]);
                        }
                        n = null;
                        p = null;
                        q = null;
                    }
                    return o + h + m;
                };
            }
            e = {
                "getInstance": function(h) {
                    if ("undefined" === typeof d) {
                        d = new g(h);
                    }
                    return d;
                }
            };
            return e;
        }(c))
    });
}(CNNHP, window));
(function(c, d) {
    function b(h, g) {
        var f, e;
        if ("undefined" !== typeof h) {
            e = "undefined" !== typeof h.length;
            if (!e) {
                h[g.name] = g.definition;
            }
            if (e) {
                for (f = h.length - 1; f >= 0; f -= 1) {
                    if ("undefined" !== typeof h[f]) {
                        h[f][g.name] = g.definition;
                    }
                }
            }
        }
    }
    b(c, {
        "name": "AnnouncementBoxWidget",
        "definition": function a(l, p) {
            var n = this, o, q, f, m, h, g, e, k;
            q = {};
            o = "";
            m = [];
            f = null;
            g = function(t, s) {
                var r;
                o = t;
                q = d.extend({}, {
                    "skin": "announcement-box-widget",
                    "bannerClass": "announcement-box-banner",
                    "bannerRate": 30000
                }, s);
                d(o).addClass(q.skin);
                r = d(o).find("." + q.bannerClass);
                if (0 === r.length) {
                    d(o).append('<div class="' + q.bannerClass + '" style="display: none;"></div>');
                }
            };
            k = function(r, s) {
                if ("undefined" === typeof s) {
                    s = {};
                }
                return d(n).triggerHandler("AnnouncementBoxWidget:" + r, s);
            };
            e = function() {
                if (null !== f) {
                    m.shift();
                    clearTimeout(f);
                }
                if (m.length > 0) {
                    n.animateAnnouncement("show");
                    f = setTimeout(e, q.bannerRate);
                }
                if (0 === m.length) {
                    n.animateAnnouncement("hide");
                    clearTimeout(f);
                    f = null;
                    k("announcementsDone");
                }
            };
            h = function(r) {
                switch (r) {
                case"show":
                    d(o).find("." + q.bannerClass).eq(0).html(m[0]).fadeIn();
                    break;
                case"hide":
                    d(o).find("." + q.bannerClass).eq(0).fadeOut();
                    break;
                }
            };
            this.updateOptions = function(s) {
                var r;
                s = d.extend({}, q, s);
                for (r in q) {
                    if (q.hasOwnProperty(r)) {
                        q[r] = s[r];
                    }
                }
            };
            this.addAnnouncement = function(r) {
                m.push(r);
                if (1 === m.length) {
                    e();
                }
            };
            this.cancelAll = function() {
                m = [];
                e();
            };
            this.cancel = function() {
                k("cancel");
                e();
            };
            this.animateAnnouncement = function(r) {
                h(r);
            };
            this.initialize = function() {
                d(o).show();
            };
            g(l, p);
        }
    });
}(window.CNNHP, $j));
(function(b, c) {
    function a(g, f) {
        var e, d;
        if ("undefined" !== typeof g) {
            d = "undefined" !== typeof g.length;
            if (!d) {
                g[f.name] = f.definition;
            }
            if (d) {
                for (e = g.length - 1; e >= 0; e -= 1) {
                    if ("undefined" !== typeof g[e]) {
                        g[e][f.name] = f.definition;
                    }
                }
            }
        }
    }
    a(b, {
        "name": "JSONPoolModule",
        "definition": (function(g) {
            function f() {
                var l, h, k, n, m;
                l = {};
                h = {};
                k = {};
                n = function(o) {
                    var p = [];
                    if (l.hasOwnProperty(o)) {
                        p = l[o];
                    }
                    return p;
                };
                m = function(o, q) {
                    var p = new RegExp(q + "=[^&]+&?", "g");
                    o = o.replace(p, "");
                    o = o.replace(/_=[0-9]+&?/, "");
                    o = o.replace(/\?$/, "");
                    return o;
                };
                this.getURLbyId = function(q) {
                    var o = "", p = h;
                    if (p.hasOwnProperty(q)) {
                        o = p[q];
                    }
                    return o;
                };
                this.register = function(r, o) {
                    var p, q = 0;
                    if ("" === this.getURLbyId(r) && "" !== o) {
                        h[r] = o;
                        if (!l.hasOwnProperty(o)) {
                            l[o] = [];
                        }
                        l[o].push(r);
                        for (p in k) {
                            if (k.hasOwnProperty(p)) {
                                if (k[p] > q) {
                                    q = k[p];
                                }
                            }
                        }
                        q += 1;
                        k[o] = q;
                    }
                };
                this.deregister = function(r) {
                    var o = this.getURLbyId(r), q, p;
                    if ("" !== o) {
                        delete h[r];
                        if ("undefined" !== typeof h[r]) {
                            h[r] = "";
                        }
                        if (k.hasOwnProperty(o)) {
                            delete k[o];
                            if ("undefined" !== typeof k[o]) {
                                k[o] = "";
                            }
                        }
                        if (l.hasOwnProperty(o)) {
                            q = l[o];
                            for (p = q.length - 1; p >= 0; p -= 1) {
                                if (r === q[p]) {
                                    q.splice(p, 1);
                                    p =- 1;
                                }
                            }
                            l[o] = q;
                            if (0 === q.length) {
                                delete l[o];
                                if ("undefined" !== typeof l[o]) {
                                    l[o] = "";
                                }
                            }
                        }
                    }
                };
                this.enqueueIds = function(q) {
                    var p, s, o, r = {};
                    for (p = q.length - 1; p >= 0; p -= 1) {
                        s = q[p];
                        o = this.getURLbyId(s);
                        if ("" !== o) {
                            if (!r.hasOwnProperty(o)) {
                                r[o] = [];
                            }
                            r[o].push(s);
                        }
                    }
                    d.enqueueAll(r);
                };
                this.enqueue = function(o) {
                    if (l.hasOwnProperty(o)) {
                        g.ajax(o, {
                            "dataType": "jsonp",
                            "cache": true,
                            "jsonp": "callback",
                            "jsonpCallback": "jsonpool" + k[o].toString(),
                            "timeout": 3000
                        }).done(function(r) {
                            var q, p;
                            q = n(m(this.url, this.jsonp, this.jsonpCallback));
                            for (p = q.length - 1; p >= 0; p -= 1) {
                                g(d).triggerHandler("JSONPool:" + q[p], r);
                            }
                        }).fail(function(r) {
                            var q, p;
                            q = n(m(this.url, this.jsonp, this.jsonpCallback));
                            for (p = q.length - 1; p >= 0; p -= 1) {
                                g(d).triggerHandler("JSONPool:" + q[p] + "-failed", r);
                            }
                        });
                    }
                };
                this.enqueueAll = function(q) {
                    var o = "", r;
                    r = l;
                    if ("undefined" !== typeof q) {
                        r = q;
                    }
                    for (o in r) {
                        if (r.hasOwnProperty(o)) {
                            d.enqueue(o);
                        }
                    }
                };
            }
            var d, e = {
                "getInstance": function(h) {
                    if ("undefined" === typeof d) {
                        d = new f(h);
                    }
                    return d;
                }
            };
            return e;
        }(c))
    });
}(CNNHP, $j));
(function(b, d) {
    function a(h, g) {
        var f, e;
        if ("undefined" !== typeof h) {
            e = "undefined" !== typeof h.length;
            if (!e) {
                h[g.name] = g.definition;
            }
            if (e) {
                for (f = h.length - 1; f >= 0; f -= 1) {
                    if ("undefined" !== typeof h[f]) {
                        h[f][g.name] = g.definition;
                    }
                }
            }
        }
    }
    a(b, {
        "name": "SlideRotatorWidget",
        "definition": function c(k, r) {
            var o = this, q, l, n, s, f, e, m, p, h, g;
            s = {};
            l = [];
            n =- 1;
            q = "";
            f = null;
            e = false;
            m = function(v, u) {
                var t, w, y = "";
                q = v;
                if ("undefined" !== typeof q && "" !== q) {
                    s = d.extend({}, {
                        "skinClass": "cnn-slide-rotator-widget",
                        "slideClass": "slide",
                        "rotationRate": 10000,
                        "slideDirection": "slide-up"
                    }, u);
                    t = d(q);
                    t.addClass(s.skinClass);
                    w = t.find("." + s.slideClass);
                    switch (w.length) {
                    case 0:
                        y = '<div class="' + s.slideClass + '"></div><div class="' + s.slideClass + '"></div>';
                        break;
                    case 1:
                        y = '<div class="' + s.slideClass + '"></div>';
                        break;
                    }
                    t.append(y);
                    w.each(function() {
                        var z = d(this).html();
                        if ("" !== z) {
                            l.push(z);
                        }
                    });
                }
            };
            p = function() {
                var t;
                if (l.length - 1 <= n) {
                    t = g("updateSlides");
                    n =- 1;
                    if ("undefined" !== typeof t && 0 !== t.length) {
                        l = null;
                        l = t;
                    }
                }
                n += 1;
                return ("undefined" === typeof l[n]) ? "" : l[n];
            };
            h = function() {
                var t = d(q), u = t.find("." + s.slideClass), v =- 1 * u.outerHeight(), w = 1000;
                t.attr("data-locked", "true");
                switch (s.slideDirection) {
                case"slide-up":
                    u.eq(1).html(p());
                    u.eq(1).addClass("sliding-bottom");
                    u.eq(0).addClass("sliding-top").animate({
                        "margin-top": v.toString() + "px"
                    }, w, d.proxy(function() {
                        this.slides.eq(1).removeClass("sliding-bottom");
                        this.slides.eq(0).removeClass("sliding-top").css({
                            "margin-top": "0"
                        }).detach().appendTo(t);
                    }, {
                        "slides": u
                    }));
                    break;
                case"slide-down":
                    u.eq(0).addClass("sliding-top");
                    u.last().html(p());
                    u.last().addClass("sliding-bottom").css({
                        "margin-top": v.toString() + "px"
                    }).detach().prependTo(t).animate({
                        "margin-top": "0px"
                    }, w, d.proxy(function() {
                        u.eq(0).removeClass("sliding-top");
                        u.last().removeClass("sliding-bottom");
                    }, {
                        "slides": u
                    }));
                    break;
                }
                if (null !== f) {
                    clearTimeout(f);
                }
                f = setTimeout(o.rotate, s.rotationRate);
            };
            g = function(t, u) {
                if ("undefined" === typeof u) {
                    u = {};
                }
                return d(o).triggerHandler("SlideRotatorWidget:" + t, u);
            };
            this.pause = function() {
                g("pause");
                if (null !== f) {
                    clearTimeout(f);
                }
            };
            this.resume = function() {
                g("resume");
                if (null !== f) {
                    clearTimeout(f);
                }
                f = setTimeout(o.rotate, s.rotationRate);
            };
            this.initialize = function() {
                var t = d(q);
                if (!e) {
                    t.find("." + s.slideClass).eq(0).html(p());
                    t.show("slow");
                    o.resume();
                    e = true;
                }
            };
            this.rotate = function() {
                h();
            };
            m(k, r);
        }
    });
}(window.CNNHP, $j));
(function(b, e, c) {
    function a(k, h) {
        var g, f;
        if ("undefined" !== typeof k) {
            f = "undefined" !== typeof k.length;
            if (!f) {
                k[h.name] = h.definition;
            }
            if (f) {
                for (g = k.length - 1; g >= 0; g -= 1) {
                    if ("undefined" !== typeof k[g]) {
                        k[g][h.name] = h.definition;
                    }
                }
            }
        }
    }
    a(b, {
        "name": "FlipperTickerApp",
        "definition": function d(C, A) {
            var r = this, s, f, q, w, F, M, V, H, g, T, v, p, E, R, S, K, B, L, Q, m, O, h, G, l, z, U, P, D, I, u, n, y, k, N, J, t, o;
            V = {};
            w = "";
            H = [];
            s = [];
            q = [];
            S = [];
            g = [];
            K =- 1;
            M = null;
            v = 10;
            F = {};
            T = {};
            E = true;
            R =- 1;
            p = [];
            B = function(aa, Y) {
                var ab, W, ac, X, Z;
                if (b.hasOwnProperty("JSONPoolModule")) {
                    V = e.extend({}, {
                        "skin": "flipper-ticker-widget",
                        "bannerClass": "ft-banner",
                        "boardClass": "board",
                        "flipperClass": "flipper",
                        "linkTracking": "elec_flippertkr",
                        "useLocalConfig": false,
                        "config": {
                            "global": {
                                "host": "",
                                "path": "",
                                "updateInterval": - 1,
                                "display": true
                            },
                            "columns": [],
                            "flipInterval": - 1,
                            "bop": {
                                "host": "",
                                "path": "",
                                "updateInterval": - 1,
                                "display": false
                            },
                            "called": {
                                "host": "",
                                "path": "",
                                "updateInterval": - 1,
                                "display": false,
                                "displayInterval": - 1
                            },
                            "lockedSenateBop": false
                        },
                        "clientConfig": {
                            "host": "http://data.cnn.com",
                            "path": "/jsonp/ELECTION/2014/meta/clientConfig.json",
                            "updateInterval": - 1
                        }
                    }, Y);
                    w = aa;
                    f = b.JSONPoolModule.getInstance();
                    e(w).addClass(V.skin);
                    X = e(w).attr("data-clientConfig-host");
                    Z = e(w).attr("data-clientConfig-path");
                    if ("undefined" !== typeof X && "" !== X && "undefined" !== typeof Z && "" !== Z) {
                        e(w).removeAttr("data-clientConfig-host");
                        e(w).removeAttr("data-clientConfig-path");
                        V.clientConfig.host = X;
                        V.clientConfig.path = Z;
                    }
                    W = e(w).find("." + V.bannerClass);
                    if (0 === W.length) {
                        e(w).append('<div class="' + V.bannerClass + '" style="display: none;"></div>');
                        W = e(w).find("." + V.bannerClass);
                    }
                    if ("undefined" !== typeof b.AnnouncementBoxWidget) {
                        M = new b.AnnouncementBoxWidget(W);
                    }
                    ab = e(w).find("." + V.boardClass);
                    if (0 === ab.length) {
                        e(w).append('<div class="' + V.boardClass + '" style="display: none;"></div>');
                        ab = e(w).find("." + V.boardClass);
                    }
                    ab.find("." + V.flipperClass).eq(0).addClass("first-column");
                    e(ab).on("click", "div.race-feed", function() {
                        var ad = e(this), af = ad.attr("data-raceid"), ae;
                        if ("undefined" !== typeof af) {
                            ae = m(af);
                            if ("" !== ae) {
                                c.location.assign(b.UtilsModule.getInstance().cnn_add_query_arg("hpt", V.linkTracking, ae));
                            }
                        }
                    });
                    e(ab).on("click", "div.bop-senate", function() {
                        var ad = "/election/2014/results/race/senate";
                        c.location.assign(b.UtilsModule.getInstance().cnn_add_query_arg("hpt", V.linkTracking, ad));
                    });
                    e(ab).on("click", "div.bop-house", function() {
                        var ad = "/election/2014/results/race/house";
                        c.location.assign(b.UtilsModule.getInstance().cnn_add_query_arg("hpt", V.linkTracking, ad));
                    });
                    ac = e(w).find(".collapse");
                    if (0 !== ac.length) {
                        e(ac).on("click", function() {
                            var af = e(w), ad = af.find("." + V.boardClass), ae = e(this);
                            if (ad.is(":hidden")) {
                                ad.show();
                                ae.addClass("collapse");
                                ae.removeClass("expand");
                            } else {
                                ad.hide();
                                M.cancelAll();
                                ae.removeClass("collapse");
                                ae.addClass("expand");
                            }
                        });
                    }
                    e(w).on("click", "a", function() {
                        var ad = e(this).attr("href");
                        if (undefined !== ad && null !== ad) {
                            e(this).attr("href", b.UtilsModule.getInstance().cnn_add_query_arg("hpt", V.linkTracking, ad));
                        }
                    });
                    f.register("clientConfig", V.clientConfig.host + V.clientConfig.path);
                }
            };
            D = function(aa) {
                var Z, Y, X = {
                    "flipper": null,
                    "clientConfig": null
                }, W = {
                    "name": "",
                    "host": "",
                    "path": "",
                    "updateInterval": - 1,
                    "display": false,
                    "bopKey": ""
                };
                X.flipper = e.extend(true, {}, V.config, aa.flipper);
                Z = X.flipper.columns;
                for (Y = Z.length - 1; Y >= 0; Y -= 1) {
                    if (Z[Y].display) {
                        Z[Y] = e.extend({}, W, Z[Y]);
                    } else {
                        Z.splice(Y, 1);
                    }
                }
                X.clientConfig = e.extend(true, {}, V.clientConfig, aa.clientConfig);
                return X;
            };
            m = function(ac) {
                var aa = "", Y = "", Z = "", X = ["/election/2014/results/state"], W = ["AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"], ab = new RegExp(/^[A-Z]{2}[GHIPS][0-9]{2}$/);
                if (ab.test(ac)) {
                    aa = ac.slice(0, 2);
                    Y = ac.slice(2, 3);
                    Z = ac.slice(3);
                    if ( - 1 !== e.inArray(aa, W)) {
                        X.push("/", aa);
                        switch (Y) {
                        case"G":
                            X.push("/governor");
                            break;
                        case"H":
                            X.push("/house/", Z);
                            break;
                        case"I":
                            X.push("/ballot/", Z);
                            break;
                        case"P":
                            X.push("/president");
                            break;
                        case"S":
                            X.push("/senate");
                            break;
                        }
                    }
                }
                if (1 === X.length) {
                    X = [];
                }
                return X.join("");
            };
            u = function(Y) {
                var X, W = false;
                for (X = p.length; X >= 0; X -= 1) {
                    if (Y === p[X]) {
                        W = true;
                        X =- 1;
                    }
                }
                return W;
            };
            z = function(ab, W) {
                var Z = W.type.replace("JSONPool:flipper", ""), Y, aa, X = [], ad = "", ac = "undefined" === typeof S[Z]?-1 : S[Z], af = "undefined" === typeof s[Z] || null === s[Z], ae = ab.hasOwnProperty("lts") && ab.lts > ac;
                if (af || ae) {
                    S[Z] = ab.lts;
                    if (ab.hasOwnProperty("races")) {
                        ad = "PS";
                        X = ab.races;
                    } else {
                        if (ab.hasOwnProperty("stateraces")) {
                            ad = "H";
                            X = ab.stateraces;
                        } else {
                            if (ab.hasOwnProperty("G") && ab.G.hasOwnProperty("races")) {
                                ad = "GI";
                                X = ab;
                            } else {
                                if (ab.hasOwnProperty("I")) {
                                    ad = "GI";
                                    X = ab;
                                }
                            }
                        }
                    }
                    if ("undefined" === typeof q[Z] || q[Z] > X.length) {
                        q[Z] = 0;
                    }
                    Y = Math.floor(V.config.columns[Z].updateInterval / V.config.flipInterval);
                    if (Y < 0) {
                        Y = 1;
                    }
                    if ("GI" === ad) {
                        aa = ab;
                    } else {
                        aa = X.splice(q[Z], Y);
                    }
                    U(aa, ad, Z);
                    if (af) {
                        q[Z] += Y;
                    }
                }
            };
            U = function(X, ah, aa) {
                var ae, ac, ab, Y, W = [], ai = "", af, ag, ak, aj, Z, ad;
                ai = ['<div><div id="container" class="race-feed"><p id="race" class="race-type"><span id="icon" class="race-icon"></span></p>', '<p id="state" class="race-state"><span class="percent-total">Est. <span id="totalpercent"></span>% in</span></p>', '<p id="candidate_1" class="race-candidate"><span id="winner_1" class="race-winner"></span><span class="percent-candidate"><span id="percent_1"></span>%</span></p>', '<p id="candidate_2" class="race-candidate"><span id="winner_2" class="race-winner"></span><span class="percent-candidate"><span id="percent_2"></span>%</span></p>', '<p id="candidate_3" class="race-candidate"><span id="winner_3" class="race-winner"></span><span class="percent-candidate"><span id="percent_3"></span>%</span></p>', "</div></div>"].join("");
                if ("PS" === ah) {
                    for (ae = X.length - 1; ae >= 0; ae -= 1) {
                        ag = e.extend({}, {
                            "raceid": "",
                            "race": "",
                            "state": "",
                            "keyrace": false,
                            "pctsrep": ""
                        }, X[ae]);
                        aj = "";
                        if (ag.keyrace) {
                            aj = "keyrace";
                            if ("P" === ag.rtype) {
                                aj = "battleground";
                            }
                        }
                        af = e(ai).clone();
                        af.find("#container").removeAttr("id").addClass(ag.race.toLowerCase()).attr("data-raceid", ag.raceid).end().find("#race").prepend(ag.race).removeAttr("id").end().find("#icon").addClass(aj).removeAttr("id").end().find("#state").removeAttr("id").prepend(ag.state).end().find("#totalpercent").html(ag.pctsrep);
                        if (ag.hasOwnProperty("candidates")) {
                            for (ac = ag.candidates.length - 1, Y = 0; ac >= 0; ac -= 1, Y += 1) {
                                ak = e.extend({}, {
                                    "lname": "",
                                    "party": "",
                                    "winner": false,
                                    "vpct": ""
                                }, ag.candidates[Y]);
                                aj = "";
                                if (ak.winner) {
                                    aj = "winner";
                                }
                                Z = '<span class="candidate-icon ' + ak.party.toLowerCase() + '"></span>';
                                af.find("#candidate_" + (Y + 1)).removeAttr("id").prepend(Z, ak.lname).find("#winner_" + (Y + 1)).removeAttr("id").addClass(aj).end().find("#percent_" + (Y + 1)).removeAttr("id").html(ak.vpct);
                                if (Y >= 2) {
                                    ac =- 1;
                                }
                            }
                            af.find("#candidate_1").remove();
                            af.find("#candidate_2").remove();
                            af.find("#candidate_3").remove();
                        }
                        W[ae] = af.html();
                    }
                }
                if ("H" === ah) {
                    for (ab = X.length - 1; ab >= 0; ab -= 1) {
                        if (X[ab].hasOwnProperty("races")) {
                            for (ae = X[ab].races.length - 1; ae >= 0; ae -= 1) {
                                ag = e.extend({}, {
                                    "raceid": "",
                                    "race": "",
                                    "state": "",
                                    "keyrace": false,
                                    "pctsrep": ""
                                }, X[ab].races[ae]);
                                aj = "";
                                if (ag.keyrace) {
                                    aj = "keyrace";
                                }
                                af = e(ai).clone();
                                af.find("#container").removeAttr("id").addClass(ag.race.toLowerCase()).attr("data-raceid", ag.raceid).end().find("#race").prepend(ag.race).removeAttr("id").end().find("#icon").addClass(aj).removeAttr("id").end().find("#state").removeAttr("id").prepend(ag.state).end().find("#totalpercent").html(ag.pctsrep);
                                if (ag.hasOwnProperty("candidates")) {
                                    for (ac = ag.candidates.length - 1, Y = 0; ac >= 0; ac -= 1, Y += 1) {
                                        ak = e.extend({}, {
                                            "lname": "",
                                            "party": "",
                                            "winner": false,
                                            "vpct": ""
                                        }, ag.candidates[Y]);
                                        aj = "";
                                        if (ak.winner) {
                                            aj = "winner";
                                        }
                                        Z = '<span class="candidate-icon ' + ak.party.toLowerCase() + '"></span>';
                                        af.find("#candidate_" + (Y + 1)).removeAttr("id").prepend(Z, ak.lname).find("#winner_" + (Y + 1)).removeAttr("id").addClass(aj).end().find("#percent_" + (Y + 1)).removeAttr("id").html(ak.vpct);
                                        if (Y >= 2) {
                                            ac =- 1;
                                        }
                                    }
                                    af.find("#candidate_1").remove();
                                    af.find("#candidate_2").remove();
                                    af.find("#candidate_3").remove();
                                }
                                W.push(af.html());
                            }
                        }
                    }
                    W.reverse();
                }
                if (X.hasOwnProperty("G") && X.G.hasOwnProperty("races")) {
                    for (ae = X.G.races.length - 1; ae >= 0; ae -= 1) {
                        ag = e.extend({}, {
                            "raceid": "",
                            "race": "",
                            "state": "",
                            "keyrace": false,
                            "pctsrep": ""
                        }, X.G.races[ae]);
                        aj = "";
                        if (ag.keyrace) {
                            aj = "keyrace";
                        }
                        af = e(ai).clone();
                        af.find("#container").removeAttr("id").addClass(ag.race.toLowerCase()).attr("data-raceid", ag.raceid).end().find("#race").prepend(ag.race).removeAttr("id").end().find("#icon").addClass(aj).removeAttr("id").end().find("#state").removeAttr("id").prepend(ag.state).end().find("#totalpercent").html(ag.pctsrep);
                        if (ag.hasOwnProperty("candidates")) {
                            for (ac = ag.candidates.length - 1, Y = 0; ac >= 0; ac -= 1, Y += 1) {
                                ak = e.extend({}, {
                                    "lname": "",
                                    "party": "",
                                    "winner": false,
                                    "vpct": ""
                                }, ag.candidates[Y]);
                                aj = "";
                                if (ak.winner) {
                                    aj = "winner";
                                }
                                Z = '<span class="candidate-icon ' + ak.party.toLowerCase() + '"></span>';
                                af.find("#candidate_" + (Y + 1)).removeAttr("id").prepend(Z, ak.lname).find("#winner_" + (Y + 1)).removeAttr("id").addClass(aj).end().find("#percent_" + (Y + 1)).removeAttr("id").html(ak.vpct);
                                if (Y >= 2) {
                                    ac =- 1;
                                }
                            }
                            af.find("#candidate_1").remove();
                            af.find("#candidate_2").remove();
                            af.find("#candidate_3").remove();
                        }
                        W[ae] = af.html();
                    }
                }
                if (X.hasOwnProperty("I") && X.I.hasOwnProperty("races")) {
                    for (ae = X.I.races.length - 1; ae >= 0; ae -= 1) {
                        ag = e.extend({}, {
                            "raceid": "",
                            "race": "",
                            "state": "",
                            "keyrace": false,
                            "pctsrep": ""
                        }, X.I.races[ae]);
                        aj = "";
                        if (ag.keyrace) {
                            aj = "keyrace";
                        }
                        af = e(ai).clone();
                        af.find("#container").removeAttr("id").addClass(ag.race.toLowerCase()).attr("data-raceid", ag.raceid).end().find("#race").prepend(ag.race).removeAttr("id").end().find("#icon").addClass(aj).removeAttr("id").end().find("#state").removeAttr("id").prepend(ag.state).end().find("#totalpercent").html(ag.pctsrep);
                        if (ag.hasOwnProperty("candidates")) {
                            for (ac = ag.candidates.length - 1, Y = 0; ac >= 0; ac -= 1, Y += 1) {
                                ak = e.extend({}, {
                                    "lname": "",
                                    "party": "",
                                    "winner": false,
                                    "vpct": ""
                                }, ag.candidates[Y]);
                                aj = "";
                                if (ak.winner) {
                                    aj = "winner";
                                }
                                af.find("#candidate_" + (Y + 1)).removeAttr("id").prepend(ak.lname).find("#winner_" + (Y + 1)).removeAttr("id").addClass(aj).end().find("#percent_" + (Y + 1)).removeAttr("id").html(ak.vpct);
                                if (Y >= 2) {
                                    ac =- 1;
                                }
                            }
                            af.find("#candidate_1").remove();
                            af.find("#candidate_2").remove();
                            af.find("#candidate_3").remove();
                        }
                        ad = 0;
                        if (X.hasOwnProperty("G") && X.G.hasOwnProperty("races")) {
                            ad = X.G.races.length;
                        }
                        W[ae + ad] = af.html();
                    }
                }
                s[aa] = null;
                s[aa] = W;
                if (W.length > 0) {
                    H[aa].initialize();
                }
            };
            I = function(aq) {
                var ae = ['<div id="container"><div class="banner">', '<p class="called-title">Called races <span class="called-count">(<span id="current"></span> of <span id="total"></span>)</span></p>', '<p class="called-body"><span id="party-icon" class="party-icon"></span><a id="party" class="party" href="#"><span id="racePretext"></span>', ' CNN projects <span id="fullname"></span> will win <span id="state"></span>', '<span id="racePostText"></span>.</a></p>', "</div></div>"].join(""), an = 0, Y = {
                    "P": "President results:",
                    "S": "Senate results:",
                    "H": "House results:",
                    "G": "Gubernatorial results:"
                }, ab = {
                    "P": " ({$evotes} electoral votes)",
                    "S": " seat",
                    "H": " District {$districtNumber}",
                    "G": ""
                }, Z = {
                    "P": [],
                    "S": [],
                    "G": [],
                    "H": []
                }, ap, am, al, X, ai, W, ag, ak, ah, ao, ac, aa, ad, af, aj;
                if (aq.hasOwnProperty("ts") && aq.ts > R) {
                    for (ad in aq) {
                        if (aq.hasOwnProperty(ad)) {
                            switch (ad) {
                            case"P":
                            case"S":
                            case"G":
                            case"H":
                                if (aq[ad].hasOwnProperty("races")) {
                                    ai = aq[ad].races;
                                    for (ap = ai.length - 1; ap >= 0; ap -= 1) {
                                        X = e.extend({}, {
                                            "raceid": "",
                                            "state": "",
                                            "keyrace": false,
                                            "ts": - 1,
                                            "candidates": [],
                                            "race": ""
                                        }, ai[ap]);
                                        if (!u(X.raceid)) {
                                            p.push(X.raceid);
                                            if ("P" === ad || ("P" !== ad && X.keyrace)) {
                                                ac = null;
                                                for (am = X.candidates.length - 1; am >= 0; am -= 1) {
                                                    ac = e.extend({}, {
                                                        "fname": "",
                                                        "lname": "",
                                                        "suffix": "",
                                                        "usesuffix": false,
                                                        "winner": false,
                                                        "evotes": - 1,
                                                        "party": ""
                                                    }, X.candidates[am]);
                                                    if (ac.winner) {
                                                        am =- 1;
                                                    }
                                                }
                                                if (null !== ac) {
                                                    ak = Y.hasOwnProperty(ad) ? Y[ad] : "";
                                                    ah = ab.hasOwnProperty(ad) ? ab[ad] : "";
                                                    ag = m(X.raceid);
                                                    aa = "party-" + ac.party.toLowerCase();
                                                    ao = ac.fname + " " + ac.lname;
                                                    if (ac.usesuffix) {
                                                        ao += ", " + ac.suffix;
                                                    }
                                                    if ("" === ag) {
                                                        ag = "#";
                                                    }
                                                    ah = ah.replace("{$evotes}", ac.evotes);
                                                    ah = ah.replace("{$districtNumber}", X.race);
                                                    W = e(ae).clone();
                                                    W.find("#party-icon").removeAttr("id").addClass(aa).end().find("#party").removeAttr("id").addClass(aa).attr("href", ag).end().find("#racePretext").removeAttr("id").html(ak).end().find("#fullname").removeAttr("id").html(ao).end().find("#state").removeAttr("id").html(X.state).end().find("#racePostText").removeAttr("id").html(ah);
                                                    Z[ad].push(W);
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                            }
                        }
                    }
                    af = Z.P.length + Z.S.length + Z.H.length + Z.G.length;
                    for (al = Z.P.length - 1, an = 1; al >= 0; al -= 1, an += 1) {
                        M.addAnnouncement(Z.P[al].find("#current").removeAttr("id").html(an).end().find("#total").removeAttr("id").html(af).end().html());
                    }
                    for (al = Z.S.length - 1; al >= 0; al -= 1, an += 1) {
                        M.addAnnouncement(Z.S[al].find("#current").removeAttr("id").html(an).end().find("#total").removeAttr("id").html(af).end().html());
                    }
                    for (al = Z.H.length - 1; al >= 0; al -= 1, an += 1) {
                        M.addAnnouncement(Z.H[al].find("#current").removeAttr("id").html(an).end().find("#total").removeAttr("id").html(af).end().html());
                    }
                    for (al = Z.G.length - 1; al >= 0; al -= 1, an += 1) {
                        M.addAnnouncement(Z.G[al].find("#current").removeAttr("id").html(an).end().find("#total").removeAttr("id").html(af).end().html());
                    }
                    if (af > 0) {
                        aj = e(w).find(".close");
                        aj.on("click", function() {
                            M.cancelAll();
                        });
                        aj.show();
                    }
                    R = aq.ts;
                }
            };
            G = function(at) {
                var ac, ag, W = "", ap, ah, ae, ao, aa, ab, ar, Y, ai, al, ak, Z, aj, au, af, X, aq, ad, am = 270, an;
                if (at.hasOwnProperty("lts") && at.lts > K) {
                    K = at.lts;
                    if (at.hasOwnProperty("races")) {
                        ah = V.config.columns;
                        for (ap = ah.length - 1; ap >= 0; ap -= 1) {
                            aa = ah[ap].bopKey;
                            if ("" !== aa && at.races.hasOwnProperty(aa)) {
                                g[ap] = "";
                                if ("USP" === aa) {
                                    ae = ['<div id="container"><div class="bop bop-pres flipper-cf">', '<p class="bop-title">President <em>270 for win</em></p>', '<p class="candidates flipper-cf"><span class="left">Barack Obama</span><span class="right">Mitt Romney</span></p>', '<div class="tug-of-war"><div id="tugOfWarD" class="tug-d"></div><div class="divider"></div><div id="tugOfWarR" class="tug-r"></div></div>', '<p class="seats-won flipper-cf"><span id="D" class="seats party-d"></span><span id="R" class="seats party-r"></span></p>', "</div></div>"].join("");
                                    ao = e.extend({}, {
                                        "D": 0,
                                        "R": 0,
                                        "I": 0,
                                        "U": 0
                                    }, at.races[aa]);
                                    an = ao.D + ao.R + ao.I + ao.U;
                                    af = '<span class="small-party-icon"></span>';
                                    ab = "";
                                    ar = "";
                                    if (ao.D >= am) {
                                        ab = '<span class="winner"></span>';
                                        ar = "";
                                    }
                                    if (ao.R >= am) {
                                        ab = "";
                                        ar = '<span class="winner"></span>';
                                    }
                                    W = e(ae).clone();
                                    W.find("#tugOfWarD").removeAttr("id").css("width", Math.floor(ao.D / an * 100) + "%").end().find("#tugOfWarR").removeAttr("id").css("width", Math.floor(ao.R / an * 100) + "%").end().find("#D").removeAttr("id").append(af, ao.D, ab).end().find("#R").removeAttr("id").append(ar, ao.R, af);
                                    g[ap] = W.html();
                                }
                                if ("USH" === aa) {
                                    ae = ['<div id="container"><div class="bop bop-house flipper-cf">', '<p class="bop-title">U.S. House <em>218 for control</em></p>', '<p class="candidates flipper-cf"><span class="left">DEM</span><span class="right">GOP</span></p>', '<div class="tug-of-war"><div id="tugOfWarD" class="tug-d"></div><div class="divider"></div>', '<div id="tugOfWarR" class="tug-r"></div></div>', '<p class="seats-won flipper-cf"><span id="D" class="seats party-d"></span><span id="I" class="seats party-i"></span>', '<span id="R" class="seats party-r"></span></p>', "</div></div>"].join("");
                                    if (at.hasOwnProperty("H")) {
                                        ao = e.extend({}, {
                                            "D": 0,
                                            "R": 0,
                                            "I": 0,
                                            "U": 0
                                        }, at.races[aa]);
                                        ag = e.extend({}, {
                                            "rcontrol": 0,
                                            "dcontrol": 0
                                        }, at.H);
                                        X = ao.D + ao.R + ao.I + ao.U;
                                        af = '<span class="small-party-icon"></span>';
                                        ab = "";
                                        ar = "";
                                        Y = "";
                                        if (ao.R >= ag.rcontrol) {
                                            ab = "";
                                            ar = '<span class="winner"></span>';
                                            Y = "";
                                        }
                                        if (ao.D >= ag.dcontrol) {
                                            ab = '<span class="winner"></span>';
                                            ar = "";
                                            Y = "";
                                        }
                                        if (ao.I >= ag.dcontrol) {
                                            Y = '<span class="winner"></span>';
                                            ar = "";
                                            ab = "";
                                        }
                                        W = e(ae).clone();
                                        W.find("#tugOfWarD").removeAttr("id").css("width", Math.floor(ao.D / X * 100) + "%").end().find("#tugOfWarR").removeAttr("id").css("width", Math.floor(ao.R / X * 100) + "%").end().find("#D").removeAttr("id").append(af, ao.D, ab).end().find("#I").removeAttr("id").append(af, ao.I, Y).end().find("#R").removeAttr("id").append(ar, ao.R, af);
                                        g[ap] = W.html();
                                    }
                                }
                                if ("USS" === aa) {
                                    ae = ['<div id="container"><div class="bop bop-senate">', '<p class="bop-title">Senate <em>51 for control</em></p>', '<p class="candidates flipper-cf"><span class="left">DEM</span><span class="right">GOP</span></p>', '<div class="tug-of-war"><div class="divider"></div><div id="tugOfWarD" class="tug-d"></div>', '<div id="tugOfWarOpen" class="open-seats"></div>', '<div id="tugOfWarR" class="tug-r"></div></div>', '<p class="seats-won flipper-cf"><span id="D" class="seats party-d"></span><span id="I" class="seats party-i"></span>', '<span id="R" class="seats party-r"></span></p>', "</div></div>"].join("");
                                    if (at.hasOwnProperty("S")) {
                                        ac = e.extend({}, {
                                            "dgains": 0,
                                            "dnot": 0,
                                            "rgains": 0,
                                            "rnot": 0,
                                            "igains": 0,
                                            "inot": 0,
                                            "dcontrol": 0,
                                            "rcontrol": 0
                                        }, at.S);
                                        ao = e.extend({}, {
                                            "D": 0,
                                            "R": 0,
                                            "I": 0,
                                            "U": 0
                                        }, at.races[aa]);
                                        aq = ao.D + ao.R + ao.I + ao.U;
                                        af = '<span class="small-party-icon"></span>';
                                        ab = "";
                                        ar = "";
                                        Y = "";
                                        if (ao.R >= ac.rcontrol) {
                                            ab = "";
                                            ar = '<span class="winner"></span>';
                                            Y = "";
                                        }
                                        if (ao.D >= ac.dcontrol) {
                                            ab = '<span class="winner"></span>';
                                            ar = "";
                                            Y = "";
                                        }
                                        if (ao.I >= ac.dcontrol) {
                                            Y = '<span class="winner"></span>';
                                            ar = "";
                                            ab = "";
                                        }
                                        au = aq - (ac.dnot + ac.rnot);
                                        ad = Math.floor(ac.dnot / aq * 100);
                                        W = e(ae).clone();
                                        if (ac.dgains > 0) {
                                            al = Math.round(ac.dgains / au * 100) + "%";
                                            if ("0%" === al) {
                                                al = "1px";
                                            }
                                            W.find("#tugOfWarOpen").append('<div class="gains gains-d party-d" style="width:' + al + '"></div>');
                                        }
                                        if (ac.igains > 0) {
                                            ak = Math.round(ac.igains / au * 100) + "%";
                                            if ("0%" === ak) {
                                                ak = "1px";
                                            }
                                            W.find("#tugOfWarOpen").append('<div class="gains gains-i party-i" style="width:' + ak + '"></div>');
                                        }
                                        if (ao.U > 0) {
                                            aj = Math.round(ao.U / au * 100) + "%";
                                            if ("0%" === aj) {
                                                aj = "1px";
                                            }
                                            W.find("#tugOfWarOpen").append('<div class="gains gains-u" style="width:' + aj + '"></div>');
                                        }
                                        if (ac.rgains > 0) {
                                            ai = Math.round(ac.rgains / au * 100) + "%";
                                            if ("0%" === ai) {
                                                ai = "1px";
                                            }
                                            W.find("#tugOfWarOpen").append('<div class="gains gains-r party-r" style="width:' + ai + '"></div>');
                                        }
                                        if (ac.inot > 0) {
                                            Z = Math.round((ac.inot / (ac.inot + ao.D)) * 100) + "%";
                                            if ("0%" === Z) {
                                                Z = "1px";
                                            }
                                            W.find("#tugOfWarD").append('<div class="inot" style="width:' + Z + '"></div>');
                                        }
                                        W.find("#tugOfWarD").removeAttr("id").css("width", ad + "%").end().find("#tugOfWarR").removeAttr("id").css("width", (100 - ad) + "%").end().find("#tugOfWarOpen").removeAttr("id").css({
                                            "width": au + "%",
                                            "left": ad + "%"
                                        }).end().find("#D").removeAttr("id").append(af, ao.D + ac.inot, ab).end().find("#I").removeAttr("id").append(af, ac.igains, Y).end().find("#R").removeAttr("id").append(ar, ao.R, af);
                                        g[ap] = W.html();
                                    }
                                    if (V.config.lockedSenateBop) {
                                        if (g[1] !== "") {
                                            e(".flipper-ticker-widget .first-column").html(g[1]).css("display", "block").addClass("slide");
                                        }
                                    }
                                }
                                if ("" !== g[ap]) {
                                    H[ap].initialize();
                                }
                            }
                        }
                    }
                }
            };
            P = function(ab) {
                var Y, ac, ad = {}, X = V.config, aa, W = function(ae) {
                    return z(ae, {
                        "type": "JSONPool:flipper" + this.column
                    });
                }, Z = function(ae) {
                    var af = "";
                    if ("string" === typeof ae) {
                        af = ae.replace("jsonp/", "");
                    }
                    return af;
                };
                ad[X.bop.host + Z(V.config.bop.path)] = G;
                ad[X.called.host + Z(V.config.called.path)] = I;
                for (Y = X.columns.length - 1; Y >= 0; Y -= 1) {
                    aa = X.columns[Y].host + Z(X.columns[Y].path);
                    if ("" !== aa) {
                        ad[aa] = e.proxy(W, {
                            "column": Y
                        });
                    }
                }
                if (ab.hasOwnProperty("data")) {
                    ac = ab.data;
                    if (e.isArray(ac)) {
                        t(ac, ad);
                    } else {
                        if ("object" === typeof ab) {
                            o(ac, ad);
                        }
                    }
                }
            };
            t = function(Y, Z) {
                var X, W;
                for (X = Y.length - 1; X >= 0; X -= 1) {
                    W = Y[X];
                    if (Z.hasOwnProperty(W.url)) {
                        Z[W.url](W);
                    }
                }
            };
            o = function(X, Y) {
                var W;
                for (W in X) {
                    if (X.hasOwnProperty(W) && Y.hasOwnProperty(W)) {
                        Y[W](X[W]);
                    }
                }
            };
            N = function() {
                var aa, ac, ab, Y, ad, X, W, Z = function() {
                    var ag = function() {
                        return;
                    }, ae = ("undefined" === typeof this.cache[this.columnId] || null === this.cache[this.columnId]) ? []: this.cache[this.columnId], af = this.bop[this.columnId];
                    if (V.config.lockedSenateBop) {
                        if (this.columnId === 1) {
                            af = "";
                        }
                    }
                    if ("undefined" !== typeof af && "" !== af) {
                        if (0 !== ae.length) {
                            ae.splice(ae.length, 0, af);
                        } else {
                            ae.push(af);
                        }
                    }
                    if (0 === ae.length) {
                        ae = ag;
                    }
                    this.cache[this.columnId] = null;
                    return ae;
                };
                W = [];
                Y = V.config;
                if (Y.columns.length > 0) {
                    X = e(w);
                    ad = X.find("." + V.flipperClass);
                    ac = X.find("." + V.boardClass);
                    for (aa = (Y.columns.length - ad.length - 1); aa >= 0; aa -= 1) {
                        ac.append('<div class="' + V.flipperClass + '"></div>');
                    }
                    ad = X.find("." + V.flipperClass);
                    for (aa = Y.columns.length - 1; aa >= 0; aa -= 1) {
                        ab = Y.columns[aa];
                        H[aa] = new b.SlideRotatorWidget(ad.eq(aa), {
                            "rotationRate": Y.flipInterval + (aa * 250)
                        });
                        e(H[aa]).on("SlideRotatorWidget:updateSlides", e.proxy(Z, {
                            "columnId": aa,
                            "cache": s,
                            "bop": g
                        }));
                    }
                }
            };
            y = function() {
                if (null !== M) {
                    e(M).on("AnnouncementBoxWidget:announcementsDone", function() {
                        var W = e(w).find(".close");
                        W.off("click");
                        W.hide();
                    });
                }
            };
            n = function() {
                var X, ab, aa = V.config, Y = aa.global, Z = ("" === Y.host && "" === Y.path) ? true: false, W = function() {
                    return V.config.columns[this.columnId];
                };
                for (ab in T) {
                    if (T.hasOwnProperty(ab) && "clientConfig" !== ab) {
                        Q(ab);
                    }
                }
                if (Z) {
                    J("flipperCalled", function() {
                        return V.config.called;
                    }, I);
                    J("flipperBOP", function() {
                        return V.config.bop;
                    }, G);
                    for (X = aa.columns.length - 1; X >= 0; X -= 1) {
                        J("flipper" + X, e.proxy(W, {
                            "columnId": X
                        }), z);
                    }
                } else {
                    J("flipperTickerOnePoll", function() {
                        return e.extend({}, {
                            "display": true
                        }, V.config.global);
                    }, P);
                }
            };
            J = function(ac, Z, aa, Y, X) {
                var ab = e.extend({}, {
                    "host": "",
                    "path": "",
                    "updateInterval": - 1,
                    "display": false
                }, Z()), W = ("undefined" === typeof Y) ? false: Y;
                if (ab.display) {
                    f.register(ac, ab.host + ab.path);
                    e(f).on("JSONPool:" + ac, e.proxy(function(ad, ae) {
                        var af, ag;
                        this.processor(ae, ad);
                        ag = e.extend({}, {
                            "host": "",
                            "path": "",
                            "updateInterval": - 1,
                            "display": false
                        }, this.configurations());
                        if ( - 1 !== ag.updateInterval) {
                            l(this.id);
                            af = ag.host + ag.path;
                            if ("" !== af && f.getURLbyId(this.id) !== af) {
                                f.deregister(this.id);
                                f.register(this.id, af);
                            }
                            if (undefined === X || false === X) {
                                O(this.id, setTimeout(e.proxy(function() {
                                    f.enqueueIds([this.id]);
                                }, {
                                    "id": this.id
                                }), ag.updateInterval));
                            }
                        }
                    }, {
                        "id": ac,
                        "configurations": Z,
                        "processor": aa
                    }));
                    e(f).on("JSONPool:" + ac + "-failed", e.proxy(function() {
                        var ad = L(this.id), ae = e.extend({}, {
                            "host": "",
                            "path": "",
                            "updateInterval": - 1,
                            "display": false
                        }, this.configurations());
                        if (!E) {
                            if (F[ac] < v) {
                                if (undefined === X || false === X) {
                                    O(this.id, e.proxy(setTimeout(function() {
                                        f.enqueueIds([this.id]);
                                    }, {
                                        "id": this.id
                                    }), ae.updateInterval * ad));
                                }
                            }
                        }
                    }, {
                        "id": ac,
                        "configurations": Z
                    }));
                    if (W&&-1 !== ab.updateInterval) {
                        if (undefined === X || false === X) {
                            O(this.id, setTimeout(e.proxy(function() {
                                f.enqueueIds([this.id]);
                            }, {
                                "id": ac
                            }), ab.updateInterval));
                        }
                    } else {
                        if (undefined === X || false === X) {
                            f.enqueueIds([ac]);
                        }
                    }
                }
            };
            Q = function(X) {
                var W;
                f.deregister(X);
                e(f).off("JSONPool:" + X);
                e(f).off("JSONPool:" + X + "-failed");
                if (!T.hasOwnProperty(X)) {
                    clearTimeout(T[X]);
                    W = delete T[X];
                    if (!W) {
                        T[X] = null;
                    }
                }
            };
            h = function(W, X) {
                if ("undefined" === typeof X) {
                    X = {};
                }
                return e(r).triggerHandler("FlipperTickerApp:" + W, X);
            };
            L = function(W) {
                if (!F.hasOwnProperty(W)) {
                    F[W] = 0;
                }
                F[W] += 1;
                return F[W] * 1.5;
            };
            l = function(W) {
                if (!F.hasOwnProperty(W)) {
                    F[W] = 0;
                }
                F[W] = 0;
            };
            O = function(X, W) {
                if (!T.hasOwnProperty(X)) {
                    clearTimeout(T[X]);
                    T[X] = null;
                }
                T[X] = W;
            };
            k = function(Y) {
                var X = D(Y), W = (V.config.called.displayInterval !== X.flipper.called.displayInterval), Z = (E || V.config.global.host !== X.flipper.global.host || V.config.global.path !== X.flipper.global.path) ? true: false;
                V.config = X.flipper;
                V.clientConfig = X.clientConfig;
                if (W) {
                    M.updateOptions({
                        "bannerRate": X.flipper.called.displayInterval
                    });
                }
                if (E) {
                    E = false;
                    N();
                    y();
                    if (X.flipper.columns.length > 0 || X.flipper.bop.display || X.flipper.called.display) {
                        e(w).find("." + V.boardClass).addClass("columns-" + X.flipper.columns.length);
                        e(w).show();
                    }
                }
                if (Z) {
                    n();
                }
            };
            this.initialize = function(W) {
                var X = (undefined !== W);
                if (e(w).length > 0) {
                    J("clientConfig", function() {
                        return e.extend({}, {
                            "display": true
                        }, V.clientConfig);
                    }, k, V.useLocalConfig, X);
                    if (X) {
                        k(W);
                    }
                }
            };
            B(C, A);
        }
    });
}(window.CNNHP, $j, window));
var cnn_Slider = (typeof Class === "object") ? Class.create(): {}, cnn_SectionTechPulse;
var cnnIsIntl = (location.hostname.indexOf("edition.")>-1) ? true: false;
cnn_Slider.prototype = Object.extend(new cnnHorizontalSlider(), {
    initialize: function(b) {
        var a = this;
        this.config = b ? b : {};
        this.defaults = {
            nextButtonContainerId: "cnn_fabTechPulsenext",
            prevButtonContainerId: "cnn_fabTechPulseprev"
        };
        this.settings = Object.extend(this.defaults, this.config);
        try {
            this.elIdentifier = this.settings.stripClass || "cnn_SRLTpulse6";
            this.container = this.settings.stripContainerId || "cnn_TwitterSliderContainer";
            if (cnnIsIntl) {
                this.viewPort = this.settings.displayWidth || 500;
            } else {
                this.viewPort = this.settings.displayWidth || 600;
            }
            this.currentTab = this.settings.currentTab || 0;
        } catch (d) {}
        try {
            this.prevClick = 0;
            this.nextClick = 0;
            this.locked = false;
            this.sliderWidth = this.findPanels();
            this.numScreens = this.sliderWidth;
            this.negativeOffSetMax = this.setOffSet();
            this.positiveOffSetMax = 0;
            this.currentPanel = 0;
            this.setSliderWidth();
            this.buildNav();
            this.getCurrentOffSet();
            this.durationMultiplier = 0.5;
            this.containerContainerId = "cnn_TwitterSliderContainerContainer";
            this.nexttimer = window.setInterval(function() {
                a.startNextSlide();
            }, 7000);
        } catch (c) {}
    },
    showImages: function(a) {},
    buildNav: function() {
        var b = $(this.settings.prevButtonContainerId), a = $(this.settings.nextButtonContainerId);
        b.className = "cnn_SRLTplsbtnL cnn_SRLTplsbtnLoff";
        a.className = this.sliderWidth > 1 ? "cnn_SRLTplsbtnR" : "cnn_SRLTplsbtnR cnn_SRLTplsbtnRoff";
        if (this.sliderWidth > 1) {
            b.observe("click", this.startPrevSlideClick.bind(this));
            a.observe("click", this.startNextSlideClick.bind(this));
        }
    },
    startNextSlide: function() {
        if ((this.currentPanel + 1) < this.numScreens) {
            this.btnSlide(this.currentPanel + 1);
        }
    },
    startPrevSlide: function() {
        if ($(this.containerContainerId)) {
            $(this.containerContainerId).className = "cnn_SRLTpulse5";
        }
        if (this.currentPanel > 0) {
            this.btnSlide(this.currentPanel - 1);
        }
    },
    startNextSlideClick: function() {
        this.stopNextSlide();
        this.prevClick = 0;
        if (this.locked) {
            this.nextClick += 1;
        } else {
            this.startNextSlide();
        }
    },
    startPrevSlideClick: function() {
        this.stopNextSlide();
        this.nextClick = 0;
        if (this.locked) {
            this.prevClick += 1;
        } else {
            this.startPrevSlide();
        }
    },
    stopNextSlide: function() {
        if (this.nexttimer) {
            this.nextClick = 0;
            window.clearInterval(this.nexttimer);
            delete this.nexttimer;
        }
    },
    checkForNewBtnSlide: function() {
        if (this.prevClick > 0) {
            this.prevClick -= 1;
            this.startPrevSlide();
        } else {
            if (this.nextClick > 0) {
                this.nextClick -= 1;
                this.startNextSlide();
            }
        }
    },
    btnSlide: function(a) {
        var e, b, c, d;
        if (!this.locked) {
            e = this;
            this.locked = true;
            this.timer = setTimeout(function() {
                e.getCurrentOffSet();
                b = (a * e.viewPort)*-1;
                c = (b > e.currOffSet) ? (b - e.currOffSet) : (e.currOffSet - b)*-1;
                d = (c > 0) ? e.durationMultiplier * (c / e.viewPort) : (e.durationMultiplier * (c / e.viewPort))*-1;
                if (d < 0) {
                    d = d*-1;
                }
                if (e.currOffSet > e.negativeOffSetMax || e.currOffSet < e.positiveOffSetMax) {
                    new Effect.MoveBy($(e.container).id, 0, c, {
                        duration: d,
                        beforeStart: function() {
                            e.showImages();
                        },
                        afterFinish: function() {
                            e.locked = false;
                            e.setCurrentPanel();
                            e.checkForNewBtnSlide();
                        }
                    });
                }
            }, 300);
        }
    },
    updateNav: function() {
        if ((this.currentPanel + 1) < this.numScreens) {
            $(this.settings.nextButtonContainerId).className = "cnn_SRLTplsbtnR";
        } else {
            $(this.settings.nextButtonContainerId).className = "cnn_SRLTplsbtnR cnn_SRLTplsbtnRoff";
            if ($(this.containerContainerId)) {
                $(this.containerContainerId).className = "cnn_SRLTpulse5_REnd";
            }
        }
        if (this.currentPanel > 0) {
            $(this.settings.prevButtonContainerId).className = "cnn_SRLTplsbtnL";
        } else {
            $(this.settings.prevButtonContainerId).className = "cnn_SRLTplsbtnL cnn_SRLTplsbtnLoff";
        }
    },
    varDefined: function(val) {
        var t, expression = "t = (typeof(" + val + ') !== "undefined");';
        eval(expression);
        return t;
    },
    returnVarValue: function(val) {
        return eval(val);
    }
});
Event.observe(window, "load", function() {
    if ($("cnn_TwitterSliderContainer") && typeof cnn_SectionTechPulse !== "object") {
        cnn_SectionTechPulse = new cnn_Slider();
    }
});
