/**
 * JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)
 * 
 * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
 * @see http://github.com/garycourt/murmurhash-js
 * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
 * @see http://sites.google.com/site/murmurhash/
 * 
 * @param {string} key ASCII only
 * @param {number} seed Positive integer only
 * @return {number} 32-bit positive integer hash 
 */
function murmurhash3_32_gc(e, t) {
    var n, r, i, s, o, u, a, f, l, c;
    n = e.length & 3;
    r = e.length - n;
    i = t;
    o = 3432918353;
    a = 461845907;
    c = 0;
    while (c < r) {
        l = e.charCodeAt(c) & 255 | (e.charCodeAt(++c) & 255)<<8 | (e.charCodeAt(++c) & 255)<<16 | (e.charCodeAt(++c) & 255)<<24;
        ++c;
        l = (l & 65535) * o + (((l>>>16) * o & 65535)<<16) & 4294967295;
        l = l<<15 | l>>>17;
        l = (l & 65535) * a + (((l>>>16) * a & 65535)<<16) & 4294967295;
        i^=l;
        i = i<<13 | i>>>19;
        s = (i & 65535) * 5 + (((i>>>16) * 5 & 65535)<<16) & 4294967295;
        i = (s & 65535) + 27492 + (((s>>>16) + 58964 & 65535)<<16)
    }
    l = 0;
    switch (n) {
    case 3:
        l^=(e.charCodeAt(c + 2) & 255)<<16;
    case 2:
        l^=(e.charCodeAt(c + 1) & 255)<<8;
    case 1:
        l^=e.charCodeAt(c) & 255;
        l = (l & 65535) * o + (((l>>>16) * o & 65535)<<16) & 4294967295;
        l = l<<15 | l>>>17;
        l = (l & 65535) * a + (((l>>>16) * a & 65535)<<16) & 4294967295;
        i^=l
    }
    i^=e.length;
    i^=i>>>16;
    i = (i & 65535) * 2246822507 + (((i>>>16) * 2246822507 & 65535)<<16) & 4294967295;
    i^=i>>>13;
    i = (i & 65535) * 3266489909 + (((i>>>16) * 3266489909 & 65535)<<16) & 4294967295;
    i^=i>>>16;
    return i>>>0
}
